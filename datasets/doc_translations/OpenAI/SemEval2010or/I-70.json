{
    "id": "I-70",
    "original_text": "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of Ontology Learning. Our system named Dynamo is designed along this domain but following an original approach based on an adaptive multi-agent architecture. In this paper we present a distributed hierarchical clustering algorithm, core of our approach. It is evaluated and compared to a more conventional centralized algorithm. We also present how it has been improved using a multi-criteria approach. With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete ontology building solution. Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1. INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval. But building an ontology manually is a slow, tedious, costly, complex and time consuming process. Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date. It would mean creating dynamic ontologies [10] and it justifies the emergence of ontology learning techniques [14] [13]. Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts. Our aim is not to build an exhaustive, general hierarchical ontology but a domain specific one. We propose a semi-automated tool since an external resource is required: the ontologist. An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies. In the multi-agent field, ontologies generally enable agents to understand each other [12]. Theyre sometimes used to ease the ontology building process, in particular for collaborative contexts [3], but they rarely represent the ontology itself [16]. Most works interested in the construction of ontologies [7] propose the refinement of ontologies. This process consists in using an existing ontology and building a new one from it. This approach is different from our approach because Dynamo starts from scratch. Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5]. In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist. This paper first presents, in section 2, the big picture of the Dynamo system. In particular the motives that led to its creation and its general architecture. Then, in section 3 we discuss the distributed clustering algorithm used in Dynamo and compare it to a more classic centralized approach. Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering. And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2. DYNAMO OVERVIEW 2.1 Ontology as a Multi-Agent System Dynamo aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently. The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system. This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network. Dynamo takes a syntactical and terminological analysis of texts as input. It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts. As output, Dynamo provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network. An ontology can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations. Thus, our approach considers an ontology as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships. The ontology modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships. In this way, a dynamic ontology is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it. To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9]. We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system. It justifies how we designed some of the rules used by our agents in order to maximize the cooperation degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture. It addresses the needs of Knowledge Engineering in the context of dynamic ontology management and maintenance when the ontology is linked to a document collection. The Dynamo system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ?? Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for ontology building tasks [11]. We mainly selected it because of its robustness and the great amount of information extracted. In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1]. In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term. For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term. Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term. With Dynamo, the term network obtained as the output of the extractor is stored in a database. For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1]. Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15]. In the case of terms we are generally dealing with their usage contexts. With Syntex, those contexts are identified by terms and characterized by some syntactic relations. The Dynamo multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4. It is designed to be both the system producing the resulting structure and the structure itself. It means that each agent represent a class in the taxonomy. Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3. DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in Dynamo. For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system). Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined. Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements. This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done. Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones. Our distributed algorithm is designed relying on those two facts. It is executed concurrently in each of the agents of the system. Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15]. Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity. We now present the distributed algorithm used in our system. It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent. Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy. Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree). Then it sends a message to its parent P indicating its most dissimilar brother (here A1). Then P receives the same kind of message from each of its children. In the following, this kind of message will be called a vote. Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3). Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers. In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1). Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent. Ak−1 Ak AnA2A1 P P ...... ...... Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial. The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent. The hierarchy just created a new intermediate level. Note that this algorithm generally converges, since the number of brothers of an agent drops. When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children). However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A. With the current system no decision can be taken. The current procedure should be improved to address this, probably using a ranked voting method. 3.1 Quantitative Evaluation Now, we evaluate the properties of our distributed algorithm. It requires to begin with a quantitative evaluation, based on its complexity, while comparing it with the algorithm 1 from the previous section. Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary. For the distributed algorithm, the worst case means that for each run, only a two-item group can be created. Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations. For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times. And its body has the only similarity computation, so its cost is l−i. The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 . Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers. So each steps has a l × (l − 1) cost. Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built). Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity. But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm. This gap comes from the local decision making in each agent. Because of this, the similarity computations are done twice for each agent pair. We could conceive that an agent sends its computation result to its peer. But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1. Distributed algorithm (on average, with min and max) 2. Logarithmic polynomial 3. Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments. The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms. The given value is the average of comparisons made for one hundred of runs without any user interaction. It results in the plots of figure 5. The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case. It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning. Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1. The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average. Finally, lets note the reduced variation of the average performances with the maximum and the minimum. In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section. All are advantages obtained thanks to the use of an adaptive multi-agent system. The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system. The ontologist can make modifications and the hierarchy adapts depending on the request. It is particularly interesting in a knowledge engineering context. Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation. During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal. It is extremely difficult to realize this with a centralized black-box approach. In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class. Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account. That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning. But, the ontologist can make a mistake, and become aware of it too late. Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus. By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization. It is clear that the concept described by the term lésion (lesion) is misplaced. It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (hepatitis). This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria. Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent. The name ConceptAgent:X is automatically given to a concept agent that is not described by a term. The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11. The new stable state if the one of figure 7. This system-user coupling is necessary to build an ontology, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages. Moreover, this algorithm can de facto be distributed on a computer network. The communication between agents is then done by sending messages and each one keeps its decision autonomy. Then, a system modification to make it run networked would not require to adjust the algorithm. On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4. MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair. But, as soon as one uses real data this property is not verified anymore. Some terms do not have any similarity value with any extracted term. Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy. For this low level structuring, ontologists generally base The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics. Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation. Each agent can try to determine if its parent is adequate. It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network. In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX . Thanks to those two notations we can describe the parent adequacy function a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C). An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates. We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent. Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example. Figure 8 shows the state of the system after stabilization on test data. We can notice that hépatite viral (viral hepatitis) is still linked to the taxonomy root. It is caused by the fact that there is no similarity value between the viral hepatitis term and any of the term of the other concept agents. Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9. We can see that viral hepatitis slipped through the branch leading to hepatitis and chose it as its new parent. It is a sensible default choice since viral hepatitis is a more specific term than hepatitis. This rule tends to push agents described by a set of term to become leafs of the concept tree. It addresses our concern to improve the low level structuring of our taxonomy. But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch. That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time. The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy. It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time. The solution we chose came from the search for minimizing non cooperation within the system in accordance with the ADELFE method. Each agent computes three non cooperation degrees and chooses its current priority depending on which degree is the highest. For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non cooperation degrees are: • μH (A) = 1 − a(P, A), is the head coverage non cooperation degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received. Then, the non cooperation degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated. In this case, the metric used is the number of messages exchanged in the system. Once again the system has been executed with input data sets ranging from ten to one hundred terms. The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction. It results in the plots of figure 10. Curve number 1 represents the average of the value obtained. Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set. Curve number 3 represents the polynomial minimizing the error with curve number 1. The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1. Dynamo, all rules (on average, with min and max) 2. Distributed clustering only (on average) 2. Cubic polynomial Figure 10: Experimental results on average. Moreover, lets note the very small variation of the average performances with the maximum and the minimum. In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system. Finally the extra head coverage rules are a real improvement on the distributed algorithm alone. They introduce more constraints and stability point is reached with less interactions and decision making by the agents. It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5. DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added. When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm. On the contrary, adding a new item after a first stabilization has an impact on the final result. Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system. By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization. Figure 12: Concept agent tree after taking in account hepatitis Then, the ontologist interacts with the system and adds a new concept described by the term hepatitis and linked to the root. The system reacts and stabilizes, we then obtain figure 12 as a result. hepatitis is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example. We need to improve our distributed algorithm to allow a concept to move along a branch. We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult. In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the Dynamo system. Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result. But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise. Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree. By looking at figure 7, it is clear that some pruning could be done in the taxonomy. In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore. Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form. In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged. Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf. As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root. Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6. CONCLUSION After being presented as a promising solution, ensuring model quality and their terminological richness, ontology building from textual corpus analysis is difficult and costly. It requires analyst supervising and taking in account the ontology aim. Using natural languages processing tools ease the knowledge localization in texts through language uses. That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements. Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result. We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts. Our system makes use of a terminological network resulting from an analysis made by Syntex. The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made. Performances of the system are interesting and some aspects are even comparable to their centralized counterpart. Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information. From the point of view of ontology building, this work is a first step showing the relevance of our approach. It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees. From this improvements we are mostly focusing on the pruning to obtain better taxonomies. Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm. In other words this algorithm introduces inThe Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a dynamic equilibrium. Also from the multi-agent engineering point of view, their use in a dynamic ontology context has shown its relevance. This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through cooperation has been an efficient solution. And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper. Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach. Were planning to work on such benchmarking in the near future. 7. REFERENCES [1] H. Assadi. Construction of a regional ontology from text and its use within a documentary system. Proceedings of the International Conference on Formal Ontology and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel. Text analysis for ontology and terminology engineering. Journal of Applied Ontology, 2005. [3] J. Bao and V. Honavar. Collaborative ontology building with wiki@nt. Proceedings of the Workshop on Evaluation of Ontology-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard. Agent-Oriented Methodologies, chapter 7. Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202. Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks. Background and foreground knowledge in dynamic ontology construction. Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec. A corpus-based conceptual clustering method for verb frames and ontology acquisition. LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon. Ontology Engineering: a Survey and a Return on Experience. INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize. Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize. A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems. Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler. Dynamic ontologies on the web. American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent. Terminology extraction from text to build an ontology in surgical intensive care. Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter. Reconciling Ontological Differences by Assistant Agents. AAMAS06, May 2006. [13] A. Maedche. Ontology learning for the Semantic Web. Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab. Mining Ontologies from Text. EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze. Foundations of Statistical Natural Language Processing. The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner. Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)",
    "original_translation": "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de ontologías a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías. Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una arquitectura multiagente adaptativa. En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque. Se evalúa y se compara con un algoritmo centralizado más convencional. También presentamos cómo ha sido mejorado utilizando un enfoque de múltiples criterios. Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de ontologías. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Experimentación 1. INTRODUCCIÓN En la actualidad, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de información. Pero construir una ontología manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo. Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados. Significaría crear ontologías dinámicas [10] y justifica la aparición de técnicas de aprendizaje de ontologías [14] [13]. Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una ontología a partir de un conjunto específico de textos de un dominio. Nuestro objetivo no es construir una ontología jerárquica exhaustiva y general, sino una específica para un dominio. Proponemos una herramienta semi-automatizada ya que se requiere un recurso externo: el ontólogo. Un ontólogo es una especie de ingeniero cognitivo, o analista, que utiliza información de textos y entrevistas con expertos para diseñar ontologías. En el campo de los agentes múltiples, las ontologías generalmente permiten que los agentes se entiendan entre sí [12]. A veces se utilizan para facilitar el proceso de construcción de la ontología, en particular en contextos colaborativos [3], pero rara vez representan la ontología en sí misma [16]. La mayoría de los trabajos interesados en la construcción de ontologías [7] proponen el refinamiento de las ontologías. Este proceso consiste en utilizar una ontología existente y construir una nueva a partir de ella. Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero. Los investigadores, que trabajan en la construcción de ontologías a partir de textos, afirman que el trabajo a automatizar requiere recursos externos como un diccionario [14] o acceso a la web [5]. En nuestro trabajo, proponemos una interacción entre el ontólogo y el sistema, nuestro recurso externo radica tanto en los textos como en el ontólogo. Este documento primero presenta, en la sección 2, la visión general del sistema Dynamo. En particular, los motivos que llevaron a su creación y su arquitectura general. Luego, en la sección 3 discutimos el algoritmo de clustering distribuido utilizado en Dynamo y lo comparamos con un enfoque más clásico y centralizado. La sección 4 está dedicada a mejorar el comportamiento de los agentes que fue diseñado teniendo en cuenta criterios ignorados por el agrupamiento. Y finalmente, en la sección 5, discutimos las limitaciones de nuestro enfoque y explicamos cómo se abordarán en trabajos futuros. DYNAMO RESUMEN 2.1 Ontología como un Sistema Multiagente Dynamo tiene como objetivo reducir la necesidad de acciones manuales en el procesamiento de los resultados del análisis de texto y sugerir un inicio de red conceptual para construir ontologías de manera más eficiente. El enfoque elegido es completamente original en nuestro conocimiento y utiliza un sistema multiagente adaptativo. Esta elección se basa en las cualidades ofrecidas por el sistema multiagente: pueden facilitar el diseño interactivo de un sistema (en nuestro caso, una red conceptual), permiten su construcción incremental al tener en cuenta progresivamente nuevos datos (provenientes del análisis de texto y la interacción del usuario) y, por último pero no menos importante, pueden distribuirse fácilmente a través de una red informática. Dynamo realiza un análisis sintáctico y terminológico de textos como entrada. Utiliza varios criterios basados en estadísticas calculadas a partir de los contextos lingüísticos de los términos para crear y posicionar los conceptos. Como resultado, Dynamo proporciona al analista una organización jerárquica de conceptos (el sistema multiagente en sí mismo) que puede ser validada, refinada o modificada, hasta que obtenga un estado satisfactorio de la red semántica. Una ontología puede ser vista como un mapa estable constituido por entidades conceptuales, representadas aquí por agentes, vinculadas por relaciones etiquetadas. Por lo tanto, nuestro enfoque considera una ontología como un tipo de equilibrio entre sus concepto-agentes, donde sus fuerzas están definidas por sus relaciones potenciales. La modificación de la ontología es una perturbación del equilibrio previo por la aparición o desaparición de agentes o relaciones. De esta manera, una ontología dinámica es un proceso de autoorganización que ocurre cuando se incluyen nuevos textos en el corpus, o cuando el ontólogo interactúa con él. Para apoyar la flexibilidad necesaria de dicho sistema, utilizamos un sistema multiagente autoorganizado basado en un enfoque cooperativo [9]. Seguimos el método ADELFE [4] propuesto para guiar el diseño de este tipo de sistema multiagente. Se justifica cómo diseñamos algunas de las reglas utilizadas por nuestros agentes para maximizar el grado de cooperación dentro del sistema multiagente de Dynamos. 2.2 Arquitectura Propuesta En esta sección, presentamos nuestra arquitectura del sistema. Aborda las necesidades de la Ingeniería del Conocimiento en el contexto de la gestión y mantenimiento dinámico de ontologías cuando la ontología está vinculada a una colección de documentos. El sistema Dynamo consta de tres partes (cf. figura 1): • una red de términos, obtenida gracias a una herramienta de extracción de términos utilizada para preprocesar el corpus textual, • un sistema multiagente que utiliza la red de términos para realizar un agrupamiento jerárquico con el fin de obtener una taxonomía de conceptos, • una interfaz que permite al ontólogo visualizar y controlar el proceso de agrupamiento. El extractor de términos que utilizamos es Syntex, un software que ha sido utilizado eficientemente para tareas de construcción de ontologías [11]. Principalmente lo seleccionamos por su robustez y la gran cantidad de información extraída. En particular, crea una red de Expansión de Cabeza que ya ha demostrado ser interesante para un sistema de agrupamiento [1]. En una red de este tipo, cada término está vinculado a su término principal y, es decir, a la subfrase máxima ubicada como término principal de su término de expansión, y también a todos los términos para los cuales es un término principal o un término de expansión. Por ejemplo, la ingeniería del conocimiento a partir de texto tiene como término principal la ingeniería del conocimiento y como término de expansión el texto. Además, la ingeniería del conocimiento se compone del conocimiento como término principal y la ingeniería como término de expansión. Con Dynamo, el término de red obtenido como resultado del extractor se almacena en una base de datos. Para cada par de términos, asumimos que es posible calcular un valor de similitud para realizar un agrupamiento [6] [1]. Debido a la naturaleza de los datos, nos estamos enfocando únicamente en la computación de similitud entre objetos descritos gracias a variables binarias, lo que significa que cada elemento está descrito por la presencia o ausencia de un conjunto de características [15]. En el caso de los términos, generalmente estamos tratando con sus contextos de uso. Con Syntex, esos contextos son identificados por términos y caracterizados por algunas relaciones sintácticas. El sistema multiagente Dynamo implementa el algoritmo de clustering distribuido descrito en detalle en la sección 3 y las reglas descritas en la sección 4. Está diseñado para ser tanto el sistema que produce la estructura resultante como la estructura en sí misma. Significa que cada agente representa una clase en la taxonomía. Entonces, la salida del sistema es la organización obtenida a partir de la interacción entre agentes, teniendo en cuenta la retroalimentación proveniente del ontólogo cuando modifica la taxonomía dada sus necesidades o experiencia. CLUSTERING DISTRIBUIDO Esta sección presenta el algoritmo de clustering distribuido utilizado en Dynamo. Por el bien de la comprensión, y debido a su evaluación en la sección 3.1, recordamos el algoritmo centralizado básico utilizado para un agrupamiento jerárquico ascendente en un espacio no métrico, cuando se dispone de una medida de similitud simétrica [15] (que es el caso de las medidas utilizadas en nuestro sistema). Algoritmo 1: Algoritmo de agrupamiento jerárquico ascendente centralizado Datos: Lista L de elementos para organizar como una jerarquía Resultado: Raíz R de la jerarquía mientras longitud(L) > 1 hacer max ← 0; A ← nil; B ← nil; para i ← 1 a longitud(L) hacer I ← L[i]; para j ← i + 1 a longitud(L) hacer J ← L[j]; sim ← similitud(I, J); si sim > max entonces max ← sim; A ← I; B ← J; fin si fin para fin para quitar(A, L); quitar(B, L); agregar((A, B), L); fin mientras R ← L[1]; En el algoritmo 1, para cada paso de agrupamiento, se determina el par de elementos más similares. Esos dos elementos están agrupados en un conjunto, y la clase resultante se añade a la lista de elementos restantes. Este algoritmo se detiene cuando la lista tiene solo un elemento restante. 2 es decir, la subfrase máxima ubicada como cola del término The Sixth Intl. La jerarquía resultante del algoritmo 1 siempre es un árbol binario debido a la forma en que se realiza el agrupamiento. Además, agrupar los elementos más similares es equivalente a alejarlos de los menos similares. Nuestro algoritmo distribuido está diseñado basándose en esos dos hechos. Se ejecuta de forma simultánea en cada uno de los agentes del sistema. Cabe destacar que, en lo que sigue de este artículo, utilizamos para ambos algoritmos una similitud de Anderberg (con α = 0.75) y una estrategia de agrupamiento de enlace promedio [15]. Esas decisiones tienen un impacto en el árbol resultante, pero no afectan ni la ejecución global del algoritmo ni su complejidad. Ahora presentamos el algoritmo distribuido utilizado en nuestro sistema. Se inicia de la siguiente manera: • se crea un agente TOP que no tiene padre, será la raíz de la taxonomía resultante, • se crea un agente para cada término que se va a posicionar en la taxonomía, todos tienen como padre a TOP. Una vez que se establece esta estructura básica, el algoritmo se ejecuta hasta que alcanza el equilibrio y luego proporciona la taxonomía resultante. El proceso de la primera etapa (figura 2) se activa cuando un agente (aquí Ak) tiene más de un hermano (ya que queremos obtener un árbol binario). Luego envía un mensaje a su padre P indicando a su hermano más diferente (aquí A1). Entonces P recibe el mismo tipo de mensaje de cada uno de sus hijos. En lo siguiente, este tipo de mensaje se llamará voto. A continuación, cuando P ha recibido mensajes de todos sus hijos, comienza el segundo paso (figura 3). Gracias a los mensajes recibidos que indican las preferencias de sus hijos, P puede determinar tres subgrupos entre sus hijos: el hijo que recibió más votos de sus hermanos, es decir, el hijo que es más diferente del mayor número de sus hermanos. En caso de empate, uno de los ganadores es elegido al azar (aquí A1), los niños que permitieron la elección del primer grupo, es decir, los agentes que eligieron a su hermano del primer grupo como el más diferente (aquí Ak a An), los niños restantes (aquí A2 a Ak−1). Entonces P crea un nuevo agente P (teniendo a P como padre) y pide a los agentes del segundo grupo (aquí los agentes Ak a An) que lo elijan como su nuevo padre. Ak−1 Ak AnA2A1 P P ...... ...... \n\nAk−1 Ak AnA2A1 P P ...... ...... Figura 4: Agrupamiento distribuido: Paso 3 Finalmente, el paso 3 (figura 4) es trivial. Los niños rechazados por P (aquí el agente A2 a An) tienen en cuenta su mensaje y eligen a P como su nuevo padre. La jerarquía acaba de crear un nuevo nivel intermedio. Ten en cuenta que este algoritmo generalmente converge, ya que el número de hermanos de un agente disminuye. Cuando un agente tiene solamente un hermano restante, su actividad se detiene (aunque sigue procesando los mensajes que llegan de sus hijos). Sin embargo, en algunos casos podemos llegar a un conflicto circular en el procedimiento de votación cuando, por ejemplo, A vota en contra de B, B en contra de C y C en contra de A. Con el sistema actual no se puede tomar ninguna decisión. El procedimiento actual debería mejorarse para abordar esto, probablemente utilizando un método de votación clasificado. 3.1 Evaluación Cuantitativa Ahora, evaluamos las propiedades de nuestro algoritmo distribuido. Se requiere comenzar con una evaluación cuantitativa, basada en su complejidad, mientras se compara con el algoritmo 1 de la sección anterior. Su complejidad teórica se calcula para el peor caso, considerando la operación de cálculo de similitud como elemental. Para el algoritmo distribuido, el peor caso significa que en cada ejecución, solo se puede crear un grupo de dos elementos. Bajo esas condiciones, para un conjunto de datos dado de n elementos, podemos determinar la cantidad de cálculos de similitud. Para el algoritmo 1, notamos que l = longitud(L), luego el bucle más interno se ejecuta l - i veces. Y su cuerpo tiene la única computación de similitud, por lo que su costo es l−i. El segundo bucle for se ejecuta l veces para i que varía de 1 a l. Entonces su costo es Pl i=1(l − i) que puede simplificarse en l×(l−1) 2. Finalmente, para cada ejecución del bucle while, l se reduce de n a 1, lo que nos da t1(n) como la cantidad de cálculos de similitud para el algoritmo 1: t1(n) = nX l=1 l × (l − 1) 2 (1) Para el algoritmo distribuido, en un paso dado, cada uno de los l agentes evalúa la similitud con sus l −1 compañeros. Entonces, cada paso tiene un costo de l × (l − 1). Entonces, se crean grupos y se realiza otra votación con l disminuido en uno (ya que asumimos el peor caso, solo se forman grupos de tamaño 2 o l −1). Dado que l es igual a n en la primera ejecución, obtenemos tdist(n) como la cantidad de cálculos de similitud para el algoritmo distribuido: tdist(n) = nX l=1 l × (l − 1) (2) Ambos algoritmos tienen una complejidad O(n3). Pero en el peor de los casos, el algoritmo distribuido realiza el doble del número de el1288 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) operaciones elementales realizadas por el algoritmo centralizado. Esta brecha proviene de la toma de decisiones local en cada agente. Debido a esto, los cálculos de similitud se realizan dos veces para cada par de agentes. Podríamos concebir que un agente envía el resultado de su cálculo a su par. Sin embargo, simplemente trasladaría el problema al generar más comunicación en el sistema. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Cantidad de comparaciones Cantidad de términos de entrada 1. Algoritmo distribuido (en promedio, con mínimo y máximo) 2. Polinomio logarítmico 3. En la Figura 5 se muestra el algoritmo centralizado: Resultados experimentales. En un segundo paso, la complejidad promedio del algoritmo ha sido determinada mediante experimentos. El sistema multiagente ha sido ejecutado con conjuntos de datos de entrada generados aleatoriamente que van desde diez hasta cien términos. El valor dado es el promedio de las comparaciones realizadas para cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 5. El algoritmo es entonces más eficiente en promedio que el algoritmo centralizado, y su complejidad promedio está por debajo del peor caso. Se puede explicar por la baja probabilidad de que un conjunto de datos obligue al sistema a crear solo grupos mínimos (dos elementos) o máximos (n − 1 elementos) para cada paso de razonamiento. La curva número 2 representa el polinomio logarítmico que minimiza el error con respecto a la curva número 1. El término de mayor grado de este polinomio es n2 log(n), por lo tanto, nuestro algoritmo distribuido tiene una complejidad O(n2 log(n)) en promedio. Finalmente, notemos la reducida variación de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 1,960.75 para un promedio de 40,550.10 (alrededor del 5%), lo que muestra la buena estabilidad del sistema. Aunque los resultados cuantitativos son interesantes, la verdadera ventaja de este enfoque proviene de características más cualitativas que presentaremos en esta sección. Todos son ventajas obtenidas gracias al uso de un sistema multiagente adaptativo. La principal ventaja del uso de un sistema multiagente para una tarea de agrupamiento es introducir dinamismo en dicho sistema. El ontólogo puede hacer modificaciones y la jerarquía se adapta dependiendo de la solicitud. Es particularmente interesante en un contexto de ingeniería del conocimiento. De hecho, la jerarquía creada por el sistema está destinada a ser modificada por el ontólogo ya que es el resultado de un cálculo estadístico. Durante la revisión necesaria de los textos para examinar los contextos de uso de los términos [2], el ontólogo podrá interpretar el contenido real y revisar la propuesta del sistema. Es extremadamente difícil lograr esto con un enfoque centralizado de caja negra. En la mayoría de los casos, uno tiene que encontrar qué paso de razonamiento generó el error y modificar manualmente la clase resultante. Desafortunadamente, en este caso, todos los pasos de razonamiento que ocurrieron después de la creación de la clase modificada se pierden y deben ser recalculados teniendo en cuenta la modificación. Por eso, un sistema como ASIUM [6] intenta suavizar el problema con una colaboración entre el sistema y el usuario mostrando al ontólogo las clases creadas después de cada paso de razonamiento. Pero el ontólogo puede cometer un error y darse cuenta de ello demasiado tarde. Figura 6: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos un ejemplo gracias a algunas capturas de pantalla del prototipo en funcionamiento probado en un corpus relacionado con la medicina. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 6 después de la estabilización. Es evidente que el concepto descrito por el término lesión está mal ubicado. Las computaciones de similitud lo sitúan más cerca de femme (mujer) y chirurgien (cirujano) que de infección, gastro-enteritis y hepatitis. Esta posición incorrecta para la lesión se explica por el hecho de que sin la entrada del ontólogo, el razonamiento se basa únicamente en criterios estadísticos. Figura 7: Árbol de agentes conceptuales después de la modificación del ontólogo. Luego, el ontólogo reemplaza el concepto en la rama derecha, afectando a ConceptAgent:8 como su nuevo padre. El nombre ConceptAgent:X se asigna automáticamente a un agente conceptual que no está descrito por un término. El sistema reacciona por sí mismo y perfecciona la jerarquía de agrupación para obtener un árbol binario creando ConceptAgent:11. El nuevo estado estable es el de la figura 7. Este acoplamiento sistema-usuario es necesario para construir una ontología, pero no se necesita ningún ajuste particular al principio del algoritmo distribuido ya que cada agente realiza un procesamiento local autónomo y se comunica con su vecindario a través de mensajes. Además, este algoritmo puede ser distribuido de facto en una red de computadoras. La comunicación entre agentes se realiza enviando mensajes y cada uno mantiene su autonomía de decisión. Entonces, una modificación del sistema para hacerlo funcionar en red no requeriría ajustar el algoritmo. Por el contrario, solo sería necesario reestructurar la capa de comunicación y el proceso de creación de agentes, ya que en nuestra implementación actual no están en red. 4. EN LA JERARQUÍA DE MÚLTIPLES CRITERIOS En las secciones anteriores, asumimos que la similitud se puede calcular para cualquier par de términos. Pero, tan pronto como se utilizan datos reales, esta propiedad ya no se verifica. Algunos términos no tienen ningún valor de similitud con ningún término extraído. Además, para los nodos hoja a veces es interesante utilizar otros medios para posicionarlos en la jerarquía. Para esta estructuración de bajo nivel, los ontólogos generalmente se basan en The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1289 sus elecciones en heurísticas simples. Usando esta observación, construimos un nuevo conjunto de reglas, que no se basan en la similitud para respaldar la estructuración de bajo nivel. 4.1 Agregar reglas de cobertura de cabeza En este caso, los agentes pueden actuar con un punto de vista muy local simplemente mirando la relación padre/hijo. Cada agente puede intentar determinar si su padre es adecuado. Es posible adivinar esto porque cada agente conceptual está descrito por un conjunto de términos y gracias a la red de términos de Expansión de Cabeza. En el siguiente TX será el conjunto de términos que describen el concepto del agente X y head(TX) el conjunto de todos los términos que son cabeza de al menos un elemento de TX. Gracias a esas dos notaciones podemos describir la función de adecuación entre un padre P y un hijo C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Entonces, el mejor padre para C es el agente P que maximiza a(P, C). Un agente insatisfecho con su padre puede intentar encontrar uno mejor evaluando la idoneidad de los candidatos. Diseñamos un algoritmo complementario para dirigir esta búsqueda: cuando un agente C no está satisfecho con su padre P, evalúa a(Bi, C) con todos sus hermanos (notados Bi); luego se elige como nuevo padre aquel que maximice a(Bi, C). Figura 8: Árbol de agentes conceptuales después de la estabilización autónoma del sistema sin la regla de cobertura de cabeza. Ahora ilustramos este comportamiento de regla con un ejemplo. La Figura 8 muestra el estado del sistema después de la estabilización en los datos de prueba. Podemos notar que la hepatitis viral todavía está vinculada a la raíz taxonómica. Se debe al hecho de que no hay valor de similitud entre el término hepatitis viral y ninguno de los términos de los otros agentes conceptuales. Figura 9: Árbol de agentes conceptuales después de la activación de la regla de cobertura de la cabeza. Tras activar la regla de cobertura de la cabeza y permitir que el sistema se estabilice nuevamente, obtenemos la figura 9. Podemos ver que la hepatitis viral se deslizó a través de la rama que llevaba a la hepatitis y la eligió como su nueva progenitora. Es una elección por defecto sensata, ya que la hepatitis viral es un término más específico que la hepatitis. Esta regla tiende a hacer que los agentes descritos por un conjunto de términos se conviertan en hojas del árbol conceptual. Aborda nuestra preocupación por mejorar la estructuración de bajo nivel de nuestra taxonomía. Pero obviamente nuestros agentes carecen de un método para retroceder en caso de modificaciones en la taxonomía que los ubicarían en la rama incorrecta. Ese es uno de los puntos en los que nuestro sistema aún debe ser mejorado al agregar otro conjunto de reglas. 4.2 Sobre el uso de varios criterios En las secciones y ejemplos anteriores, solo utilizamos un algoritmo a la vez. El algoritmo de agrupamiento distribuido tiende a introducir nuevas capas en la taxonomía, mientras que el algoritmo de cobertura de cabeza tiende a empujar algunos de los agentes hacia las hojas de la taxonomía. Obviamente plantea la pregunta sobre cómo lidiar con múltiples criterios en la construcción de nuestra taxonomía, y cómo los agentes determinan sus prioridades en un momento dado. La solución que elegimos proviene de la búsqueda de minimizar la falta de cooperación dentro del sistema de acuerdo con el método ADELFE. Cada agente calcula tres grados de no cooperación y elige su prioridad actual dependiendo de cuál grado sea el más alto. Para un agente A dado que tiene un padre P, un conjunto de hermanos Bi y que recibió un conjunto de mensajes Mk con prioridad pk, los tres grados de no cooperación son: • μH (A) = 1 − a(P, A), es el grado de no cooperación de cobertura de cabeza, determinado por la cobertura de cabeza del padre, • μB(A) = max(1 − similitud(A, Bi)), es el grado de no cooperación de hermandad, determinado por el peor hermano de A en cuanto a similitudes, • μM (A) = max(pk), es el grado de no cooperación de mensaje, determinado por el mensaje más urgente recibido. Entonces, el grado de no cooperación μ(A) del agente A es: μ(A) = max(μH (A), μB(A), μM (A)) (4) Luego, tenemos tres casos que determinan qué tipo de acción elegirá A: • si μ(A) = μH (A) entonces A utilizará el algoritmo de cobertura de cabeza que detallamos en la subsección anterior • si μ(A) = μB(A) entonces A utilizará el algoritmo de agrupamiento distribuido (ver sección 3) • si μ(A) = μM (A) entonces A procesará Mk inmediatamente para ayudar a su remitente Estos tres casos resumen las actividades actuales de nuestros agentes: tienen que encontrar el mejor padre para ellos (μ(A) = μH (A)), mejorar la estructuración a través del agrupamiento (μ(A) = μB(A)) y procesar otros mensajes de agentes (μ(A) = μM (A)) para ayudarlos a cumplir sus propios objetivos. 4.3 Complejidad Experimental Revisitada Evaluamos la complejidad experimental de todo el sistema multiagente cuando todas las reglas están activadas. En este caso, la métrica utilizada es el número de mensajes intercambiados en el sistema. Una vez más, el sistema ha sido ejecutado con conjuntos de datos de entrada que van desde diez hasta cien términos. El valor dado es el promedio del número de mensajes enviados en el sistema en su totalidad durante cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 10. La curva número 1 representa el promedio del valor obtenido. La curva número 2 representa el promedio del valor obtenido cuando solo se activa el algoritmo de agrupamiento distribuido, no el conjunto completo de reglas. La curva número 3 representa el polinomio que minimiza el error con la curva número 1. El término de mayor grado de este polinomio es en n3, entonces nuestro sistema multiagente tiene una complejidad O(n3). Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Cantidad de mensajes Cantidad de términos de entrada 1. Dinamo, todas las reglas (en promedio, con mínimo y máximo) 2. Agrupamiento distribuido solo (en promedio) 2. Figura 10: Resultados experimentales en promedio de un polinomio cúbico. Además, notemos la variación muy pequeña de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 126.73 para un promedio de 20,737.03 (alrededor del 0.6%), lo que demuestra la excelente estabilidad del sistema. Finalmente, las reglas adicionales de cobertura de cabeza son una verdadera mejora sobre el algoritmo distribuido por sí solo. Introducen más restricciones y se alcanza el punto de estabilidad con menos interacciones y toma de decisiones por parte de los agentes. Significa que se intercambian menos mensajes en el sistema al obtener un árbol de mayor calidad para el ontólogo. 5. DISCUSIÓN Y PERSPECTIVAS 5.1 Limitación actual de nuestro enfoque La limitación más importante de nuestro algoritmo actual es que el resultado depende del orden en que se agregan los datos. Cuando el sistema funciona por sí solo en un conjunto de datos fijo proporcionado durante la inicialización, el resultado final es equivalente a lo que podríamos obtener con un algoritmo centralizado. Por el contrario, añadir un nuevo elemento después de una primera estabilización tiene un impacto en el resultado final. Figura 11: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos otro ejemplo del sistema en funcionamiento. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 11 después de la estabilización. Figura 12: Árbol de agentes conceptuales después de tener en cuenta la hepatitis. Luego, el ontólogo interactúa con el sistema y agrega un nuevo concepto descrito por el término hepatitis y vinculado a la raíz. El sistema reacciona y se estabiliza, luego obtenemos la figura 12 como resultado. La hepatitis se encuentra en la rama derecha, pero no hemos obtenido la misma organización que la figura 6 del ejemplo anterior. Necesitamos mejorar nuestro algoritmo distribuido para permitir que un concepto se mueva a lo largo de una rama. Actualmente estamos trabajando en las reglas requeridas, pero la comparación con el algoritmo centralizado se volverá muy difícil. En particular, ya que tendrán en cuenta criterios ignorados por el algoritmo centralizado. 5.2 Poda para la construcción de ontologías En la sección 3, presentamos el algoritmo de agrupamiento distribuido utilizado en el sistema Dynamo. Dado que este trabajo se basó inicialmente en este algoritmo, introdujo un claro sesgo hacia los árboles binarios como resultado. Pero debemos tener en cuenta que estamos tratando de obtener taxonomías que sean más refinadas y concisas. Aunque la regla de cobertura de la cabeza es una mejora porque se basa en cómo generalmente trabajan los ontólogos, solo aborda la estructuración a un nivel bajo y no a los niveles intermedios del árbol. Al observar la figura 7, es evidente que se podría realizar una poda en la taxonomía. En particular, dado que la lesión se movió, el ConceptAgent:9 podría ser eliminado, ya no es necesario. Además, la rama que comienza con ConceptAgent:8 respeta claramente la restricción de formar un árbol binario, pero sería más útil para el usuario en una forma más compacta y significativa. En este caso, ConceptAgent:10 y ConceptAgent:11 probablemente podrían fusionarse. Actualmente, nuestro sistema cuenta con las reglas necesarias para crear niveles intermedios en la taxonomía, o para que los conceptos se desplacen hacia la hoja. Como señalamos, no es suficiente, por lo que se necesitan nuevas reglas para permitir eliminar nodos del árbol o moverlos hacia la raíz. La mayor parte del trabajo necesario para desarrollar esas reglas consiste en encontrar la información estadística relevante que respaldará al ontólogo. CONCLUSIÓN Después de ser presentada como una solución prometedora, garantizar la calidad del modelo y su riqueza terminológica, la construcción de ontologías a partir del análisis de corpus textual es difícil y costosa. Requiere supervisión del analista y tener en cuenta el objetivo de la ontología. El uso de herramientas de procesamiento de lenguaje natural facilita la localización del conocimiento en textos a través del uso del lenguaje. Dicho esto, esas herramientas producen una gran cantidad de datos léxicos o gramaticales que no son triviales de examinar para definir elementos conceptuales. Nuestra contribución radica en este paso del proceso de modelado a partir de textos, antes de intentar normalizar o formalizar el resultado. Propusimos un enfoque basado en un sistema multiagente adaptativo para proporcionar al ontólogo una primera estructura taxonómica de conceptos. Nuestro sistema hace uso de una red terminológica resultante de un análisis realizado por Syntex. El estado actual de nuestro software permite producir estructuras simples, proponérselas al ontólogo y hacerlas evolucionar dependiendo de las modificaciones que él realice. Las actuaciones del sistema son interesantes y algunos aspectos son incluso comparables a su contraparte centralizada. Sus fortalezas son principalmente cualitativas ya que permite interacciones de usuario más sutiles y una adaptación progresiva a nueva información basada en el lenguaje. Desde el punto de vista de la construcción de la ontología, este trabajo es un primer paso que muestra la relevancia de nuestro enfoque. Debe continuar, tanto para garantizar una mejor robustez durante la clasificación, como para obtener estructuras semánticas más ricas que simples árboles. De estas mejoras, nos estamos enfocando principalmente en la poda para obtener mejores taxonomías. Actualmente estamos trabajando en el criterio para activar las acciones complementarias de los cambios de estructura aplicados por nuestro algoritmo de agrupamiento. En otras palabras, este algoritmo se introduce en el Sexto Congreso Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1291 niveles intermedios, y necesitamos poder eliminarlos si es necesario, para alcanzar un equilibrio dinámico. También desde el punto de vista de la ingeniería multiagente, su uso en un contexto de ontología dinámica ha demostrado su relevancia. Estas ontologías dinámicas pueden ser vistas como una resolución de problemas complejos, en tal caso la autoorganización a través de la cooperación ha sido una solución eficiente. Y, en general, es probable que sea interesante para otras tareas relacionadas con el diseño, incluso si nos estamos enfocando únicamente en la ingeniería del conocimiento en este artículo. Por supuesto, nuestro sistema aún requiere más trabajo de evaluación y validación para determinar con precisión las ventajas y desventajas de este enfoque. Estamos planeando trabajar en ese tipo de comparación en un futuro cercano. 7. REFERENCIAS [1] H. Assadi. Construcción de una ontología regional a partir de texto y su uso dentro de un sistema documental. Actas de la Conferencia Internacional sobre Ontología Formal y Sistemas de Información - FOIS98, páginas 236-249, 1998. [2] N. Aussenac-Gilles y D. Sörgel. Análisis de texto para ingeniería de ontologías y terminología. Revista de Ontología Aplicada, 2005. [3] J. Bao y V. Honavar. Construcción colaborativa de ontologías con wiki@nt. Actas del Taller de Evaluación de Herramientas Basadas en Ontologías (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes y G. Picard. Metodologías Orientadas a Agentes, capítulo 7. Ingeniería de Sistemas Multiagente Autoadaptativos: la Metodología ADELFE, páginas 172-202. Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna y Y. Wilks. Antecedentes y conocimiento previo en la construcción dinámica de ontologías. Taller de la Web Semántica, SIGIR03, agosto de 2003. [6] D. Faure y C. Nedellec. Un método de agrupamiento conceptual basado en corpus para marcos verbales y adquisición de ontologías. Taller LREC sobre la adaptación de recursos léxicos y corpus a sublenguajes y aplicaciones, 1998. [7] F. Gandon. Ingeniería de Ontologías: una Encuesta y un Retorno de Experiencia. INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes y P. Glize. Diseño Vivo para Sistemas Computacionales Abiertos. 12º Talleres Internacionales de la IEEE sobre Tecnologías Habilitadoras, Infraestructura para Empresas Colaborativas, páginas 389-394, junio de 2003. [9] M.-P. Gleizes, V. Camps y P. Glize. Una teoría de computación emergente basada en la autoorganización cooperativa para sistemas artificiales adaptativos. Cuarto Congreso Europeo de Ciencias de los Sistemas, septiembre de 1999. [10] J. Heflin y J. Hendler. Ontologías dinámicas en la web. Conferencia de la Asociación Americana de Inteligencia Artificial, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault y M.-C. Jaulent. Extracción de terminología del texto para construir una ontología en cuidados intensivos quirúrgicos. Actas del simposio anual de la AMIA 2002, 2002. [12] K. Lister, L. Sterling y K. Taveter. Reconciliando diferencias ontológicas mediante agentes asistentes. AAMAS06, mayo de 2006. [13] A. Maedche. Aprendizaje de ontologías para la Web Semántica. Editorial Kluwer Academic, 2002. [14] A. Maedche y S. Staab. Extracción de ontologías a partir de texto. EKAW 2000, páginas 189-202, 2000. [15] C. D. Manning y H. Schütze. Fundamentos del Procesamiento del Lenguaje Natural Estadístico. El MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding y S. Brueckner. Clustering jerárquico descentralizado dinámico en cualquier momento. 29ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, agosto de 2006. 1292 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07)",
    "original_sentences": [
        "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of Ontology Learning.",
        "Our system named Dynamo is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
        "In this paper we present a distributed hierarchical clustering algorithm, core of our approach.",
        "It is evaluated and compared to a more conventional centralized algorithm.",
        "We also present how it has been improved using a multi-criteria approach.",
        "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete ontology building solution.",
        "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1.",
        "INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval.",
        "But building an ontology manually is a slow, tedious, costly, complex and time consuming process.",
        "Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date.",
        "It would mean creating dynamic ontologies [10] and it justifies the emergence of ontology learning techniques [14] [13].",
        "Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts.",
        "Our aim is not to build an exhaustive, general hierarchical ontology but a domain specific one.",
        "We propose a semi-automated tool since an external resource is required: the ontologist.",
        "An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies.",
        "In the multi-agent field, ontologies generally enable agents to understand each other [12].",
        "Theyre sometimes used to ease the ontology building process, in particular for collaborative contexts [3], but they rarely represent the ontology itself [16].",
        "Most works interested in the construction of ontologies [7] propose the refinement of ontologies.",
        "This process consists in using an existing ontology and building a new one from it.",
        "This approach is different from our approach because Dynamo starts from scratch.",
        "Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5].",
        "In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist.",
        "This paper first presents, in section 2, the big picture of the Dynamo system.",
        "In particular the motives that led to its creation and its general architecture.",
        "Then, in section 3 we discuss the distributed clustering algorithm used in Dynamo and compare it to a more classic centralized approach.",
        "Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering.",
        "And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2.",
        "DYNAMO OVERVIEW 2.1 Ontology as a Multi-Agent System Dynamo aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently.",
        "The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system.",
        "This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network.",
        "Dynamo takes a syntactical and terminological analysis of texts as input.",
        "It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts.",
        "As output, Dynamo provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network.",
        "An ontology can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations.",
        "Thus, our approach considers an ontology as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships.",
        "The ontology modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships.",
        "In this way, a dynamic ontology is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it.",
        "To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9].",
        "We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system.",
        "It justifies how we designed some of the rules used by our agents in order to maximize the cooperation degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
        "It addresses the needs of Knowledge Engineering in the context of dynamic ontology management and maintenance when the ontology is linked to a document collection.",
        "The Dynamo system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ? ?",
        "Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for ontology building tasks [11].",
        "We mainly selected it because of its robustness and the great amount of information extracted.",
        "In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1].",
        "In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term.",
        "For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term.",
        "Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term.",
        "With Dynamo, the term network obtained as the output of the extractor is stored in a database.",
        "For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1].",
        "Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15].",
        "In the case of terms we are generally dealing with their usage contexts.",
        "With Syntex, those contexts are identified by terms and characterized by some syntactic relations.",
        "The Dynamo multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4.",
        "It is designed to be both the system producing the resulting structure and the structure itself.",
        "It means that each agent represent a class in the taxonomy.",
        "Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3.",
        "DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in Dynamo.",
        "For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system).",
        "Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined.",
        "Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements.",
        "This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done.",
        "Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones.",
        "Our distributed algorithm is designed relying on those two facts.",
        "It is executed concurrently in each of the agents of the system.",
        "Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15].",
        "Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity.",
        "We now present the distributed algorithm used in our system.",
        "It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent.",
        "Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy.",
        "Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree).",
        "Then it sends a message to its parent P indicating its most dissimilar brother (here A1).",
        "Then P receives the same kind of message from each of its children.",
        "In the following, this kind of message will be called a vote.",
        "Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3).",
        "Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers.",
        "In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1).",
        "Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent.",
        "Ak−1 Ak AnA2A1 P P ...... ......",
        "Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial.",
        "The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent.",
        "The hierarchy just created a new intermediate level.",
        "Note that this algorithm generally converges, since the number of brothers of an agent drops.",
        "When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children).",
        "However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A.",
        "With the current system no decision can be taken.",
        "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 Quantitative Evaluation Now, we evaluate the properties of our distributed algorithm.",
        "It requires to begin with a quantitative evaluation, based on its complexity, while comparing it with the algorithm 1 from the previous section.",
        "Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary.",
        "For the distributed algorithm, the worst case means that for each run, only a two-item group can be created.",
        "Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations.",
        "For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times.",
        "And its body has the only similarity computation, so its cost is l−i.",
        "The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 .",
        "Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers.",
        "So each steps has a l × (l − 1) cost.",
        "Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built).",
        "Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity.",
        "But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm.",
        "This gap comes from the local decision making in each agent.",
        "Because of this, the similarity computations are done twice for each agent pair.",
        "We could conceive that an agent sends its computation result to its peer.",
        "But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1.",
        "Distributed algorithm (on average, with min and max) 2.",
        "Logarithmic polynomial 3.",
        "Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments.",
        "The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms.",
        "The given value is the average of comparisons made for one hundred of runs without any user interaction.",
        "It results in the plots of figure 5.",
        "The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case.",
        "It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning.",
        "Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1.",
        "The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average.",
        "Finally, lets note the reduced variation of the average performances with the maximum and the minimum.",
        "In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section.",
        "All are advantages obtained thanks to the use of an adaptive multi-agent system.",
        "The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system.",
        "The ontologist can make modifications and the hierarchy adapts depending on the request.",
        "It is particularly interesting in a knowledge engineering context.",
        "Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation.",
        "During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal.",
        "It is extremely difficult to realize this with a centralized black-box approach.",
        "In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class.",
        "Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account.",
        "That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning.",
        "But, the ontologist can make a mistake, and become aware of it too late.",
        "Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus.",
        "By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization.",
        "It is clear that the concept described by the term lésion (lesion) is misplaced.",
        "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (hepatitis).",
        "This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria.",
        "Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent.",
        "The name ConceptAgent:X is automatically given to a concept agent that is not described by a term.",
        "The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11.",
        "The new stable state if the one of figure 7.",
        "This system-user coupling is necessary to build an ontology, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages.",
        "Moreover, this algorithm can de facto be distributed on a computer network.",
        "The communication between agents is then done by sending messages and each one keeps its decision autonomy.",
        "Then, a system modification to make it run networked would not require to adjust the algorithm.",
        "On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4.",
        "MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair.",
        "But, as soon as one uses real data this property is not verified anymore.",
        "Some terms do not have any similarity value with any extracted term.",
        "Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy.",
        "For this low level structuring, ontologists generally base The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics.",
        "Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation.",
        "Each agent can try to determine if its parent is adequate.",
        "It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network.",
        "In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX .",
        "Thanks to those two notations we can describe the parent adequacy function a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C).",
        "An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates.",
        "We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent.",
        "Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example.",
        "Figure 8 shows the state of the system after stabilization on test data.",
        "We can notice that hépatite viral (viral hepatitis) is still linked to the taxonomy root.",
        "It is caused by the fact that there is no similarity value between the viral hepatitis term and any of the term of the other concept agents.",
        "Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9.",
        "We can see that viral hepatitis slipped through the branch leading to hepatitis and chose it as its new parent.",
        "It is a sensible default choice since viral hepatitis is a more specific term than hepatitis.",
        "This rule tends to push agents described by a set of term to become leafs of the concept tree.",
        "It addresses our concern to improve the low level structuring of our taxonomy.",
        "But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch.",
        "That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time.",
        "The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy.",
        "It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time.",
        "The solution we chose came from the search for minimizing non cooperation within the system in accordance with the ADELFE method.",
        "Each agent computes three non cooperation degrees and chooses its current priority depending on which degree is the highest.",
        "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non cooperation degrees are: • μH (A) = 1 − a(P, A), is the head coverage non cooperation degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
        "Then, the non cooperation degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated.",
        "In this case, the metric used is the number of messages exchanged in the system.",
        "Once again the system has been executed with input data sets ranging from ten to one hundred terms.",
        "The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction.",
        "It results in the plots of figure 10.",
        "Curve number 1 represents the average of the value obtained.",
        "Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set.",
        "Curve number 3 represents the polynomial minimizing the error with curve number 1.",
        "The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1.",
        "Dynamo, all rules (on average, with min and max) 2.",
        "Distributed clustering only (on average) 2.",
        "Cubic polynomial Figure 10: Experimental results on average.",
        "Moreover, lets note the very small variation of the average performances with the maximum and the minimum.",
        "In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system.",
        "Finally the extra head coverage rules are a real improvement on the distributed algorithm alone.",
        "They introduce more constraints and stability point is reached with less interactions and decision making by the agents.",
        "It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5.",
        "DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added.",
        "When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm.",
        "On the contrary, adding a new item after a first stabilization has an impact on the final result.",
        "Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system.",
        "By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization.",
        "Figure 12: Concept agent tree after taking in account hepatitis Then, the ontologist interacts with the system and adds a new concept described by the term hepatitis and linked to the root.",
        "The system reacts and stabilizes, we then obtain figure 12 as a result. hepatitis is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example.",
        "We need to improve our distributed algorithm to allow a concept to move along a branch.",
        "We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult.",
        "In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the Dynamo system.",
        "Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result.",
        "But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise.",
        "Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree.",
        "By looking at figure 7, it is clear that some pruning could be done in the taxonomy.",
        "In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore.",
        "Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form.",
        "In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged.",
        "Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf.",
        "As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root.",
        "Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6.",
        "CONCLUSION After being presented as a promising solution, ensuring model quality and their terminological richness, ontology building from textual corpus analysis is difficult and costly.",
        "It requires analyst supervising and taking in account the ontology aim.",
        "Using natural languages processing tools ease the knowledge localization in texts through language uses.",
        "That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements.",
        "Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result.",
        "We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts.",
        "Our system makes use of a terminological network resulting from an analysis made by Syntex.",
        "The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made.",
        "Performances of the system are interesting and some aspects are even comparable to their centralized counterpart.",
        "Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information.",
        "From the point of view of ontology building, this work is a first step showing the relevance of our approach.",
        "It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees.",
        "From this improvements we are mostly focusing on the pruning to obtain better taxonomies.",
        "Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm.",
        "In other words this algorithm introduces inThe Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a dynamic equilibrium.",
        "Also from the multi-agent engineering point of view, their use in a dynamic ontology context has shown its relevance.",
        "This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through cooperation has been an efficient solution.",
        "And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper.",
        "Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach.",
        "Were planning to work on such benchmarking in the near future. 7.",
        "REFERENCES [1] H. Assadi.",
        "Construction of a regional ontology from text and its use within a documentary system.",
        "Proceedings of the International Conference on Formal Ontology and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel.",
        "Text analysis for ontology and terminology engineering.",
        "Journal of Applied Ontology, 2005. [3] J. Bao and V. Honavar.",
        "Collaborative ontology building with wiki@nt.",
        "Proceedings of the Workshop on Evaluation of Ontology-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard.",
        "Agent-Oriented Methodologies, chapter 7.",
        "Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202.",
        "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks.",
        "Background and foreground knowledge in dynamic ontology construction.",
        "Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec.",
        "A corpus-based conceptual clustering method for verb frames and ontology acquisition.",
        "LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon.",
        "Ontology Engineering: a Survey and a Return on Experience.",
        "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize.",
        "Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize.",
        "A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems.",
        "Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler.",
        "Dynamic ontologies on the web.",
        "American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent.",
        "Terminology extraction from text to build an ontology in surgical intensive care.",
        "Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter.",
        "Reconciling Ontological Differences by Assistant Agents.",
        "AAMAS06, May 2006. [13] A. Maedche.",
        "Ontology learning for the Semantic Web.",
        "Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab.",
        "Mining Ontologies from Text.",
        "EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze.",
        "Foundations of Statistical Natural Language Processing.",
        "The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner.",
        "Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)"
    ],
    "translated_text_sentences": [
        "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de ontologías a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías.",
        "Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una arquitectura multiagente adaptativa.",
        "En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque.",
        "Se evalúa y se compara con un algoritmo centralizado más convencional.",
        "También presentamos cómo ha sido mejorado utilizando un enfoque de múltiples criterios.",
        "Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de ontologías.",
        "Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Experimentación 1.",
        "INTRODUCCIÓN En la actualidad, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de información.",
        "Pero construir una ontología manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo.",
        "Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados.",
        "Significaría crear ontologías dinámicas [10] y justifica la aparición de técnicas de aprendizaje de ontologías [14] [13].",
        "Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una ontología a partir de un conjunto específico de textos de un dominio.",
        "Nuestro objetivo no es construir una ontología jerárquica exhaustiva y general, sino una específica para un dominio.",
        "Proponemos una herramienta semi-automatizada ya que se requiere un recurso externo: el ontólogo.",
        "Un ontólogo es una especie de ingeniero cognitivo, o analista, que utiliza información de textos y entrevistas con expertos para diseñar ontologías.",
        "En el campo de los agentes múltiples, las ontologías generalmente permiten que los agentes se entiendan entre sí [12].",
        "A veces se utilizan para facilitar el proceso de construcción de la ontología, en particular en contextos colaborativos [3], pero rara vez representan la ontología en sí misma [16].",
        "La mayoría de los trabajos interesados en la construcción de ontologías [7] proponen el refinamiento de las ontologías.",
        "Este proceso consiste en utilizar una ontología existente y construir una nueva a partir de ella.",
        "Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero.",
        "Los investigadores, que trabajan en la construcción de ontologías a partir de textos, afirman que el trabajo a automatizar requiere recursos externos como un diccionario [14] o acceso a la web [5].",
        "En nuestro trabajo, proponemos una interacción entre el ontólogo y el sistema, nuestro recurso externo radica tanto en los textos como en el ontólogo.",
        "Este documento primero presenta, en la sección 2, la visión general del sistema Dynamo.",
        "En particular, los motivos que llevaron a su creación y su arquitectura general.",
        "Luego, en la sección 3 discutimos el algoritmo de clustering distribuido utilizado en Dynamo y lo comparamos con un enfoque más clásico y centralizado.",
        "La sección 4 está dedicada a mejorar el comportamiento de los agentes que fue diseñado teniendo en cuenta criterios ignorados por el agrupamiento.",
        "Y finalmente, en la sección 5, discutimos las limitaciones de nuestro enfoque y explicamos cómo se abordarán en trabajos futuros.",
        "DYNAMO RESUMEN 2.1 Ontología como un Sistema Multiagente Dynamo tiene como objetivo reducir la necesidad de acciones manuales en el procesamiento de los resultados del análisis de texto y sugerir un inicio de red conceptual para construir ontologías de manera más eficiente.",
        "El enfoque elegido es completamente original en nuestro conocimiento y utiliza un sistema multiagente adaptativo.",
        "Esta elección se basa en las cualidades ofrecidas por el sistema multiagente: pueden facilitar el diseño interactivo de un sistema (en nuestro caso, una red conceptual), permiten su construcción incremental al tener en cuenta progresivamente nuevos datos (provenientes del análisis de texto y la interacción del usuario) y, por último pero no menos importante, pueden distribuirse fácilmente a través de una red informática.",
        "Dynamo realiza un análisis sintáctico y terminológico de textos como entrada.",
        "Utiliza varios criterios basados en estadísticas calculadas a partir de los contextos lingüísticos de los términos para crear y posicionar los conceptos.",
        "Como resultado, Dynamo proporciona al analista una organización jerárquica de conceptos (el sistema multiagente en sí mismo) que puede ser validada, refinada o modificada, hasta que obtenga un estado satisfactorio de la red semántica.",
        "Una ontología puede ser vista como un mapa estable constituido por entidades conceptuales, representadas aquí por agentes, vinculadas por relaciones etiquetadas.",
        "Por lo tanto, nuestro enfoque considera una ontología como un tipo de equilibrio entre sus concepto-agentes, donde sus fuerzas están definidas por sus relaciones potenciales.",
        "La modificación de la ontología es una perturbación del equilibrio previo por la aparición o desaparición de agentes o relaciones.",
        "De esta manera, una ontología dinámica es un proceso de autoorganización que ocurre cuando se incluyen nuevos textos en el corpus, o cuando el ontólogo interactúa con él.",
        "Para apoyar la flexibilidad necesaria de dicho sistema, utilizamos un sistema multiagente autoorganizado basado en un enfoque cooperativo [9].",
        "Seguimos el método ADELFE [4] propuesto para guiar el diseño de este tipo de sistema multiagente.",
        "Se justifica cómo diseñamos algunas de las reglas utilizadas por nuestros agentes para maximizar el grado de cooperación dentro del sistema multiagente de Dynamos. 2.2 Arquitectura Propuesta En esta sección, presentamos nuestra arquitectura del sistema.",
        "Aborda las necesidades de la Ingeniería del Conocimiento en el contexto de la gestión y mantenimiento dinámico de ontologías cuando la ontología está vinculada a una colección de documentos.",
        "El sistema Dynamo consta de tres partes (cf. figura 1): • una red de términos, obtenida gracias a una herramienta de extracción de términos utilizada para preprocesar el corpus textual, • un sistema multiagente que utiliza la red de términos para realizar un agrupamiento jerárquico con el fin de obtener una taxonomía de conceptos, • una interfaz que permite al ontólogo visualizar y controlar el proceso de agrupamiento.",
        "El extractor de términos que utilizamos es Syntex, un software que ha sido utilizado eficientemente para tareas de construcción de ontologías [11].",
        "Principalmente lo seleccionamos por su robustez y la gran cantidad de información extraída.",
        "En particular, crea una red de Expansión de Cabeza que ya ha demostrado ser interesante para un sistema de agrupamiento [1].",
        "En una red de este tipo, cada término está vinculado a su término principal y, es decir, a la subfrase máxima ubicada como término principal de su término de expansión, y también a todos los términos para los cuales es un término principal o un término de expansión.",
        "Por ejemplo, la ingeniería del conocimiento a partir de texto tiene como término principal la ingeniería del conocimiento y como término de expansión el texto.",
        "Además, la ingeniería del conocimiento se compone del conocimiento como término principal y la ingeniería como término de expansión.",
        "Con Dynamo, el término de red obtenido como resultado del extractor se almacena en una base de datos.",
        "Para cada par de términos, asumimos que es posible calcular un valor de similitud para realizar un agrupamiento [6] [1].",
        "Debido a la naturaleza de los datos, nos estamos enfocando únicamente en la computación de similitud entre objetos descritos gracias a variables binarias, lo que significa que cada elemento está descrito por la presencia o ausencia de un conjunto de características [15].",
        "En el caso de los términos, generalmente estamos tratando con sus contextos de uso.",
        "Con Syntex, esos contextos son identificados por términos y caracterizados por algunas relaciones sintácticas.",
        "El sistema multiagente Dynamo implementa el algoritmo de clustering distribuido descrito en detalle en la sección 3 y las reglas descritas en la sección 4.",
        "Está diseñado para ser tanto el sistema que produce la estructura resultante como la estructura en sí misma.",
        "Significa que cada agente representa una clase en la taxonomía.",
        "Entonces, la salida del sistema es la organización obtenida a partir de la interacción entre agentes, teniendo en cuenta la retroalimentación proveniente del ontólogo cuando modifica la taxonomía dada sus necesidades o experiencia.",
        "CLUSTERING DISTRIBUIDO Esta sección presenta el algoritmo de clustering distribuido utilizado en Dynamo.",
        "Por el bien de la comprensión, y debido a su evaluación en la sección 3.1, recordamos el algoritmo centralizado básico utilizado para un agrupamiento jerárquico ascendente en un espacio no métrico, cuando se dispone de una medida de similitud simétrica [15] (que es el caso de las medidas utilizadas en nuestro sistema).",
        "Algoritmo 1: Algoritmo de agrupamiento jerárquico ascendente centralizado Datos: Lista L de elementos para organizar como una jerarquía Resultado: Raíz R de la jerarquía mientras longitud(L) > 1 hacer max ← 0; A ← nil; B ← nil; para i ← 1 a longitud(L) hacer I ← L[i]; para j ← i + 1 a longitud(L) hacer J ← L[j]; sim ← similitud(I, J); si sim > max entonces max ← sim; A ← I; B ← J; fin si fin para fin para quitar(A, L); quitar(B, L); agregar((A, B), L); fin mientras R ← L[1]; En el algoritmo 1, para cada paso de agrupamiento, se determina el par de elementos más similares.",
        "Esos dos elementos están agrupados en un conjunto, y la clase resultante se añade a la lista de elementos restantes.",
        "Este algoritmo se detiene cuando la lista tiene solo un elemento restante. 2 es decir, la subfrase máxima ubicada como cola del término The Sixth Intl.",
        "La jerarquía resultante del algoritmo 1 siempre es un árbol binario debido a la forma en que se realiza el agrupamiento.",
        "Además, agrupar los elementos más similares es equivalente a alejarlos de los menos similares.",
        "Nuestro algoritmo distribuido está diseñado basándose en esos dos hechos.",
        "Se ejecuta de forma simultánea en cada uno de los agentes del sistema.",
        "Cabe destacar que, en lo que sigue de este artículo, utilizamos para ambos algoritmos una similitud de Anderberg (con α = 0.75) y una estrategia de agrupamiento de enlace promedio [15].",
        "Esas decisiones tienen un impacto en el árbol resultante, pero no afectan ni la ejecución global del algoritmo ni su complejidad.",
        "Ahora presentamos el algoritmo distribuido utilizado en nuestro sistema.",
        "Se inicia de la siguiente manera: • se crea un agente TOP que no tiene padre, será la raíz de la taxonomía resultante, • se crea un agente para cada término que se va a posicionar en la taxonomía, todos tienen como padre a TOP.",
        "Una vez que se establece esta estructura básica, el algoritmo se ejecuta hasta que alcanza el equilibrio y luego proporciona la taxonomía resultante.",
        "El proceso de la primera etapa (figura 2) se activa cuando un agente (aquí Ak) tiene más de un hermano (ya que queremos obtener un árbol binario).",
        "Luego envía un mensaje a su padre P indicando a su hermano más diferente (aquí A1).",
        "Entonces P recibe el mismo tipo de mensaje de cada uno de sus hijos.",
        "En lo siguiente, este tipo de mensaje se llamará voto.",
        "A continuación, cuando P ha recibido mensajes de todos sus hijos, comienza el segundo paso (figura 3).",
        "Gracias a los mensajes recibidos que indican las preferencias de sus hijos, P puede determinar tres subgrupos entre sus hijos: el hijo que recibió más votos de sus hermanos, es decir, el hijo que es más diferente del mayor número de sus hermanos.",
        "En caso de empate, uno de los ganadores es elegido al azar (aquí A1), los niños que permitieron la elección del primer grupo, es decir, los agentes que eligieron a su hermano del primer grupo como el más diferente (aquí Ak a An), los niños restantes (aquí A2 a Ak−1).",
        "Entonces P crea un nuevo agente P (teniendo a P como padre) y pide a los agentes del segundo grupo (aquí los agentes Ak a An) que lo elijan como su nuevo padre.",
        "Ak−1 Ak AnA2A1 P P ...... ...... \n\nAk−1 Ak AnA2A1 P P ...... ......",
        "Figura 4: Agrupamiento distribuido: Paso 3 Finalmente, el paso 3 (figura 4) es trivial.",
        "Los niños rechazados por P (aquí el agente A2 a An) tienen en cuenta su mensaje y eligen a P como su nuevo padre.",
        "La jerarquía acaba de crear un nuevo nivel intermedio.",
        "Ten en cuenta que este algoritmo generalmente converge, ya que el número de hermanos de un agente disminuye.",
        "Cuando un agente tiene solamente un hermano restante, su actividad se detiene (aunque sigue procesando los mensajes que llegan de sus hijos).",
        "Sin embargo, en algunos casos podemos llegar a un conflicto circular en el procedimiento de votación cuando, por ejemplo, A vota en contra de B, B en contra de C y C en contra de A.",
        "Con el sistema actual no se puede tomar ninguna decisión.",
        "El procedimiento actual debería mejorarse para abordar esto, probablemente utilizando un método de votación clasificado. 3.1 Evaluación Cuantitativa Ahora, evaluamos las propiedades de nuestro algoritmo distribuido.",
        "Se requiere comenzar con una evaluación cuantitativa, basada en su complejidad, mientras se compara con el algoritmo 1 de la sección anterior.",
        "Su complejidad teórica se calcula para el peor caso, considerando la operación de cálculo de similitud como elemental.",
        "Para el algoritmo distribuido, el peor caso significa que en cada ejecución, solo se puede crear un grupo de dos elementos.",
        "Bajo esas condiciones, para un conjunto de datos dado de n elementos, podemos determinar la cantidad de cálculos de similitud.",
        "Para el algoritmo 1, notamos que l = longitud(L), luego el bucle más interno se ejecuta l - i veces.",
        "Y su cuerpo tiene la única computación de similitud, por lo que su costo es l−i.",
        "El segundo bucle for se ejecuta l veces para i que varía de 1 a l. Entonces su costo es Pl i=1(l − i) que puede simplificarse en l×(l−1) 2.",
        "Finalmente, para cada ejecución del bucle while, l se reduce de n a 1, lo que nos da t1(n) como la cantidad de cálculos de similitud para el algoritmo 1: t1(n) = nX l=1 l × (l − 1) 2 (1) Para el algoritmo distribuido, en un paso dado, cada uno de los l agentes evalúa la similitud con sus l −1 compañeros.",
        "Entonces, cada paso tiene un costo de l × (l − 1).",
        "Entonces, se crean grupos y se realiza otra votación con l disminuido en uno (ya que asumimos el peor caso, solo se forman grupos de tamaño 2 o l −1).",
        "Dado que l es igual a n en la primera ejecución, obtenemos tdist(n) como la cantidad de cálculos de similitud para el algoritmo distribuido: tdist(n) = nX l=1 l × (l − 1) (2) Ambos algoritmos tienen una complejidad O(n3).",
        "Pero en el peor de los casos, el algoritmo distribuido realiza el doble del número de el1288 The Sixth Intl.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) operaciones elementales realizadas por el algoritmo centralizado.",
        "Esta brecha proviene de la toma de decisiones local en cada agente.",
        "Debido a esto, los cálculos de similitud se realizan dos veces para cada par de agentes.",
        "Podríamos concebir que un agente envía el resultado de su cálculo a su par.",
        "Sin embargo, simplemente trasladaría el problema al generar más comunicación en el sistema. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Cantidad de comparaciones Cantidad de términos de entrada 1.",
        "Algoritmo distribuido (en promedio, con mínimo y máximo) 2.",
        "Polinomio logarítmico 3.",
        "En la Figura 5 se muestra el algoritmo centralizado: Resultados experimentales. En un segundo paso, la complejidad promedio del algoritmo ha sido determinada mediante experimentos.",
        "El sistema multiagente ha sido ejecutado con conjuntos de datos de entrada generados aleatoriamente que van desde diez hasta cien términos.",
        "El valor dado es el promedio de las comparaciones realizadas para cien ejecuciones sin interacción del usuario.",
        "Resulta en las gráficas de la figura 5.",
        "El algoritmo es entonces más eficiente en promedio que el algoritmo centralizado, y su complejidad promedio está por debajo del peor caso.",
        "Se puede explicar por la baja probabilidad de que un conjunto de datos obligue al sistema a crear solo grupos mínimos (dos elementos) o máximos (n − 1 elementos) para cada paso de razonamiento.",
        "La curva número 2 representa el polinomio logarítmico que minimiza el error con respecto a la curva número 1.",
        "El término de mayor grado de este polinomio es n2 log(n), por lo tanto, nuestro algoritmo distribuido tiene una complejidad O(n2 log(n)) en promedio.",
        "Finalmente, notemos la reducida variación de las actuaciones promedio con el máximo y el mínimo.",
        "En el peor caso para 100 términos, la variación es de 1,960.75 para un promedio de 40,550.10 (alrededor del 5%), lo que muestra la buena estabilidad del sistema. Aunque los resultados cuantitativos son interesantes, la verdadera ventaja de este enfoque proviene de características más cualitativas que presentaremos en esta sección.",
        "Todos son ventajas obtenidas gracias al uso de un sistema multiagente adaptativo.",
        "La principal ventaja del uso de un sistema multiagente para una tarea de agrupamiento es introducir dinamismo en dicho sistema.",
        "El ontólogo puede hacer modificaciones y la jerarquía se adapta dependiendo de la solicitud.",
        "Es particularmente interesante en un contexto de ingeniería del conocimiento.",
        "De hecho, la jerarquía creada por el sistema está destinada a ser modificada por el ontólogo ya que es el resultado de un cálculo estadístico.",
        "Durante la revisión necesaria de los textos para examinar los contextos de uso de los términos [2], el ontólogo podrá interpretar el contenido real y revisar la propuesta del sistema.",
        "Es extremadamente difícil lograr esto con un enfoque centralizado de caja negra.",
        "En la mayoría de los casos, uno tiene que encontrar qué paso de razonamiento generó el error y modificar manualmente la clase resultante.",
        "Desafortunadamente, en este caso, todos los pasos de razonamiento que ocurrieron después de la creación de la clase modificada se pierden y deben ser recalculados teniendo en cuenta la modificación.",
        "Por eso, un sistema como ASIUM [6] intenta suavizar el problema con una colaboración entre el sistema y el usuario mostrando al ontólogo las clases creadas después de cada paso de razonamiento.",
        "Pero el ontólogo puede cometer un error y darse cuenta de ello demasiado tarde.",
        "Figura 6: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos un ejemplo gracias a algunas capturas de pantalla del prototipo en funcionamiento probado en un corpus relacionado con la medicina.",
        "Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 6 después de la estabilización.",
        "Es evidente que el concepto descrito por el término lesión está mal ubicado.",
        "Las computaciones de similitud lo sitúan más cerca de femme (mujer) y chirurgien (cirujano) que de infección, gastro-enteritis y hepatitis.",
        "Esta posición incorrecta para la lesión se explica por el hecho de que sin la entrada del ontólogo, el razonamiento se basa únicamente en criterios estadísticos.",
        "Figura 7: Árbol de agentes conceptuales después de la modificación del ontólogo. Luego, el ontólogo reemplaza el concepto en la rama derecha, afectando a ConceptAgent:8 como su nuevo padre.",
        "El nombre ConceptAgent:X se asigna automáticamente a un agente conceptual que no está descrito por un término.",
        "El sistema reacciona por sí mismo y perfecciona la jerarquía de agrupación para obtener un árbol binario creando ConceptAgent:11.",
        "El nuevo estado estable es el de la figura 7.",
        "Este acoplamiento sistema-usuario es necesario para construir una ontología, pero no se necesita ningún ajuste particular al principio del algoritmo distribuido ya que cada agente realiza un procesamiento local autónomo y se comunica con su vecindario a través de mensajes.",
        "Además, este algoritmo puede ser distribuido de facto en una red de computadoras.",
        "La comunicación entre agentes se realiza enviando mensajes y cada uno mantiene su autonomía de decisión.",
        "Entonces, una modificación del sistema para hacerlo funcionar en red no requeriría ajustar el algoritmo.",
        "Por el contrario, solo sería necesario reestructurar la capa de comunicación y el proceso de creación de agentes, ya que en nuestra implementación actual no están en red. 4.",
        "EN LA JERARQUÍA DE MÚLTIPLES CRITERIOS En las secciones anteriores, asumimos que la similitud se puede calcular para cualquier par de términos.",
        "Pero, tan pronto como se utilizan datos reales, esta propiedad ya no se verifica.",
        "Algunos términos no tienen ningún valor de similitud con ningún término extraído.",
        "Además, para los nodos hoja a veces es interesante utilizar otros medios para posicionarlos en la jerarquía.",
        "Para esta estructuración de bajo nivel, los ontólogos generalmente se basan en The Sixth Intl.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1289 sus elecciones en heurísticas simples.",
        "Usando esta observación, construimos un nuevo conjunto de reglas, que no se basan en la similitud para respaldar la estructuración de bajo nivel. 4.1 Agregar reglas de cobertura de cabeza En este caso, los agentes pueden actuar con un punto de vista muy local simplemente mirando la relación padre/hijo.",
        "Cada agente puede intentar determinar si su padre es adecuado.",
        "Es posible adivinar esto porque cada agente conceptual está descrito por un conjunto de términos y gracias a la red de términos de Expansión de Cabeza.",
        "En el siguiente TX será el conjunto de términos que describen el concepto del agente X y head(TX) el conjunto de todos los términos que son cabeza de al menos un elemento de TX.",
        "Gracias a esas dos notaciones podemos describir la función de adecuación entre un padre P y un hijo C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Entonces, el mejor padre para C es el agente P que maximiza a(P, C).",
        "Un agente insatisfecho con su padre puede intentar encontrar uno mejor evaluando la idoneidad de los candidatos.",
        "Diseñamos un algoritmo complementario para dirigir esta búsqueda: cuando un agente C no está satisfecho con su padre P, evalúa a(Bi, C) con todos sus hermanos (notados Bi); luego se elige como nuevo padre aquel que maximice a(Bi, C).",
        "Figura 8: Árbol de agentes conceptuales después de la estabilización autónoma del sistema sin la regla de cobertura de cabeza. Ahora ilustramos este comportamiento de regla con un ejemplo.",
        "La Figura 8 muestra el estado del sistema después de la estabilización en los datos de prueba.",
        "Podemos notar que la hepatitis viral todavía está vinculada a la raíz taxonómica.",
        "Se debe al hecho de que no hay valor de similitud entre el término hepatitis viral y ninguno de los términos de los otros agentes conceptuales.",
        "Figura 9: Árbol de agentes conceptuales después de la activación de la regla de cobertura de la cabeza. Tras activar la regla de cobertura de la cabeza y permitir que el sistema se estabilice nuevamente, obtenemos la figura 9.",
        "Podemos ver que la hepatitis viral se deslizó a través de la rama que llevaba a la hepatitis y la eligió como su nueva progenitora.",
        "Es una elección por defecto sensata, ya que la hepatitis viral es un término más específico que la hepatitis.",
        "Esta regla tiende a hacer que los agentes descritos por un conjunto de términos se conviertan en hojas del árbol conceptual.",
        "Aborda nuestra preocupación por mejorar la estructuración de bajo nivel de nuestra taxonomía.",
        "Pero obviamente nuestros agentes carecen de un método para retroceder en caso de modificaciones en la taxonomía que los ubicarían en la rama incorrecta.",
        "Ese es uno de los puntos en los que nuestro sistema aún debe ser mejorado al agregar otro conjunto de reglas. 4.2 Sobre el uso de varios criterios En las secciones y ejemplos anteriores, solo utilizamos un algoritmo a la vez.",
        "El algoritmo de agrupamiento distribuido tiende a introducir nuevas capas en la taxonomía, mientras que el algoritmo de cobertura de cabeza tiende a empujar algunos de los agentes hacia las hojas de la taxonomía.",
        "Obviamente plantea la pregunta sobre cómo lidiar con múltiples criterios en la construcción de nuestra taxonomía, y cómo los agentes determinan sus prioridades en un momento dado.",
        "La solución que elegimos proviene de la búsqueda de minimizar la falta de cooperación dentro del sistema de acuerdo con el método ADELFE.",
        "Cada agente calcula tres grados de no cooperación y elige su prioridad actual dependiendo de cuál grado sea el más alto.",
        "Para un agente A dado que tiene un padre P, un conjunto de hermanos Bi y que recibió un conjunto de mensajes Mk con prioridad pk, los tres grados de no cooperación son: • μH (A) = 1 − a(P, A), es el grado de no cooperación de cobertura de cabeza, determinado por la cobertura de cabeza del padre, • μB(A) = max(1 − similitud(A, Bi)), es el grado de no cooperación de hermandad, determinado por el peor hermano de A en cuanto a similitudes, • μM (A) = max(pk), es el grado de no cooperación de mensaje, determinado por el mensaje más urgente recibido.",
        "Entonces, el grado de no cooperación μ(A) del agente A es: μ(A) = max(μH (A), μB(A), μM (A)) (4) Luego, tenemos tres casos que determinan qué tipo de acción elegirá A: • si μ(A) = μH (A) entonces A utilizará el algoritmo de cobertura de cabeza que detallamos en la subsección anterior • si μ(A) = μB(A) entonces A utilizará el algoritmo de agrupamiento distribuido (ver sección 3) • si μ(A) = μM (A) entonces A procesará Mk inmediatamente para ayudar a su remitente Estos tres casos resumen las actividades actuales de nuestros agentes: tienen que encontrar el mejor padre para ellos (μ(A) = μH (A)), mejorar la estructuración a través del agrupamiento (μ(A) = μB(A)) y procesar otros mensajes de agentes (μ(A) = μM (A)) para ayudarlos a cumplir sus propios objetivos. 4.3 Complejidad Experimental Revisitada Evaluamos la complejidad experimental de todo el sistema multiagente cuando todas las reglas están activadas.",
        "En este caso, la métrica utilizada es el número de mensajes intercambiados en el sistema.",
        "Una vez más, el sistema ha sido ejecutado con conjuntos de datos de entrada que van desde diez hasta cien términos.",
        "El valor dado es el promedio del número de mensajes enviados en el sistema en su totalidad durante cien ejecuciones sin interacción del usuario.",
        "Resulta en las gráficas de la figura 10.",
        "La curva número 1 representa el promedio del valor obtenido.",
        "La curva número 2 representa el promedio del valor obtenido cuando solo se activa el algoritmo de agrupamiento distribuido, no el conjunto completo de reglas.",
        "La curva número 3 representa el polinomio que minimiza el error con la curva número 1.",
        "El término de mayor grado de este polinomio es en n3, entonces nuestro sistema multiagente tiene una complejidad O(n3).",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Cantidad de mensajes Cantidad de términos de entrada 1.",
        "Dinamo, todas las reglas (en promedio, con mínimo y máximo) 2.",
        "Agrupamiento distribuido solo (en promedio) 2.",
        "Figura 10: Resultados experimentales en promedio de un polinomio cúbico.",
        "Además, notemos la variación muy pequeña de las actuaciones promedio con el máximo y el mínimo.",
        "En el peor caso para 100 términos, la variación es de 126.73 para un promedio de 20,737.03 (alrededor del 0.6%), lo que demuestra la excelente estabilidad del sistema.",
        "Finalmente, las reglas adicionales de cobertura de cabeza son una verdadera mejora sobre el algoritmo distribuido por sí solo.",
        "Introducen más restricciones y se alcanza el punto de estabilidad con menos interacciones y toma de decisiones por parte de los agentes.",
        "Significa que se intercambian menos mensajes en el sistema al obtener un árbol de mayor calidad para el ontólogo. 5.",
        "DISCUSIÓN Y PERSPECTIVAS 5.1 Limitación actual de nuestro enfoque La limitación más importante de nuestro algoritmo actual es que el resultado depende del orden en que se agregan los datos.",
        "Cuando el sistema funciona por sí solo en un conjunto de datos fijo proporcionado durante la inicialización, el resultado final es equivalente a lo que podríamos obtener con un algoritmo centralizado.",
        "Por el contrario, añadir un nuevo elemento después de una primera estabilización tiene un impacto en el resultado final.",
        "Figura 11: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos otro ejemplo del sistema en funcionamiento.",
        "Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 11 después de la estabilización.",
        "Figura 12: Árbol de agentes conceptuales después de tener en cuenta la hepatitis. Luego, el ontólogo interactúa con el sistema y agrega un nuevo concepto descrito por el término hepatitis y vinculado a la raíz.",
        "El sistema reacciona y se estabiliza, luego obtenemos la figura 12 como resultado. La hepatitis se encuentra en la rama derecha, pero no hemos obtenido la misma organización que la figura 6 del ejemplo anterior.",
        "Necesitamos mejorar nuestro algoritmo distribuido para permitir que un concepto se mueva a lo largo de una rama.",
        "Actualmente estamos trabajando en las reglas requeridas, pero la comparación con el algoritmo centralizado se volverá muy difícil.",
        "En particular, ya que tendrán en cuenta criterios ignorados por el algoritmo centralizado. 5.2 Poda para la construcción de ontologías En la sección 3, presentamos el algoritmo de agrupamiento distribuido utilizado en el sistema Dynamo.",
        "Dado que este trabajo se basó inicialmente en este algoritmo, introdujo un claro sesgo hacia los árboles binarios como resultado.",
        "Pero debemos tener en cuenta que estamos tratando de obtener taxonomías que sean más refinadas y concisas.",
        "Aunque la regla de cobertura de la cabeza es una mejora porque se basa en cómo generalmente trabajan los ontólogos, solo aborda la estructuración a un nivel bajo y no a los niveles intermedios del árbol.",
        "Al observar la figura 7, es evidente que se podría realizar una poda en la taxonomía.",
        "En particular, dado que la lesión se movió, el ConceptAgent:9 podría ser eliminado, ya no es necesario.",
        "Además, la rama que comienza con ConceptAgent:8 respeta claramente la restricción de formar un árbol binario, pero sería más útil para el usuario en una forma más compacta y significativa.",
        "En este caso, ConceptAgent:10 y ConceptAgent:11 probablemente podrían fusionarse.",
        "Actualmente, nuestro sistema cuenta con las reglas necesarias para crear niveles intermedios en la taxonomía, o para que los conceptos se desplacen hacia la hoja.",
        "Como señalamos, no es suficiente, por lo que se necesitan nuevas reglas para permitir eliminar nodos del árbol o moverlos hacia la raíz.",
        "La mayor parte del trabajo necesario para desarrollar esas reglas consiste en encontrar la información estadística relevante que respaldará al ontólogo.",
        "CONCLUSIÓN Después de ser presentada como una solución prometedora, garantizar la calidad del modelo y su riqueza terminológica, la construcción de ontologías a partir del análisis de corpus textual es difícil y costosa.",
        "Requiere supervisión del analista y tener en cuenta el objetivo de la ontología.",
        "El uso de herramientas de procesamiento de lenguaje natural facilita la localización del conocimiento en textos a través del uso del lenguaje.",
        "Dicho esto, esas herramientas producen una gran cantidad de datos léxicos o gramaticales que no son triviales de examinar para definir elementos conceptuales.",
        "Nuestra contribución radica en este paso del proceso de modelado a partir de textos, antes de intentar normalizar o formalizar el resultado.",
        "Propusimos un enfoque basado en un sistema multiagente adaptativo para proporcionar al ontólogo una primera estructura taxonómica de conceptos.",
        "Nuestro sistema hace uso de una red terminológica resultante de un análisis realizado por Syntex.",
        "El estado actual de nuestro software permite producir estructuras simples, proponérselas al ontólogo y hacerlas evolucionar dependiendo de las modificaciones que él realice.",
        "Las actuaciones del sistema son interesantes y algunos aspectos son incluso comparables a su contraparte centralizada.",
        "Sus fortalezas son principalmente cualitativas ya que permite interacciones de usuario más sutiles y una adaptación progresiva a nueva información basada en el lenguaje.",
        "Desde el punto de vista de la construcción de la ontología, este trabajo es un primer paso que muestra la relevancia de nuestro enfoque.",
        "Debe continuar, tanto para garantizar una mejor robustez durante la clasificación, como para obtener estructuras semánticas más ricas que simples árboles.",
        "De estas mejoras, nos estamos enfocando principalmente en la poda para obtener mejores taxonomías.",
        "Actualmente estamos trabajando en el criterio para activar las acciones complementarias de los cambios de estructura aplicados por nuestro algoritmo de agrupamiento.",
        "En otras palabras, este algoritmo se introduce en el Sexto Congreso Internacional.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1291 niveles intermedios, y necesitamos poder eliminarlos si es necesario, para alcanzar un equilibrio dinámico.",
        "También desde el punto de vista de la ingeniería multiagente, su uso en un contexto de ontología dinámica ha demostrado su relevancia.",
        "Estas ontologías dinámicas pueden ser vistas como una resolución de problemas complejos, en tal caso la autoorganización a través de la cooperación ha sido una solución eficiente.",
        "Y, en general, es probable que sea interesante para otras tareas relacionadas con el diseño, incluso si nos estamos enfocando únicamente en la ingeniería del conocimiento en este artículo.",
        "Por supuesto, nuestro sistema aún requiere más trabajo de evaluación y validación para determinar con precisión las ventajas y desventajas de este enfoque.",
        "Estamos planeando trabajar en ese tipo de comparación en un futuro cercano. 7.",
        "REFERENCIAS [1] H. Assadi.",
        "Construcción de una ontología regional a partir de texto y su uso dentro de un sistema documental.",
        "Actas de la Conferencia Internacional sobre Ontología Formal y Sistemas de Información - FOIS98, páginas 236-249, 1998. [2] N. Aussenac-Gilles y D. Sörgel.",
        "Análisis de texto para ingeniería de ontologías y terminología.",
        "Revista de Ontología Aplicada, 2005. [3] J. Bao y V. Honavar.",
        "Construcción colaborativa de ontologías con wiki@nt.",
        "Actas del Taller de Evaluación de Herramientas Basadas en Ontologías (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes y G. Picard.",
        "Metodologías Orientadas a Agentes, capítulo 7.",
        "Ingeniería de Sistemas Multiagente Autoadaptativos: la Metodología ADELFE, páginas 172-202.",
        "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna y Y. Wilks.",
        "Antecedentes y conocimiento previo en la construcción dinámica de ontologías.",
        "Taller de la Web Semántica, SIGIR03, agosto de 2003. [6] D. Faure y C. Nedellec.",
        "Un método de agrupamiento conceptual basado en corpus para marcos verbales y adquisición de ontologías.",
        "Taller LREC sobre la adaptación de recursos léxicos y corpus a sublenguajes y aplicaciones, 1998. [7] F. Gandon.",
        "Ingeniería de Ontologías: una Encuesta y un Retorno de Experiencia.",
        "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes y P. Glize.",
        "Diseño Vivo para Sistemas Computacionales Abiertos. 12º Talleres Internacionales de la IEEE sobre Tecnologías Habilitadoras, Infraestructura para Empresas Colaborativas, páginas 389-394, junio de 2003. [9] M.-P. Gleizes, V. Camps y P. Glize.",
        "Una teoría de computación emergente basada en la autoorganización cooperativa para sistemas artificiales adaptativos.",
        "Cuarto Congreso Europeo de Ciencias de los Sistemas, septiembre de 1999. [10] J. Heflin y J. Hendler.",
        "Ontologías dinámicas en la web.",
        "Conferencia de la Asociación Americana de Inteligencia Artificial, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault y M.-C. Jaulent.",
        "Extracción de terminología del texto para construir una ontología en cuidados intensivos quirúrgicos.",
        "Actas del simposio anual de la AMIA 2002, 2002. [12] K. Lister, L. Sterling y K. Taveter.",
        "Reconciliando diferencias ontológicas mediante agentes asistentes.",
        "AAMAS06, mayo de 2006. [13] A. Maedche.",
        "Aprendizaje de ontologías para la Web Semántica.",
        "Editorial Kluwer Academic, 2002. [14] A. Maedche y S. Staab.",
        "Extracción de ontologías a partir de texto.",
        "EKAW 2000, páginas 189-202, 2000. [15] C. D. Manning y H. Schütze.",
        "Fundamentos del Procesamiento del Lenguaje Natural Estadístico.",
        "El MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding y S. Brueckner.",
        "Clustering jerárquico descentralizado dinámico en cualquier momento. 29ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, agosto de 2006. 1292 El Sexto Internacional.",
        "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07)"
    ],
    "error_count": 4,
    "keys": {
        "ontology": {
            "translated_key": "ontología",
            "is_in_text": true,
            "original_annotated_sentences": [
                "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of <br>ontology</br> Learning.",
                "Our system named Dynamo is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
                "In this paper we present a distributed hierarchical clustering algorithm, core of our approach.",
                "It is evaluated and compared to a more conventional centralized algorithm.",
                "We also present how it has been improved using a multi-criteria approach.",
                "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete <br>ontology</br> building solution.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval.",
                "But building an <br>ontology</br> manually is a slow, tedious, costly, complex and time consuming process.",
                "Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date.",
                "It would mean creating dynamic ontologies [10] and it justifies the emergence of <br>ontology</br> learning techniques [14] [13].",
                "Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an <br>ontology</br> from a domain specific set of texts.",
                "Our aim is not to build an exhaustive, general hierarchical <br>ontology</br> but a domain specific one.",
                "We propose a semi-automated tool since an external resource is required: the ontologist.",
                "An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies.",
                "In the multi-agent field, ontologies generally enable agents to understand each other [12].",
                "Theyre sometimes used to ease the <br>ontology</br> building process, in particular for collaborative contexts [3], but they rarely represent the <br>ontology</br> itself [16].",
                "Most works interested in the construction of ontologies [7] propose the refinement of ontologies.",
                "This process consists in using an existing <br>ontology</br> and building a new one from it.",
                "This approach is different from our approach because Dynamo starts from scratch.",
                "Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5].",
                "In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist.",
                "This paper first presents, in section 2, the big picture of the Dynamo system.",
                "In particular the motives that led to its creation and its general architecture.",
                "Then, in section 3 we discuss the distributed clustering algorithm used in Dynamo and compare it to a more classic centralized approach.",
                "Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering.",
                "And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2.",
                "DYNAMO OVERVIEW 2.1 <br>ontology</br> as a Multi-Agent System Dynamo aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently.",
                "The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system.",
                "This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network.",
                "Dynamo takes a syntactical and terminological analysis of texts as input.",
                "It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts.",
                "As output, Dynamo provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network.",
                "An <br>ontology</br> can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations.",
                "Thus, our approach considers an <br>ontology</br> as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships.",
                "The <br>ontology</br> modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships.",
                "In this way, a dynamic <br>ontology</br> is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it.",
                "To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9].",
                "We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system.",
                "It justifies how we designed some of the rules used by our agents in order to maximize the cooperation degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
                "It addresses the needs of Knowledge Engineering in the context of dynamic <br>ontology</br> management and maintenance when the <br>ontology</br> is linked to a document collection.",
                "The Dynamo system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ? ?",
                "Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for <br>ontology</br> building tasks [11].",
                "We mainly selected it because of its robustness and the great amount of information extracted.",
                "In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1].",
                "In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term.",
                "For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term.",
                "Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term.",
                "With Dynamo, the term network obtained as the output of the extractor is stored in a database.",
                "For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1].",
                "Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15].",
                "In the case of terms we are generally dealing with their usage contexts.",
                "With Syntex, those contexts are identified by terms and characterized by some syntactic relations.",
                "The Dynamo multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4.",
                "It is designed to be both the system producing the resulting structure and the structure itself.",
                "It means that each agent represent a class in the taxonomy.",
                "Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3.",
                "DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in Dynamo.",
                "For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system).",
                "Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined.",
                "Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements.",
                "This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done.",
                "Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones.",
                "Our distributed algorithm is designed relying on those two facts.",
                "It is executed concurrently in each of the agents of the system.",
                "Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15].",
                "Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity.",
                "We now present the distributed algorithm used in our system.",
                "It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent.",
                "Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy.",
                "Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree).",
                "Then it sends a message to its parent P indicating its most dissimilar brother (here A1).",
                "Then P receives the same kind of message from each of its children.",
                "In the following, this kind of message will be called a vote.",
                "Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3).",
                "Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers.",
                "In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1).",
                "Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent.",
                "Ak−1 Ak AnA2A1 P P ...... ......",
                "Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial.",
                "The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent.",
                "The hierarchy just created a new intermediate level.",
                "Note that this algorithm generally converges, since the number of brothers of an agent drops.",
                "When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children).",
                "However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A.",
                "With the current system no decision can be taken.",
                "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 Quantitative Evaluation Now, we evaluate the properties of our distributed algorithm.",
                "It requires to begin with a quantitative evaluation, based on its complexity, while comparing it with the algorithm 1 from the previous section.",
                "Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary.",
                "For the distributed algorithm, the worst case means that for each run, only a two-item group can be created.",
                "Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations.",
                "For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times.",
                "And its body has the only similarity computation, so its cost is l−i.",
                "The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 .",
                "Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers.",
                "So each steps has a l × (l − 1) cost.",
                "Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built).",
                "Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity.",
                "But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm.",
                "This gap comes from the local decision making in each agent.",
                "Because of this, the similarity computations are done twice for each agent pair.",
                "We could conceive that an agent sends its computation result to its peer.",
                "But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1.",
                "Distributed algorithm (on average, with min and max) 2.",
                "Logarithmic polynomial 3.",
                "Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments.",
                "The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms.",
                "The given value is the average of comparisons made for one hundred of runs without any user interaction.",
                "It results in the plots of figure 5.",
                "The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case.",
                "It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning.",
                "Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average.",
                "Finally, lets note the reduced variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section.",
                "All are advantages obtained thanks to the use of an adaptive multi-agent system.",
                "The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system.",
                "The ontologist can make modifications and the hierarchy adapts depending on the request.",
                "It is particularly interesting in a knowledge engineering context.",
                "Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation.",
                "During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal.",
                "It is extremely difficult to realize this with a centralized black-box approach.",
                "In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class.",
                "Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account.",
                "That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning.",
                "But, the ontologist can make a mistake, and become aware of it too late.",
                "Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus.",
                "By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization.",
                "It is clear that the concept described by the term lésion (lesion) is misplaced.",
                "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (hepatitis).",
                "This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria.",
                "Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent.",
                "The name ConceptAgent:X is automatically given to a concept agent that is not described by a term.",
                "The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11.",
                "The new stable state if the one of figure 7.",
                "This system-user coupling is necessary to build an <br>ontology</br>, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages.",
                "Moreover, this algorithm can de facto be distributed on a computer network.",
                "The communication between agents is then done by sending messages and each one keeps its decision autonomy.",
                "Then, a system modification to make it run networked would not require to adjust the algorithm.",
                "On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4.",
                "MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair.",
                "But, as soon as one uses real data this property is not verified anymore.",
                "Some terms do not have any similarity value with any extracted term.",
                "Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy.",
                "For this low level structuring, ontologists generally base The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics.",
                "Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation.",
                "Each agent can try to determine if its parent is adequate.",
                "It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network.",
                "In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX .",
                "Thanks to those two notations we can describe the parent adequacy function a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C).",
                "An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates.",
                "We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent.",
                "Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example.",
                "Figure 8 shows the state of the system after stabilization on test data.",
                "We can notice that hépatite viral (viral hepatitis) is still linked to the taxonomy root.",
                "It is caused by the fact that there is no similarity value between the viral hepatitis term and any of the term of the other concept agents.",
                "Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9.",
                "We can see that viral hepatitis slipped through the branch leading to hepatitis and chose it as its new parent.",
                "It is a sensible default choice since viral hepatitis is a more specific term than hepatitis.",
                "This rule tends to push agents described by a set of term to become leafs of the concept tree.",
                "It addresses our concern to improve the low level structuring of our taxonomy.",
                "But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch.",
                "That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time.",
                "The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy.",
                "It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time.",
                "The solution we chose came from the search for minimizing non cooperation within the system in accordance with the ADELFE method.",
                "Each agent computes three non cooperation degrees and chooses its current priority depending on which degree is the highest.",
                "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non cooperation degrees are: • μH (A) = 1 − a(P, A), is the head coverage non cooperation degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
                "Then, the non cooperation degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated.",
                "In this case, the metric used is the number of messages exchanged in the system.",
                "Once again the system has been executed with input data sets ranging from ten to one hundred terms.",
                "The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction.",
                "It results in the plots of figure 10.",
                "Curve number 1 represents the average of the value obtained.",
                "Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set.",
                "Curve number 3 represents the polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1.",
                "Dynamo, all rules (on average, with min and max) 2.",
                "Distributed clustering only (on average) 2.",
                "Cubic polynomial Figure 10: Experimental results on average.",
                "Moreover, lets note the very small variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system.",
                "Finally the extra head coverage rules are a real improvement on the distributed algorithm alone.",
                "They introduce more constraints and stability point is reached with less interactions and decision making by the agents.",
                "It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5.",
                "DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added.",
                "When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm.",
                "On the contrary, adding a new item after a first stabilization has an impact on the final result.",
                "Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system.",
                "By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization.",
                "Figure 12: Concept agent tree after taking in account hepatitis Then, the ontologist interacts with the system and adds a new concept described by the term hepatitis and linked to the root.",
                "The system reacts and stabilizes, we then obtain figure 12 as a result. hepatitis is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example.",
                "We need to improve our distributed algorithm to allow a concept to move along a branch.",
                "We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult.",
                "In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the Dynamo system.",
                "Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result.",
                "But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise.",
                "Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree.",
                "By looking at figure 7, it is clear that some pruning could be done in the taxonomy.",
                "In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore.",
                "Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form.",
                "In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged.",
                "Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf.",
                "As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root.",
                "Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6.",
                "CONCLUSION After being presented as a promising solution, ensuring model quality and their terminological richness, <br>ontology</br> building from textual corpus analysis is difficult and costly.",
                "It requires analyst supervising and taking in account the <br>ontology</br> aim.",
                "Using natural languages processing tools ease the knowledge localization in texts through language uses.",
                "That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements.",
                "Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result.",
                "We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts.",
                "Our system makes use of a terminological network resulting from an analysis made by Syntex.",
                "The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made.",
                "Performances of the system are interesting and some aspects are even comparable to their centralized counterpart.",
                "Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information.",
                "From the point of view of <br>ontology</br> building, this work is a first step showing the relevance of our approach.",
                "It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees.",
                "From this improvements we are mostly focusing on the pruning to obtain better taxonomies.",
                "Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm.",
                "In other words this algorithm introduces inThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a dynamic equilibrium.",
                "Also from the multi-agent engineering point of view, their use in a dynamic <br>ontology</br> context has shown its relevance.",
                "This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through cooperation has been an efficient solution.",
                "And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper.",
                "Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach.",
                "Were planning to work on such benchmarking in the near future. 7.",
                "REFERENCES [1] H. Assadi.",
                "Construction of a regional <br>ontology</br> from text and its use within a documentary system.",
                "Proceedings of the International Conference on Formal <br>ontology</br> and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel.",
                "Text analysis for <br>ontology</br> and terminology engineering.",
                "Journal of Applied <br>ontology</br>, 2005. [3] J. Bao and V. Honavar.",
                "Collaborative <br>ontology</br> building with wiki@nt.",
                "Proceedings of the Workshop on Evaluation of <br>ontology</br>-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard.",
                "Agent-Oriented Methodologies, chapter 7.",
                "Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202.",
                "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks.",
                "Background and foreground knowledge in dynamic <br>ontology</br> construction.",
                "Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec.",
                "A corpus-based conceptual clustering method for verb frames and <br>ontology</br> acquisition.",
                "LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon.",
                "<br>ontology</br> Engineering: a Survey and a Return on Experience.",
                "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize.",
                "Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize.",
                "A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems.",
                "Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler.",
                "Dynamic ontologies on the web.",
                "American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent.",
                "Terminology extraction from text to build an <br>ontology</br> in surgical intensive care.",
                "Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter.",
                "Reconciling Ontological Differences by Assistant Agents.",
                "AAMAS06, May 2006. [13] A. Maedche.",
                "<br>ontology</br> learning for the Semantic Web.",
                "Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab.",
                "Mining Ontologies from Text.",
                "EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze.",
                "Foundations of Statistical Natural Language Processing.",
                "The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner.",
                "Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)"
            ],
            "original_annotated_samples": [
                "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of <br>ontology</br> Learning.",
                "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete <br>ontology</br> building solution.",
                "But building an <br>ontology</br> manually is a slow, tedious, costly, complex and time consuming process.",
                "It would mean creating dynamic ontologies [10] and it justifies the emergence of <br>ontology</br> learning techniques [14] [13].",
                "Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an <br>ontology</br> from a domain specific set of texts."
            ],
            "translated_annotated_samples": [
                "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de <br>ontología</br>s a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías.",
                "Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de <br>ontología</br>s.",
                "Pero construir una <br>ontología</br> manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo.",
                "Significaría crear <br>ontología</br>s dinámicas [10] y justifica la aparición de técnicas de aprendizaje de <br>ontología</br>s [14] [13].",
                "Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una <br>ontología</br> a partir de un conjunto específico de textos de un dominio."
            ],
            "translated_text": "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de <br>ontología</br>s a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías. Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una arquitectura multiagente adaptativa. En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque. Se evalúa y se compara con un algoritmo centralizado más convencional. También presentamos cómo ha sido mejorado utilizando un enfoque de múltiples criterios. Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de <br>ontología</br>s. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Experimentación 1. INTRODUCCIÓN En la actualidad, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de información. Pero construir una <br>ontología</br> manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo. Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados. Significaría crear <br>ontología</br>s dinámicas [10] y justifica la aparición de técnicas de aprendizaje de <br>ontología</br>s [14] [13]. Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una <br>ontología</br> a partir de un conjunto específico de textos de un dominio. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "cooperation": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of Ontology Learning.",
                "Our system named Dynamo is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
                "In this paper we present a distributed hierarchical clustering algorithm, core of our approach.",
                "It is evaluated and compared to a more conventional centralized algorithm.",
                "We also present how it has been improved using a multi-criteria approach.",
                "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete ontology building solution.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval.",
                "But building an ontology manually is a slow, tedious, costly, complex and time consuming process.",
                "Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date.",
                "It would mean creating dynamic ontologies [10] and it justifies the emergence of ontology learning techniques [14] [13].",
                "Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts.",
                "Our aim is not to build an exhaustive, general hierarchical ontology but a domain specific one.",
                "We propose a semi-automated tool since an external resource is required: the ontologist.",
                "An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies.",
                "In the multi-agent field, ontologies generally enable agents to understand each other [12].",
                "Theyre sometimes used to ease the ontology building process, in particular for collaborative contexts [3], but they rarely represent the ontology itself [16].",
                "Most works interested in the construction of ontologies [7] propose the refinement of ontologies.",
                "This process consists in using an existing ontology and building a new one from it.",
                "This approach is different from our approach because Dynamo starts from scratch.",
                "Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5].",
                "In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist.",
                "This paper first presents, in section 2, the big picture of the Dynamo system.",
                "In particular the motives that led to its creation and its general architecture.",
                "Then, in section 3 we discuss the distributed clustering algorithm used in Dynamo and compare it to a more classic centralized approach.",
                "Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering.",
                "And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2.",
                "DYNAMO OVERVIEW 2.1 Ontology as a Multi-Agent System Dynamo aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently.",
                "The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system.",
                "This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network.",
                "Dynamo takes a syntactical and terminological analysis of texts as input.",
                "It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts.",
                "As output, Dynamo provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network.",
                "An ontology can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations.",
                "Thus, our approach considers an ontology as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships.",
                "The ontology modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships.",
                "In this way, a dynamic ontology is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it.",
                "To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9].",
                "We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system.",
                "It justifies how we designed some of the rules used by our agents in order to maximize the <br>cooperation</br> degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
                "It addresses the needs of Knowledge Engineering in the context of dynamic ontology management and maintenance when the ontology is linked to a document collection.",
                "The Dynamo system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ? ?",
                "Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for ontology building tasks [11].",
                "We mainly selected it because of its robustness and the great amount of information extracted.",
                "In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1].",
                "In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term.",
                "For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term.",
                "Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term.",
                "With Dynamo, the term network obtained as the output of the extractor is stored in a database.",
                "For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1].",
                "Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15].",
                "In the case of terms we are generally dealing with their usage contexts.",
                "With Syntex, those contexts are identified by terms and characterized by some syntactic relations.",
                "The Dynamo multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4.",
                "It is designed to be both the system producing the resulting structure and the structure itself.",
                "It means that each agent represent a class in the taxonomy.",
                "Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3.",
                "DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in Dynamo.",
                "For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system).",
                "Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined.",
                "Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements.",
                "This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done.",
                "Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones.",
                "Our distributed algorithm is designed relying on those two facts.",
                "It is executed concurrently in each of the agents of the system.",
                "Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15].",
                "Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity.",
                "We now present the distributed algorithm used in our system.",
                "It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent.",
                "Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy.",
                "Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree).",
                "Then it sends a message to its parent P indicating its most dissimilar brother (here A1).",
                "Then P receives the same kind of message from each of its children.",
                "In the following, this kind of message will be called a vote.",
                "Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3).",
                "Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers.",
                "In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1).",
                "Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent.",
                "Ak−1 Ak AnA2A1 P P ...... ......",
                "Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial.",
                "The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent.",
                "The hierarchy just created a new intermediate level.",
                "Note that this algorithm generally converges, since the number of brothers of an agent drops.",
                "When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children).",
                "However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A.",
                "With the current system no decision can be taken.",
                "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 Quantitative Evaluation Now, we evaluate the properties of our distributed algorithm.",
                "It requires to begin with a quantitative evaluation, based on its complexity, while comparing it with the algorithm 1 from the previous section.",
                "Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary.",
                "For the distributed algorithm, the worst case means that for each run, only a two-item group can be created.",
                "Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations.",
                "For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times.",
                "And its body has the only similarity computation, so its cost is l−i.",
                "The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 .",
                "Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers.",
                "So each steps has a l × (l − 1) cost.",
                "Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built).",
                "Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity.",
                "But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm.",
                "This gap comes from the local decision making in each agent.",
                "Because of this, the similarity computations are done twice for each agent pair.",
                "We could conceive that an agent sends its computation result to its peer.",
                "But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1.",
                "Distributed algorithm (on average, with min and max) 2.",
                "Logarithmic polynomial 3.",
                "Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments.",
                "The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms.",
                "The given value is the average of comparisons made for one hundred of runs without any user interaction.",
                "It results in the plots of figure 5.",
                "The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case.",
                "It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning.",
                "Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average.",
                "Finally, lets note the reduced variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section.",
                "All are advantages obtained thanks to the use of an adaptive multi-agent system.",
                "The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system.",
                "The ontologist can make modifications and the hierarchy adapts depending on the request.",
                "It is particularly interesting in a knowledge engineering context.",
                "Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation.",
                "During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal.",
                "It is extremely difficult to realize this with a centralized black-box approach.",
                "In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class.",
                "Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account.",
                "That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning.",
                "But, the ontologist can make a mistake, and become aware of it too late.",
                "Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus.",
                "By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization.",
                "It is clear that the concept described by the term lésion (lesion) is misplaced.",
                "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (hepatitis).",
                "This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria.",
                "Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent.",
                "The name ConceptAgent:X is automatically given to a concept agent that is not described by a term.",
                "The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11.",
                "The new stable state if the one of figure 7.",
                "This system-user coupling is necessary to build an ontology, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages.",
                "Moreover, this algorithm can de facto be distributed on a computer network.",
                "The communication between agents is then done by sending messages and each one keeps its decision autonomy.",
                "Then, a system modification to make it run networked would not require to adjust the algorithm.",
                "On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4.",
                "MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair.",
                "But, as soon as one uses real data this property is not verified anymore.",
                "Some terms do not have any similarity value with any extracted term.",
                "Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy.",
                "For this low level structuring, ontologists generally base The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics.",
                "Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation.",
                "Each agent can try to determine if its parent is adequate.",
                "It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network.",
                "In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX .",
                "Thanks to those two notations we can describe the parent adequacy function a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C).",
                "An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates.",
                "We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent.",
                "Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example.",
                "Figure 8 shows the state of the system after stabilization on test data.",
                "We can notice that hépatite viral (viral hepatitis) is still linked to the taxonomy root.",
                "It is caused by the fact that there is no similarity value between the viral hepatitis term and any of the term of the other concept agents.",
                "Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9.",
                "We can see that viral hepatitis slipped through the branch leading to hepatitis and chose it as its new parent.",
                "It is a sensible default choice since viral hepatitis is a more specific term than hepatitis.",
                "This rule tends to push agents described by a set of term to become leafs of the concept tree.",
                "It addresses our concern to improve the low level structuring of our taxonomy.",
                "But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch.",
                "That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time.",
                "The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy.",
                "It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time.",
                "The solution we chose came from the search for minimizing non <br>cooperation</br> within the system in accordance with the ADELFE method.",
                "Each agent computes three non <br>cooperation</br> degrees and chooses its current priority depending on which degree is the highest.",
                "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non <br>cooperation</br> degrees are: • μH (A) = 1 − a(P, A), is the head coverage non <br>cooperation</br> degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
                "Then, the non <br>cooperation</br> degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated.",
                "In this case, the metric used is the number of messages exchanged in the system.",
                "Once again the system has been executed with input data sets ranging from ten to one hundred terms.",
                "The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction.",
                "It results in the plots of figure 10.",
                "Curve number 1 represents the average of the value obtained.",
                "Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set.",
                "Curve number 3 represents the polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1.",
                "Dynamo, all rules (on average, with min and max) 2.",
                "Distributed clustering only (on average) 2.",
                "Cubic polynomial Figure 10: Experimental results on average.",
                "Moreover, lets note the very small variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system.",
                "Finally the extra head coverage rules are a real improvement on the distributed algorithm alone.",
                "They introduce more constraints and stability point is reached with less interactions and decision making by the agents.",
                "It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5.",
                "DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added.",
                "When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm.",
                "On the contrary, adding a new item after a first stabilization has an impact on the final result.",
                "Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system.",
                "By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization.",
                "Figure 12: Concept agent tree after taking in account hepatitis Then, the ontologist interacts with the system and adds a new concept described by the term hepatitis and linked to the root.",
                "The system reacts and stabilizes, we then obtain figure 12 as a result. hepatitis is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example.",
                "We need to improve our distributed algorithm to allow a concept to move along a branch.",
                "We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult.",
                "In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the Dynamo system.",
                "Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result.",
                "But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise.",
                "Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree.",
                "By looking at figure 7, it is clear that some pruning could be done in the taxonomy.",
                "In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore.",
                "Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form.",
                "In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged.",
                "Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf.",
                "As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root.",
                "Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6.",
                "CONCLUSION After being presented as a promising solution, ensuring model quality and their terminological richness, ontology building from textual corpus analysis is difficult and costly.",
                "It requires analyst supervising and taking in account the ontology aim.",
                "Using natural languages processing tools ease the knowledge localization in texts through language uses.",
                "That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements.",
                "Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result.",
                "We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts.",
                "Our system makes use of a terminological network resulting from an analysis made by Syntex.",
                "The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made.",
                "Performances of the system are interesting and some aspects are even comparable to their centralized counterpart.",
                "Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information.",
                "From the point of view of ontology building, this work is a first step showing the relevance of our approach.",
                "It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees.",
                "From this improvements we are mostly focusing on the pruning to obtain better taxonomies.",
                "Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm.",
                "In other words this algorithm introduces inThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a dynamic equilibrium.",
                "Also from the multi-agent engineering point of view, their use in a dynamic ontology context has shown its relevance.",
                "This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through <br>cooperation</br> has been an efficient solution.",
                "And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper.",
                "Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach.",
                "Were planning to work on such benchmarking in the near future. 7.",
                "REFERENCES [1] H. Assadi.",
                "Construction of a regional ontology from text and its use within a documentary system.",
                "Proceedings of the International Conference on Formal Ontology and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel.",
                "Text analysis for ontology and terminology engineering.",
                "Journal of Applied Ontology, 2005. [3] J. Bao and V. Honavar.",
                "Collaborative ontology building with wiki@nt.",
                "Proceedings of the Workshop on Evaluation of Ontology-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard.",
                "Agent-Oriented Methodologies, chapter 7.",
                "Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202.",
                "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks.",
                "Background and foreground knowledge in dynamic ontology construction.",
                "Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec.",
                "A corpus-based conceptual clustering method for verb frames and ontology acquisition.",
                "LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon.",
                "Ontology Engineering: a Survey and a Return on Experience.",
                "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize.",
                "Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize.",
                "A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems.",
                "Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler.",
                "Dynamic ontologies on the web.",
                "American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent.",
                "Terminology extraction from text to build an ontology in surgical intensive care.",
                "Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter.",
                "Reconciling Ontological Differences by Assistant Agents.",
                "AAMAS06, May 2006. [13] A. Maedche.",
                "Ontology learning for the Semantic Web.",
                "Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab.",
                "Mining Ontologies from Text.",
                "EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze.",
                "Foundations of Statistical Natural Language Processing.",
                "The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner.",
                "Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)"
            ],
            "original_annotated_samples": [
                "It justifies how we designed some of the rules used by our agents in order to maximize the <br>cooperation</br> degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
                "The solution we chose came from the search for minimizing non <br>cooperation</br> within the system in accordance with the ADELFE method.",
                "Each agent computes three non <br>cooperation</br> degrees and chooses its current priority depending on which degree is the highest.",
                "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non <br>cooperation</br> degrees are: • μH (A) = 1 − a(P, A), is the head coverage non <br>cooperation</br> degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
                "Then, the non <br>cooperation</br> degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated."
            ],
            "translated_annotated_samples": [
                "Se justifica cómo diseñamos algunas de las reglas utilizadas por nuestros agentes para maximizar el <br>grado de cooperación</br> dentro del sistema multiagente de Dynamos. 2.2 Arquitectura Propuesta En esta sección, presentamos nuestra arquitectura del sistema.",
                "La solución que elegimos proviene de la búsqueda de minimizar la <br>falta de cooperación</br> dentro del sistema de acuerdo con el método ADELFE.",
                "Cada agente calcula tres grados de <br>no cooperación</br> y elige su prioridad actual dependiendo de cuál grado sea el más alto.",
                "Para un agente A dado que tiene un padre P, un conjunto de hermanos Bi y que recibió un conjunto de mensajes Mk con prioridad pk, los tres grados de <br>no cooperación</br> son: • μH (A) = 1 − a(P, A), es el grado de <br>no cooperación</br> de cobertura de cabeza, determinado por la cobertura de cabeza del padre, • μB(A) = max(1 − similitud(A, Bi)), es el grado de no cooperación de hermandad, determinado por el peor hermano de A en cuanto a similitudes, • μM (A) = max(pk), es el grado de no cooperación de mensaje, determinado por el mensaje más urgente recibido.",
                "Entonces, el grado de <br>no cooperación</br> μ(A) del agente A es: μ(A) = max(μH (A), μB(A), μM (A)) (4) Luego, tenemos tres casos que determinan qué tipo de acción elegirá A: • si μ(A) = μH (A) entonces A utilizará el algoritmo de cobertura de cabeza que detallamos en la subsección anterior • si μ(A) = μB(A) entonces A utilizará el algoritmo de agrupamiento distribuido (ver sección 3) • si μ(A) = μM (A) entonces A procesará Mk inmediatamente para ayudar a su remitente Estos tres casos resumen las actividades actuales de nuestros agentes: tienen que encontrar el mejor padre para ellos (μ(A) = μH (A)), mejorar la estructuración a través del agrupamiento (μ(A) = μB(A)) y procesar otros mensajes de agentes (μ(A) = μM (A)) para ayudarlos a cumplir sus propios objetivos. 4.3 Complejidad Experimental Revisitada Evaluamos la complejidad experimental de todo el sistema multiagente cuando todas las reglas están activadas."
            ],
            "translated_text": "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de ontologías a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías. Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una arquitectura multiagente adaptativa. En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque. Se evalúa y se compara con un algoritmo centralizado más convencional. También presentamos cómo ha sido mejorado utilizando un enfoque de múltiples criterios. Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de ontologías. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Experimentación 1. INTRODUCCIÓN En la actualidad, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de información. Pero construir una ontología manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo. Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados. Significaría crear ontologías dinámicas [10] y justifica la aparición de técnicas de aprendizaje de ontologías [14] [13]. Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una ontología a partir de un conjunto específico de textos de un dominio. Nuestro objetivo no es construir una ontología jerárquica exhaustiva y general, sino una específica para un dominio. Proponemos una herramienta semi-automatizada ya que se requiere un recurso externo: el ontólogo. Un ontólogo es una especie de ingeniero cognitivo, o analista, que utiliza información de textos y entrevistas con expertos para diseñar ontologías. En el campo de los agentes múltiples, las ontologías generalmente permiten que los agentes se entiendan entre sí [12]. A veces se utilizan para facilitar el proceso de construcción de la ontología, en particular en contextos colaborativos [3], pero rara vez representan la ontología en sí misma [16]. La mayoría de los trabajos interesados en la construcción de ontologías [7] proponen el refinamiento de las ontologías. Este proceso consiste en utilizar una ontología existente y construir una nueva a partir de ella. Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero. Los investigadores, que trabajan en la construcción de ontologías a partir de textos, afirman que el trabajo a automatizar requiere recursos externos como un diccionario [14] o acceso a la web [5]. En nuestro trabajo, proponemos una interacción entre el ontólogo y el sistema, nuestro recurso externo radica tanto en los textos como en el ontólogo. Este documento primero presenta, en la sección 2, la visión general del sistema Dynamo. En particular, los motivos que llevaron a su creación y su arquitectura general. Luego, en la sección 3 discutimos el algoritmo de clustering distribuido utilizado en Dynamo y lo comparamos con un enfoque más clásico y centralizado. La sección 4 está dedicada a mejorar el comportamiento de los agentes que fue diseñado teniendo en cuenta criterios ignorados por el agrupamiento. Y finalmente, en la sección 5, discutimos las limitaciones de nuestro enfoque y explicamos cómo se abordarán en trabajos futuros. DYNAMO RESUMEN 2.1 Ontología como un Sistema Multiagente Dynamo tiene como objetivo reducir la necesidad de acciones manuales en el procesamiento de los resultados del análisis de texto y sugerir un inicio de red conceptual para construir ontologías de manera más eficiente. El enfoque elegido es completamente original en nuestro conocimiento y utiliza un sistema multiagente adaptativo. Esta elección se basa en las cualidades ofrecidas por el sistema multiagente: pueden facilitar el diseño interactivo de un sistema (en nuestro caso, una red conceptual), permiten su construcción incremental al tener en cuenta progresivamente nuevos datos (provenientes del análisis de texto y la interacción del usuario) y, por último pero no menos importante, pueden distribuirse fácilmente a través de una red informática. Dynamo realiza un análisis sintáctico y terminológico de textos como entrada. Utiliza varios criterios basados en estadísticas calculadas a partir de los contextos lingüísticos de los términos para crear y posicionar los conceptos. Como resultado, Dynamo proporciona al analista una organización jerárquica de conceptos (el sistema multiagente en sí mismo) que puede ser validada, refinada o modificada, hasta que obtenga un estado satisfactorio de la red semántica. Una ontología puede ser vista como un mapa estable constituido por entidades conceptuales, representadas aquí por agentes, vinculadas por relaciones etiquetadas. Por lo tanto, nuestro enfoque considera una ontología como un tipo de equilibrio entre sus concepto-agentes, donde sus fuerzas están definidas por sus relaciones potenciales. La modificación de la ontología es una perturbación del equilibrio previo por la aparición o desaparición de agentes o relaciones. De esta manera, una ontología dinámica es un proceso de autoorganización que ocurre cuando se incluyen nuevos textos en el corpus, o cuando el ontólogo interactúa con él. Para apoyar la flexibilidad necesaria de dicho sistema, utilizamos un sistema multiagente autoorganizado basado en un enfoque cooperativo [9]. Seguimos el método ADELFE [4] propuesto para guiar el diseño de este tipo de sistema multiagente. Se justifica cómo diseñamos algunas de las reglas utilizadas por nuestros agentes para maximizar el <br>grado de cooperación</br> dentro del sistema multiagente de Dynamos. 2.2 Arquitectura Propuesta En esta sección, presentamos nuestra arquitectura del sistema. Aborda las necesidades de la Ingeniería del Conocimiento en el contexto de la gestión y mantenimiento dinámico de ontologías cuando la ontología está vinculada a una colección de documentos. El sistema Dynamo consta de tres partes (cf. figura 1): • una red de términos, obtenida gracias a una herramienta de extracción de términos utilizada para preprocesar el corpus textual, • un sistema multiagente que utiliza la red de términos para realizar un agrupamiento jerárquico con el fin de obtener una taxonomía de conceptos, • una interfaz que permite al ontólogo visualizar y controlar el proceso de agrupamiento. El extractor de términos que utilizamos es Syntex, un software que ha sido utilizado eficientemente para tareas de construcción de ontologías [11]. Principalmente lo seleccionamos por su robustez y la gran cantidad de información extraída. En particular, crea una red de Expansión de Cabeza que ya ha demostrado ser interesante para un sistema de agrupamiento [1]. En una red de este tipo, cada término está vinculado a su término principal y, es decir, a la subfrase máxima ubicada como término principal de su término de expansión, y también a todos los términos para los cuales es un término principal o un término de expansión. Por ejemplo, la ingeniería del conocimiento a partir de texto tiene como término principal la ingeniería del conocimiento y como término de expansión el texto. Además, la ingeniería del conocimiento se compone del conocimiento como término principal y la ingeniería como término de expansión. Con Dynamo, el término de red obtenido como resultado del extractor se almacena en una base de datos. Para cada par de términos, asumimos que es posible calcular un valor de similitud para realizar un agrupamiento [6] [1]. Debido a la naturaleza de los datos, nos estamos enfocando únicamente en la computación de similitud entre objetos descritos gracias a variables binarias, lo que significa que cada elemento está descrito por la presencia o ausencia de un conjunto de características [15]. En el caso de los términos, generalmente estamos tratando con sus contextos de uso. Con Syntex, esos contextos son identificados por términos y caracterizados por algunas relaciones sintácticas. El sistema multiagente Dynamo implementa el algoritmo de clustering distribuido descrito en detalle en la sección 3 y las reglas descritas en la sección 4. Está diseñado para ser tanto el sistema que produce la estructura resultante como la estructura en sí misma. Significa que cada agente representa una clase en la taxonomía. Entonces, la salida del sistema es la organización obtenida a partir de la interacción entre agentes, teniendo en cuenta la retroalimentación proveniente del ontólogo cuando modifica la taxonomía dada sus necesidades o experiencia. CLUSTERING DISTRIBUIDO Esta sección presenta el algoritmo de clustering distribuido utilizado en Dynamo. Por el bien de la comprensión, y debido a su evaluación en la sección 3.1, recordamos el algoritmo centralizado básico utilizado para un agrupamiento jerárquico ascendente en un espacio no métrico, cuando se dispone de una medida de similitud simétrica [15] (que es el caso de las medidas utilizadas en nuestro sistema). Algoritmo 1: Algoritmo de agrupamiento jerárquico ascendente centralizado Datos: Lista L de elementos para organizar como una jerarquía Resultado: Raíz R de la jerarquía mientras longitud(L) > 1 hacer max ← 0; A ← nil; B ← nil; para i ← 1 a longitud(L) hacer I ← L[i]; para j ← i + 1 a longitud(L) hacer J ← L[j]; sim ← similitud(I, J); si sim > max entonces max ← sim; A ← I; B ← J; fin si fin para fin para quitar(A, L); quitar(B, L); agregar((A, B), L); fin mientras R ← L[1]; En el algoritmo 1, para cada paso de agrupamiento, se determina el par de elementos más similares. Esos dos elementos están agrupados en un conjunto, y la clase resultante se añade a la lista de elementos restantes. Este algoritmo se detiene cuando la lista tiene solo un elemento restante. 2 es decir, la subfrase máxima ubicada como cola del término The Sixth Intl. La jerarquía resultante del algoritmo 1 siempre es un árbol binario debido a la forma en que se realiza el agrupamiento. Además, agrupar los elementos más similares es equivalente a alejarlos de los menos similares. Nuestro algoritmo distribuido está diseñado basándose en esos dos hechos. Se ejecuta de forma simultánea en cada uno de los agentes del sistema. Cabe destacar que, en lo que sigue de este artículo, utilizamos para ambos algoritmos una similitud de Anderberg (con α = 0.75) y una estrategia de agrupamiento de enlace promedio [15]. Esas decisiones tienen un impacto en el árbol resultante, pero no afectan ni la ejecución global del algoritmo ni su complejidad. Ahora presentamos el algoritmo distribuido utilizado en nuestro sistema. Se inicia de la siguiente manera: • se crea un agente TOP que no tiene padre, será la raíz de la taxonomía resultante, • se crea un agente para cada término que se va a posicionar en la taxonomía, todos tienen como padre a TOP. Una vez que se establece esta estructura básica, el algoritmo se ejecuta hasta que alcanza el equilibrio y luego proporciona la taxonomía resultante. El proceso de la primera etapa (figura 2) se activa cuando un agente (aquí Ak) tiene más de un hermano (ya que queremos obtener un árbol binario). Luego envía un mensaje a su padre P indicando a su hermano más diferente (aquí A1). Entonces P recibe el mismo tipo de mensaje de cada uno de sus hijos. En lo siguiente, este tipo de mensaje se llamará voto. A continuación, cuando P ha recibido mensajes de todos sus hijos, comienza el segundo paso (figura 3). Gracias a los mensajes recibidos que indican las preferencias de sus hijos, P puede determinar tres subgrupos entre sus hijos: el hijo que recibió más votos de sus hermanos, es decir, el hijo que es más diferente del mayor número de sus hermanos. En caso de empate, uno de los ganadores es elegido al azar (aquí A1), los niños que permitieron la elección del primer grupo, es decir, los agentes que eligieron a su hermano del primer grupo como el más diferente (aquí Ak a An), los niños restantes (aquí A2 a Ak−1). Entonces P crea un nuevo agente P (teniendo a P como padre) y pide a los agentes del segundo grupo (aquí los agentes Ak a An) que lo elijan como su nuevo padre. Ak−1 Ak AnA2A1 P P ...... ...... \n\nAk−1 Ak AnA2A1 P P ...... ...... Figura 4: Agrupamiento distribuido: Paso 3 Finalmente, el paso 3 (figura 4) es trivial. Los niños rechazados por P (aquí el agente A2 a An) tienen en cuenta su mensaje y eligen a P como su nuevo padre. La jerarquía acaba de crear un nuevo nivel intermedio. Ten en cuenta que este algoritmo generalmente converge, ya que el número de hermanos de un agente disminuye. Cuando un agente tiene solamente un hermano restante, su actividad se detiene (aunque sigue procesando los mensajes que llegan de sus hijos). Sin embargo, en algunos casos podemos llegar a un conflicto circular en el procedimiento de votación cuando, por ejemplo, A vota en contra de B, B en contra de C y C en contra de A. Con el sistema actual no se puede tomar ninguna decisión. El procedimiento actual debería mejorarse para abordar esto, probablemente utilizando un método de votación clasificado. 3.1 Evaluación Cuantitativa Ahora, evaluamos las propiedades de nuestro algoritmo distribuido. Se requiere comenzar con una evaluación cuantitativa, basada en su complejidad, mientras se compara con el algoritmo 1 de la sección anterior. Su complejidad teórica se calcula para el peor caso, considerando la operación de cálculo de similitud como elemental. Para el algoritmo distribuido, el peor caso significa que en cada ejecución, solo se puede crear un grupo de dos elementos. Bajo esas condiciones, para un conjunto de datos dado de n elementos, podemos determinar la cantidad de cálculos de similitud. Para el algoritmo 1, notamos que l = longitud(L), luego el bucle más interno se ejecuta l - i veces. Y su cuerpo tiene la única computación de similitud, por lo que su costo es l−i. El segundo bucle for se ejecuta l veces para i que varía de 1 a l. Entonces su costo es Pl i=1(l − i) que puede simplificarse en l×(l−1) 2. Finalmente, para cada ejecución del bucle while, l se reduce de n a 1, lo que nos da t1(n) como la cantidad de cálculos de similitud para el algoritmo 1: t1(n) = nX l=1 l × (l − 1) 2 (1) Para el algoritmo distribuido, en un paso dado, cada uno de los l agentes evalúa la similitud con sus l −1 compañeros. Entonces, cada paso tiene un costo de l × (l − 1). Entonces, se crean grupos y se realiza otra votación con l disminuido en uno (ya que asumimos el peor caso, solo se forman grupos de tamaño 2 o l −1). Dado que l es igual a n en la primera ejecución, obtenemos tdist(n) como la cantidad de cálculos de similitud para el algoritmo distribuido: tdist(n) = nX l=1 l × (l − 1) (2) Ambos algoritmos tienen una complejidad O(n3). Pero en el peor de los casos, el algoritmo distribuido realiza el doble del número de el1288 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) operaciones elementales realizadas por el algoritmo centralizado. Esta brecha proviene de la toma de decisiones local en cada agente. Debido a esto, los cálculos de similitud se realizan dos veces para cada par de agentes. Podríamos concebir que un agente envía el resultado de su cálculo a su par. Sin embargo, simplemente trasladaría el problema al generar más comunicación en el sistema. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Cantidad de comparaciones Cantidad de términos de entrada 1. Algoritmo distribuido (en promedio, con mínimo y máximo) 2. Polinomio logarítmico 3. En la Figura 5 se muestra el algoritmo centralizado: Resultados experimentales. En un segundo paso, la complejidad promedio del algoritmo ha sido determinada mediante experimentos. El sistema multiagente ha sido ejecutado con conjuntos de datos de entrada generados aleatoriamente que van desde diez hasta cien términos. El valor dado es el promedio de las comparaciones realizadas para cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 5. El algoritmo es entonces más eficiente en promedio que el algoritmo centralizado, y su complejidad promedio está por debajo del peor caso. Se puede explicar por la baja probabilidad de que un conjunto de datos obligue al sistema a crear solo grupos mínimos (dos elementos) o máximos (n − 1 elementos) para cada paso de razonamiento. La curva número 2 representa el polinomio logarítmico que minimiza el error con respecto a la curva número 1. El término de mayor grado de este polinomio es n2 log(n), por lo tanto, nuestro algoritmo distribuido tiene una complejidad O(n2 log(n)) en promedio. Finalmente, notemos la reducida variación de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 1,960.75 para un promedio de 40,550.10 (alrededor del 5%), lo que muestra la buena estabilidad del sistema. Aunque los resultados cuantitativos son interesantes, la verdadera ventaja de este enfoque proviene de características más cualitativas que presentaremos en esta sección. Todos son ventajas obtenidas gracias al uso de un sistema multiagente adaptativo. La principal ventaja del uso de un sistema multiagente para una tarea de agrupamiento es introducir dinamismo en dicho sistema. El ontólogo puede hacer modificaciones y la jerarquía se adapta dependiendo de la solicitud. Es particularmente interesante en un contexto de ingeniería del conocimiento. De hecho, la jerarquía creada por el sistema está destinada a ser modificada por el ontólogo ya que es el resultado de un cálculo estadístico. Durante la revisión necesaria de los textos para examinar los contextos de uso de los términos [2], el ontólogo podrá interpretar el contenido real y revisar la propuesta del sistema. Es extremadamente difícil lograr esto con un enfoque centralizado de caja negra. En la mayoría de los casos, uno tiene que encontrar qué paso de razonamiento generó el error y modificar manualmente la clase resultante. Desafortunadamente, en este caso, todos los pasos de razonamiento que ocurrieron después de la creación de la clase modificada se pierden y deben ser recalculados teniendo en cuenta la modificación. Por eso, un sistema como ASIUM [6] intenta suavizar el problema con una colaboración entre el sistema y el usuario mostrando al ontólogo las clases creadas después de cada paso de razonamiento. Pero el ontólogo puede cometer un error y darse cuenta de ello demasiado tarde. Figura 6: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos un ejemplo gracias a algunas capturas de pantalla del prototipo en funcionamiento probado en un corpus relacionado con la medicina. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 6 después de la estabilización. Es evidente que el concepto descrito por el término lesión está mal ubicado. Las computaciones de similitud lo sitúan más cerca de femme (mujer) y chirurgien (cirujano) que de infección, gastro-enteritis y hepatitis. Esta posición incorrecta para la lesión se explica por el hecho de que sin la entrada del ontólogo, el razonamiento se basa únicamente en criterios estadísticos. Figura 7: Árbol de agentes conceptuales después de la modificación del ontólogo. Luego, el ontólogo reemplaza el concepto en la rama derecha, afectando a ConceptAgent:8 como su nuevo padre. El nombre ConceptAgent:X se asigna automáticamente a un agente conceptual que no está descrito por un término. El sistema reacciona por sí mismo y perfecciona la jerarquía de agrupación para obtener un árbol binario creando ConceptAgent:11. El nuevo estado estable es el de la figura 7. Este acoplamiento sistema-usuario es necesario para construir una ontología, pero no se necesita ningún ajuste particular al principio del algoritmo distribuido ya que cada agente realiza un procesamiento local autónomo y se comunica con su vecindario a través de mensajes. Además, este algoritmo puede ser distribuido de facto en una red de computadoras. La comunicación entre agentes se realiza enviando mensajes y cada uno mantiene su autonomía de decisión. Entonces, una modificación del sistema para hacerlo funcionar en red no requeriría ajustar el algoritmo. Por el contrario, solo sería necesario reestructurar la capa de comunicación y el proceso de creación de agentes, ya que en nuestra implementación actual no están en red. 4. EN LA JERARQUÍA DE MÚLTIPLES CRITERIOS En las secciones anteriores, asumimos que la similitud se puede calcular para cualquier par de términos. Pero, tan pronto como se utilizan datos reales, esta propiedad ya no se verifica. Algunos términos no tienen ningún valor de similitud con ningún término extraído. Además, para los nodos hoja a veces es interesante utilizar otros medios para posicionarlos en la jerarquía. Para esta estructuración de bajo nivel, los ontólogos generalmente se basan en The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1289 sus elecciones en heurísticas simples. Usando esta observación, construimos un nuevo conjunto de reglas, que no se basan en la similitud para respaldar la estructuración de bajo nivel. 4.1 Agregar reglas de cobertura de cabeza En este caso, los agentes pueden actuar con un punto de vista muy local simplemente mirando la relación padre/hijo. Cada agente puede intentar determinar si su padre es adecuado. Es posible adivinar esto porque cada agente conceptual está descrito por un conjunto de términos y gracias a la red de términos de Expansión de Cabeza. En el siguiente TX será el conjunto de términos que describen el concepto del agente X y head(TX) el conjunto de todos los términos que son cabeza de al menos un elemento de TX. Gracias a esas dos notaciones podemos describir la función de adecuación entre un padre P y un hijo C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Entonces, el mejor padre para C es el agente P que maximiza a(P, C). Un agente insatisfecho con su padre puede intentar encontrar uno mejor evaluando la idoneidad de los candidatos. Diseñamos un algoritmo complementario para dirigir esta búsqueda: cuando un agente C no está satisfecho con su padre P, evalúa a(Bi, C) con todos sus hermanos (notados Bi); luego se elige como nuevo padre aquel que maximice a(Bi, C). Figura 8: Árbol de agentes conceptuales después de la estabilización autónoma del sistema sin la regla de cobertura de cabeza. Ahora ilustramos este comportamiento de regla con un ejemplo. La Figura 8 muestra el estado del sistema después de la estabilización en los datos de prueba. Podemos notar que la hepatitis viral todavía está vinculada a la raíz taxonómica. Se debe al hecho de que no hay valor de similitud entre el término hepatitis viral y ninguno de los términos de los otros agentes conceptuales. Figura 9: Árbol de agentes conceptuales después de la activación de la regla de cobertura de la cabeza. Tras activar la regla de cobertura de la cabeza y permitir que el sistema se estabilice nuevamente, obtenemos la figura 9. Podemos ver que la hepatitis viral se deslizó a través de la rama que llevaba a la hepatitis y la eligió como su nueva progenitora. Es una elección por defecto sensata, ya que la hepatitis viral es un término más específico que la hepatitis. Esta regla tiende a hacer que los agentes descritos por un conjunto de términos se conviertan en hojas del árbol conceptual. Aborda nuestra preocupación por mejorar la estructuración de bajo nivel de nuestra taxonomía. Pero obviamente nuestros agentes carecen de un método para retroceder en caso de modificaciones en la taxonomía que los ubicarían en la rama incorrecta. Ese es uno de los puntos en los que nuestro sistema aún debe ser mejorado al agregar otro conjunto de reglas. 4.2 Sobre el uso de varios criterios En las secciones y ejemplos anteriores, solo utilizamos un algoritmo a la vez. El algoritmo de agrupamiento distribuido tiende a introducir nuevas capas en la taxonomía, mientras que el algoritmo de cobertura de cabeza tiende a empujar algunos de los agentes hacia las hojas de la taxonomía. Obviamente plantea la pregunta sobre cómo lidiar con múltiples criterios en la construcción de nuestra taxonomía, y cómo los agentes determinan sus prioridades en un momento dado. La solución que elegimos proviene de la búsqueda de minimizar la <br>falta de cooperación</br> dentro del sistema de acuerdo con el método ADELFE. Cada agente calcula tres grados de <br>no cooperación</br> y elige su prioridad actual dependiendo de cuál grado sea el más alto. Para un agente A dado que tiene un padre P, un conjunto de hermanos Bi y que recibió un conjunto de mensajes Mk con prioridad pk, los tres grados de <br>no cooperación</br> son: • μH (A) = 1 − a(P, A), es el grado de <br>no cooperación</br> de cobertura de cabeza, determinado por la cobertura de cabeza del padre, • μB(A) = max(1 − similitud(A, Bi)), es el grado de no cooperación de hermandad, determinado por el peor hermano de A en cuanto a similitudes, • μM (A) = max(pk), es el grado de no cooperación de mensaje, determinado por el mensaje más urgente recibido. Entonces, el grado de <br>no cooperación</br> μ(A) del agente A es: μ(A) = max(μH (A), μB(A), μM (A)) (4) Luego, tenemos tres casos que determinan qué tipo de acción elegirá A: • si μ(A) = μH (A) entonces A utilizará el algoritmo de cobertura de cabeza que detallamos en la subsección anterior • si μ(A) = μB(A) entonces A utilizará el algoritmo de agrupamiento distribuido (ver sección 3) • si μ(A) = μM (A) entonces A procesará Mk inmediatamente para ayudar a su remitente Estos tres casos resumen las actividades actuales de nuestros agentes: tienen que encontrar el mejor padre para ellos (μ(A) = μH (A)), mejorar la estructuración a través del agrupamiento (μ(A) = μB(A)) y procesar otros mensajes de agentes (μ(A) = μM (A)) para ayudarlos a cumplir sus propios objetivos. 4.3 Complejidad Experimental Revisitada Evaluamos la complejidad experimental de todo el sistema multiagente cuando todas las reglas están activadas. ",
            "candidates": [],
            "error": [
                [
                    "grado de cooperación",
                    "falta de cooperación",
                    "no cooperación",
                    "no cooperación",
                    "no cooperación",
                    "no cooperación"
                ]
            ]
        },
        "emergent behavior": {
            "translated_key": "comportamiento emergente",
            "is_in_text": false,
            "original_annotated_sentences": [
                "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of Ontology Learning.",
                "Our system named Dynamo is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
                "In this paper we present a distributed hierarchical clustering algorithm, core of our approach.",
                "It is evaluated and compared to a more conventional centralized algorithm.",
                "We also present how it has been improved using a multi-criteria approach.",
                "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete ontology building solution.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval.",
                "But building an ontology manually is a slow, tedious, costly, complex and time consuming process.",
                "Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date.",
                "It would mean creating dynamic ontologies [10] and it justifies the emergence of ontology learning techniques [14] [13].",
                "Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts.",
                "Our aim is not to build an exhaustive, general hierarchical ontology but a domain specific one.",
                "We propose a semi-automated tool since an external resource is required: the ontologist.",
                "An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies.",
                "In the multi-agent field, ontologies generally enable agents to understand each other [12].",
                "Theyre sometimes used to ease the ontology building process, in particular for collaborative contexts [3], but they rarely represent the ontology itself [16].",
                "Most works interested in the construction of ontologies [7] propose the refinement of ontologies.",
                "This process consists in using an existing ontology and building a new one from it.",
                "This approach is different from our approach because Dynamo starts from scratch.",
                "Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5].",
                "In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist.",
                "This paper first presents, in section 2, the big picture of the Dynamo system.",
                "In particular the motives that led to its creation and its general architecture.",
                "Then, in section 3 we discuss the distributed clustering algorithm used in Dynamo and compare it to a more classic centralized approach.",
                "Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering.",
                "And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2.",
                "DYNAMO OVERVIEW 2.1 Ontology as a Multi-Agent System Dynamo aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently.",
                "The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system.",
                "This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network.",
                "Dynamo takes a syntactical and terminological analysis of texts as input.",
                "It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts.",
                "As output, Dynamo provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network.",
                "An ontology can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations.",
                "Thus, our approach considers an ontology as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships.",
                "The ontology modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships.",
                "In this way, a dynamic ontology is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it.",
                "To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9].",
                "We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system.",
                "It justifies how we designed some of the rules used by our agents in order to maximize the cooperation degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
                "It addresses the needs of Knowledge Engineering in the context of dynamic ontology management and maintenance when the ontology is linked to a document collection.",
                "The Dynamo system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ? ?",
                "Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for ontology building tasks [11].",
                "We mainly selected it because of its robustness and the great amount of information extracted.",
                "In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1].",
                "In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term.",
                "For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term.",
                "Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term.",
                "With Dynamo, the term network obtained as the output of the extractor is stored in a database.",
                "For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1].",
                "Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15].",
                "In the case of terms we are generally dealing with their usage contexts.",
                "With Syntex, those contexts are identified by terms and characterized by some syntactic relations.",
                "The Dynamo multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4.",
                "It is designed to be both the system producing the resulting structure and the structure itself.",
                "It means that each agent represent a class in the taxonomy.",
                "Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3.",
                "DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in Dynamo.",
                "For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system).",
                "Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined.",
                "Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements.",
                "This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done.",
                "Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones.",
                "Our distributed algorithm is designed relying on those two facts.",
                "It is executed concurrently in each of the agents of the system.",
                "Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15].",
                "Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity.",
                "We now present the distributed algorithm used in our system.",
                "It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent.",
                "Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy.",
                "Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree).",
                "Then it sends a message to its parent P indicating its most dissimilar brother (here A1).",
                "Then P receives the same kind of message from each of its children.",
                "In the following, this kind of message will be called a vote.",
                "Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3).",
                "Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers.",
                "In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1).",
                "Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent.",
                "Ak−1 Ak AnA2A1 P P ...... ......",
                "Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial.",
                "The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent.",
                "The hierarchy just created a new intermediate level.",
                "Note that this algorithm generally converges, since the number of brothers of an agent drops.",
                "When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children).",
                "However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A.",
                "With the current system no decision can be taken.",
                "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 Quantitative Evaluation Now, we evaluate the properties of our distributed algorithm.",
                "It requires to begin with a quantitative evaluation, based on its complexity, while comparing it with the algorithm 1 from the previous section.",
                "Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary.",
                "For the distributed algorithm, the worst case means that for each run, only a two-item group can be created.",
                "Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations.",
                "For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times.",
                "And its body has the only similarity computation, so its cost is l−i.",
                "The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 .",
                "Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers.",
                "So each steps has a l × (l − 1) cost.",
                "Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built).",
                "Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity.",
                "But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm.",
                "This gap comes from the local decision making in each agent.",
                "Because of this, the similarity computations are done twice for each agent pair.",
                "We could conceive that an agent sends its computation result to its peer.",
                "But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1.",
                "Distributed algorithm (on average, with min and max) 2.",
                "Logarithmic polynomial 3.",
                "Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments.",
                "The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms.",
                "The given value is the average of comparisons made for one hundred of runs without any user interaction.",
                "It results in the plots of figure 5.",
                "The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case.",
                "It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning.",
                "Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average.",
                "Finally, lets note the reduced variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section.",
                "All are advantages obtained thanks to the use of an adaptive multi-agent system.",
                "The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system.",
                "The ontologist can make modifications and the hierarchy adapts depending on the request.",
                "It is particularly interesting in a knowledge engineering context.",
                "Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation.",
                "During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal.",
                "It is extremely difficult to realize this with a centralized black-box approach.",
                "In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class.",
                "Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account.",
                "That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning.",
                "But, the ontologist can make a mistake, and become aware of it too late.",
                "Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus.",
                "By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization.",
                "It is clear that the concept described by the term lésion (lesion) is misplaced.",
                "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (hepatitis).",
                "This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria.",
                "Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent.",
                "The name ConceptAgent:X is automatically given to a concept agent that is not described by a term.",
                "The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11.",
                "The new stable state if the one of figure 7.",
                "This system-user coupling is necessary to build an ontology, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages.",
                "Moreover, this algorithm can de facto be distributed on a computer network.",
                "The communication between agents is then done by sending messages and each one keeps its decision autonomy.",
                "Then, a system modification to make it run networked would not require to adjust the algorithm.",
                "On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4.",
                "MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair.",
                "But, as soon as one uses real data this property is not verified anymore.",
                "Some terms do not have any similarity value with any extracted term.",
                "Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy.",
                "For this low level structuring, ontologists generally base The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics.",
                "Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation.",
                "Each agent can try to determine if its parent is adequate.",
                "It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network.",
                "In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX .",
                "Thanks to those two notations we can describe the parent adequacy function a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C).",
                "An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates.",
                "We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent.",
                "Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example.",
                "Figure 8 shows the state of the system after stabilization on test data.",
                "We can notice that hépatite viral (viral hepatitis) is still linked to the taxonomy root.",
                "It is caused by the fact that there is no similarity value between the viral hepatitis term and any of the term of the other concept agents.",
                "Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9.",
                "We can see that viral hepatitis slipped through the branch leading to hepatitis and chose it as its new parent.",
                "It is a sensible default choice since viral hepatitis is a more specific term than hepatitis.",
                "This rule tends to push agents described by a set of term to become leafs of the concept tree.",
                "It addresses our concern to improve the low level structuring of our taxonomy.",
                "But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch.",
                "That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time.",
                "The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy.",
                "It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time.",
                "The solution we chose came from the search for minimizing non cooperation within the system in accordance with the ADELFE method.",
                "Each agent computes three non cooperation degrees and chooses its current priority depending on which degree is the highest.",
                "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non cooperation degrees are: • μH (A) = 1 − a(P, A), is the head coverage non cooperation degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
                "Then, the non cooperation degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated.",
                "In this case, the metric used is the number of messages exchanged in the system.",
                "Once again the system has been executed with input data sets ranging from ten to one hundred terms.",
                "The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction.",
                "It results in the plots of figure 10.",
                "Curve number 1 represents the average of the value obtained.",
                "Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set.",
                "Curve number 3 represents the polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1.",
                "Dynamo, all rules (on average, with min and max) 2.",
                "Distributed clustering only (on average) 2.",
                "Cubic polynomial Figure 10: Experimental results on average.",
                "Moreover, lets note the very small variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system.",
                "Finally the extra head coverage rules are a real improvement on the distributed algorithm alone.",
                "They introduce more constraints and stability point is reached with less interactions and decision making by the agents.",
                "It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5.",
                "DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added.",
                "When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm.",
                "On the contrary, adding a new item after a first stabilization has an impact on the final result.",
                "Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system.",
                "By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization.",
                "Figure 12: Concept agent tree after taking in account hepatitis Then, the ontologist interacts with the system and adds a new concept described by the term hepatitis and linked to the root.",
                "The system reacts and stabilizes, we then obtain figure 12 as a result. hepatitis is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example.",
                "We need to improve our distributed algorithm to allow a concept to move along a branch.",
                "We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult.",
                "In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the Dynamo system.",
                "Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result.",
                "But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise.",
                "Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree.",
                "By looking at figure 7, it is clear that some pruning could be done in the taxonomy.",
                "In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore.",
                "Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form.",
                "In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged.",
                "Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf.",
                "As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root.",
                "Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6.",
                "CONCLUSION After being presented as a promising solution, ensuring model quality and their terminological richness, ontology building from textual corpus analysis is difficult and costly.",
                "It requires analyst supervising and taking in account the ontology aim.",
                "Using natural languages processing tools ease the knowledge localization in texts through language uses.",
                "That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements.",
                "Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result.",
                "We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts.",
                "Our system makes use of a terminological network resulting from an analysis made by Syntex.",
                "The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made.",
                "Performances of the system are interesting and some aspects are even comparable to their centralized counterpart.",
                "Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information.",
                "From the point of view of ontology building, this work is a first step showing the relevance of our approach.",
                "It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees.",
                "From this improvements we are mostly focusing on the pruning to obtain better taxonomies.",
                "Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm.",
                "In other words this algorithm introduces inThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a dynamic equilibrium.",
                "Also from the multi-agent engineering point of view, their use in a dynamic ontology context has shown its relevance.",
                "This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through cooperation has been an efficient solution.",
                "And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper.",
                "Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach.",
                "Were planning to work on such benchmarking in the near future. 7.",
                "REFERENCES [1] H. Assadi.",
                "Construction of a regional ontology from text and its use within a documentary system.",
                "Proceedings of the International Conference on Formal Ontology and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel.",
                "Text analysis for ontology and terminology engineering.",
                "Journal of Applied Ontology, 2005. [3] J. Bao and V. Honavar.",
                "Collaborative ontology building with wiki@nt.",
                "Proceedings of the Workshop on Evaluation of Ontology-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard.",
                "Agent-Oriented Methodologies, chapter 7.",
                "Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202.",
                "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks.",
                "Background and foreground knowledge in dynamic ontology construction.",
                "Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec.",
                "A corpus-based conceptual clustering method for verb frames and ontology acquisition.",
                "LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon.",
                "Ontology Engineering: a Survey and a Return on Experience.",
                "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize.",
                "Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize.",
                "A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems.",
                "Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler.",
                "Dynamic ontologies on the web.",
                "American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent.",
                "Terminology extraction from text to build an ontology in surgical intensive care.",
                "Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter.",
                "Reconciling Ontological Differences by Assistant Agents.",
                "AAMAS06, May 2006. [13] A. Maedche.",
                "Ontology learning for the Semantic Web.",
                "Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab.",
                "Mining Ontologies from Text.",
                "EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze.",
                "Foundations of Statistical Natural Language Processing.",
                "The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner.",
                "Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "multi-agent field": {
            "translated_key": "campo de los agentes múltiples",
            "is_in_text": true,
            "original_annotated_sentences": [
                "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of Ontology Learning.",
                "Our system named Dynamo is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
                "In this paper we present a distributed hierarchical clustering algorithm, core of our approach.",
                "It is evaluated and compared to a more conventional centralized algorithm.",
                "We also present how it has been improved using a multi-criteria approach.",
                "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete ontology building solution.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval.",
                "But building an ontology manually is a slow, tedious, costly, complex and time consuming process.",
                "Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date.",
                "It would mean creating dynamic ontologies [10] and it justifies the emergence of ontology learning techniques [14] [13].",
                "Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts.",
                "Our aim is not to build an exhaustive, general hierarchical ontology but a domain specific one.",
                "We propose a semi-automated tool since an external resource is required: the ontologist.",
                "An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies.",
                "In the <br>multi-agent field</br>, ontologies generally enable agents to understand each other [12].",
                "Theyre sometimes used to ease the ontology building process, in particular for collaborative contexts [3], but they rarely represent the ontology itself [16].",
                "Most works interested in the construction of ontologies [7] propose the refinement of ontologies.",
                "This process consists in using an existing ontology and building a new one from it.",
                "This approach is different from our approach because Dynamo starts from scratch.",
                "Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5].",
                "In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist.",
                "This paper first presents, in section 2, the big picture of the Dynamo system.",
                "In particular the motives that led to its creation and its general architecture.",
                "Then, in section 3 we discuss the distributed clustering algorithm used in Dynamo and compare it to a more classic centralized approach.",
                "Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering.",
                "And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2.",
                "DYNAMO OVERVIEW 2.1 Ontology as a Multi-Agent System Dynamo aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently.",
                "The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system.",
                "This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network.",
                "Dynamo takes a syntactical and terminological analysis of texts as input.",
                "It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts.",
                "As output, Dynamo provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network.",
                "An ontology can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations.",
                "Thus, our approach considers an ontology as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships.",
                "The ontology modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships.",
                "In this way, a dynamic ontology is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it.",
                "To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9].",
                "We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system.",
                "It justifies how we designed some of the rules used by our agents in order to maximize the cooperation degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
                "It addresses the needs of Knowledge Engineering in the context of dynamic ontology management and maintenance when the ontology is linked to a document collection.",
                "The Dynamo system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ? ?",
                "Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for ontology building tasks [11].",
                "We mainly selected it because of its robustness and the great amount of information extracted.",
                "In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1].",
                "In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term.",
                "For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term.",
                "Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term.",
                "With Dynamo, the term network obtained as the output of the extractor is stored in a database.",
                "For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1].",
                "Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15].",
                "In the case of terms we are generally dealing with their usage contexts.",
                "With Syntex, those contexts are identified by terms and characterized by some syntactic relations.",
                "The Dynamo multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4.",
                "It is designed to be both the system producing the resulting structure and the structure itself.",
                "It means that each agent represent a class in the taxonomy.",
                "Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3.",
                "DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in Dynamo.",
                "For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system).",
                "Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined.",
                "Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements.",
                "This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done.",
                "Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones.",
                "Our distributed algorithm is designed relying on those two facts.",
                "It is executed concurrently in each of the agents of the system.",
                "Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15].",
                "Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity.",
                "We now present the distributed algorithm used in our system.",
                "It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent.",
                "Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy.",
                "Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree).",
                "Then it sends a message to its parent P indicating its most dissimilar brother (here A1).",
                "Then P receives the same kind of message from each of its children.",
                "In the following, this kind of message will be called a vote.",
                "Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3).",
                "Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers.",
                "In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1).",
                "Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent.",
                "Ak−1 Ak AnA2A1 P P ...... ......",
                "Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial.",
                "The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent.",
                "The hierarchy just created a new intermediate level.",
                "Note that this algorithm generally converges, since the number of brothers of an agent drops.",
                "When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children).",
                "However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A.",
                "With the current system no decision can be taken.",
                "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 Quantitative Evaluation Now, we evaluate the properties of our distributed algorithm.",
                "It requires to begin with a quantitative evaluation, based on its complexity, while comparing it with the algorithm 1 from the previous section.",
                "Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary.",
                "For the distributed algorithm, the worst case means that for each run, only a two-item group can be created.",
                "Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations.",
                "For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times.",
                "And its body has the only similarity computation, so its cost is l−i.",
                "The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 .",
                "Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers.",
                "So each steps has a l × (l − 1) cost.",
                "Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built).",
                "Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity.",
                "But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm.",
                "This gap comes from the local decision making in each agent.",
                "Because of this, the similarity computations are done twice for each agent pair.",
                "We could conceive that an agent sends its computation result to its peer.",
                "But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1.",
                "Distributed algorithm (on average, with min and max) 2.",
                "Logarithmic polynomial 3.",
                "Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments.",
                "The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms.",
                "The given value is the average of comparisons made for one hundred of runs without any user interaction.",
                "It results in the plots of figure 5.",
                "The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case.",
                "It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning.",
                "Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average.",
                "Finally, lets note the reduced variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section.",
                "All are advantages obtained thanks to the use of an adaptive multi-agent system.",
                "The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system.",
                "The ontologist can make modifications and the hierarchy adapts depending on the request.",
                "It is particularly interesting in a knowledge engineering context.",
                "Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation.",
                "During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal.",
                "It is extremely difficult to realize this with a centralized black-box approach.",
                "In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class.",
                "Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account.",
                "That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning.",
                "But, the ontologist can make a mistake, and become aware of it too late.",
                "Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus.",
                "By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization.",
                "It is clear that the concept described by the term lésion (lesion) is misplaced.",
                "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (hepatitis).",
                "This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria.",
                "Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent.",
                "The name ConceptAgent:X is automatically given to a concept agent that is not described by a term.",
                "The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11.",
                "The new stable state if the one of figure 7.",
                "This system-user coupling is necessary to build an ontology, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages.",
                "Moreover, this algorithm can de facto be distributed on a computer network.",
                "The communication between agents is then done by sending messages and each one keeps its decision autonomy.",
                "Then, a system modification to make it run networked would not require to adjust the algorithm.",
                "On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4.",
                "MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair.",
                "But, as soon as one uses real data this property is not verified anymore.",
                "Some terms do not have any similarity value with any extracted term.",
                "Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy.",
                "For this low level structuring, ontologists generally base The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics.",
                "Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation.",
                "Each agent can try to determine if its parent is adequate.",
                "It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network.",
                "In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX .",
                "Thanks to those two notations we can describe the parent adequacy function a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C).",
                "An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates.",
                "We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent.",
                "Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example.",
                "Figure 8 shows the state of the system after stabilization on test data.",
                "We can notice that hépatite viral (viral hepatitis) is still linked to the taxonomy root.",
                "It is caused by the fact that there is no similarity value between the viral hepatitis term and any of the term of the other concept agents.",
                "Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9.",
                "We can see that viral hepatitis slipped through the branch leading to hepatitis and chose it as its new parent.",
                "It is a sensible default choice since viral hepatitis is a more specific term than hepatitis.",
                "This rule tends to push agents described by a set of term to become leafs of the concept tree.",
                "It addresses our concern to improve the low level structuring of our taxonomy.",
                "But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch.",
                "That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time.",
                "The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy.",
                "It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time.",
                "The solution we chose came from the search for minimizing non cooperation within the system in accordance with the ADELFE method.",
                "Each agent computes three non cooperation degrees and chooses its current priority depending on which degree is the highest.",
                "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non cooperation degrees are: • μH (A) = 1 − a(P, A), is the head coverage non cooperation degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
                "Then, the non cooperation degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated.",
                "In this case, the metric used is the number of messages exchanged in the system.",
                "Once again the system has been executed with input data sets ranging from ten to one hundred terms.",
                "The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction.",
                "It results in the plots of figure 10.",
                "Curve number 1 represents the average of the value obtained.",
                "Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set.",
                "Curve number 3 represents the polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1.",
                "Dynamo, all rules (on average, with min and max) 2.",
                "Distributed clustering only (on average) 2.",
                "Cubic polynomial Figure 10: Experimental results on average.",
                "Moreover, lets note the very small variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system.",
                "Finally the extra head coverage rules are a real improvement on the distributed algorithm alone.",
                "They introduce more constraints and stability point is reached with less interactions and decision making by the agents.",
                "It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5.",
                "DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added.",
                "When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm.",
                "On the contrary, adding a new item after a first stabilization has an impact on the final result.",
                "Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system.",
                "By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization.",
                "Figure 12: Concept agent tree after taking in account hepatitis Then, the ontologist interacts with the system and adds a new concept described by the term hepatitis and linked to the root.",
                "The system reacts and stabilizes, we then obtain figure 12 as a result. hepatitis is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example.",
                "We need to improve our distributed algorithm to allow a concept to move along a branch.",
                "We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult.",
                "In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the Dynamo system.",
                "Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result.",
                "But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise.",
                "Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree.",
                "By looking at figure 7, it is clear that some pruning could be done in the taxonomy.",
                "In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore.",
                "Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form.",
                "In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged.",
                "Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf.",
                "As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root.",
                "Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6.",
                "CONCLUSION After being presented as a promising solution, ensuring model quality and their terminological richness, ontology building from textual corpus analysis is difficult and costly.",
                "It requires analyst supervising and taking in account the ontology aim.",
                "Using natural languages processing tools ease the knowledge localization in texts through language uses.",
                "That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements.",
                "Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result.",
                "We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts.",
                "Our system makes use of a terminological network resulting from an analysis made by Syntex.",
                "The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made.",
                "Performances of the system are interesting and some aspects are even comparable to their centralized counterpart.",
                "Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information.",
                "From the point of view of ontology building, this work is a first step showing the relevance of our approach.",
                "It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees.",
                "From this improvements we are mostly focusing on the pruning to obtain better taxonomies.",
                "Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm.",
                "In other words this algorithm introduces inThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a dynamic equilibrium.",
                "Also from the multi-agent engineering point of view, their use in a dynamic ontology context has shown its relevance.",
                "This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through cooperation has been an efficient solution.",
                "And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper.",
                "Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach.",
                "Were planning to work on such benchmarking in the near future. 7.",
                "REFERENCES [1] H. Assadi.",
                "Construction of a regional ontology from text and its use within a documentary system.",
                "Proceedings of the International Conference on Formal Ontology and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel.",
                "Text analysis for ontology and terminology engineering.",
                "Journal of Applied Ontology, 2005. [3] J. Bao and V. Honavar.",
                "Collaborative ontology building with wiki@nt.",
                "Proceedings of the Workshop on Evaluation of Ontology-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard.",
                "Agent-Oriented Methodologies, chapter 7.",
                "Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202.",
                "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks.",
                "Background and foreground knowledge in dynamic ontology construction.",
                "Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec.",
                "A corpus-based conceptual clustering method for verb frames and ontology acquisition.",
                "LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon.",
                "Ontology Engineering: a Survey and a Return on Experience.",
                "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize.",
                "Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize.",
                "A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems.",
                "Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler.",
                "Dynamic ontologies on the web.",
                "American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent.",
                "Terminology extraction from text to build an ontology in surgical intensive care.",
                "Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter.",
                "Reconciling Ontological Differences by Assistant Agents.",
                "AAMAS06, May 2006. [13] A. Maedche.",
                "Ontology learning for the Semantic Web.",
                "Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab.",
                "Mining Ontologies from Text.",
                "EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze.",
                "Foundations of Statistical Natural Language Processing.",
                "The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner.",
                "Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)"
            ],
            "original_annotated_samples": [
                "In the <br>multi-agent field</br>, ontologies generally enable agents to understand each other [12]."
            ],
            "translated_annotated_samples": [
                "En el <br>campo de los agentes múltiples</br>, las ontologías generalmente permiten que los agentes se entiendan entre sí [12]."
            ],
            "translated_text": "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de ontologías a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías. Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una arquitectura multiagente adaptativa. En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque. Se evalúa y se compara con un algoritmo centralizado más convencional. También presentamos cómo ha sido mejorado utilizando un enfoque de múltiples criterios. Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de ontologías. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Experimentación 1. INTRODUCCIÓN En la actualidad, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de información. Pero construir una ontología manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo. Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados. Significaría crear ontologías dinámicas [10] y justifica la aparición de técnicas de aprendizaje de ontologías [14] [13]. Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una ontología a partir de un conjunto específico de textos de un dominio. Nuestro objetivo no es construir una ontología jerárquica exhaustiva y general, sino una específica para un dominio. Proponemos una herramienta semi-automatizada ya que se requiere un recurso externo: el ontólogo. Un ontólogo es una especie de ingeniero cognitivo, o analista, que utiliza información de textos y entrevistas con expertos para diseñar ontologías. En el <br>campo de los agentes múltiples</br>, las ontologías generalmente permiten que los agentes se entiendan entre sí [12]. A veces se utilizan para facilitar el proceso de construcción de la ontología, en particular en contextos colaborativos [3], pero rara vez representan la ontología en sí misma [16]. La mayoría de los trabajos interesados en la construcción de ontologías [7] proponen el refinamiento de las ontologías. Este proceso consiste en utilizar una ontología existente y construir una nueva a partir de ella. Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero. Los investigadores, que trabajan en la construcción de ontologías a partir de textos, afirman que el trabajo a automatizar requiere recursos externos como un diccionario [14] o acceso a la web [5]. En nuestro trabajo, proponemos una interacción entre el ontólogo y el sistema, nuestro recurso externo radica tanto en los textos como en el ontólogo. Este documento primero presenta, en la sección 2, la visión general del sistema Dynamo. En particular, los motivos que llevaron a su creación y su arquitectura general. Luego, en la sección 3 discutimos el algoritmo de clustering distribuido utilizado en Dynamo y lo comparamos con un enfoque más clásico y centralizado. La sección 4 está dedicada a mejorar el comportamiento de los agentes que fue diseñado teniendo en cuenta criterios ignorados por el agrupamiento. Y finalmente, en la sección 5, discutimos las limitaciones de nuestro enfoque y explicamos cómo se abordarán en trabajos futuros. DYNAMO RESUMEN 2.1 Ontología como un Sistema Multiagente Dynamo tiene como objetivo reducir la necesidad de acciones manuales en el procesamiento de los resultados del análisis de texto y sugerir un inicio de red conceptual para construir ontologías de manera más eficiente. El enfoque elegido es completamente original en nuestro conocimiento y utiliza un sistema multiagente adaptativo. Esta elección se basa en las cualidades ofrecidas por el sistema multiagente: pueden facilitar el diseño interactivo de un sistema (en nuestro caso, una red conceptual), permiten su construcción incremental al tener en cuenta progresivamente nuevos datos (provenientes del análisis de texto y la interacción del usuario) y, por último pero no menos importante, pueden distribuirse fácilmente a través de una red informática. Dynamo realiza un análisis sintáctico y terminológico de textos como entrada. Utiliza varios criterios basados en estadísticas calculadas a partir de los contextos lingüísticos de los términos para crear y posicionar los conceptos. Como resultado, Dynamo proporciona al analista una organización jerárquica de conceptos (el sistema multiagente en sí mismo) que puede ser validada, refinada o modificada, hasta que obtenga un estado satisfactorio de la red semántica. Una ontología puede ser vista como un mapa estable constituido por entidades conceptuales, representadas aquí por agentes, vinculadas por relaciones etiquetadas. Por lo tanto, nuestro enfoque considera una ontología como un tipo de equilibrio entre sus concepto-agentes, donde sus fuerzas están definidas por sus relaciones potenciales. La modificación de la ontología es una perturbación del equilibrio previo por la aparición o desaparición de agentes o relaciones. De esta manera, una ontología dinámica es un proceso de autoorganización que ocurre cuando se incluyen nuevos textos en el corpus, o cuando el ontólogo interactúa con él. Para apoyar la flexibilidad necesaria de dicho sistema, utilizamos un sistema multiagente autoorganizado basado en un enfoque cooperativo [9]. Seguimos el método ADELFE [4] propuesto para guiar el diseño de este tipo de sistema multiagente. Se justifica cómo diseñamos algunas de las reglas utilizadas por nuestros agentes para maximizar el grado de cooperación dentro del sistema multiagente de Dynamos. 2.2 Arquitectura Propuesta En esta sección, presentamos nuestra arquitectura del sistema. Aborda las necesidades de la Ingeniería del Conocimiento en el contexto de la gestión y mantenimiento dinámico de ontologías cuando la ontología está vinculada a una colección de documentos. El sistema Dynamo consta de tres partes (cf. figura 1): • una red de términos, obtenida gracias a una herramienta de extracción de términos utilizada para preprocesar el corpus textual, • un sistema multiagente que utiliza la red de términos para realizar un agrupamiento jerárquico con el fin de obtener una taxonomía de conceptos, • una interfaz que permite al ontólogo visualizar y controlar el proceso de agrupamiento. El extractor de términos que utilizamos es Syntex, un software que ha sido utilizado eficientemente para tareas de construcción de ontologías [11]. Principalmente lo seleccionamos por su robustez y la gran cantidad de información extraída. En particular, crea una red de Expansión de Cabeza que ya ha demostrado ser interesante para un sistema de agrupamiento [1]. En una red de este tipo, cada término está vinculado a su término principal y, es decir, a la subfrase máxima ubicada como término principal de su término de expansión, y también a todos los términos para los cuales es un término principal o un término de expansión. Por ejemplo, la ingeniería del conocimiento a partir de texto tiene como término principal la ingeniería del conocimiento y como término de expansión el texto. Además, la ingeniería del conocimiento se compone del conocimiento como término principal y la ingeniería como término de expansión. Con Dynamo, el término de red obtenido como resultado del extractor se almacena en una base de datos. Para cada par de términos, asumimos que es posible calcular un valor de similitud para realizar un agrupamiento [6] [1]. Debido a la naturaleza de los datos, nos estamos enfocando únicamente en la computación de similitud entre objetos descritos gracias a variables binarias, lo que significa que cada elemento está descrito por la presencia o ausencia de un conjunto de características [15]. En el caso de los términos, generalmente estamos tratando con sus contextos de uso. Con Syntex, esos contextos son identificados por términos y caracterizados por algunas relaciones sintácticas. El sistema multiagente Dynamo implementa el algoritmo de clustering distribuido descrito en detalle en la sección 3 y las reglas descritas en la sección 4. Está diseñado para ser tanto el sistema que produce la estructura resultante como la estructura en sí misma. Significa que cada agente representa una clase en la taxonomía. Entonces, la salida del sistema es la organización obtenida a partir de la interacción entre agentes, teniendo en cuenta la retroalimentación proveniente del ontólogo cuando modifica la taxonomía dada sus necesidades o experiencia. CLUSTERING DISTRIBUIDO Esta sección presenta el algoritmo de clustering distribuido utilizado en Dynamo. Por el bien de la comprensión, y debido a su evaluación en la sección 3.1, recordamos el algoritmo centralizado básico utilizado para un agrupamiento jerárquico ascendente en un espacio no métrico, cuando se dispone de una medida de similitud simétrica [15] (que es el caso de las medidas utilizadas en nuestro sistema). Algoritmo 1: Algoritmo de agrupamiento jerárquico ascendente centralizado Datos: Lista L de elementos para organizar como una jerarquía Resultado: Raíz R de la jerarquía mientras longitud(L) > 1 hacer max ← 0; A ← nil; B ← nil; para i ← 1 a longitud(L) hacer I ← L[i]; para j ← i + 1 a longitud(L) hacer J ← L[j]; sim ← similitud(I, J); si sim > max entonces max ← sim; A ← I; B ← J; fin si fin para fin para quitar(A, L); quitar(B, L); agregar((A, B), L); fin mientras R ← L[1]; En el algoritmo 1, para cada paso de agrupamiento, se determina el par de elementos más similares. Esos dos elementos están agrupados en un conjunto, y la clase resultante se añade a la lista de elementos restantes. Este algoritmo se detiene cuando la lista tiene solo un elemento restante. 2 es decir, la subfrase máxima ubicada como cola del término The Sixth Intl. La jerarquía resultante del algoritmo 1 siempre es un árbol binario debido a la forma en que se realiza el agrupamiento. Además, agrupar los elementos más similares es equivalente a alejarlos de los menos similares. Nuestro algoritmo distribuido está diseñado basándose en esos dos hechos. Se ejecuta de forma simultánea en cada uno de los agentes del sistema. Cabe destacar que, en lo que sigue de este artículo, utilizamos para ambos algoritmos una similitud de Anderberg (con α = 0.75) y una estrategia de agrupamiento de enlace promedio [15]. Esas decisiones tienen un impacto en el árbol resultante, pero no afectan ni la ejecución global del algoritmo ni su complejidad. Ahora presentamos el algoritmo distribuido utilizado en nuestro sistema. Se inicia de la siguiente manera: • se crea un agente TOP que no tiene padre, será la raíz de la taxonomía resultante, • se crea un agente para cada término que se va a posicionar en la taxonomía, todos tienen como padre a TOP. Una vez que se establece esta estructura básica, el algoritmo se ejecuta hasta que alcanza el equilibrio y luego proporciona la taxonomía resultante. El proceso de la primera etapa (figura 2) se activa cuando un agente (aquí Ak) tiene más de un hermano (ya que queremos obtener un árbol binario). Luego envía un mensaje a su padre P indicando a su hermano más diferente (aquí A1). Entonces P recibe el mismo tipo de mensaje de cada uno de sus hijos. En lo siguiente, este tipo de mensaje se llamará voto. A continuación, cuando P ha recibido mensajes de todos sus hijos, comienza el segundo paso (figura 3). Gracias a los mensajes recibidos que indican las preferencias de sus hijos, P puede determinar tres subgrupos entre sus hijos: el hijo que recibió más votos de sus hermanos, es decir, el hijo que es más diferente del mayor número de sus hermanos. En caso de empate, uno de los ganadores es elegido al azar (aquí A1), los niños que permitieron la elección del primer grupo, es decir, los agentes que eligieron a su hermano del primer grupo como el más diferente (aquí Ak a An), los niños restantes (aquí A2 a Ak−1). Entonces P crea un nuevo agente P (teniendo a P como padre) y pide a los agentes del segundo grupo (aquí los agentes Ak a An) que lo elijan como su nuevo padre. Ak−1 Ak AnA2A1 P P ...... ...... \n\nAk−1 Ak AnA2A1 P P ...... ...... Figura 4: Agrupamiento distribuido: Paso 3 Finalmente, el paso 3 (figura 4) es trivial. Los niños rechazados por P (aquí el agente A2 a An) tienen en cuenta su mensaje y eligen a P como su nuevo padre. La jerarquía acaba de crear un nuevo nivel intermedio. Ten en cuenta que este algoritmo generalmente converge, ya que el número de hermanos de un agente disminuye. Cuando un agente tiene solamente un hermano restante, su actividad se detiene (aunque sigue procesando los mensajes que llegan de sus hijos). Sin embargo, en algunos casos podemos llegar a un conflicto circular en el procedimiento de votación cuando, por ejemplo, A vota en contra de B, B en contra de C y C en contra de A. Con el sistema actual no se puede tomar ninguna decisión. El procedimiento actual debería mejorarse para abordar esto, probablemente utilizando un método de votación clasificado. 3.1 Evaluación Cuantitativa Ahora, evaluamos las propiedades de nuestro algoritmo distribuido. Se requiere comenzar con una evaluación cuantitativa, basada en su complejidad, mientras se compara con el algoritmo 1 de la sección anterior. Su complejidad teórica se calcula para el peor caso, considerando la operación de cálculo de similitud como elemental. Para el algoritmo distribuido, el peor caso significa que en cada ejecución, solo se puede crear un grupo de dos elementos. Bajo esas condiciones, para un conjunto de datos dado de n elementos, podemos determinar la cantidad de cálculos de similitud. Para el algoritmo 1, notamos que l = longitud(L), luego el bucle más interno se ejecuta l - i veces. Y su cuerpo tiene la única computación de similitud, por lo que su costo es l−i. El segundo bucle for se ejecuta l veces para i que varía de 1 a l. Entonces su costo es Pl i=1(l − i) que puede simplificarse en l×(l−1) 2. Finalmente, para cada ejecución del bucle while, l se reduce de n a 1, lo que nos da t1(n) como la cantidad de cálculos de similitud para el algoritmo 1: t1(n) = nX l=1 l × (l − 1) 2 (1) Para el algoritmo distribuido, en un paso dado, cada uno de los l agentes evalúa la similitud con sus l −1 compañeros. Entonces, cada paso tiene un costo de l × (l − 1). Entonces, se crean grupos y se realiza otra votación con l disminuido en uno (ya que asumimos el peor caso, solo se forman grupos de tamaño 2 o l −1). Dado que l es igual a n en la primera ejecución, obtenemos tdist(n) como la cantidad de cálculos de similitud para el algoritmo distribuido: tdist(n) = nX l=1 l × (l − 1) (2) Ambos algoritmos tienen una complejidad O(n3). Pero en el peor de los casos, el algoritmo distribuido realiza el doble del número de el1288 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) operaciones elementales realizadas por el algoritmo centralizado. Esta brecha proviene de la toma de decisiones local en cada agente. Debido a esto, los cálculos de similitud se realizan dos veces para cada par de agentes. Podríamos concebir que un agente envía el resultado de su cálculo a su par. Sin embargo, simplemente trasladaría el problema al generar más comunicación en el sistema. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Cantidad de comparaciones Cantidad de términos de entrada 1. Algoritmo distribuido (en promedio, con mínimo y máximo) 2. Polinomio logarítmico 3. En la Figura 5 se muestra el algoritmo centralizado: Resultados experimentales. En un segundo paso, la complejidad promedio del algoritmo ha sido determinada mediante experimentos. El sistema multiagente ha sido ejecutado con conjuntos de datos de entrada generados aleatoriamente que van desde diez hasta cien términos. El valor dado es el promedio de las comparaciones realizadas para cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 5. El algoritmo es entonces más eficiente en promedio que el algoritmo centralizado, y su complejidad promedio está por debajo del peor caso. Se puede explicar por la baja probabilidad de que un conjunto de datos obligue al sistema a crear solo grupos mínimos (dos elementos) o máximos (n − 1 elementos) para cada paso de razonamiento. La curva número 2 representa el polinomio logarítmico que minimiza el error con respecto a la curva número 1. El término de mayor grado de este polinomio es n2 log(n), por lo tanto, nuestro algoritmo distribuido tiene una complejidad O(n2 log(n)) en promedio. Finalmente, notemos la reducida variación de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 1,960.75 para un promedio de 40,550.10 (alrededor del 5%), lo que muestra la buena estabilidad del sistema. Aunque los resultados cuantitativos son interesantes, la verdadera ventaja de este enfoque proviene de características más cualitativas que presentaremos en esta sección. Todos son ventajas obtenidas gracias al uso de un sistema multiagente adaptativo. La principal ventaja del uso de un sistema multiagente para una tarea de agrupamiento es introducir dinamismo en dicho sistema. El ontólogo puede hacer modificaciones y la jerarquía se adapta dependiendo de la solicitud. Es particularmente interesante en un contexto de ingeniería del conocimiento. De hecho, la jerarquía creada por el sistema está destinada a ser modificada por el ontólogo ya que es el resultado de un cálculo estadístico. Durante la revisión necesaria de los textos para examinar los contextos de uso de los términos [2], el ontólogo podrá interpretar el contenido real y revisar la propuesta del sistema. Es extremadamente difícil lograr esto con un enfoque centralizado de caja negra. En la mayoría de los casos, uno tiene que encontrar qué paso de razonamiento generó el error y modificar manualmente la clase resultante. Desafortunadamente, en este caso, todos los pasos de razonamiento que ocurrieron después de la creación de la clase modificada se pierden y deben ser recalculados teniendo en cuenta la modificación. Por eso, un sistema como ASIUM [6] intenta suavizar el problema con una colaboración entre el sistema y el usuario mostrando al ontólogo las clases creadas después de cada paso de razonamiento. Pero el ontólogo puede cometer un error y darse cuenta de ello demasiado tarde. Figura 6: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos un ejemplo gracias a algunas capturas de pantalla del prototipo en funcionamiento probado en un corpus relacionado con la medicina. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 6 después de la estabilización. Es evidente que el concepto descrito por el término lesión está mal ubicado. Las computaciones de similitud lo sitúan más cerca de femme (mujer) y chirurgien (cirujano) que de infección, gastro-enteritis y hepatitis. Esta posición incorrecta para la lesión se explica por el hecho de que sin la entrada del ontólogo, el razonamiento se basa únicamente en criterios estadísticos. Figura 7: Árbol de agentes conceptuales después de la modificación del ontólogo. Luego, el ontólogo reemplaza el concepto en la rama derecha, afectando a ConceptAgent:8 como su nuevo padre. El nombre ConceptAgent:X se asigna automáticamente a un agente conceptual que no está descrito por un término. El sistema reacciona por sí mismo y perfecciona la jerarquía de agrupación para obtener un árbol binario creando ConceptAgent:11. El nuevo estado estable es el de la figura 7. Este acoplamiento sistema-usuario es necesario para construir una ontología, pero no se necesita ningún ajuste particular al principio del algoritmo distribuido ya que cada agente realiza un procesamiento local autónomo y se comunica con su vecindario a través de mensajes. Además, este algoritmo puede ser distribuido de facto en una red de computadoras. La comunicación entre agentes se realiza enviando mensajes y cada uno mantiene su autonomía de decisión. Entonces, una modificación del sistema para hacerlo funcionar en red no requeriría ajustar el algoritmo. Por el contrario, solo sería necesario reestructurar la capa de comunicación y el proceso de creación de agentes, ya que en nuestra implementación actual no están en red. 4. EN LA JERARQUÍA DE MÚLTIPLES CRITERIOS En las secciones anteriores, asumimos que la similitud se puede calcular para cualquier par de términos. Pero, tan pronto como se utilizan datos reales, esta propiedad ya no se verifica. Algunos términos no tienen ningún valor de similitud con ningún término extraído. Además, para los nodos hoja a veces es interesante utilizar otros medios para posicionarlos en la jerarquía. Para esta estructuración de bajo nivel, los ontólogos generalmente se basan en The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1289 sus elecciones en heurísticas simples. Usando esta observación, construimos un nuevo conjunto de reglas, que no se basan en la similitud para respaldar la estructuración de bajo nivel. 4.1 Agregar reglas de cobertura de cabeza En este caso, los agentes pueden actuar con un punto de vista muy local simplemente mirando la relación padre/hijo. Cada agente puede intentar determinar si su padre es adecuado. Es posible adivinar esto porque cada agente conceptual está descrito por un conjunto de términos y gracias a la red de términos de Expansión de Cabeza. En el siguiente TX será el conjunto de términos que describen el concepto del agente X y head(TX) el conjunto de todos los términos que son cabeza de al menos un elemento de TX. Gracias a esas dos notaciones podemos describir la función de adecuación entre un padre P y un hijo C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Entonces, el mejor padre para C es el agente P que maximiza a(P, C). Un agente insatisfecho con su padre puede intentar encontrar uno mejor evaluando la idoneidad de los candidatos. Diseñamos un algoritmo complementario para dirigir esta búsqueda: cuando un agente C no está satisfecho con su padre P, evalúa a(Bi, C) con todos sus hermanos (notados Bi); luego se elige como nuevo padre aquel que maximice a(Bi, C). Figura 8: Árbol de agentes conceptuales después de la estabilización autónoma del sistema sin la regla de cobertura de cabeza. Ahora ilustramos este comportamiento de regla con un ejemplo. La Figura 8 muestra el estado del sistema después de la estabilización en los datos de prueba. Podemos notar que la hepatitis viral todavía está vinculada a la raíz taxonómica. Se debe al hecho de que no hay valor de similitud entre el término hepatitis viral y ninguno de los términos de los otros agentes conceptuales. Figura 9: Árbol de agentes conceptuales después de la activación de la regla de cobertura de la cabeza. Tras activar la regla de cobertura de la cabeza y permitir que el sistema se estabilice nuevamente, obtenemos la figura 9. Podemos ver que la hepatitis viral se deslizó a través de la rama que llevaba a la hepatitis y la eligió como su nueva progenitora. Es una elección por defecto sensata, ya que la hepatitis viral es un término más específico que la hepatitis. Esta regla tiende a hacer que los agentes descritos por un conjunto de términos se conviertan en hojas del árbol conceptual. Aborda nuestra preocupación por mejorar la estructuración de bajo nivel de nuestra taxonomía. Pero obviamente nuestros agentes carecen de un método para retroceder en caso de modificaciones en la taxonomía que los ubicarían en la rama incorrecta. Ese es uno de los puntos en los que nuestro sistema aún debe ser mejorado al agregar otro conjunto de reglas. 4.2 Sobre el uso de varios criterios En las secciones y ejemplos anteriores, solo utilizamos un algoritmo a la vez. El algoritmo de agrupamiento distribuido tiende a introducir nuevas capas en la taxonomía, mientras que el algoritmo de cobertura de cabeza tiende a empujar algunos de los agentes hacia las hojas de la taxonomía. Obviamente plantea la pregunta sobre cómo lidiar con múltiples criterios en la construcción de nuestra taxonomía, y cómo los agentes determinan sus prioridades en un momento dado. La solución que elegimos proviene de la búsqueda de minimizar la falta de cooperación dentro del sistema de acuerdo con el método ADELFE. Cada agente calcula tres grados de no cooperación y elige su prioridad actual dependiendo de cuál grado sea el más alto. Para un agente A dado que tiene un padre P, un conjunto de hermanos Bi y que recibió un conjunto de mensajes Mk con prioridad pk, los tres grados de no cooperación son: • μH (A) = 1 − a(P, A), es el grado de no cooperación de cobertura de cabeza, determinado por la cobertura de cabeza del padre, • μB(A) = max(1 − similitud(A, Bi)), es el grado de no cooperación de hermandad, determinado por el peor hermano de A en cuanto a similitudes, • μM (A) = max(pk), es el grado de no cooperación de mensaje, determinado por el mensaje más urgente recibido. Entonces, el grado de no cooperación μ(A) del agente A es: μ(A) = max(μH (A), μB(A), μM (A)) (4) Luego, tenemos tres casos que determinan qué tipo de acción elegirá A: • si μ(A) = μH (A) entonces A utilizará el algoritmo de cobertura de cabeza que detallamos en la subsección anterior • si μ(A) = μB(A) entonces A utilizará el algoritmo de agrupamiento distribuido (ver sección 3) • si μ(A) = μM (A) entonces A procesará Mk inmediatamente para ayudar a su remitente Estos tres casos resumen las actividades actuales de nuestros agentes: tienen que encontrar el mejor padre para ellos (μ(A) = μH (A)), mejorar la estructuración a través del agrupamiento (μ(A) = μB(A)) y procesar otros mensajes de agentes (μ(A) = μM (A)) para ayudarlos a cumplir sus propios objetivos. 4.3 Complejidad Experimental Revisitada Evaluamos la complejidad experimental de todo el sistema multiagente cuando todas las reglas están activadas. En este caso, la métrica utilizada es el número de mensajes intercambiados en el sistema. Una vez más, el sistema ha sido ejecutado con conjuntos de datos de entrada que van desde diez hasta cien términos. El valor dado es el promedio del número de mensajes enviados en el sistema en su totalidad durante cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 10. La curva número 1 representa el promedio del valor obtenido. La curva número 2 representa el promedio del valor obtenido cuando solo se activa el algoritmo de agrupamiento distribuido, no el conjunto completo de reglas. La curva número 3 representa el polinomio que minimiza el error con la curva número 1. El término de mayor grado de este polinomio es en n3, entonces nuestro sistema multiagente tiene una complejidad O(n3). Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Cantidad de mensajes Cantidad de términos de entrada 1. Dinamo, todas las reglas (en promedio, con mínimo y máximo) 2. Agrupamiento distribuido solo (en promedio) 2. Figura 10: Resultados experimentales en promedio de un polinomio cúbico. Además, notemos la variación muy pequeña de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 126.73 para un promedio de 20,737.03 (alrededor del 0.6%), lo que demuestra la excelente estabilidad del sistema. Finalmente, las reglas adicionales de cobertura de cabeza son una verdadera mejora sobre el algoritmo distribuido por sí solo. Introducen más restricciones y se alcanza el punto de estabilidad con menos interacciones y toma de decisiones por parte de los agentes. Significa que se intercambian menos mensajes en el sistema al obtener un árbol de mayor calidad para el ontólogo. 5. DISCUSIÓN Y PERSPECTIVAS 5.1 Limitación actual de nuestro enfoque La limitación más importante de nuestro algoritmo actual es que el resultado depende del orden en que se agregan los datos. Cuando el sistema funciona por sí solo en un conjunto de datos fijo proporcionado durante la inicialización, el resultado final es equivalente a lo que podríamos obtener con un algoritmo centralizado. Por el contrario, añadir un nuevo elemento después de una primera estabilización tiene un impacto en el resultado final. Figura 11: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos otro ejemplo del sistema en funcionamiento. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 11 después de la estabilización. Figura 12: Árbol de agentes conceptuales después de tener en cuenta la hepatitis. Luego, el ontólogo interactúa con el sistema y agrega un nuevo concepto descrito por el término hepatitis y vinculado a la raíz. El sistema reacciona y se estabiliza, luego obtenemos la figura 12 como resultado. La hepatitis se encuentra en la rama derecha, pero no hemos obtenido la misma organización que la figura 6 del ejemplo anterior. Necesitamos mejorar nuestro algoritmo distribuido para permitir que un concepto se mueva a lo largo de una rama. Actualmente estamos trabajando en las reglas requeridas, pero la comparación con el algoritmo centralizado se volverá muy difícil. En particular, ya que tendrán en cuenta criterios ignorados por el algoritmo centralizado. 5.2 Poda para la construcción de ontologías En la sección 3, presentamos el algoritmo de agrupamiento distribuido utilizado en el sistema Dynamo. Dado que este trabajo se basó inicialmente en este algoritmo, introdujo un claro sesgo hacia los árboles binarios como resultado. Pero debemos tener en cuenta que estamos tratando de obtener taxonomías que sean más refinadas y concisas. Aunque la regla de cobertura de la cabeza es una mejora porque se basa en cómo generalmente trabajan los ontólogos, solo aborda la estructuración a un nivel bajo y no a los niveles intermedios del árbol. Al observar la figura 7, es evidente que se podría realizar una poda en la taxonomía. En particular, dado que la lesión se movió, el ConceptAgent:9 podría ser eliminado, ya no es necesario. Además, la rama que comienza con ConceptAgent:8 respeta claramente la restricción de formar un árbol binario, pero sería más útil para el usuario en una forma más compacta y significativa. En este caso, ConceptAgent:10 y ConceptAgent:11 probablemente podrían fusionarse. Actualmente, nuestro sistema cuenta con las reglas necesarias para crear niveles intermedios en la taxonomía, o para que los conceptos se desplacen hacia la hoja. Como señalamos, no es suficiente, por lo que se necesitan nuevas reglas para permitir eliminar nodos del árbol o moverlos hacia la raíz. La mayor parte del trabajo necesario para desarrollar esas reglas consiste en encontrar la información estadística relevante que respaldará al ontólogo. CONCLUSIÓN Después de ser presentada como una solución prometedora, garantizar la calidad del modelo y su riqueza terminológica, la construcción de ontologías a partir del análisis de corpus textual es difícil y costosa. Requiere supervisión del analista y tener en cuenta el objetivo de la ontología. El uso de herramientas de procesamiento de lenguaje natural facilita la localización del conocimiento en textos a través del uso del lenguaje. Dicho esto, esas herramientas producen una gran cantidad de datos léxicos o gramaticales que no son triviales de examinar para definir elementos conceptuales. Nuestra contribución radica en este paso del proceso de modelado a partir de textos, antes de intentar normalizar o formalizar el resultado. Propusimos un enfoque basado en un sistema multiagente adaptativo para proporcionar al ontólogo una primera estructura taxonómica de conceptos. Nuestro sistema hace uso de una red terminológica resultante de un análisis realizado por Syntex. El estado actual de nuestro software permite producir estructuras simples, proponérselas al ontólogo y hacerlas evolucionar dependiendo de las modificaciones que él realice. Las actuaciones del sistema son interesantes y algunos aspectos son incluso comparables a su contraparte centralizada. Sus fortalezas son principalmente cualitativas ya que permite interacciones de usuario más sutiles y una adaptación progresiva a nueva información basada en el lenguaje. Desde el punto de vista de la construcción de la ontología, este trabajo es un primer paso que muestra la relevancia de nuestro enfoque. Debe continuar, tanto para garantizar una mejor robustez durante la clasificación, como para obtener estructuras semánticas más ricas que simples árboles. De estas mejoras, nos estamos enfocando principalmente en la poda para obtener mejores taxonomías. Actualmente estamos trabajando en el criterio para activar las acciones complementarias de los cambios de estructura aplicados por nuestro algoritmo de agrupamiento. En otras palabras, este algoritmo se introduce en el Sexto Congreso Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1291 niveles intermedios, y necesitamos poder eliminarlos si es necesario, para alcanzar un equilibrio dinámico. También desde el punto de vista de la ingeniería multiagente, su uso en un contexto de ontología dinámica ha demostrado su relevancia. Estas ontologías dinámicas pueden ser vistas como una resolución de problemas complejos, en tal caso la autoorganización a través de la cooperación ha sido una solución eficiente. Y, en general, es probable que sea interesante para otras tareas relacionadas con el diseño, incluso si nos estamos enfocando únicamente en la ingeniería del conocimiento en este artículo. Por supuesto, nuestro sistema aún requiere más trabajo de evaluación y validación para determinar con precisión las ventajas y desventajas de este enfoque. Estamos planeando trabajar en ese tipo de comparación en un futuro cercano. 7. REFERENCIAS [1] H. Assadi. Construcción de una ontología regional a partir de texto y su uso dentro de un sistema documental. Actas de la Conferencia Internacional sobre Ontología Formal y Sistemas de Información - FOIS98, páginas 236-249, 1998. [2] N. Aussenac-Gilles y D. Sörgel. Análisis de texto para ingeniería de ontologías y terminología. Revista de Ontología Aplicada, 2005. [3] J. Bao y V. Honavar. Construcción colaborativa de ontologías con wiki@nt. Actas del Taller de Evaluación de Herramientas Basadas en Ontologías (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes y G. Picard. Metodologías Orientadas a Agentes, capítulo 7. Ingeniería de Sistemas Multiagente Autoadaptativos: la Metodología ADELFE, páginas 172-202. Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna y Y. Wilks. Antecedentes y conocimiento previo en la construcción dinámica de ontologías. Taller de la Web Semántica, SIGIR03, agosto de 2003. [6] D. Faure y C. Nedellec. Un método de agrupamiento conceptual basado en corpus para marcos verbales y adquisición de ontologías. Taller LREC sobre la adaptación de recursos léxicos y corpus a sublenguajes y aplicaciones, 1998. [7] F. Gandon. Ingeniería de Ontologías: una Encuesta y un Retorno de Experiencia. INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes y P. Glize. Diseño Vivo para Sistemas Computacionales Abiertos. 12º Talleres Internacionales de la IEEE sobre Tecnologías Habilitadoras, Infraestructura para Empresas Colaborativas, páginas 389-394, junio de 2003. [9] M.-P. Gleizes, V. Camps y P. Glize. Una teoría de computación emergente basada en la autoorganización cooperativa para sistemas artificiales adaptativos. Cuarto Congreso Europeo de Ciencias de los Sistemas, septiembre de 1999. [10] J. Heflin y J. Hendler. Ontologías dinámicas en la web. Conferencia de la Asociación Americana de Inteligencia Artificial, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault y M.-C. Jaulent. Extracción de terminología del texto para construir una ontología en cuidados intensivos quirúrgicos. Actas del simposio anual de la AMIA 2002, 2002. [12] K. Lister, L. Sterling y K. Taveter. Reconciliando diferencias ontológicas mediante agentes asistentes. AAMAS06, mayo de 2006. [13] A. Maedche. Aprendizaje de ontologías para la Web Semántica. Editorial Kluwer Academic, 2002. [14] A. Maedche y S. Staab. Extracción de ontologías a partir de texto. EKAW 2000, páginas 189-202, 2000. [15] C. D. Manning y H. Schütze. Fundamentos del Procesamiento del Lenguaje Natural Estadístico. El MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding y S. Brueckner. Clustering jerárquico descentralizado dinámico en cualquier momento. 29ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, agosto de 2006. 1292 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "dynamo": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of Ontology Learning.",
                "Our system named <br>dynamo</br> is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
                "In this paper we present a distributed hierarchical clustering algorithm, core of our approach.",
                "It is evaluated and compared to a more conventional centralized algorithm.",
                "We also present how it has been improved using a multi-criteria approach.",
                "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete ontology building solution.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval.",
                "But building an ontology manually is a slow, tedious, costly, complex and time consuming process.",
                "Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date.",
                "It would mean creating dynamic ontologies [10] and it justifies the emergence of ontology learning techniques [14] [13].",
                "Our research focuses on <br>dynamo</br> (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts.",
                "Our aim is not to build an exhaustive, general hierarchical ontology but a domain specific one.",
                "We propose a semi-automated tool since an external resource is required: the ontologist.",
                "An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies.",
                "In the multi-agent field, ontologies generally enable agents to understand each other [12].",
                "Theyre sometimes used to ease the ontology building process, in particular for collaborative contexts [3], but they rarely represent the ontology itself [16].",
                "Most works interested in the construction of ontologies [7] propose the refinement of ontologies.",
                "This process consists in using an existing ontology and building a new one from it.",
                "This approach is different from our approach because <br>dynamo</br> starts from scratch.",
                "Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5].",
                "In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist.",
                "This paper first presents, in section 2, the big picture of the <br>dynamo</br> system.",
                "In particular the motives that led to its creation and its general architecture.",
                "Then, in section 3 we discuss the distributed clustering algorithm used in <br>dynamo</br> and compare it to a more classic centralized approach.",
                "Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering.",
                "And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2.",
                "<br>dynamo</br> OVERVIEW 2.1 Ontology as a Multi-Agent System <br>dynamo</br> aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently.",
                "The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system.",
                "This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network.",
                "<br>dynamo</br> takes a syntactical and terminological analysis of texts as input.",
                "It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts.",
                "As output, <br>dynamo</br> provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network.",
                "An ontology can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations.",
                "Thus, our approach considers an ontology as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships.",
                "The ontology modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships.",
                "In this way, a dynamic ontology is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it.",
                "To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9].",
                "We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system.",
                "It justifies how we designed some of the rules used by our agents in order to maximize the cooperation degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
                "It addresses the needs of Knowledge Engineering in the context of dynamic ontology management and maintenance when the ontology is linked to a document collection.",
                "The <br>dynamo</br> system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ? ?",
                "Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for ontology building tasks [11].",
                "We mainly selected it because of its robustness and the great amount of information extracted.",
                "In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1].",
                "In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term.",
                "For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term.",
                "Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term.",
                "With <br>dynamo</br>, the term network obtained as the output of the extractor is stored in a database.",
                "For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1].",
                "Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15].",
                "In the case of terms we are generally dealing with their usage contexts.",
                "With Syntex, those contexts are identified by terms and characterized by some syntactic relations.",
                "The <br>dynamo</br> multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4.",
                "It is designed to be both the system producing the resulting structure and the structure itself.",
                "It means that each agent represent a class in the taxonomy.",
                "Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3.",
                "DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in <br>dynamo</br>.",
                "For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system).",
                "Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined.",
                "Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements.",
                "This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done.",
                "Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones.",
                "Our distributed algorithm is designed relying on those two facts.",
                "It is executed concurrently in each of the agents of the system.",
                "Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15].",
                "Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity.",
                "We now present the distributed algorithm used in our system.",
                "It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent.",
                "Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy.",
                "Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree).",
                "Then it sends a message to its parent P indicating its most dissimilar brother (here A1).",
                "Then P receives the same kind of message from each of its children.",
                "In the following, this kind of message will be called a vote.",
                "Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3).",
                "Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers.",
                "In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1).",
                "Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent.",
                "Ak−1 Ak AnA2A1 P P ...... ......",
                "Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial.",
                "The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent.",
                "The hierarchy just created a new intermediate level.",
                "Note that this algorithm generally converges, since the number of brothers of an agent drops.",
                "When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children).",
                "However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A.",
                "With the current system no decision can be taken.",
                "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 Quantitative Evaluation Now, we evaluate the properties of our distributed algorithm.",
                "It requires to begin with a quantitative evaluation, based on its complexity, while comparing it with the algorithm 1 from the previous section.",
                "Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary.",
                "For the distributed algorithm, the worst case means that for each run, only a two-item group can be created.",
                "Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations.",
                "For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times.",
                "And its body has the only similarity computation, so its cost is l−i.",
                "The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 .",
                "Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers.",
                "So each steps has a l × (l − 1) cost.",
                "Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built).",
                "Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity.",
                "But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm.",
                "This gap comes from the local decision making in each agent.",
                "Because of this, the similarity computations are done twice for each agent pair.",
                "We could conceive that an agent sends its computation result to its peer.",
                "But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1.",
                "Distributed algorithm (on average, with min and max) 2.",
                "Logarithmic polynomial 3.",
                "Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments.",
                "The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms.",
                "The given value is the average of comparisons made for one hundred of runs without any user interaction.",
                "It results in the plots of figure 5.",
                "The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case.",
                "It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning.",
                "Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average.",
                "Finally, lets note the reduced variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section.",
                "All are advantages obtained thanks to the use of an adaptive multi-agent system.",
                "The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system.",
                "The ontologist can make modifications and the hierarchy adapts depending on the request.",
                "It is particularly interesting in a knowledge engineering context.",
                "Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation.",
                "During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal.",
                "It is extremely difficult to realize this with a centralized black-box approach.",
                "In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class.",
                "Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account.",
                "That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning.",
                "But, the ontologist can make a mistake, and become aware of it too late.",
                "Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus.",
                "By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization.",
                "It is clear that the concept described by the term lésion (lesion) is misplaced.",
                "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (hepatitis).",
                "This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria.",
                "Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent.",
                "The name ConceptAgent:X is automatically given to a concept agent that is not described by a term.",
                "The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11.",
                "The new stable state if the one of figure 7.",
                "This system-user coupling is necessary to build an ontology, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages.",
                "Moreover, this algorithm can de facto be distributed on a computer network.",
                "The communication between agents is then done by sending messages and each one keeps its decision autonomy.",
                "Then, a system modification to make it run networked would not require to adjust the algorithm.",
                "On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4.",
                "MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair.",
                "But, as soon as one uses real data this property is not verified anymore.",
                "Some terms do not have any similarity value with any extracted term.",
                "Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy.",
                "For this low level structuring, ontologists generally base The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics.",
                "Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation.",
                "Each agent can try to determine if its parent is adequate.",
                "It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network.",
                "In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX .",
                "Thanks to those two notations we can describe the parent adequacy function a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C).",
                "An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates.",
                "We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent.",
                "Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example.",
                "Figure 8 shows the state of the system after stabilization on test data.",
                "We can notice that hépatite viral (viral hepatitis) is still linked to the taxonomy root.",
                "It is caused by the fact that there is no similarity value between the viral hepatitis term and any of the term of the other concept agents.",
                "Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9.",
                "We can see that viral hepatitis slipped through the branch leading to hepatitis and chose it as its new parent.",
                "It is a sensible default choice since viral hepatitis is a more specific term than hepatitis.",
                "This rule tends to push agents described by a set of term to become leafs of the concept tree.",
                "It addresses our concern to improve the low level structuring of our taxonomy.",
                "But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch.",
                "That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time.",
                "The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy.",
                "It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time.",
                "The solution we chose came from the search for minimizing non cooperation within the system in accordance with the ADELFE method.",
                "Each agent computes three non cooperation degrees and chooses its current priority depending on which degree is the highest.",
                "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non cooperation degrees are: • μH (A) = 1 − a(P, A), is the head coverage non cooperation degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
                "Then, the non cooperation degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated.",
                "In this case, the metric used is the number of messages exchanged in the system.",
                "Once again the system has been executed with input data sets ranging from ten to one hundred terms.",
                "The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction.",
                "It results in the plots of figure 10.",
                "Curve number 1 represents the average of the value obtained.",
                "Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set.",
                "Curve number 3 represents the polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1.",
                "<br>dynamo</br>, all rules (on average, with min and max) 2.",
                "Distributed clustering only (on average) 2.",
                "Cubic polynomial Figure 10: Experimental results on average.",
                "Moreover, lets note the very small variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system.",
                "Finally the extra head coverage rules are a real improvement on the distributed algorithm alone.",
                "They introduce more constraints and stability point is reached with less interactions and decision making by the agents.",
                "It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5.",
                "DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added.",
                "When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm.",
                "On the contrary, adding a new item after a first stabilization has an impact on the final result.",
                "Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system.",
                "By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization.",
                "Figure 12: Concept agent tree after taking in account hepatitis Then, the ontologist interacts with the system and adds a new concept described by the term hepatitis and linked to the root.",
                "The system reacts and stabilizes, we then obtain figure 12 as a result. hepatitis is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example.",
                "We need to improve our distributed algorithm to allow a concept to move along a branch.",
                "We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult.",
                "In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the <br>dynamo</br> system.",
                "Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result.",
                "But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise.",
                "Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree.",
                "By looking at figure 7, it is clear that some pruning could be done in the taxonomy.",
                "In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore.",
                "Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form.",
                "In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged.",
                "Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf.",
                "As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root.",
                "Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6.",
                "CONCLUSION After being presented as a promising solution, ensuring model quality and their terminological richness, ontology building from textual corpus analysis is difficult and costly.",
                "It requires analyst supervising and taking in account the ontology aim.",
                "Using natural languages processing tools ease the knowledge localization in texts through language uses.",
                "That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements.",
                "Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result.",
                "We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts.",
                "Our system makes use of a terminological network resulting from an analysis made by Syntex.",
                "The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made.",
                "Performances of the system are interesting and some aspects are even comparable to their centralized counterpart.",
                "Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information.",
                "From the point of view of ontology building, this work is a first step showing the relevance of our approach.",
                "It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees.",
                "From this improvements we are mostly focusing on the pruning to obtain better taxonomies.",
                "Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm.",
                "In other words this algorithm introduces inThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a dynamic equilibrium.",
                "Also from the multi-agent engineering point of view, their use in a dynamic ontology context has shown its relevance.",
                "This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through cooperation has been an efficient solution.",
                "And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper.",
                "Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach.",
                "Were planning to work on such benchmarking in the near future. 7.",
                "REFERENCES [1] H. Assadi.",
                "Construction of a regional ontology from text and its use within a documentary system.",
                "Proceedings of the International Conference on Formal Ontology and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel.",
                "Text analysis for ontology and terminology engineering.",
                "Journal of Applied Ontology, 2005. [3] J. Bao and V. Honavar.",
                "Collaborative ontology building with wiki@nt.",
                "Proceedings of the Workshop on Evaluation of Ontology-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard.",
                "Agent-Oriented Methodologies, chapter 7.",
                "Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202.",
                "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks.",
                "Background and foreground knowledge in dynamic ontology construction.",
                "Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec.",
                "A corpus-based conceptual clustering method for verb frames and ontology acquisition.",
                "LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon.",
                "Ontology Engineering: a Survey and a Return on Experience.",
                "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize.",
                "Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize.",
                "A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems.",
                "Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler.",
                "Dynamic ontologies on the web.",
                "American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent.",
                "Terminology extraction from text to build an ontology in surgical intensive care.",
                "Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter.",
                "Reconciling Ontological Differences by Assistant Agents.",
                "AAMAS06, May 2006. [13] A. Maedche.",
                "Ontology learning for the Semantic Web.",
                "Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab.",
                "Mining Ontologies from Text.",
                "EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze.",
                "Foundations of Statistical Natural Language Processing.",
                "The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner.",
                "Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)"
            ],
            "original_annotated_samples": [
                "Our system named <br>dynamo</br> is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
                "Our research focuses on <br>dynamo</br> (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts.",
                "This approach is different from our approach because <br>dynamo</br> starts from scratch.",
                "This paper first presents, in section 2, the big picture of the <br>dynamo</br> system.",
                "Then, in section 3 we discuss the distributed clustering algorithm used in <br>dynamo</br> and compare it to a more classic centralized approach."
            ],
            "translated_annotated_samples": [
                "Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una <br>arquitectura multiagente</br> adaptativa.",
                "Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una <br>ontología</br> a partir de un conjunto específico de textos de un dominio.",
                "Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero.",
                "Este documento primero presenta, en la sección 2, la visión general del sistema Dynamo.",
                "Luego, en la sección 3 discutimos el <br>algoritmo de clustering distribuido</br> utilizado en Dynamo y lo comparamos con un enfoque más clásico y centralizado."
            ],
            "translated_text": "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de ontologías a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías. Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una <br>arquitectura multiagente</br> adaptativa. En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque. Se evalúa y se compara con un algoritmo centralizado más convencional. También presentamos cómo ha sido mejorado utilizando un enfoque de múltiples criterios. Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de ontologías. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Experimentación 1. INTRODUCCIÓN En la actualidad, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de información. Pero construir una ontología manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo. Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados. Significaría crear ontologías dinámicas [10] y justifica la aparición de técnicas de aprendizaje de ontologías [14] [13]. Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una <br>ontología</br> a partir de un conjunto específico de textos de un dominio. Nuestro objetivo no es construir una ontología jerárquica exhaustiva y general, sino una específica para un dominio. Proponemos una herramienta semi-automatizada ya que se requiere un recurso externo: el ontólogo. Un ontólogo es una especie de ingeniero cognitivo, o analista, que utiliza información de textos y entrevistas con expertos para diseñar ontologías. En el campo de los agentes múltiples, las ontologías generalmente permiten que los agentes se entiendan entre sí [12]. A veces se utilizan para facilitar el proceso de construcción de la ontología, en particular en contextos colaborativos [3], pero rara vez representan la ontología en sí misma [16]. La mayoría de los trabajos interesados en la construcción de ontologías [7] proponen el refinamiento de las ontologías. Este proceso consiste en utilizar una ontología existente y construir una nueva a partir de ella. Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero. Los investigadores, que trabajan en la construcción de ontologías a partir de textos, afirman que el trabajo a automatizar requiere recursos externos como un diccionario [14] o acceso a la web [5]. En nuestro trabajo, proponemos una interacción entre el ontólogo y el sistema, nuestro recurso externo radica tanto en los textos como en el ontólogo. Este documento primero presenta, en la sección 2, la visión general del sistema Dynamo. En particular, los motivos que llevaron a su creación y su arquitectura general. Luego, en la sección 3 discutimos el <br>algoritmo de clustering distribuido</br> utilizado en Dynamo y lo comparamos con un enfoque más clásico y centralizado. ",
            "candidates": [],
            "error": [
                [
                    "arquitectura multiagente",
                    "ontología",
                    "algoritmo de clustering distribuido"
                ]
            ]
        },
        "quantitative evaluation": {
            "translated_key": "evaluación cuantitativa",
            "is_in_text": true,
            "original_annotated_sentences": [
                "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of Ontology Learning.",
                "Our system named Dynamo is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
                "In this paper we present a distributed hierarchical clustering algorithm, core of our approach.",
                "It is evaluated and compared to a more conventional centralized algorithm.",
                "We also present how it has been improved using a multi-criteria approach.",
                "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete ontology building solution.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval.",
                "But building an ontology manually is a slow, tedious, costly, complex and time consuming process.",
                "Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date.",
                "It would mean creating dynamic ontologies [10] and it justifies the emergence of ontology learning techniques [14] [13].",
                "Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts.",
                "Our aim is not to build an exhaustive, general hierarchical ontology but a domain specific one.",
                "We propose a semi-automated tool since an external resource is required: the ontologist.",
                "An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies.",
                "In the multi-agent field, ontologies generally enable agents to understand each other [12].",
                "Theyre sometimes used to ease the ontology building process, in particular for collaborative contexts [3], but they rarely represent the ontology itself [16].",
                "Most works interested in the construction of ontologies [7] propose the refinement of ontologies.",
                "This process consists in using an existing ontology and building a new one from it.",
                "This approach is different from our approach because Dynamo starts from scratch.",
                "Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5].",
                "In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist.",
                "This paper first presents, in section 2, the big picture of the Dynamo system.",
                "In particular the motives that led to its creation and its general architecture.",
                "Then, in section 3 we discuss the distributed clustering algorithm used in Dynamo and compare it to a more classic centralized approach.",
                "Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering.",
                "And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2.",
                "DYNAMO OVERVIEW 2.1 Ontology as a Multi-Agent System Dynamo aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently.",
                "The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system.",
                "This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network.",
                "Dynamo takes a syntactical and terminological analysis of texts as input.",
                "It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts.",
                "As output, Dynamo provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network.",
                "An ontology can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations.",
                "Thus, our approach considers an ontology as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships.",
                "The ontology modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships.",
                "In this way, a dynamic ontology is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it.",
                "To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9].",
                "We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system.",
                "It justifies how we designed some of the rules used by our agents in order to maximize the cooperation degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
                "It addresses the needs of Knowledge Engineering in the context of dynamic ontology management and maintenance when the ontology is linked to a document collection.",
                "The Dynamo system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ? ?",
                "Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for ontology building tasks [11].",
                "We mainly selected it because of its robustness and the great amount of information extracted.",
                "In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1].",
                "In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term.",
                "For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term.",
                "Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term.",
                "With Dynamo, the term network obtained as the output of the extractor is stored in a database.",
                "For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1].",
                "Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15].",
                "In the case of terms we are generally dealing with their usage contexts.",
                "With Syntex, those contexts are identified by terms and characterized by some syntactic relations.",
                "The Dynamo multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4.",
                "It is designed to be both the system producing the resulting structure and the structure itself.",
                "It means that each agent represent a class in the taxonomy.",
                "Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3.",
                "DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in Dynamo.",
                "For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system).",
                "Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined.",
                "Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements.",
                "This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done.",
                "Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones.",
                "Our distributed algorithm is designed relying on those two facts.",
                "It is executed concurrently in each of the agents of the system.",
                "Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15].",
                "Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity.",
                "We now present the distributed algorithm used in our system.",
                "It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent.",
                "Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy.",
                "Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree).",
                "Then it sends a message to its parent P indicating its most dissimilar brother (here A1).",
                "Then P receives the same kind of message from each of its children.",
                "In the following, this kind of message will be called a vote.",
                "Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3).",
                "Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers.",
                "In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1).",
                "Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent.",
                "Ak−1 Ak AnA2A1 P P ...... ......",
                "Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial.",
                "The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent.",
                "The hierarchy just created a new intermediate level.",
                "Note that this algorithm generally converges, since the number of brothers of an agent drops.",
                "When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children).",
                "However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A.",
                "With the current system no decision can be taken.",
                "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 <br>quantitative evaluation</br> Now, we evaluate the properties of our distributed algorithm.",
                "It requires to begin with a <br>quantitative evaluation</br>, based on its complexity, while comparing it with the algorithm 1 from the previous section.",
                "Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary.",
                "For the distributed algorithm, the worst case means that for each run, only a two-item group can be created.",
                "Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations.",
                "For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times.",
                "And its body has the only similarity computation, so its cost is l−i.",
                "The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 .",
                "Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers.",
                "So each steps has a l × (l − 1) cost.",
                "Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built).",
                "Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity.",
                "But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm.",
                "This gap comes from the local decision making in each agent.",
                "Because of this, the similarity computations are done twice for each agent pair.",
                "We could conceive that an agent sends its computation result to its peer.",
                "But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1.",
                "Distributed algorithm (on average, with min and max) 2.",
                "Logarithmic polynomial 3.",
                "Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments.",
                "The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms.",
                "The given value is the average of comparisons made for one hundred of runs without any user interaction.",
                "It results in the plots of figure 5.",
                "The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case.",
                "It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning.",
                "Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average.",
                "Finally, lets note the reduced variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section.",
                "All are advantages obtained thanks to the use of an adaptive multi-agent system.",
                "The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system.",
                "The ontologist can make modifications and the hierarchy adapts depending on the request.",
                "It is particularly interesting in a knowledge engineering context.",
                "Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation.",
                "During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal.",
                "It is extremely difficult to realize this with a centralized black-box approach.",
                "In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class.",
                "Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account.",
                "That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning.",
                "But, the ontologist can make a mistake, and become aware of it too late.",
                "Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus.",
                "By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization.",
                "It is clear that the concept described by the term lésion (lesion) is misplaced.",
                "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (hepatitis).",
                "This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria.",
                "Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent.",
                "The name ConceptAgent:X is automatically given to a concept agent that is not described by a term.",
                "The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11.",
                "The new stable state if the one of figure 7.",
                "This system-user coupling is necessary to build an ontology, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages.",
                "Moreover, this algorithm can de facto be distributed on a computer network.",
                "The communication between agents is then done by sending messages and each one keeps its decision autonomy.",
                "Then, a system modification to make it run networked would not require to adjust the algorithm.",
                "On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4.",
                "MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair.",
                "But, as soon as one uses real data this property is not verified anymore.",
                "Some terms do not have any similarity value with any extracted term.",
                "Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy.",
                "For this low level structuring, ontologists generally base The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics.",
                "Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation.",
                "Each agent can try to determine if its parent is adequate.",
                "It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network.",
                "In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX .",
                "Thanks to those two notations we can describe the parent adequacy function a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C).",
                "An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates.",
                "We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent.",
                "Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example.",
                "Figure 8 shows the state of the system after stabilization on test data.",
                "We can notice that hépatite viral (viral hepatitis) is still linked to the taxonomy root.",
                "It is caused by the fact that there is no similarity value between the viral hepatitis term and any of the term of the other concept agents.",
                "Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9.",
                "We can see that viral hepatitis slipped through the branch leading to hepatitis and chose it as its new parent.",
                "It is a sensible default choice since viral hepatitis is a more specific term than hepatitis.",
                "This rule tends to push agents described by a set of term to become leafs of the concept tree.",
                "It addresses our concern to improve the low level structuring of our taxonomy.",
                "But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch.",
                "That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time.",
                "The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy.",
                "It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time.",
                "The solution we chose came from the search for minimizing non cooperation within the system in accordance with the ADELFE method.",
                "Each agent computes three non cooperation degrees and chooses its current priority depending on which degree is the highest.",
                "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non cooperation degrees are: • μH (A) = 1 − a(P, A), is the head coverage non cooperation degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
                "Then, the non cooperation degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated.",
                "In this case, the metric used is the number of messages exchanged in the system.",
                "Once again the system has been executed with input data sets ranging from ten to one hundred terms.",
                "The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction.",
                "It results in the plots of figure 10.",
                "Curve number 1 represents the average of the value obtained.",
                "Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set.",
                "Curve number 3 represents the polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1.",
                "Dynamo, all rules (on average, with min and max) 2.",
                "Distributed clustering only (on average) 2.",
                "Cubic polynomial Figure 10: Experimental results on average.",
                "Moreover, lets note the very small variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system.",
                "Finally the extra head coverage rules are a real improvement on the distributed algorithm alone.",
                "They introduce more constraints and stability point is reached with less interactions and decision making by the agents.",
                "It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5.",
                "DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added.",
                "When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm.",
                "On the contrary, adding a new item after a first stabilization has an impact on the final result.",
                "Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system.",
                "By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization.",
                "Figure 12: Concept agent tree after taking in account hepatitis Then, the ontologist interacts with the system and adds a new concept described by the term hepatitis and linked to the root.",
                "The system reacts and stabilizes, we then obtain figure 12 as a result. hepatitis is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example.",
                "We need to improve our distributed algorithm to allow a concept to move along a branch.",
                "We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult.",
                "In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the Dynamo system.",
                "Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result.",
                "But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise.",
                "Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree.",
                "By looking at figure 7, it is clear that some pruning could be done in the taxonomy.",
                "In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore.",
                "Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form.",
                "In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged.",
                "Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf.",
                "As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root.",
                "Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6.",
                "CONCLUSION After being presented as a promising solution, ensuring model quality and their terminological richness, ontology building from textual corpus analysis is difficult and costly.",
                "It requires analyst supervising and taking in account the ontology aim.",
                "Using natural languages processing tools ease the knowledge localization in texts through language uses.",
                "That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements.",
                "Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result.",
                "We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts.",
                "Our system makes use of a terminological network resulting from an analysis made by Syntex.",
                "The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made.",
                "Performances of the system are interesting and some aspects are even comparable to their centralized counterpart.",
                "Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information.",
                "From the point of view of ontology building, this work is a first step showing the relevance of our approach.",
                "It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees.",
                "From this improvements we are mostly focusing on the pruning to obtain better taxonomies.",
                "Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm.",
                "In other words this algorithm introduces inThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a dynamic equilibrium.",
                "Also from the multi-agent engineering point of view, their use in a dynamic ontology context has shown its relevance.",
                "This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through cooperation has been an efficient solution.",
                "And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper.",
                "Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach.",
                "Were planning to work on such benchmarking in the near future. 7.",
                "REFERENCES [1] H. Assadi.",
                "Construction of a regional ontology from text and its use within a documentary system.",
                "Proceedings of the International Conference on Formal Ontology and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel.",
                "Text analysis for ontology and terminology engineering.",
                "Journal of Applied Ontology, 2005. [3] J. Bao and V. Honavar.",
                "Collaborative ontology building with wiki@nt.",
                "Proceedings of the Workshop on Evaluation of Ontology-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard.",
                "Agent-Oriented Methodologies, chapter 7.",
                "Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202.",
                "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks.",
                "Background and foreground knowledge in dynamic ontology construction.",
                "Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec.",
                "A corpus-based conceptual clustering method for verb frames and ontology acquisition.",
                "LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon.",
                "Ontology Engineering: a Survey and a Return on Experience.",
                "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize.",
                "Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize.",
                "A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems.",
                "Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler.",
                "Dynamic ontologies on the web.",
                "American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent.",
                "Terminology extraction from text to build an ontology in surgical intensive care.",
                "Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter.",
                "Reconciling Ontological Differences by Assistant Agents.",
                "AAMAS06, May 2006. [13] A. Maedche.",
                "Ontology learning for the Semantic Web.",
                "Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab.",
                "Mining Ontologies from Text.",
                "EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze.",
                "Foundations of Statistical Natural Language Processing.",
                "The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner.",
                "Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)"
            ],
            "original_annotated_samples": [
                "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 <br>quantitative evaluation</br> Now, we evaluate the properties of our distributed algorithm.",
                "It requires to begin with a <br>quantitative evaluation</br>, based on its complexity, while comparing it with the algorithm 1 from the previous section."
            ],
            "translated_annotated_samples": [
                "El procedimiento actual debería mejorarse para abordar esto, probablemente utilizando un método de votación clasificado. 3.1 Evaluación Cuantitativa Ahora, evaluamos las propiedades de nuestro algoritmo distribuido.",
                "Se requiere comenzar con una <br>evaluación cuantitativa</br>, basada en su complejidad, mientras se compara con el algoritmo 1 de la sección anterior."
            ],
            "translated_text": "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de ontologías a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías. Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una arquitectura multiagente adaptativa. En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque. Se evalúa y se compara con un algoritmo centralizado más convencional. También presentamos cómo ha sido mejorado utilizando un enfoque de múltiples criterios. Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de ontologías. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Experimentación 1. INTRODUCCIÓN En la actualidad, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de información. Pero construir una ontología manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo. Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados. Significaría crear ontologías dinámicas [10] y justifica la aparición de técnicas de aprendizaje de ontologías [14] [13]. Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una ontología a partir de un conjunto específico de textos de un dominio. Nuestro objetivo no es construir una ontología jerárquica exhaustiva y general, sino una específica para un dominio. Proponemos una herramienta semi-automatizada ya que se requiere un recurso externo: el ontólogo. Un ontólogo es una especie de ingeniero cognitivo, o analista, que utiliza información de textos y entrevistas con expertos para diseñar ontologías. En el campo de los agentes múltiples, las ontologías generalmente permiten que los agentes se entiendan entre sí [12]. A veces se utilizan para facilitar el proceso de construcción de la ontología, en particular en contextos colaborativos [3], pero rara vez representan la ontología en sí misma [16]. La mayoría de los trabajos interesados en la construcción de ontologías [7] proponen el refinamiento de las ontologías. Este proceso consiste en utilizar una ontología existente y construir una nueva a partir de ella. Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero. Los investigadores, que trabajan en la construcción de ontologías a partir de textos, afirman que el trabajo a automatizar requiere recursos externos como un diccionario [14] o acceso a la web [5]. En nuestro trabajo, proponemos una interacción entre el ontólogo y el sistema, nuestro recurso externo radica tanto en los textos como en el ontólogo. Este documento primero presenta, en la sección 2, la visión general del sistema Dynamo. En particular, los motivos que llevaron a su creación y su arquitectura general. Luego, en la sección 3 discutimos el algoritmo de clustering distribuido utilizado en Dynamo y lo comparamos con un enfoque más clásico y centralizado. La sección 4 está dedicada a mejorar el comportamiento de los agentes que fue diseñado teniendo en cuenta criterios ignorados por el agrupamiento. Y finalmente, en la sección 5, discutimos las limitaciones de nuestro enfoque y explicamos cómo se abordarán en trabajos futuros. DYNAMO RESUMEN 2.1 Ontología como un Sistema Multiagente Dynamo tiene como objetivo reducir la necesidad de acciones manuales en el procesamiento de los resultados del análisis de texto y sugerir un inicio de red conceptual para construir ontologías de manera más eficiente. El enfoque elegido es completamente original en nuestro conocimiento y utiliza un sistema multiagente adaptativo. Esta elección se basa en las cualidades ofrecidas por el sistema multiagente: pueden facilitar el diseño interactivo de un sistema (en nuestro caso, una red conceptual), permiten su construcción incremental al tener en cuenta progresivamente nuevos datos (provenientes del análisis de texto y la interacción del usuario) y, por último pero no menos importante, pueden distribuirse fácilmente a través de una red informática. Dynamo realiza un análisis sintáctico y terminológico de textos como entrada. Utiliza varios criterios basados en estadísticas calculadas a partir de los contextos lingüísticos de los términos para crear y posicionar los conceptos. Como resultado, Dynamo proporciona al analista una organización jerárquica de conceptos (el sistema multiagente en sí mismo) que puede ser validada, refinada o modificada, hasta que obtenga un estado satisfactorio de la red semántica. Una ontología puede ser vista como un mapa estable constituido por entidades conceptuales, representadas aquí por agentes, vinculadas por relaciones etiquetadas. Por lo tanto, nuestro enfoque considera una ontología como un tipo de equilibrio entre sus concepto-agentes, donde sus fuerzas están definidas por sus relaciones potenciales. La modificación de la ontología es una perturbación del equilibrio previo por la aparición o desaparición de agentes o relaciones. De esta manera, una ontología dinámica es un proceso de autoorganización que ocurre cuando se incluyen nuevos textos en el corpus, o cuando el ontólogo interactúa con él. Para apoyar la flexibilidad necesaria de dicho sistema, utilizamos un sistema multiagente autoorganizado basado en un enfoque cooperativo [9]. Seguimos el método ADELFE [4] propuesto para guiar el diseño de este tipo de sistema multiagente. Se justifica cómo diseñamos algunas de las reglas utilizadas por nuestros agentes para maximizar el grado de cooperación dentro del sistema multiagente de Dynamos. 2.2 Arquitectura Propuesta En esta sección, presentamos nuestra arquitectura del sistema. Aborda las necesidades de la Ingeniería del Conocimiento en el contexto de la gestión y mantenimiento dinámico de ontologías cuando la ontología está vinculada a una colección de documentos. El sistema Dynamo consta de tres partes (cf. figura 1): • una red de términos, obtenida gracias a una herramienta de extracción de términos utilizada para preprocesar el corpus textual, • un sistema multiagente que utiliza la red de términos para realizar un agrupamiento jerárquico con el fin de obtener una taxonomía de conceptos, • una interfaz que permite al ontólogo visualizar y controlar el proceso de agrupamiento. El extractor de términos que utilizamos es Syntex, un software que ha sido utilizado eficientemente para tareas de construcción de ontologías [11]. Principalmente lo seleccionamos por su robustez y la gran cantidad de información extraída. En particular, crea una red de Expansión de Cabeza que ya ha demostrado ser interesante para un sistema de agrupamiento [1]. En una red de este tipo, cada término está vinculado a su término principal y, es decir, a la subfrase máxima ubicada como término principal de su término de expansión, y también a todos los términos para los cuales es un término principal o un término de expansión. Por ejemplo, la ingeniería del conocimiento a partir de texto tiene como término principal la ingeniería del conocimiento y como término de expansión el texto. Además, la ingeniería del conocimiento se compone del conocimiento como término principal y la ingeniería como término de expansión. Con Dynamo, el término de red obtenido como resultado del extractor se almacena en una base de datos. Para cada par de términos, asumimos que es posible calcular un valor de similitud para realizar un agrupamiento [6] [1]. Debido a la naturaleza de los datos, nos estamos enfocando únicamente en la computación de similitud entre objetos descritos gracias a variables binarias, lo que significa que cada elemento está descrito por la presencia o ausencia de un conjunto de características [15]. En el caso de los términos, generalmente estamos tratando con sus contextos de uso. Con Syntex, esos contextos son identificados por términos y caracterizados por algunas relaciones sintácticas. El sistema multiagente Dynamo implementa el algoritmo de clustering distribuido descrito en detalle en la sección 3 y las reglas descritas en la sección 4. Está diseñado para ser tanto el sistema que produce la estructura resultante como la estructura en sí misma. Significa que cada agente representa una clase en la taxonomía. Entonces, la salida del sistema es la organización obtenida a partir de la interacción entre agentes, teniendo en cuenta la retroalimentación proveniente del ontólogo cuando modifica la taxonomía dada sus necesidades o experiencia. CLUSTERING DISTRIBUIDO Esta sección presenta el algoritmo de clustering distribuido utilizado en Dynamo. Por el bien de la comprensión, y debido a su evaluación en la sección 3.1, recordamos el algoritmo centralizado básico utilizado para un agrupamiento jerárquico ascendente en un espacio no métrico, cuando se dispone de una medida de similitud simétrica [15] (que es el caso de las medidas utilizadas en nuestro sistema). Algoritmo 1: Algoritmo de agrupamiento jerárquico ascendente centralizado Datos: Lista L de elementos para organizar como una jerarquía Resultado: Raíz R de la jerarquía mientras longitud(L) > 1 hacer max ← 0; A ← nil; B ← nil; para i ← 1 a longitud(L) hacer I ← L[i]; para j ← i + 1 a longitud(L) hacer J ← L[j]; sim ← similitud(I, J); si sim > max entonces max ← sim; A ← I; B ← J; fin si fin para fin para quitar(A, L); quitar(B, L); agregar((A, B), L); fin mientras R ← L[1]; En el algoritmo 1, para cada paso de agrupamiento, se determina el par de elementos más similares. Esos dos elementos están agrupados en un conjunto, y la clase resultante se añade a la lista de elementos restantes. Este algoritmo se detiene cuando la lista tiene solo un elemento restante. 2 es decir, la subfrase máxima ubicada como cola del término The Sixth Intl. La jerarquía resultante del algoritmo 1 siempre es un árbol binario debido a la forma en que se realiza el agrupamiento. Además, agrupar los elementos más similares es equivalente a alejarlos de los menos similares. Nuestro algoritmo distribuido está diseñado basándose en esos dos hechos. Se ejecuta de forma simultánea en cada uno de los agentes del sistema. Cabe destacar que, en lo que sigue de este artículo, utilizamos para ambos algoritmos una similitud de Anderberg (con α = 0.75) y una estrategia de agrupamiento de enlace promedio [15]. Esas decisiones tienen un impacto en el árbol resultante, pero no afectan ni la ejecución global del algoritmo ni su complejidad. Ahora presentamos el algoritmo distribuido utilizado en nuestro sistema. Se inicia de la siguiente manera: • se crea un agente TOP que no tiene padre, será la raíz de la taxonomía resultante, • se crea un agente para cada término que se va a posicionar en la taxonomía, todos tienen como padre a TOP. Una vez que se establece esta estructura básica, el algoritmo se ejecuta hasta que alcanza el equilibrio y luego proporciona la taxonomía resultante. El proceso de la primera etapa (figura 2) se activa cuando un agente (aquí Ak) tiene más de un hermano (ya que queremos obtener un árbol binario). Luego envía un mensaje a su padre P indicando a su hermano más diferente (aquí A1). Entonces P recibe el mismo tipo de mensaje de cada uno de sus hijos. En lo siguiente, este tipo de mensaje se llamará voto. A continuación, cuando P ha recibido mensajes de todos sus hijos, comienza el segundo paso (figura 3). Gracias a los mensajes recibidos que indican las preferencias de sus hijos, P puede determinar tres subgrupos entre sus hijos: el hijo que recibió más votos de sus hermanos, es decir, el hijo que es más diferente del mayor número de sus hermanos. En caso de empate, uno de los ganadores es elegido al azar (aquí A1), los niños que permitieron la elección del primer grupo, es decir, los agentes que eligieron a su hermano del primer grupo como el más diferente (aquí Ak a An), los niños restantes (aquí A2 a Ak−1). Entonces P crea un nuevo agente P (teniendo a P como padre) y pide a los agentes del segundo grupo (aquí los agentes Ak a An) que lo elijan como su nuevo padre. Ak−1 Ak AnA2A1 P P ...... ...... \n\nAk−1 Ak AnA2A1 P P ...... ...... Figura 4: Agrupamiento distribuido: Paso 3 Finalmente, el paso 3 (figura 4) es trivial. Los niños rechazados por P (aquí el agente A2 a An) tienen en cuenta su mensaje y eligen a P como su nuevo padre. La jerarquía acaba de crear un nuevo nivel intermedio. Ten en cuenta que este algoritmo generalmente converge, ya que el número de hermanos de un agente disminuye. Cuando un agente tiene solamente un hermano restante, su actividad se detiene (aunque sigue procesando los mensajes que llegan de sus hijos). Sin embargo, en algunos casos podemos llegar a un conflicto circular en el procedimiento de votación cuando, por ejemplo, A vota en contra de B, B en contra de C y C en contra de A. Con el sistema actual no se puede tomar ninguna decisión. El procedimiento actual debería mejorarse para abordar esto, probablemente utilizando un método de votación clasificado. 3.1 Evaluación Cuantitativa Ahora, evaluamos las propiedades de nuestro algoritmo distribuido. Se requiere comenzar con una <br>evaluación cuantitativa</br>, basada en su complejidad, mientras se compara con el algoritmo 1 de la sección anterior. Su complejidad teórica se calcula para el peor caso, considerando la operación de cálculo de similitud como elemental. Para el algoritmo distribuido, el peor caso significa que en cada ejecución, solo se puede crear un grupo de dos elementos. Bajo esas condiciones, para un conjunto de datos dado de n elementos, podemos determinar la cantidad de cálculos de similitud. Para el algoritmo 1, notamos que l = longitud(L), luego el bucle más interno se ejecuta l - i veces. Y su cuerpo tiene la única computación de similitud, por lo que su costo es l−i. El segundo bucle for se ejecuta l veces para i que varía de 1 a l. Entonces su costo es Pl i=1(l − i) que puede simplificarse en l×(l−1) 2. Finalmente, para cada ejecución del bucle while, l se reduce de n a 1, lo que nos da t1(n) como la cantidad de cálculos de similitud para el algoritmo 1: t1(n) = nX l=1 l × (l − 1) 2 (1) Para el algoritmo distribuido, en un paso dado, cada uno de los l agentes evalúa la similitud con sus l −1 compañeros. Entonces, cada paso tiene un costo de l × (l − 1). Entonces, se crean grupos y se realiza otra votación con l disminuido en uno (ya que asumimos el peor caso, solo se forman grupos de tamaño 2 o l −1). Dado que l es igual a n en la primera ejecución, obtenemos tdist(n) como la cantidad de cálculos de similitud para el algoritmo distribuido: tdist(n) = nX l=1 l × (l − 1) (2) Ambos algoritmos tienen una complejidad O(n3). Pero en el peor de los casos, el algoritmo distribuido realiza el doble del número de el1288 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) operaciones elementales realizadas por el algoritmo centralizado. Esta brecha proviene de la toma de decisiones local en cada agente. Debido a esto, los cálculos de similitud se realizan dos veces para cada par de agentes. Podríamos concebir que un agente envía el resultado de su cálculo a su par. Sin embargo, simplemente trasladaría el problema al generar más comunicación en el sistema. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Cantidad de comparaciones Cantidad de términos de entrada 1. Algoritmo distribuido (en promedio, con mínimo y máximo) 2. Polinomio logarítmico 3. En la Figura 5 se muestra el algoritmo centralizado: Resultados experimentales. En un segundo paso, la complejidad promedio del algoritmo ha sido determinada mediante experimentos. El sistema multiagente ha sido ejecutado con conjuntos de datos de entrada generados aleatoriamente que van desde diez hasta cien términos. El valor dado es el promedio de las comparaciones realizadas para cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 5. El algoritmo es entonces más eficiente en promedio que el algoritmo centralizado, y su complejidad promedio está por debajo del peor caso. Se puede explicar por la baja probabilidad de que un conjunto de datos obligue al sistema a crear solo grupos mínimos (dos elementos) o máximos (n − 1 elementos) para cada paso de razonamiento. La curva número 2 representa el polinomio logarítmico que minimiza el error con respecto a la curva número 1. El término de mayor grado de este polinomio es n2 log(n), por lo tanto, nuestro algoritmo distribuido tiene una complejidad O(n2 log(n)) en promedio. Finalmente, notemos la reducida variación de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 1,960.75 para un promedio de 40,550.10 (alrededor del 5%), lo que muestra la buena estabilidad del sistema. Aunque los resultados cuantitativos son interesantes, la verdadera ventaja de este enfoque proviene de características más cualitativas que presentaremos en esta sección. Todos son ventajas obtenidas gracias al uso de un sistema multiagente adaptativo. La principal ventaja del uso de un sistema multiagente para una tarea de agrupamiento es introducir dinamismo en dicho sistema. El ontólogo puede hacer modificaciones y la jerarquía se adapta dependiendo de la solicitud. Es particularmente interesante en un contexto de ingeniería del conocimiento. De hecho, la jerarquía creada por el sistema está destinada a ser modificada por el ontólogo ya que es el resultado de un cálculo estadístico. Durante la revisión necesaria de los textos para examinar los contextos de uso de los términos [2], el ontólogo podrá interpretar el contenido real y revisar la propuesta del sistema. Es extremadamente difícil lograr esto con un enfoque centralizado de caja negra. En la mayoría de los casos, uno tiene que encontrar qué paso de razonamiento generó el error y modificar manualmente la clase resultante. Desafortunadamente, en este caso, todos los pasos de razonamiento que ocurrieron después de la creación de la clase modificada se pierden y deben ser recalculados teniendo en cuenta la modificación. Por eso, un sistema como ASIUM [6] intenta suavizar el problema con una colaboración entre el sistema y el usuario mostrando al ontólogo las clases creadas después de cada paso de razonamiento. Pero el ontólogo puede cometer un error y darse cuenta de ello demasiado tarde. Figura 6: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos un ejemplo gracias a algunas capturas de pantalla del prototipo en funcionamiento probado en un corpus relacionado con la medicina. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 6 después de la estabilización. Es evidente que el concepto descrito por el término lesión está mal ubicado. Las computaciones de similitud lo sitúan más cerca de femme (mujer) y chirurgien (cirujano) que de infección, gastro-enteritis y hepatitis. Esta posición incorrecta para la lesión se explica por el hecho de que sin la entrada del ontólogo, el razonamiento se basa únicamente en criterios estadísticos. Figura 7: Árbol de agentes conceptuales después de la modificación del ontólogo. Luego, el ontólogo reemplaza el concepto en la rama derecha, afectando a ConceptAgent:8 como su nuevo padre. El nombre ConceptAgent:X se asigna automáticamente a un agente conceptual que no está descrito por un término. El sistema reacciona por sí mismo y perfecciona la jerarquía de agrupación para obtener un árbol binario creando ConceptAgent:11. El nuevo estado estable es el de la figura 7. Este acoplamiento sistema-usuario es necesario para construir una ontología, pero no se necesita ningún ajuste particular al principio del algoritmo distribuido ya que cada agente realiza un procesamiento local autónomo y se comunica con su vecindario a través de mensajes. Además, este algoritmo puede ser distribuido de facto en una red de computadoras. La comunicación entre agentes se realiza enviando mensajes y cada uno mantiene su autonomía de decisión. Entonces, una modificación del sistema para hacerlo funcionar en red no requeriría ajustar el algoritmo. Por el contrario, solo sería necesario reestructurar la capa de comunicación y el proceso de creación de agentes, ya que en nuestra implementación actual no están en red. 4. EN LA JERARQUÍA DE MÚLTIPLES CRITERIOS En las secciones anteriores, asumimos que la similitud se puede calcular para cualquier par de términos. Pero, tan pronto como se utilizan datos reales, esta propiedad ya no se verifica. Algunos términos no tienen ningún valor de similitud con ningún término extraído. Además, para los nodos hoja a veces es interesante utilizar otros medios para posicionarlos en la jerarquía. Para esta estructuración de bajo nivel, los ontólogos generalmente se basan en The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1289 sus elecciones en heurísticas simples. Usando esta observación, construimos un nuevo conjunto de reglas, que no se basan en la similitud para respaldar la estructuración de bajo nivel. 4.1 Agregar reglas de cobertura de cabeza En este caso, los agentes pueden actuar con un punto de vista muy local simplemente mirando la relación padre/hijo. Cada agente puede intentar determinar si su padre es adecuado. Es posible adivinar esto porque cada agente conceptual está descrito por un conjunto de términos y gracias a la red de términos de Expansión de Cabeza. En el siguiente TX será el conjunto de términos que describen el concepto del agente X y head(TX) el conjunto de todos los términos que son cabeza de al menos un elemento de TX. Gracias a esas dos notaciones podemos describir la función de adecuación entre un padre P y un hijo C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Entonces, el mejor padre para C es el agente P que maximiza a(P, C). Un agente insatisfecho con su padre puede intentar encontrar uno mejor evaluando la idoneidad de los candidatos. Diseñamos un algoritmo complementario para dirigir esta búsqueda: cuando un agente C no está satisfecho con su padre P, evalúa a(Bi, C) con todos sus hermanos (notados Bi); luego se elige como nuevo padre aquel que maximice a(Bi, C). Figura 8: Árbol de agentes conceptuales después de la estabilización autónoma del sistema sin la regla de cobertura de cabeza. Ahora ilustramos este comportamiento de regla con un ejemplo. La Figura 8 muestra el estado del sistema después de la estabilización en los datos de prueba. Podemos notar que la hepatitis viral todavía está vinculada a la raíz taxonómica. Se debe al hecho de que no hay valor de similitud entre el término hepatitis viral y ninguno de los términos de los otros agentes conceptuales. Figura 9: Árbol de agentes conceptuales después de la activación de la regla de cobertura de la cabeza. Tras activar la regla de cobertura de la cabeza y permitir que el sistema se estabilice nuevamente, obtenemos la figura 9. Podemos ver que la hepatitis viral se deslizó a través de la rama que llevaba a la hepatitis y la eligió como su nueva progenitora. Es una elección por defecto sensata, ya que la hepatitis viral es un término más específico que la hepatitis. Esta regla tiende a hacer que los agentes descritos por un conjunto de términos se conviertan en hojas del árbol conceptual. Aborda nuestra preocupación por mejorar la estructuración de bajo nivel de nuestra taxonomía. Pero obviamente nuestros agentes carecen de un método para retroceder en caso de modificaciones en la taxonomía que los ubicarían en la rama incorrecta. Ese es uno de los puntos en los que nuestro sistema aún debe ser mejorado al agregar otro conjunto de reglas. 4.2 Sobre el uso de varios criterios En las secciones y ejemplos anteriores, solo utilizamos un algoritmo a la vez. El algoritmo de agrupamiento distribuido tiende a introducir nuevas capas en la taxonomía, mientras que el algoritmo de cobertura de cabeza tiende a empujar algunos de los agentes hacia las hojas de la taxonomía. Obviamente plantea la pregunta sobre cómo lidiar con múltiples criterios en la construcción de nuestra taxonomía, y cómo los agentes determinan sus prioridades en un momento dado. La solución que elegimos proviene de la búsqueda de minimizar la falta de cooperación dentro del sistema de acuerdo con el método ADELFE. Cada agente calcula tres grados de no cooperación y elige su prioridad actual dependiendo de cuál grado sea el más alto. Para un agente A dado que tiene un padre P, un conjunto de hermanos Bi y que recibió un conjunto de mensajes Mk con prioridad pk, los tres grados de no cooperación son: • μH (A) = 1 − a(P, A), es el grado de no cooperación de cobertura de cabeza, determinado por la cobertura de cabeza del padre, • μB(A) = max(1 − similitud(A, Bi)), es el grado de no cooperación de hermandad, determinado por el peor hermano de A en cuanto a similitudes, • μM (A) = max(pk), es el grado de no cooperación de mensaje, determinado por el mensaje más urgente recibido. Entonces, el grado de no cooperación μ(A) del agente A es: μ(A) = max(μH (A), μB(A), μM (A)) (4) Luego, tenemos tres casos que determinan qué tipo de acción elegirá A: • si μ(A) = μH (A) entonces A utilizará el algoritmo de cobertura de cabeza que detallamos en la subsección anterior • si μ(A) = μB(A) entonces A utilizará el algoritmo de agrupamiento distribuido (ver sección 3) • si μ(A) = μM (A) entonces A procesará Mk inmediatamente para ayudar a su remitente Estos tres casos resumen las actividades actuales de nuestros agentes: tienen que encontrar el mejor padre para ellos (μ(A) = μH (A)), mejorar la estructuración a través del agrupamiento (μ(A) = μB(A)) y procesar otros mensajes de agentes (μ(A) = μM (A)) para ayudarlos a cumplir sus propios objetivos. 4.3 Complejidad Experimental Revisitada Evaluamos la complejidad experimental de todo el sistema multiagente cuando todas las reglas están activadas. En este caso, la métrica utilizada es el número de mensajes intercambiados en el sistema. Una vez más, el sistema ha sido ejecutado con conjuntos de datos de entrada que van desde diez hasta cien términos. El valor dado es el promedio del número de mensajes enviados en el sistema en su totalidad durante cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 10. La curva número 1 representa el promedio del valor obtenido. La curva número 2 representa el promedio del valor obtenido cuando solo se activa el algoritmo de agrupamiento distribuido, no el conjunto completo de reglas. La curva número 3 representa el polinomio que minimiza el error con la curva número 1. El término de mayor grado de este polinomio es en n3, entonces nuestro sistema multiagente tiene una complejidad O(n3). Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Cantidad de mensajes Cantidad de términos de entrada 1. Dinamo, todas las reglas (en promedio, con mínimo y máximo) 2. Agrupamiento distribuido solo (en promedio) 2. Figura 10: Resultados experimentales en promedio de un polinomio cúbico. Además, notemos la variación muy pequeña de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 126.73 para un promedio de 20,737.03 (alrededor del 0.6%), lo que demuestra la excelente estabilidad del sistema. Finalmente, las reglas adicionales de cobertura de cabeza son una verdadera mejora sobre el algoritmo distribuido por sí solo. Introducen más restricciones y se alcanza el punto de estabilidad con menos interacciones y toma de decisiones por parte de los agentes. Significa que se intercambian menos mensajes en el sistema al obtener un árbol de mayor calidad para el ontólogo. 5. DISCUSIÓN Y PERSPECTIVAS 5.1 Limitación actual de nuestro enfoque La limitación más importante de nuestro algoritmo actual es que el resultado depende del orden en que se agregan los datos. Cuando el sistema funciona por sí solo en un conjunto de datos fijo proporcionado durante la inicialización, el resultado final es equivalente a lo que podríamos obtener con un algoritmo centralizado. Por el contrario, añadir un nuevo elemento después de una primera estabilización tiene un impacto en el resultado final. Figura 11: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos otro ejemplo del sistema en funcionamiento. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 11 después de la estabilización. Figura 12: Árbol de agentes conceptuales después de tener en cuenta la hepatitis. Luego, el ontólogo interactúa con el sistema y agrega un nuevo concepto descrito por el término hepatitis y vinculado a la raíz. El sistema reacciona y se estabiliza, luego obtenemos la figura 12 como resultado. La hepatitis se encuentra en la rama derecha, pero no hemos obtenido la misma organización que la figura 6 del ejemplo anterior. Necesitamos mejorar nuestro algoritmo distribuido para permitir que un concepto se mueva a lo largo de una rama. Actualmente estamos trabajando en las reglas requeridas, pero la comparación con el algoritmo centralizado se volverá muy difícil. En particular, ya que tendrán en cuenta criterios ignorados por el algoritmo centralizado. 5.2 Poda para la construcción de ontologías En la sección 3, presentamos el algoritmo de agrupamiento distribuido utilizado en el sistema Dynamo. Dado que este trabajo se basó inicialmente en este algoritmo, introdujo un claro sesgo hacia los árboles binarios como resultado. Pero debemos tener en cuenta que estamos tratando de obtener taxonomías que sean más refinadas y concisas. Aunque la regla de cobertura de la cabeza es una mejora porque se basa en cómo generalmente trabajan los ontólogos, solo aborda la estructuración a un nivel bajo y no a los niveles intermedios del árbol. Al observar la figura 7, es evidente que se podría realizar una poda en la taxonomía. En particular, dado que la lesión se movió, el ConceptAgent:9 podría ser eliminado, ya no es necesario. Además, la rama que comienza con ConceptAgent:8 respeta claramente la restricción de formar un árbol binario, pero sería más útil para el usuario en una forma más compacta y significativa. En este caso, ConceptAgent:10 y ConceptAgent:11 probablemente podrían fusionarse. Actualmente, nuestro sistema cuenta con las reglas necesarias para crear niveles intermedios en la taxonomía, o para que los conceptos se desplacen hacia la hoja. Como señalamos, no es suficiente, por lo que se necesitan nuevas reglas para permitir eliminar nodos del árbol o moverlos hacia la raíz. La mayor parte del trabajo necesario para desarrollar esas reglas consiste en encontrar la información estadística relevante que respaldará al ontólogo. CONCLUSIÓN Después de ser presentada como una solución prometedora, garantizar la calidad del modelo y su riqueza terminológica, la construcción de ontologías a partir del análisis de corpus textual es difícil y costosa. Requiere supervisión del analista y tener en cuenta el objetivo de la ontología. El uso de herramientas de procesamiento de lenguaje natural facilita la localización del conocimiento en textos a través del uso del lenguaje. Dicho esto, esas herramientas producen una gran cantidad de datos léxicos o gramaticales que no son triviales de examinar para definir elementos conceptuales. Nuestra contribución radica en este paso del proceso de modelado a partir de textos, antes de intentar normalizar o formalizar el resultado. Propusimos un enfoque basado en un sistema multiagente adaptativo para proporcionar al ontólogo una primera estructura taxonómica de conceptos. Nuestro sistema hace uso de una red terminológica resultante de un análisis realizado por Syntex. El estado actual de nuestro software permite producir estructuras simples, proponérselas al ontólogo y hacerlas evolucionar dependiendo de las modificaciones que él realice. Las actuaciones del sistema son interesantes y algunos aspectos son incluso comparables a su contraparte centralizada. Sus fortalezas son principalmente cualitativas ya que permite interacciones de usuario más sutiles y una adaptación progresiva a nueva información basada en el lenguaje. Desde el punto de vista de la construcción de la ontología, este trabajo es un primer paso que muestra la relevancia de nuestro enfoque. Debe continuar, tanto para garantizar una mejor robustez durante la clasificación, como para obtener estructuras semánticas más ricas que simples árboles. De estas mejoras, nos estamos enfocando principalmente en la poda para obtener mejores taxonomías. Actualmente estamos trabajando en el criterio para activar las acciones complementarias de los cambios de estructura aplicados por nuestro algoritmo de agrupamiento. En otras palabras, este algoritmo se introduce en el Sexto Congreso Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1291 niveles intermedios, y necesitamos poder eliminarlos si es necesario, para alcanzar un equilibrio dinámico. También desde el punto de vista de la ingeniería multiagente, su uso en un contexto de ontología dinámica ha demostrado su relevancia. Estas ontologías dinámicas pueden ser vistas como una resolución de problemas complejos, en tal caso la autoorganización a través de la cooperación ha sido una solución eficiente. Y, en general, es probable que sea interesante para otras tareas relacionadas con el diseño, incluso si nos estamos enfocando únicamente en la ingeniería del conocimiento en este artículo. Por supuesto, nuestro sistema aún requiere más trabajo de evaluación y validación para determinar con precisión las ventajas y desventajas de este enfoque. Estamos planeando trabajar en ese tipo de comparación en un futuro cercano. 7. REFERENCIAS [1] H. Assadi. Construcción de una ontología regional a partir de texto y su uso dentro de un sistema documental. Actas de la Conferencia Internacional sobre Ontología Formal y Sistemas de Información - FOIS98, páginas 236-249, 1998. [2] N. Aussenac-Gilles y D. Sörgel. Análisis de texto para ingeniería de ontologías y terminología. Revista de Ontología Aplicada, 2005. [3] J. Bao y V. Honavar. Construcción colaborativa de ontologías con wiki@nt. Actas del Taller de Evaluación de Herramientas Basadas en Ontologías (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes y G. Picard. Metodologías Orientadas a Agentes, capítulo 7. Ingeniería de Sistemas Multiagente Autoadaptativos: la Metodología ADELFE, páginas 172-202. Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna y Y. Wilks. Antecedentes y conocimiento previo en la construcción dinámica de ontologías. Taller de la Web Semántica, SIGIR03, agosto de 2003. [6] D. Faure y C. Nedellec. Un método de agrupamiento conceptual basado en corpus para marcos verbales y adquisición de ontologías. Taller LREC sobre la adaptación de recursos léxicos y corpus a sublenguajes y aplicaciones, 1998. [7] F. Gandon. Ingeniería de Ontologías: una Encuesta y un Retorno de Experiencia. INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes y P. Glize. Diseño Vivo para Sistemas Computacionales Abiertos. 12º Talleres Internacionales de la IEEE sobre Tecnologías Habilitadoras, Infraestructura para Empresas Colaborativas, páginas 389-394, junio de 2003. [9] M.-P. Gleizes, V. Camps y P. Glize. Una teoría de computación emergente basada en la autoorganización cooperativa para sistemas artificiales adaptativos. Cuarto Congreso Europeo de Ciencias de los Sistemas, septiembre de 1999. [10] J. Heflin y J. Hendler. Ontologías dinámicas en la web. Conferencia de la Asociación Americana de Inteligencia Artificial, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault y M.-C. Jaulent. Extracción de terminología del texto para construir una ontología en cuidados intensivos quirúrgicos. Actas del simposio anual de la AMIA 2002, 2002. [12] K. Lister, L. Sterling y K. Taveter. Reconciliando diferencias ontológicas mediante agentes asistentes. AAMAS06, mayo de 2006. [13] A. Maedche. Aprendizaje de ontologías para la Web Semántica. Editorial Kluwer Academic, 2002. [14] A. Maedche y S. Staab. Extracción de ontologías a partir de texto. EKAW 2000, páginas 189-202, 2000. [15] C. D. Manning y H. Schütze. Fundamentos del Procesamiento del Lenguaje Natural Estadístico. El MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding y S. Brueckner. Clustering jerárquico descentralizado dinámico en cualquier momento. 29ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, agosto de 2006. 1292 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "black-box": {
            "translated_key": "caja negra",
            "is_in_text": true,
            "original_annotated_sentences": [
                "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of Ontology Learning.",
                "Our system named Dynamo is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
                "In this paper we present a distributed hierarchical clustering algorithm, core of our approach.",
                "It is evaluated and compared to a more conventional centralized algorithm.",
                "We also present how it has been improved using a multi-criteria approach.",
                "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete ontology building solution.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval.",
                "But building an ontology manually is a slow, tedious, costly, complex and time consuming process.",
                "Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date.",
                "It would mean creating dynamic ontologies [10] and it justifies the emergence of ontology learning techniques [14] [13].",
                "Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts.",
                "Our aim is not to build an exhaustive, general hierarchical ontology but a domain specific one.",
                "We propose a semi-automated tool since an external resource is required: the ontologist.",
                "An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies.",
                "In the multi-agent field, ontologies generally enable agents to understand each other [12].",
                "Theyre sometimes used to ease the ontology building process, in particular for collaborative contexts [3], but they rarely represent the ontology itself [16].",
                "Most works interested in the construction of ontologies [7] propose the refinement of ontologies.",
                "This process consists in using an existing ontology and building a new one from it.",
                "This approach is different from our approach because Dynamo starts from scratch.",
                "Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5].",
                "In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist.",
                "This paper first presents, in section 2, the big picture of the Dynamo system.",
                "In particular the motives that led to its creation and its general architecture.",
                "Then, in section 3 we discuss the distributed clustering algorithm used in Dynamo and compare it to a more classic centralized approach.",
                "Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering.",
                "And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2.",
                "DYNAMO OVERVIEW 2.1 Ontology as a Multi-Agent System Dynamo aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently.",
                "The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system.",
                "This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network.",
                "Dynamo takes a syntactical and terminological analysis of texts as input.",
                "It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts.",
                "As output, Dynamo provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network.",
                "An ontology can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations.",
                "Thus, our approach considers an ontology as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships.",
                "The ontology modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships.",
                "In this way, a dynamic ontology is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it.",
                "To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9].",
                "We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system.",
                "It justifies how we designed some of the rules used by our agents in order to maximize the cooperation degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
                "It addresses the needs of Knowledge Engineering in the context of dynamic ontology management and maintenance when the ontology is linked to a document collection.",
                "The Dynamo system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ? ?",
                "Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for ontology building tasks [11].",
                "We mainly selected it because of its robustness and the great amount of information extracted.",
                "In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1].",
                "In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term.",
                "For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term.",
                "Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term.",
                "With Dynamo, the term network obtained as the output of the extractor is stored in a database.",
                "For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1].",
                "Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15].",
                "In the case of terms we are generally dealing with their usage contexts.",
                "With Syntex, those contexts are identified by terms and characterized by some syntactic relations.",
                "The Dynamo multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4.",
                "It is designed to be both the system producing the resulting structure and the structure itself.",
                "It means that each agent represent a class in the taxonomy.",
                "Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3.",
                "DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in Dynamo.",
                "For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system).",
                "Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined.",
                "Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements.",
                "This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done.",
                "Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones.",
                "Our distributed algorithm is designed relying on those two facts.",
                "It is executed concurrently in each of the agents of the system.",
                "Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15].",
                "Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity.",
                "We now present the distributed algorithm used in our system.",
                "It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent.",
                "Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy.",
                "Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree).",
                "Then it sends a message to its parent P indicating its most dissimilar brother (here A1).",
                "Then P receives the same kind of message from each of its children.",
                "In the following, this kind of message will be called a vote.",
                "Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3).",
                "Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers.",
                "In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1).",
                "Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent.",
                "Ak−1 Ak AnA2A1 P P ...... ......",
                "Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial.",
                "The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent.",
                "The hierarchy just created a new intermediate level.",
                "Note that this algorithm generally converges, since the number of brothers of an agent drops.",
                "When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children).",
                "However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A.",
                "With the current system no decision can be taken.",
                "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 Quantitative Evaluation Now, we evaluate the properties of our distributed algorithm.",
                "It requires to begin with a quantitative evaluation, based on its complexity, while comparing it with the algorithm 1 from the previous section.",
                "Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary.",
                "For the distributed algorithm, the worst case means that for each run, only a two-item group can be created.",
                "Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations.",
                "For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times.",
                "And its body has the only similarity computation, so its cost is l−i.",
                "The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 .",
                "Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers.",
                "So each steps has a l × (l − 1) cost.",
                "Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built).",
                "Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity.",
                "But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm.",
                "This gap comes from the local decision making in each agent.",
                "Because of this, the similarity computations are done twice for each agent pair.",
                "We could conceive that an agent sends its computation result to its peer.",
                "But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1.",
                "Distributed algorithm (on average, with min and max) 2.",
                "Logarithmic polynomial 3.",
                "Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments.",
                "The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms.",
                "The given value is the average of comparisons made for one hundred of runs without any user interaction.",
                "It results in the plots of figure 5.",
                "The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case.",
                "It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning.",
                "Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average.",
                "Finally, lets note the reduced variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section.",
                "All are advantages obtained thanks to the use of an adaptive multi-agent system.",
                "The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system.",
                "The ontologist can make modifications and the hierarchy adapts depending on the request.",
                "It is particularly interesting in a knowledge engineering context.",
                "Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation.",
                "During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal.",
                "It is extremely difficult to realize this with a centralized <br>black-box</br> approach.",
                "In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class.",
                "Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account.",
                "That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning.",
                "But, the ontologist can make a mistake, and become aware of it too late.",
                "Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus.",
                "By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization.",
                "It is clear that the concept described by the term lésion (lesion) is misplaced.",
                "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (hepatitis).",
                "This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria.",
                "Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent.",
                "The name ConceptAgent:X is automatically given to a concept agent that is not described by a term.",
                "The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11.",
                "The new stable state if the one of figure 7.",
                "This system-user coupling is necessary to build an ontology, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages.",
                "Moreover, this algorithm can de facto be distributed on a computer network.",
                "The communication between agents is then done by sending messages and each one keeps its decision autonomy.",
                "Then, a system modification to make it run networked would not require to adjust the algorithm.",
                "On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4.",
                "MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair.",
                "But, as soon as one uses real data this property is not verified anymore.",
                "Some terms do not have any similarity value with any extracted term.",
                "Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy.",
                "For this low level structuring, ontologists generally base The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics.",
                "Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation.",
                "Each agent can try to determine if its parent is adequate.",
                "It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network.",
                "In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX .",
                "Thanks to those two notations we can describe the parent adequacy function a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C).",
                "An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates.",
                "We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent.",
                "Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example.",
                "Figure 8 shows the state of the system after stabilization on test data.",
                "We can notice that hépatite viral (viral hepatitis) is still linked to the taxonomy root.",
                "It is caused by the fact that there is no similarity value between the viral hepatitis term and any of the term of the other concept agents.",
                "Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9.",
                "We can see that viral hepatitis slipped through the branch leading to hepatitis and chose it as its new parent.",
                "It is a sensible default choice since viral hepatitis is a more specific term than hepatitis.",
                "This rule tends to push agents described by a set of term to become leafs of the concept tree.",
                "It addresses our concern to improve the low level structuring of our taxonomy.",
                "But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch.",
                "That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time.",
                "The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy.",
                "It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time.",
                "The solution we chose came from the search for minimizing non cooperation within the system in accordance with the ADELFE method.",
                "Each agent computes three non cooperation degrees and chooses its current priority depending on which degree is the highest.",
                "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non cooperation degrees are: • μH (A) = 1 − a(P, A), is the head coverage non cooperation degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
                "Then, the non cooperation degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated.",
                "In this case, the metric used is the number of messages exchanged in the system.",
                "Once again the system has been executed with input data sets ranging from ten to one hundred terms.",
                "The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction.",
                "It results in the plots of figure 10.",
                "Curve number 1 represents the average of the value obtained.",
                "Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set.",
                "Curve number 3 represents the polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1.",
                "Dynamo, all rules (on average, with min and max) 2.",
                "Distributed clustering only (on average) 2.",
                "Cubic polynomial Figure 10: Experimental results on average.",
                "Moreover, lets note the very small variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system.",
                "Finally the extra head coverage rules are a real improvement on the distributed algorithm alone.",
                "They introduce more constraints and stability point is reached with less interactions and decision making by the agents.",
                "It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5.",
                "DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added.",
                "When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm.",
                "On the contrary, adding a new item after a first stabilization has an impact on the final result.",
                "Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system.",
                "By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization.",
                "Figure 12: Concept agent tree after taking in account hepatitis Then, the ontologist interacts with the system and adds a new concept described by the term hepatitis and linked to the root.",
                "The system reacts and stabilizes, we then obtain figure 12 as a result. hepatitis is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example.",
                "We need to improve our distributed algorithm to allow a concept to move along a branch.",
                "We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult.",
                "In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the Dynamo system.",
                "Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result.",
                "But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise.",
                "Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree.",
                "By looking at figure 7, it is clear that some pruning could be done in the taxonomy.",
                "In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore.",
                "Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form.",
                "In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged.",
                "Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf.",
                "As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root.",
                "Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6.",
                "CONCLUSION After being presented as a promising solution, ensuring model quality and their terminological richness, ontology building from textual corpus analysis is difficult and costly.",
                "It requires analyst supervising and taking in account the ontology aim.",
                "Using natural languages processing tools ease the knowledge localization in texts through language uses.",
                "That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements.",
                "Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result.",
                "We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts.",
                "Our system makes use of a terminological network resulting from an analysis made by Syntex.",
                "The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made.",
                "Performances of the system are interesting and some aspects are even comparable to their centralized counterpart.",
                "Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information.",
                "From the point of view of ontology building, this work is a first step showing the relevance of our approach.",
                "It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees.",
                "From this improvements we are mostly focusing on the pruning to obtain better taxonomies.",
                "Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm.",
                "In other words this algorithm introduces inThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a dynamic equilibrium.",
                "Also from the multi-agent engineering point of view, their use in a dynamic ontology context has shown its relevance.",
                "This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through cooperation has been an efficient solution.",
                "And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper.",
                "Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach.",
                "Were planning to work on such benchmarking in the near future. 7.",
                "REFERENCES [1] H. Assadi.",
                "Construction of a regional ontology from text and its use within a documentary system.",
                "Proceedings of the International Conference on Formal Ontology and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel.",
                "Text analysis for ontology and terminology engineering.",
                "Journal of Applied Ontology, 2005. [3] J. Bao and V. Honavar.",
                "Collaborative ontology building with wiki@nt.",
                "Proceedings of the Workshop on Evaluation of Ontology-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard.",
                "Agent-Oriented Methodologies, chapter 7.",
                "Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202.",
                "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks.",
                "Background and foreground knowledge in dynamic ontology construction.",
                "Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec.",
                "A corpus-based conceptual clustering method for verb frames and ontology acquisition.",
                "LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon.",
                "Ontology Engineering: a Survey and a Return on Experience.",
                "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize.",
                "Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize.",
                "A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems.",
                "Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler.",
                "Dynamic ontologies on the web.",
                "American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent.",
                "Terminology extraction from text to build an ontology in surgical intensive care.",
                "Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter.",
                "Reconciling Ontological Differences by Assistant Agents.",
                "AAMAS06, May 2006. [13] A. Maedche.",
                "Ontology learning for the Semantic Web.",
                "Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab.",
                "Mining Ontologies from Text.",
                "EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze.",
                "Foundations of Statistical Natural Language Processing.",
                "The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner.",
                "Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)"
            ],
            "original_annotated_samples": [
                "It is extremely difficult to realize this with a centralized <br>black-box</br> approach."
            ],
            "translated_annotated_samples": [
                "Es extremadamente difícil lograr esto con un enfoque centralizado de <br>caja negra</br>."
            ],
            "translated_text": "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de ontologías a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías. Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una arquitectura multiagente adaptativa. En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque. Se evalúa y se compara con un algoritmo centralizado más convencional. También presentamos cómo ha sido mejorado utilizando un enfoque de múltiples criterios. Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de ontologías. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Experimentación 1. INTRODUCCIÓN En la actualidad, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de información. Pero construir una ontología manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo. Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados. Significaría crear ontologías dinámicas [10] y justifica la aparición de técnicas de aprendizaje de ontologías [14] [13]. Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una ontología a partir de un conjunto específico de textos de un dominio. Nuestro objetivo no es construir una ontología jerárquica exhaustiva y general, sino una específica para un dominio. Proponemos una herramienta semi-automatizada ya que se requiere un recurso externo: el ontólogo. Un ontólogo es una especie de ingeniero cognitivo, o analista, que utiliza información de textos y entrevistas con expertos para diseñar ontologías. En el campo de los agentes múltiples, las ontologías generalmente permiten que los agentes se entiendan entre sí [12]. A veces se utilizan para facilitar el proceso de construcción de la ontología, en particular en contextos colaborativos [3], pero rara vez representan la ontología en sí misma [16]. La mayoría de los trabajos interesados en la construcción de ontologías [7] proponen el refinamiento de las ontologías. Este proceso consiste en utilizar una ontología existente y construir una nueva a partir de ella. Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero. Los investigadores, que trabajan en la construcción de ontologías a partir de textos, afirman que el trabajo a automatizar requiere recursos externos como un diccionario [14] o acceso a la web [5]. En nuestro trabajo, proponemos una interacción entre el ontólogo y el sistema, nuestro recurso externo radica tanto en los textos como en el ontólogo. Este documento primero presenta, en la sección 2, la visión general del sistema Dynamo. En particular, los motivos que llevaron a su creación y su arquitectura general. Luego, en la sección 3 discutimos el algoritmo de clustering distribuido utilizado en Dynamo y lo comparamos con un enfoque más clásico y centralizado. La sección 4 está dedicada a mejorar el comportamiento de los agentes que fue diseñado teniendo en cuenta criterios ignorados por el agrupamiento. Y finalmente, en la sección 5, discutimos las limitaciones de nuestro enfoque y explicamos cómo se abordarán en trabajos futuros. DYNAMO RESUMEN 2.1 Ontología como un Sistema Multiagente Dynamo tiene como objetivo reducir la necesidad de acciones manuales en el procesamiento de los resultados del análisis de texto y sugerir un inicio de red conceptual para construir ontologías de manera más eficiente. El enfoque elegido es completamente original en nuestro conocimiento y utiliza un sistema multiagente adaptativo. Esta elección se basa en las cualidades ofrecidas por el sistema multiagente: pueden facilitar el diseño interactivo de un sistema (en nuestro caso, una red conceptual), permiten su construcción incremental al tener en cuenta progresivamente nuevos datos (provenientes del análisis de texto y la interacción del usuario) y, por último pero no menos importante, pueden distribuirse fácilmente a través de una red informática. Dynamo realiza un análisis sintáctico y terminológico de textos como entrada. Utiliza varios criterios basados en estadísticas calculadas a partir de los contextos lingüísticos de los términos para crear y posicionar los conceptos. Como resultado, Dynamo proporciona al analista una organización jerárquica de conceptos (el sistema multiagente en sí mismo) que puede ser validada, refinada o modificada, hasta que obtenga un estado satisfactorio de la red semántica. Una ontología puede ser vista como un mapa estable constituido por entidades conceptuales, representadas aquí por agentes, vinculadas por relaciones etiquetadas. Por lo tanto, nuestro enfoque considera una ontología como un tipo de equilibrio entre sus concepto-agentes, donde sus fuerzas están definidas por sus relaciones potenciales. La modificación de la ontología es una perturbación del equilibrio previo por la aparición o desaparición de agentes o relaciones. De esta manera, una ontología dinámica es un proceso de autoorganización que ocurre cuando se incluyen nuevos textos en el corpus, o cuando el ontólogo interactúa con él. Para apoyar la flexibilidad necesaria de dicho sistema, utilizamos un sistema multiagente autoorganizado basado en un enfoque cooperativo [9]. Seguimos el método ADELFE [4] propuesto para guiar el diseño de este tipo de sistema multiagente. Se justifica cómo diseñamos algunas de las reglas utilizadas por nuestros agentes para maximizar el grado de cooperación dentro del sistema multiagente de Dynamos. 2.2 Arquitectura Propuesta En esta sección, presentamos nuestra arquitectura del sistema. Aborda las necesidades de la Ingeniería del Conocimiento en el contexto de la gestión y mantenimiento dinámico de ontologías cuando la ontología está vinculada a una colección de documentos. El sistema Dynamo consta de tres partes (cf. figura 1): • una red de términos, obtenida gracias a una herramienta de extracción de términos utilizada para preprocesar el corpus textual, • un sistema multiagente que utiliza la red de términos para realizar un agrupamiento jerárquico con el fin de obtener una taxonomía de conceptos, • una interfaz que permite al ontólogo visualizar y controlar el proceso de agrupamiento. El extractor de términos que utilizamos es Syntex, un software que ha sido utilizado eficientemente para tareas de construcción de ontologías [11]. Principalmente lo seleccionamos por su robustez y la gran cantidad de información extraída. En particular, crea una red de Expansión de Cabeza que ya ha demostrado ser interesante para un sistema de agrupamiento [1]. En una red de este tipo, cada término está vinculado a su término principal y, es decir, a la subfrase máxima ubicada como término principal de su término de expansión, y también a todos los términos para los cuales es un término principal o un término de expansión. Por ejemplo, la ingeniería del conocimiento a partir de texto tiene como término principal la ingeniería del conocimiento y como término de expansión el texto. Además, la ingeniería del conocimiento se compone del conocimiento como término principal y la ingeniería como término de expansión. Con Dynamo, el término de red obtenido como resultado del extractor se almacena en una base de datos. Para cada par de términos, asumimos que es posible calcular un valor de similitud para realizar un agrupamiento [6] [1]. Debido a la naturaleza de los datos, nos estamos enfocando únicamente en la computación de similitud entre objetos descritos gracias a variables binarias, lo que significa que cada elemento está descrito por la presencia o ausencia de un conjunto de características [15]. En el caso de los términos, generalmente estamos tratando con sus contextos de uso. Con Syntex, esos contextos son identificados por términos y caracterizados por algunas relaciones sintácticas. El sistema multiagente Dynamo implementa el algoritmo de clustering distribuido descrito en detalle en la sección 3 y las reglas descritas en la sección 4. Está diseñado para ser tanto el sistema que produce la estructura resultante como la estructura en sí misma. Significa que cada agente representa una clase en la taxonomía. Entonces, la salida del sistema es la organización obtenida a partir de la interacción entre agentes, teniendo en cuenta la retroalimentación proveniente del ontólogo cuando modifica la taxonomía dada sus necesidades o experiencia. CLUSTERING DISTRIBUIDO Esta sección presenta el algoritmo de clustering distribuido utilizado en Dynamo. Por el bien de la comprensión, y debido a su evaluación en la sección 3.1, recordamos el algoritmo centralizado básico utilizado para un agrupamiento jerárquico ascendente en un espacio no métrico, cuando se dispone de una medida de similitud simétrica [15] (que es el caso de las medidas utilizadas en nuestro sistema). Algoritmo 1: Algoritmo de agrupamiento jerárquico ascendente centralizado Datos: Lista L de elementos para organizar como una jerarquía Resultado: Raíz R de la jerarquía mientras longitud(L) > 1 hacer max ← 0; A ← nil; B ← nil; para i ← 1 a longitud(L) hacer I ← L[i]; para j ← i + 1 a longitud(L) hacer J ← L[j]; sim ← similitud(I, J); si sim > max entonces max ← sim; A ← I; B ← J; fin si fin para fin para quitar(A, L); quitar(B, L); agregar((A, B), L); fin mientras R ← L[1]; En el algoritmo 1, para cada paso de agrupamiento, se determina el par de elementos más similares. Esos dos elementos están agrupados en un conjunto, y la clase resultante se añade a la lista de elementos restantes. Este algoritmo se detiene cuando la lista tiene solo un elemento restante. 2 es decir, la subfrase máxima ubicada como cola del término The Sixth Intl. La jerarquía resultante del algoritmo 1 siempre es un árbol binario debido a la forma en que se realiza el agrupamiento. Además, agrupar los elementos más similares es equivalente a alejarlos de los menos similares. Nuestro algoritmo distribuido está diseñado basándose en esos dos hechos. Se ejecuta de forma simultánea en cada uno de los agentes del sistema. Cabe destacar que, en lo que sigue de este artículo, utilizamos para ambos algoritmos una similitud de Anderberg (con α = 0.75) y una estrategia de agrupamiento de enlace promedio [15]. Esas decisiones tienen un impacto en el árbol resultante, pero no afectan ni la ejecución global del algoritmo ni su complejidad. Ahora presentamos el algoritmo distribuido utilizado en nuestro sistema. Se inicia de la siguiente manera: • se crea un agente TOP que no tiene padre, será la raíz de la taxonomía resultante, • se crea un agente para cada término que se va a posicionar en la taxonomía, todos tienen como padre a TOP. Una vez que se establece esta estructura básica, el algoritmo se ejecuta hasta que alcanza el equilibrio y luego proporciona la taxonomía resultante. El proceso de la primera etapa (figura 2) se activa cuando un agente (aquí Ak) tiene más de un hermano (ya que queremos obtener un árbol binario). Luego envía un mensaje a su padre P indicando a su hermano más diferente (aquí A1). Entonces P recibe el mismo tipo de mensaje de cada uno de sus hijos. En lo siguiente, este tipo de mensaje se llamará voto. A continuación, cuando P ha recibido mensajes de todos sus hijos, comienza el segundo paso (figura 3). Gracias a los mensajes recibidos que indican las preferencias de sus hijos, P puede determinar tres subgrupos entre sus hijos: el hijo que recibió más votos de sus hermanos, es decir, el hijo que es más diferente del mayor número de sus hermanos. En caso de empate, uno de los ganadores es elegido al azar (aquí A1), los niños que permitieron la elección del primer grupo, es decir, los agentes que eligieron a su hermano del primer grupo como el más diferente (aquí Ak a An), los niños restantes (aquí A2 a Ak−1). Entonces P crea un nuevo agente P (teniendo a P como padre) y pide a los agentes del segundo grupo (aquí los agentes Ak a An) que lo elijan como su nuevo padre. Ak−1 Ak AnA2A1 P P ...... ...... \n\nAk−1 Ak AnA2A1 P P ...... ...... Figura 4: Agrupamiento distribuido: Paso 3 Finalmente, el paso 3 (figura 4) es trivial. Los niños rechazados por P (aquí el agente A2 a An) tienen en cuenta su mensaje y eligen a P como su nuevo padre. La jerarquía acaba de crear un nuevo nivel intermedio. Ten en cuenta que este algoritmo generalmente converge, ya que el número de hermanos de un agente disminuye. Cuando un agente tiene solamente un hermano restante, su actividad se detiene (aunque sigue procesando los mensajes que llegan de sus hijos). Sin embargo, en algunos casos podemos llegar a un conflicto circular en el procedimiento de votación cuando, por ejemplo, A vota en contra de B, B en contra de C y C en contra de A. Con el sistema actual no se puede tomar ninguna decisión. El procedimiento actual debería mejorarse para abordar esto, probablemente utilizando un método de votación clasificado. 3.1 Evaluación Cuantitativa Ahora, evaluamos las propiedades de nuestro algoritmo distribuido. Se requiere comenzar con una evaluación cuantitativa, basada en su complejidad, mientras se compara con el algoritmo 1 de la sección anterior. Su complejidad teórica se calcula para el peor caso, considerando la operación de cálculo de similitud como elemental. Para el algoritmo distribuido, el peor caso significa que en cada ejecución, solo se puede crear un grupo de dos elementos. Bajo esas condiciones, para un conjunto de datos dado de n elementos, podemos determinar la cantidad de cálculos de similitud. Para el algoritmo 1, notamos que l = longitud(L), luego el bucle más interno se ejecuta l - i veces. Y su cuerpo tiene la única computación de similitud, por lo que su costo es l−i. El segundo bucle for se ejecuta l veces para i que varía de 1 a l. Entonces su costo es Pl i=1(l − i) que puede simplificarse en l×(l−1) 2. Finalmente, para cada ejecución del bucle while, l se reduce de n a 1, lo que nos da t1(n) como la cantidad de cálculos de similitud para el algoritmo 1: t1(n) = nX l=1 l × (l − 1) 2 (1) Para el algoritmo distribuido, en un paso dado, cada uno de los l agentes evalúa la similitud con sus l −1 compañeros. Entonces, cada paso tiene un costo de l × (l − 1). Entonces, se crean grupos y se realiza otra votación con l disminuido en uno (ya que asumimos el peor caso, solo se forman grupos de tamaño 2 o l −1). Dado que l es igual a n en la primera ejecución, obtenemos tdist(n) como la cantidad de cálculos de similitud para el algoritmo distribuido: tdist(n) = nX l=1 l × (l − 1) (2) Ambos algoritmos tienen una complejidad O(n3). Pero en el peor de los casos, el algoritmo distribuido realiza el doble del número de el1288 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) operaciones elementales realizadas por el algoritmo centralizado. Esta brecha proviene de la toma de decisiones local en cada agente. Debido a esto, los cálculos de similitud se realizan dos veces para cada par de agentes. Podríamos concebir que un agente envía el resultado de su cálculo a su par. Sin embargo, simplemente trasladaría el problema al generar más comunicación en el sistema. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Cantidad de comparaciones Cantidad de términos de entrada 1. Algoritmo distribuido (en promedio, con mínimo y máximo) 2. Polinomio logarítmico 3. En la Figura 5 se muestra el algoritmo centralizado: Resultados experimentales. En un segundo paso, la complejidad promedio del algoritmo ha sido determinada mediante experimentos. El sistema multiagente ha sido ejecutado con conjuntos de datos de entrada generados aleatoriamente que van desde diez hasta cien términos. El valor dado es el promedio de las comparaciones realizadas para cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 5. El algoritmo es entonces más eficiente en promedio que el algoritmo centralizado, y su complejidad promedio está por debajo del peor caso. Se puede explicar por la baja probabilidad de que un conjunto de datos obligue al sistema a crear solo grupos mínimos (dos elementos) o máximos (n − 1 elementos) para cada paso de razonamiento. La curva número 2 representa el polinomio logarítmico que minimiza el error con respecto a la curva número 1. El término de mayor grado de este polinomio es n2 log(n), por lo tanto, nuestro algoritmo distribuido tiene una complejidad O(n2 log(n)) en promedio. Finalmente, notemos la reducida variación de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 1,960.75 para un promedio de 40,550.10 (alrededor del 5%), lo que muestra la buena estabilidad del sistema. Aunque los resultados cuantitativos son interesantes, la verdadera ventaja de este enfoque proviene de características más cualitativas que presentaremos en esta sección. Todos son ventajas obtenidas gracias al uso de un sistema multiagente adaptativo. La principal ventaja del uso de un sistema multiagente para una tarea de agrupamiento es introducir dinamismo en dicho sistema. El ontólogo puede hacer modificaciones y la jerarquía se adapta dependiendo de la solicitud. Es particularmente interesante en un contexto de ingeniería del conocimiento. De hecho, la jerarquía creada por el sistema está destinada a ser modificada por el ontólogo ya que es el resultado de un cálculo estadístico. Durante la revisión necesaria de los textos para examinar los contextos de uso de los términos [2], el ontólogo podrá interpretar el contenido real y revisar la propuesta del sistema. Es extremadamente difícil lograr esto con un enfoque centralizado de <br>caja negra</br>. En la mayoría de los casos, uno tiene que encontrar qué paso de razonamiento generó el error y modificar manualmente la clase resultante. Desafortunadamente, en este caso, todos los pasos de razonamiento que ocurrieron después de la creación de la clase modificada se pierden y deben ser recalculados teniendo en cuenta la modificación. Por eso, un sistema como ASIUM [6] intenta suavizar el problema con una colaboración entre el sistema y el usuario mostrando al ontólogo las clases creadas después de cada paso de razonamiento. Pero el ontólogo puede cometer un error y darse cuenta de ello demasiado tarde. Figura 6: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos un ejemplo gracias a algunas capturas de pantalla del prototipo en funcionamiento probado en un corpus relacionado con la medicina. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 6 después de la estabilización. Es evidente que el concepto descrito por el término lesión está mal ubicado. Las computaciones de similitud lo sitúan más cerca de femme (mujer) y chirurgien (cirujano) que de infección, gastro-enteritis y hepatitis. Esta posición incorrecta para la lesión se explica por el hecho de que sin la entrada del ontólogo, el razonamiento se basa únicamente en criterios estadísticos. Figura 7: Árbol de agentes conceptuales después de la modificación del ontólogo. Luego, el ontólogo reemplaza el concepto en la rama derecha, afectando a ConceptAgent:8 como su nuevo padre. El nombre ConceptAgent:X se asigna automáticamente a un agente conceptual que no está descrito por un término. El sistema reacciona por sí mismo y perfecciona la jerarquía de agrupación para obtener un árbol binario creando ConceptAgent:11. El nuevo estado estable es el de la figura 7. Este acoplamiento sistema-usuario es necesario para construir una ontología, pero no se necesita ningún ajuste particular al principio del algoritmo distribuido ya que cada agente realiza un procesamiento local autónomo y se comunica con su vecindario a través de mensajes. Además, este algoritmo puede ser distribuido de facto en una red de computadoras. La comunicación entre agentes se realiza enviando mensajes y cada uno mantiene su autonomía de decisión. Entonces, una modificación del sistema para hacerlo funcionar en red no requeriría ajustar el algoritmo. Por el contrario, solo sería necesario reestructurar la capa de comunicación y el proceso de creación de agentes, ya que en nuestra implementación actual no están en red. 4. EN LA JERARQUÍA DE MÚLTIPLES CRITERIOS En las secciones anteriores, asumimos que la similitud se puede calcular para cualquier par de términos. Pero, tan pronto como se utilizan datos reales, esta propiedad ya no se verifica. Algunos términos no tienen ningún valor de similitud con ningún término extraído. Además, para los nodos hoja a veces es interesante utilizar otros medios para posicionarlos en la jerarquía. Para esta estructuración de bajo nivel, los ontólogos generalmente se basan en The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1289 sus elecciones en heurísticas simples. Usando esta observación, construimos un nuevo conjunto de reglas, que no se basan en la similitud para respaldar la estructuración de bajo nivel. 4.1 Agregar reglas de cobertura de cabeza En este caso, los agentes pueden actuar con un punto de vista muy local simplemente mirando la relación padre/hijo. Cada agente puede intentar determinar si su padre es adecuado. Es posible adivinar esto porque cada agente conceptual está descrito por un conjunto de términos y gracias a la red de términos de Expansión de Cabeza. En el siguiente TX será el conjunto de términos que describen el concepto del agente X y head(TX) el conjunto de todos los términos que son cabeza de al menos un elemento de TX. Gracias a esas dos notaciones podemos describir la función de adecuación entre un padre P y un hijo C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Entonces, el mejor padre para C es el agente P que maximiza a(P, C). Un agente insatisfecho con su padre puede intentar encontrar uno mejor evaluando la idoneidad de los candidatos. Diseñamos un algoritmo complementario para dirigir esta búsqueda: cuando un agente C no está satisfecho con su padre P, evalúa a(Bi, C) con todos sus hermanos (notados Bi); luego se elige como nuevo padre aquel que maximice a(Bi, C). Figura 8: Árbol de agentes conceptuales después de la estabilización autónoma del sistema sin la regla de cobertura de cabeza. Ahora ilustramos este comportamiento de regla con un ejemplo. La Figura 8 muestra el estado del sistema después de la estabilización en los datos de prueba. Podemos notar que la hepatitis viral todavía está vinculada a la raíz taxonómica. Se debe al hecho de que no hay valor de similitud entre el término hepatitis viral y ninguno de los términos de los otros agentes conceptuales. Figura 9: Árbol de agentes conceptuales después de la activación de la regla de cobertura de la cabeza. Tras activar la regla de cobertura de la cabeza y permitir que el sistema se estabilice nuevamente, obtenemos la figura 9. Podemos ver que la hepatitis viral se deslizó a través de la rama que llevaba a la hepatitis y la eligió como su nueva progenitora. Es una elección por defecto sensata, ya que la hepatitis viral es un término más específico que la hepatitis. Esta regla tiende a hacer que los agentes descritos por un conjunto de términos se conviertan en hojas del árbol conceptual. Aborda nuestra preocupación por mejorar la estructuración de bajo nivel de nuestra taxonomía. Pero obviamente nuestros agentes carecen de un método para retroceder en caso de modificaciones en la taxonomía que los ubicarían en la rama incorrecta. Ese es uno de los puntos en los que nuestro sistema aún debe ser mejorado al agregar otro conjunto de reglas. 4.2 Sobre el uso de varios criterios En las secciones y ejemplos anteriores, solo utilizamos un algoritmo a la vez. El algoritmo de agrupamiento distribuido tiende a introducir nuevas capas en la taxonomía, mientras que el algoritmo de cobertura de cabeza tiende a empujar algunos de los agentes hacia las hojas de la taxonomía. Obviamente plantea la pregunta sobre cómo lidiar con múltiples criterios en la construcción de nuestra taxonomía, y cómo los agentes determinan sus prioridades en un momento dado. La solución que elegimos proviene de la búsqueda de minimizar la falta de cooperación dentro del sistema de acuerdo con el método ADELFE. Cada agente calcula tres grados de no cooperación y elige su prioridad actual dependiendo de cuál grado sea el más alto. Para un agente A dado que tiene un padre P, un conjunto de hermanos Bi y que recibió un conjunto de mensajes Mk con prioridad pk, los tres grados de no cooperación son: • μH (A) = 1 − a(P, A), es el grado de no cooperación de cobertura de cabeza, determinado por la cobertura de cabeza del padre, • μB(A) = max(1 − similitud(A, Bi)), es el grado de no cooperación de hermandad, determinado por el peor hermano de A en cuanto a similitudes, • μM (A) = max(pk), es el grado de no cooperación de mensaje, determinado por el mensaje más urgente recibido. Entonces, el grado de no cooperación μ(A) del agente A es: μ(A) = max(μH (A), μB(A), μM (A)) (4) Luego, tenemos tres casos que determinan qué tipo de acción elegirá A: • si μ(A) = μH (A) entonces A utilizará el algoritmo de cobertura de cabeza que detallamos en la subsección anterior • si μ(A) = μB(A) entonces A utilizará el algoritmo de agrupamiento distribuido (ver sección 3) • si μ(A) = μM (A) entonces A procesará Mk inmediatamente para ayudar a su remitente Estos tres casos resumen las actividades actuales de nuestros agentes: tienen que encontrar el mejor padre para ellos (μ(A) = μH (A)), mejorar la estructuración a través del agrupamiento (μ(A) = μB(A)) y procesar otros mensajes de agentes (μ(A) = μM (A)) para ayudarlos a cumplir sus propios objetivos. 4.3 Complejidad Experimental Revisitada Evaluamos la complejidad experimental de todo el sistema multiagente cuando todas las reglas están activadas. En este caso, la métrica utilizada es el número de mensajes intercambiados en el sistema. Una vez más, el sistema ha sido ejecutado con conjuntos de datos de entrada que van desde diez hasta cien términos. El valor dado es el promedio del número de mensajes enviados en el sistema en su totalidad durante cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 10. La curva número 1 representa el promedio del valor obtenido. La curva número 2 representa el promedio del valor obtenido cuando solo se activa el algoritmo de agrupamiento distribuido, no el conjunto completo de reglas. La curva número 3 representa el polinomio que minimiza el error con la curva número 1. El término de mayor grado de este polinomio es en n3, entonces nuestro sistema multiagente tiene una complejidad O(n3). Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Cantidad de mensajes Cantidad de términos de entrada 1. Dinamo, todas las reglas (en promedio, con mínimo y máximo) 2. Agrupamiento distribuido solo (en promedio) 2. Figura 10: Resultados experimentales en promedio de un polinomio cúbico. Además, notemos la variación muy pequeña de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 126.73 para un promedio de 20,737.03 (alrededor del 0.6%), lo que demuestra la excelente estabilidad del sistema. Finalmente, las reglas adicionales de cobertura de cabeza son una verdadera mejora sobre el algoritmo distribuido por sí solo. Introducen más restricciones y se alcanza el punto de estabilidad con menos interacciones y toma de decisiones por parte de los agentes. Significa que se intercambian menos mensajes en el sistema al obtener un árbol de mayor calidad para el ontólogo. 5. DISCUSIÓN Y PERSPECTIVAS 5.1 Limitación actual de nuestro enfoque La limitación más importante de nuestro algoritmo actual es que el resultado depende del orden en que se agregan los datos. Cuando el sistema funciona por sí solo en un conjunto de datos fijo proporcionado durante la inicialización, el resultado final es equivalente a lo que podríamos obtener con un algoritmo centralizado. Por el contrario, añadir un nuevo elemento después de una primera estabilización tiene un impacto en el resultado final. Figura 11: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos otro ejemplo del sistema en funcionamiento. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 11 después de la estabilización. Figura 12: Árbol de agentes conceptuales después de tener en cuenta la hepatitis. Luego, el ontólogo interactúa con el sistema y agrega un nuevo concepto descrito por el término hepatitis y vinculado a la raíz. El sistema reacciona y se estabiliza, luego obtenemos la figura 12 como resultado. La hepatitis se encuentra en la rama derecha, pero no hemos obtenido la misma organización que la figura 6 del ejemplo anterior. Necesitamos mejorar nuestro algoritmo distribuido para permitir que un concepto se mueva a lo largo de una rama. Actualmente estamos trabajando en las reglas requeridas, pero la comparación con el algoritmo centralizado se volverá muy difícil. En particular, ya que tendrán en cuenta criterios ignorados por el algoritmo centralizado. 5.2 Poda para la construcción de ontologías En la sección 3, presentamos el algoritmo de agrupamiento distribuido utilizado en el sistema Dynamo. Dado que este trabajo se basó inicialmente en este algoritmo, introdujo un claro sesgo hacia los árboles binarios como resultado. Pero debemos tener en cuenta que estamos tratando de obtener taxonomías que sean más refinadas y concisas. Aunque la regla de cobertura de la cabeza es una mejora porque se basa en cómo generalmente trabajan los ontólogos, solo aborda la estructuración a un nivel bajo y no a los niveles intermedios del árbol. Al observar la figura 7, es evidente que se podría realizar una poda en la taxonomía. En particular, dado que la lesión se movió, el ConceptAgent:9 podría ser eliminado, ya no es necesario. Además, la rama que comienza con ConceptAgent:8 respeta claramente la restricción de formar un árbol binario, pero sería más útil para el usuario en una forma más compacta y significativa. En este caso, ConceptAgent:10 y ConceptAgent:11 probablemente podrían fusionarse. Actualmente, nuestro sistema cuenta con las reglas necesarias para crear niveles intermedios en la taxonomía, o para que los conceptos se desplacen hacia la hoja. Como señalamos, no es suficiente, por lo que se necesitan nuevas reglas para permitir eliminar nodos del árbol o moverlos hacia la raíz. La mayor parte del trabajo necesario para desarrollar esas reglas consiste en encontrar la información estadística relevante que respaldará al ontólogo. CONCLUSIÓN Después de ser presentada como una solución prometedora, garantizar la calidad del modelo y su riqueza terminológica, la construcción de ontologías a partir del análisis de corpus textual es difícil y costosa. Requiere supervisión del analista y tener en cuenta el objetivo de la ontología. El uso de herramientas de procesamiento de lenguaje natural facilita la localización del conocimiento en textos a través del uso del lenguaje. Dicho esto, esas herramientas producen una gran cantidad de datos léxicos o gramaticales que no son triviales de examinar para definir elementos conceptuales. Nuestra contribución radica en este paso del proceso de modelado a partir de textos, antes de intentar normalizar o formalizar el resultado. Propusimos un enfoque basado en un sistema multiagente adaptativo para proporcionar al ontólogo una primera estructura taxonómica de conceptos. Nuestro sistema hace uso de una red terminológica resultante de un análisis realizado por Syntex. El estado actual de nuestro software permite producir estructuras simples, proponérselas al ontólogo y hacerlas evolucionar dependiendo de las modificaciones que él realice. Las actuaciones del sistema son interesantes y algunos aspectos son incluso comparables a su contraparte centralizada. Sus fortalezas son principalmente cualitativas ya que permite interacciones de usuario más sutiles y una adaptación progresiva a nueva información basada en el lenguaje. Desde el punto de vista de la construcción de la ontología, este trabajo es un primer paso que muestra la relevancia de nuestro enfoque. Debe continuar, tanto para garantizar una mejor robustez durante la clasificación, como para obtener estructuras semánticas más ricas que simples árboles. De estas mejoras, nos estamos enfocando principalmente en la poda para obtener mejores taxonomías. Actualmente estamos trabajando en el criterio para activar las acciones complementarias de los cambios de estructura aplicados por nuestro algoritmo de agrupamiento. En otras palabras, este algoritmo se introduce en el Sexto Congreso Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1291 niveles intermedios, y necesitamos poder eliminarlos si es necesario, para alcanzar un equilibrio dinámico. También desde el punto de vista de la ingeniería multiagente, su uso en un contexto de ontología dinámica ha demostrado su relevancia. Estas ontologías dinámicas pueden ser vistas como una resolución de problemas complejos, en tal caso la autoorganización a través de la cooperación ha sido una solución eficiente. Y, en general, es probable que sea interesante para otras tareas relacionadas con el diseño, incluso si nos estamos enfocando únicamente en la ingeniería del conocimiento en este artículo. Por supuesto, nuestro sistema aún requiere más trabajo de evaluación y validación para determinar con precisión las ventajas y desventajas de este enfoque. Estamos planeando trabajar en ese tipo de comparación en un futuro cercano. 7. REFERENCIAS [1] H. Assadi. Construcción de una ontología regional a partir de texto y su uso dentro de un sistema documental. Actas de la Conferencia Internacional sobre Ontología Formal y Sistemas de Información - FOIS98, páginas 236-249, 1998. [2] N. Aussenac-Gilles y D. Sörgel. Análisis de texto para ingeniería de ontologías y terminología. Revista de Ontología Aplicada, 2005. [3] J. Bao y V. Honavar. Construcción colaborativa de ontologías con wiki@nt. Actas del Taller de Evaluación de Herramientas Basadas en Ontologías (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes y G. Picard. Metodologías Orientadas a Agentes, capítulo 7. Ingeniería de Sistemas Multiagente Autoadaptativos: la Metodología ADELFE, páginas 172-202. Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna y Y. Wilks. Antecedentes y conocimiento previo en la construcción dinámica de ontologías. Taller de la Web Semántica, SIGIR03, agosto de 2003. [6] D. Faure y C. Nedellec. Un método de agrupamiento conceptual basado en corpus para marcos verbales y adquisición de ontologías. Taller LREC sobre la adaptación de recursos léxicos y corpus a sublenguajes y aplicaciones, 1998. [7] F. Gandon. Ingeniería de Ontologías: una Encuesta y un Retorno de Experiencia. INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes y P. Glize. Diseño Vivo para Sistemas Computacionales Abiertos. 12º Talleres Internacionales de la IEEE sobre Tecnologías Habilitadoras, Infraestructura para Empresas Colaborativas, páginas 389-394, junio de 2003. [9] M.-P. Gleizes, V. Camps y P. Glize. Una teoría de computación emergente basada en la autoorganización cooperativa para sistemas artificiales adaptativos. Cuarto Congreso Europeo de Ciencias de los Sistemas, septiembre de 1999. [10] J. Heflin y J. Hendler. Ontologías dinámicas en la web. Conferencia de la Asociación Americana de Inteligencia Artificial, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault y M.-C. Jaulent. Extracción de terminología del texto para construir una ontología en cuidados intensivos quirúrgicos. Actas del simposio anual de la AMIA 2002, 2002. [12] K. Lister, L. Sterling y K. Taveter. Reconciliando diferencias ontológicas mediante agentes asistentes. AAMAS06, mayo de 2006. [13] A. Maedche. Aprendizaje de ontologías para la Web Semántica. Editorial Kluwer Academic, 2002. [14] A. Maedche y S. Staab. Extracción de ontologías a partir de texto. EKAW 2000, páginas 189-202, 2000. [15] C. D. Manning y H. Schütze. Fundamentos del Procesamiento del Lenguaje Natural Estadístico. El MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding y S. Brueckner. Clustering jerárquico descentralizado dinámico en cualquier momento. 29ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, agosto de 2006. 1292 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "parent adequacy function": {
            "translated_key": "función de adecuación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of Ontology Learning.",
                "Our system named Dynamo is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
                "In this paper we present a distributed hierarchical clustering algorithm, core of our approach.",
                "It is evaluated and compared to a more conventional centralized algorithm.",
                "We also present how it has been improved using a multi-criteria approach.",
                "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete ontology building solution.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval.",
                "But building an ontology manually is a slow, tedious, costly, complex and time consuming process.",
                "Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date.",
                "It would mean creating dynamic ontologies [10] and it justifies the emergence of ontology learning techniques [14] [13].",
                "Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts.",
                "Our aim is not to build an exhaustive, general hierarchical ontology but a domain specific one.",
                "We propose a semi-automated tool since an external resource is required: the ontologist.",
                "An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies.",
                "In the multi-agent field, ontologies generally enable agents to understand each other [12].",
                "Theyre sometimes used to ease the ontology building process, in particular for collaborative contexts [3], but they rarely represent the ontology itself [16].",
                "Most works interested in the construction of ontologies [7] propose the refinement of ontologies.",
                "This process consists in using an existing ontology and building a new one from it.",
                "This approach is different from our approach because Dynamo starts from scratch.",
                "Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5].",
                "In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist.",
                "This paper first presents, in section 2, the big picture of the Dynamo system.",
                "In particular the motives that led to its creation and its general architecture.",
                "Then, in section 3 we discuss the distributed clustering algorithm used in Dynamo and compare it to a more classic centralized approach.",
                "Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering.",
                "And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2.",
                "DYNAMO OVERVIEW 2.1 Ontology as a Multi-Agent System Dynamo aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently.",
                "The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system.",
                "This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network.",
                "Dynamo takes a syntactical and terminological analysis of texts as input.",
                "It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts.",
                "As output, Dynamo provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network.",
                "An ontology can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations.",
                "Thus, our approach considers an ontology as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships.",
                "The ontology modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships.",
                "In this way, a dynamic ontology is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it.",
                "To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9].",
                "We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system.",
                "It justifies how we designed some of the rules used by our agents in order to maximize the cooperation degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
                "It addresses the needs of Knowledge Engineering in the context of dynamic ontology management and maintenance when the ontology is linked to a document collection.",
                "The Dynamo system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ? ?",
                "Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for ontology building tasks [11].",
                "We mainly selected it because of its robustness and the great amount of information extracted.",
                "In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1].",
                "In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term.",
                "For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term.",
                "Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term.",
                "With Dynamo, the term network obtained as the output of the extractor is stored in a database.",
                "For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1].",
                "Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15].",
                "In the case of terms we are generally dealing with their usage contexts.",
                "With Syntex, those contexts are identified by terms and characterized by some syntactic relations.",
                "The Dynamo multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4.",
                "It is designed to be both the system producing the resulting structure and the structure itself.",
                "It means that each agent represent a class in the taxonomy.",
                "Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3.",
                "DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in Dynamo.",
                "For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system).",
                "Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined.",
                "Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements.",
                "This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done.",
                "Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones.",
                "Our distributed algorithm is designed relying on those two facts.",
                "It is executed concurrently in each of the agents of the system.",
                "Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15].",
                "Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity.",
                "We now present the distributed algorithm used in our system.",
                "It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent.",
                "Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy.",
                "Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree).",
                "Then it sends a message to its parent P indicating its most dissimilar brother (here A1).",
                "Then P receives the same kind of message from each of its children.",
                "In the following, this kind of message will be called a vote.",
                "Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3).",
                "Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers.",
                "In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1).",
                "Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent.",
                "Ak−1 Ak AnA2A1 P P ...... ......",
                "Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial.",
                "The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent.",
                "The hierarchy just created a new intermediate level.",
                "Note that this algorithm generally converges, since the number of brothers of an agent drops.",
                "When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children).",
                "However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A.",
                "With the current system no decision can be taken.",
                "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 Quantitative Evaluation Now, we evaluate the properties of our distributed algorithm.",
                "It requires to begin with a quantitative evaluation, based on its complexity, while comparing it with the algorithm 1 from the previous section.",
                "Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary.",
                "For the distributed algorithm, the worst case means that for each run, only a two-item group can be created.",
                "Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations.",
                "For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times.",
                "And its body has the only similarity computation, so its cost is l−i.",
                "The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 .",
                "Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers.",
                "So each steps has a l × (l − 1) cost.",
                "Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built).",
                "Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity.",
                "But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm.",
                "This gap comes from the local decision making in each agent.",
                "Because of this, the similarity computations are done twice for each agent pair.",
                "We could conceive that an agent sends its computation result to its peer.",
                "But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1.",
                "Distributed algorithm (on average, with min and max) 2.",
                "Logarithmic polynomial 3.",
                "Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments.",
                "The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms.",
                "The given value is the average of comparisons made for one hundred of runs without any user interaction.",
                "It results in the plots of figure 5.",
                "The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case.",
                "It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning.",
                "Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average.",
                "Finally, lets note the reduced variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section.",
                "All are advantages obtained thanks to the use of an adaptive multi-agent system.",
                "The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system.",
                "The ontologist can make modifications and the hierarchy adapts depending on the request.",
                "It is particularly interesting in a knowledge engineering context.",
                "Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation.",
                "During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal.",
                "It is extremely difficult to realize this with a centralized black-box approach.",
                "In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class.",
                "Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account.",
                "That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning.",
                "But, the ontologist can make a mistake, and become aware of it too late.",
                "Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus.",
                "By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization.",
                "It is clear that the concept described by the term lésion (lesion) is misplaced.",
                "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (hepatitis).",
                "This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria.",
                "Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent.",
                "The name ConceptAgent:X is automatically given to a concept agent that is not described by a term.",
                "The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11.",
                "The new stable state if the one of figure 7.",
                "This system-user coupling is necessary to build an ontology, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages.",
                "Moreover, this algorithm can de facto be distributed on a computer network.",
                "The communication between agents is then done by sending messages and each one keeps its decision autonomy.",
                "Then, a system modification to make it run networked would not require to adjust the algorithm.",
                "On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4.",
                "MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair.",
                "But, as soon as one uses real data this property is not verified anymore.",
                "Some terms do not have any similarity value with any extracted term.",
                "Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy.",
                "For this low level structuring, ontologists generally base The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics.",
                "Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation.",
                "Each agent can try to determine if its parent is adequate.",
                "It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network.",
                "In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX .",
                "Thanks to those two notations we can describe the <br>parent adequacy function</br> a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C).",
                "An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates.",
                "We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent.",
                "Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example.",
                "Figure 8 shows the state of the system after stabilization on test data.",
                "We can notice that hépatite viral (viral hepatitis) is still linked to the taxonomy root.",
                "It is caused by the fact that there is no similarity value between the viral hepatitis term and any of the term of the other concept agents.",
                "Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9.",
                "We can see that viral hepatitis slipped through the branch leading to hepatitis and chose it as its new parent.",
                "It is a sensible default choice since viral hepatitis is a more specific term than hepatitis.",
                "This rule tends to push agents described by a set of term to become leafs of the concept tree.",
                "It addresses our concern to improve the low level structuring of our taxonomy.",
                "But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch.",
                "That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time.",
                "The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy.",
                "It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time.",
                "The solution we chose came from the search for minimizing non cooperation within the system in accordance with the ADELFE method.",
                "Each agent computes three non cooperation degrees and chooses its current priority depending on which degree is the highest.",
                "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non cooperation degrees are: • μH (A) = 1 − a(P, A), is the head coverage non cooperation degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
                "Then, the non cooperation degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated.",
                "In this case, the metric used is the number of messages exchanged in the system.",
                "Once again the system has been executed with input data sets ranging from ten to one hundred terms.",
                "The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction.",
                "It results in the plots of figure 10.",
                "Curve number 1 represents the average of the value obtained.",
                "Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set.",
                "Curve number 3 represents the polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1.",
                "Dynamo, all rules (on average, with min and max) 2.",
                "Distributed clustering only (on average) 2.",
                "Cubic polynomial Figure 10: Experimental results on average.",
                "Moreover, lets note the very small variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system.",
                "Finally the extra head coverage rules are a real improvement on the distributed algorithm alone.",
                "They introduce more constraints and stability point is reached with less interactions and decision making by the agents.",
                "It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5.",
                "DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added.",
                "When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm.",
                "On the contrary, adding a new item after a first stabilization has an impact on the final result.",
                "Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system.",
                "By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization.",
                "Figure 12: Concept agent tree after taking in account hepatitis Then, the ontologist interacts with the system and adds a new concept described by the term hepatitis and linked to the root.",
                "The system reacts and stabilizes, we then obtain figure 12 as a result. hepatitis is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example.",
                "We need to improve our distributed algorithm to allow a concept to move along a branch.",
                "We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult.",
                "In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the Dynamo system.",
                "Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result.",
                "But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise.",
                "Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree.",
                "By looking at figure 7, it is clear that some pruning could be done in the taxonomy.",
                "In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore.",
                "Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form.",
                "In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged.",
                "Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf.",
                "As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root.",
                "Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6.",
                "CONCLUSION After being presented as a promising solution, ensuring model quality and their terminological richness, ontology building from textual corpus analysis is difficult and costly.",
                "It requires analyst supervising and taking in account the ontology aim.",
                "Using natural languages processing tools ease the knowledge localization in texts through language uses.",
                "That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements.",
                "Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result.",
                "We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts.",
                "Our system makes use of a terminological network resulting from an analysis made by Syntex.",
                "The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made.",
                "Performances of the system are interesting and some aspects are even comparable to their centralized counterpart.",
                "Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information.",
                "From the point of view of ontology building, this work is a first step showing the relevance of our approach.",
                "It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees.",
                "From this improvements we are mostly focusing on the pruning to obtain better taxonomies.",
                "Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm.",
                "In other words this algorithm introduces inThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a dynamic equilibrium.",
                "Also from the multi-agent engineering point of view, their use in a dynamic ontology context has shown its relevance.",
                "This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through cooperation has been an efficient solution.",
                "And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper.",
                "Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach.",
                "Were planning to work on such benchmarking in the near future. 7.",
                "REFERENCES [1] H. Assadi.",
                "Construction of a regional ontology from text and its use within a documentary system.",
                "Proceedings of the International Conference on Formal Ontology and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel.",
                "Text analysis for ontology and terminology engineering.",
                "Journal of Applied Ontology, 2005. [3] J. Bao and V. Honavar.",
                "Collaborative ontology building with wiki@nt.",
                "Proceedings of the Workshop on Evaluation of Ontology-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard.",
                "Agent-Oriented Methodologies, chapter 7.",
                "Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202.",
                "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks.",
                "Background and foreground knowledge in dynamic ontology construction.",
                "Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec.",
                "A corpus-based conceptual clustering method for verb frames and ontology acquisition.",
                "LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon.",
                "Ontology Engineering: a Survey and a Return on Experience.",
                "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize.",
                "Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize.",
                "A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems.",
                "Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler.",
                "Dynamic ontologies on the web.",
                "American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent.",
                "Terminology extraction from text to build an ontology in surgical intensive care.",
                "Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter.",
                "Reconciling Ontological Differences by Assistant Agents.",
                "AAMAS06, May 2006. [13] A. Maedche.",
                "Ontology learning for the Semantic Web.",
                "Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab.",
                "Mining Ontologies from Text.",
                "EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze.",
                "Foundations of Statistical Natural Language Processing.",
                "The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner.",
                "Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)"
            ],
            "original_annotated_samples": [
                "Thanks to those two notations we can describe the <br>parent adequacy function</br> a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C)."
            ],
            "translated_annotated_samples": [
                "Gracias a esas dos notaciones podemos describir la <br>función de adecuación</br> entre un padre P y un hijo C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Entonces, el mejor padre para C es el agente P que maximiza a(P, C)."
            ],
            "translated_text": "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de ontologías a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías. Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una arquitectura multiagente adaptativa. En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque. Se evalúa y se compara con un algoritmo centralizado más convencional. También presentamos cómo ha sido mejorado utilizando un enfoque de múltiples criterios. Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de ontologías. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Experimentación 1. INTRODUCCIÓN En la actualidad, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de información. Pero construir una ontología manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo. Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados. Significaría crear ontologías dinámicas [10] y justifica la aparición de técnicas de aprendizaje de ontologías [14] [13]. Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una ontología a partir de un conjunto específico de textos de un dominio. Nuestro objetivo no es construir una ontología jerárquica exhaustiva y general, sino una específica para un dominio. Proponemos una herramienta semi-automatizada ya que se requiere un recurso externo: el ontólogo. Un ontólogo es una especie de ingeniero cognitivo, o analista, que utiliza información de textos y entrevistas con expertos para diseñar ontologías. En el campo de los agentes múltiples, las ontologías generalmente permiten que los agentes se entiendan entre sí [12]. A veces se utilizan para facilitar el proceso de construcción de la ontología, en particular en contextos colaborativos [3], pero rara vez representan la ontología en sí misma [16]. La mayoría de los trabajos interesados en la construcción de ontologías [7] proponen el refinamiento de las ontologías. Este proceso consiste en utilizar una ontología existente y construir una nueva a partir de ella. Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero. Los investigadores, que trabajan en la construcción de ontologías a partir de textos, afirman que el trabajo a automatizar requiere recursos externos como un diccionario [14] o acceso a la web [5]. En nuestro trabajo, proponemos una interacción entre el ontólogo y el sistema, nuestro recurso externo radica tanto en los textos como en el ontólogo. Este documento primero presenta, en la sección 2, la visión general del sistema Dynamo. En particular, los motivos que llevaron a su creación y su arquitectura general. Luego, en la sección 3 discutimos el algoritmo de clustering distribuido utilizado en Dynamo y lo comparamos con un enfoque más clásico y centralizado. La sección 4 está dedicada a mejorar el comportamiento de los agentes que fue diseñado teniendo en cuenta criterios ignorados por el agrupamiento. Y finalmente, en la sección 5, discutimos las limitaciones de nuestro enfoque y explicamos cómo se abordarán en trabajos futuros. DYNAMO RESUMEN 2.1 Ontología como un Sistema Multiagente Dynamo tiene como objetivo reducir la necesidad de acciones manuales en el procesamiento de los resultados del análisis de texto y sugerir un inicio de red conceptual para construir ontologías de manera más eficiente. El enfoque elegido es completamente original en nuestro conocimiento y utiliza un sistema multiagente adaptativo. Esta elección se basa en las cualidades ofrecidas por el sistema multiagente: pueden facilitar el diseño interactivo de un sistema (en nuestro caso, una red conceptual), permiten su construcción incremental al tener en cuenta progresivamente nuevos datos (provenientes del análisis de texto y la interacción del usuario) y, por último pero no menos importante, pueden distribuirse fácilmente a través de una red informática. Dynamo realiza un análisis sintáctico y terminológico de textos como entrada. Utiliza varios criterios basados en estadísticas calculadas a partir de los contextos lingüísticos de los términos para crear y posicionar los conceptos. Como resultado, Dynamo proporciona al analista una organización jerárquica de conceptos (el sistema multiagente en sí mismo) que puede ser validada, refinada o modificada, hasta que obtenga un estado satisfactorio de la red semántica. Una ontología puede ser vista como un mapa estable constituido por entidades conceptuales, representadas aquí por agentes, vinculadas por relaciones etiquetadas. Por lo tanto, nuestro enfoque considera una ontología como un tipo de equilibrio entre sus concepto-agentes, donde sus fuerzas están definidas por sus relaciones potenciales. La modificación de la ontología es una perturbación del equilibrio previo por la aparición o desaparición de agentes o relaciones. De esta manera, una ontología dinámica es un proceso de autoorganización que ocurre cuando se incluyen nuevos textos en el corpus, o cuando el ontólogo interactúa con él. Para apoyar la flexibilidad necesaria de dicho sistema, utilizamos un sistema multiagente autoorganizado basado en un enfoque cooperativo [9]. Seguimos el método ADELFE [4] propuesto para guiar el diseño de este tipo de sistema multiagente. Se justifica cómo diseñamos algunas de las reglas utilizadas por nuestros agentes para maximizar el grado de cooperación dentro del sistema multiagente de Dynamos. 2.2 Arquitectura Propuesta En esta sección, presentamos nuestra arquitectura del sistema. Aborda las necesidades de la Ingeniería del Conocimiento en el contexto de la gestión y mantenimiento dinámico de ontologías cuando la ontología está vinculada a una colección de documentos. El sistema Dynamo consta de tres partes (cf. figura 1): • una red de términos, obtenida gracias a una herramienta de extracción de términos utilizada para preprocesar el corpus textual, • un sistema multiagente que utiliza la red de términos para realizar un agrupamiento jerárquico con el fin de obtener una taxonomía de conceptos, • una interfaz que permite al ontólogo visualizar y controlar el proceso de agrupamiento. El extractor de términos que utilizamos es Syntex, un software que ha sido utilizado eficientemente para tareas de construcción de ontologías [11]. Principalmente lo seleccionamos por su robustez y la gran cantidad de información extraída. En particular, crea una red de Expansión de Cabeza que ya ha demostrado ser interesante para un sistema de agrupamiento [1]. En una red de este tipo, cada término está vinculado a su término principal y, es decir, a la subfrase máxima ubicada como término principal de su término de expansión, y también a todos los términos para los cuales es un término principal o un término de expansión. Por ejemplo, la ingeniería del conocimiento a partir de texto tiene como término principal la ingeniería del conocimiento y como término de expansión el texto. Además, la ingeniería del conocimiento se compone del conocimiento como término principal y la ingeniería como término de expansión. Con Dynamo, el término de red obtenido como resultado del extractor se almacena en una base de datos. Para cada par de términos, asumimos que es posible calcular un valor de similitud para realizar un agrupamiento [6] [1]. Debido a la naturaleza de los datos, nos estamos enfocando únicamente en la computación de similitud entre objetos descritos gracias a variables binarias, lo que significa que cada elemento está descrito por la presencia o ausencia de un conjunto de características [15]. En el caso de los términos, generalmente estamos tratando con sus contextos de uso. Con Syntex, esos contextos son identificados por términos y caracterizados por algunas relaciones sintácticas. El sistema multiagente Dynamo implementa el algoritmo de clustering distribuido descrito en detalle en la sección 3 y las reglas descritas en la sección 4. Está diseñado para ser tanto el sistema que produce la estructura resultante como la estructura en sí misma. Significa que cada agente representa una clase en la taxonomía. Entonces, la salida del sistema es la organización obtenida a partir de la interacción entre agentes, teniendo en cuenta la retroalimentación proveniente del ontólogo cuando modifica la taxonomía dada sus necesidades o experiencia. CLUSTERING DISTRIBUIDO Esta sección presenta el algoritmo de clustering distribuido utilizado en Dynamo. Por el bien de la comprensión, y debido a su evaluación en la sección 3.1, recordamos el algoritmo centralizado básico utilizado para un agrupamiento jerárquico ascendente en un espacio no métrico, cuando se dispone de una medida de similitud simétrica [15] (que es el caso de las medidas utilizadas en nuestro sistema). Algoritmo 1: Algoritmo de agrupamiento jerárquico ascendente centralizado Datos: Lista L de elementos para organizar como una jerarquía Resultado: Raíz R de la jerarquía mientras longitud(L) > 1 hacer max ← 0; A ← nil; B ← nil; para i ← 1 a longitud(L) hacer I ← L[i]; para j ← i + 1 a longitud(L) hacer J ← L[j]; sim ← similitud(I, J); si sim > max entonces max ← sim; A ← I; B ← J; fin si fin para fin para quitar(A, L); quitar(B, L); agregar((A, B), L); fin mientras R ← L[1]; En el algoritmo 1, para cada paso de agrupamiento, se determina el par de elementos más similares. Esos dos elementos están agrupados en un conjunto, y la clase resultante se añade a la lista de elementos restantes. Este algoritmo se detiene cuando la lista tiene solo un elemento restante. 2 es decir, la subfrase máxima ubicada como cola del término The Sixth Intl. La jerarquía resultante del algoritmo 1 siempre es un árbol binario debido a la forma en que se realiza el agrupamiento. Además, agrupar los elementos más similares es equivalente a alejarlos de los menos similares. Nuestro algoritmo distribuido está diseñado basándose en esos dos hechos. Se ejecuta de forma simultánea en cada uno de los agentes del sistema. Cabe destacar que, en lo que sigue de este artículo, utilizamos para ambos algoritmos una similitud de Anderberg (con α = 0.75) y una estrategia de agrupamiento de enlace promedio [15]. Esas decisiones tienen un impacto en el árbol resultante, pero no afectan ni la ejecución global del algoritmo ni su complejidad. Ahora presentamos el algoritmo distribuido utilizado en nuestro sistema. Se inicia de la siguiente manera: • se crea un agente TOP que no tiene padre, será la raíz de la taxonomía resultante, • se crea un agente para cada término que se va a posicionar en la taxonomía, todos tienen como padre a TOP. Una vez que se establece esta estructura básica, el algoritmo se ejecuta hasta que alcanza el equilibrio y luego proporciona la taxonomía resultante. El proceso de la primera etapa (figura 2) se activa cuando un agente (aquí Ak) tiene más de un hermano (ya que queremos obtener un árbol binario). Luego envía un mensaje a su padre P indicando a su hermano más diferente (aquí A1). Entonces P recibe el mismo tipo de mensaje de cada uno de sus hijos. En lo siguiente, este tipo de mensaje se llamará voto. A continuación, cuando P ha recibido mensajes de todos sus hijos, comienza el segundo paso (figura 3). Gracias a los mensajes recibidos que indican las preferencias de sus hijos, P puede determinar tres subgrupos entre sus hijos: el hijo que recibió más votos de sus hermanos, es decir, el hijo que es más diferente del mayor número de sus hermanos. En caso de empate, uno de los ganadores es elegido al azar (aquí A1), los niños que permitieron la elección del primer grupo, es decir, los agentes que eligieron a su hermano del primer grupo como el más diferente (aquí Ak a An), los niños restantes (aquí A2 a Ak−1). Entonces P crea un nuevo agente P (teniendo a P como padre) y pide a los agentes del segundo grupo (aquí los agentes Ak a An) que lo elijan como su nuevo padre. Ak−1 Ak AnA2A1 P P ...... ...... \n\nAk−1 Ak AnA2A1 P P ...... ...... Figura 4: Agrupamiento distribuido: Paso 3 Finalmente, el paso 3 (figura 4) es trivial. Los niños rechazados por P (aquí el agente A2 a An) tienen en cuenta su mensaje y eligen a P como su nuevo padre. La jerarquía acaba de crear un nuevo nivel intermedio. Ten en cuenta que este algoritmo generalmente converge, ya que el número de hermanos de un agente disminuye. Cuando un agente tiene solamente un hermano restante, su actividad se detiene (aunque sigue procesando los mensajes que llegan de sus hijos). Sin embargo, en algunos casos podemos llegar a un conflicto circular en el procedimiento de votación cuando, por ejemplo, A vota en contra de B, B en contra de C y C en contra de A. Con el sistema actual no se puede tomar ninguna decisión. El procedimiento actual debería mejorarse para abordar esto, probablemente utilizando un método de votación clasificado. 3.1 Evaluación Cuantitativa Ahora, evaluamos las propiedades de nuestro algoritmo distribuido. Se requiere comenzar con una evaluación cuantitativa, basada en su complejidad, mientras se compara con el algoritmo 1 de la sección anterior. Su complejidad teórica se calcula para el peor caso, considerando la operación de cálculo de similitud como elemental. Para el algoritmo distribuido, el peor caso significa que en cada ejecución, solo se puede crear un grupo de dos elementos. Bajo esas condiciones, para un conjunto de datos dado de n elementos, podemos determinar la cantidad de cálculos de similitud. Para el algoritmo 1, notamos que l = longitud(L), luego el bucle más interno se ejecuta l - i veces. Y su cuerpo tiene la única computación de similitud, por lo que su costo es l−i. El segundo bucle for se ejecuta l veces para i que varía de 1 a l. Entonces su costo es Pl i=1(l − i) que puede simplificarse en l×(l−1) 2. Finalmente, para cada ejecución del bucle while, l se reduce de n a 1, lo que nos da t1(n) como la cantidad de cálculos de similitud para el algoritmo 1: t1(n) = nX l=1 l × (l − 1) 2 (1) Para el algoritmo distribuido, en un paso dado, cada uno de los l agentes evalúa la similitud con sus l −1 compañeros. Entonces, cada paso tiene un costo de l × (l − 1). Entonces, se crean grupos y se realiza otra votación con l disminuido en uno (ya que asumimos el peor caso, solo se forman grupos de tamaño 2 o l −1). Dado que l es igual a n en la primera ejecución, obtenemos tdist(n) como la cantidad de cálculos de similitud para el algoritmo distribuido: tdist(n) = nX l=1 l × (l − 1) (2) Ambos algoritmos tienen una complejidad O(n3). Pero en el peor de los casos, el algoritmo distribuido realiza el doble del número de el1288 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) operaciones elementales realizadas por el algoritmo centralizado. Esta brecha proviene de la toma de decisiones local en cada agente. Debido a esto, los cálculos de similitud se realizan dos veces para cada par de agentes. Podríamos concebir que un agente envía el resultado de su cálculo a su par. Sin embargo, simplemente trasladaría el problema al generar más comunicación en el sistema. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Cantidad de comparaciones Cantidad de términos de entrada 1. Algoritmo distribuido (en promedio, con mínimo y máximo) 2. Polinomio logarítmico 3. En la Figura 5 se muestra el algoritmo centralizado: Resultados experimentales. En un segundo paso, la complejidad promedio del algoritmo ha sido determinada mediante experimentos. El sistema multiagente ha sido ejecutado con conjuntos de datos de entrada generados aleatoriamente que van desde diez hasta cien términos. El valor dado es el promedio de las comparaciones realizadas para cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 5. El algoritmo es entonces más eficiente en promedio que el algoritmo centralizado, y su complejidad promedio está por debajo del peor caso. Se puede explicar por la baja probabilidad de que un conjunto de datos obligue al sistema a crear solo grupos mínimos (dos elementos) o máximos (n − 1 elementos) para cada paso de razonamiento. La curva número 2 representa el polinomio logarítmico que minimiza el error con respecto a la curva número 1. El término de mayor grado de este polinomio es n2 log(n), por lo tanto, nuestro algoritmo distribuido tiene una complejidad O(n2 log(n)) en promedio. Finalmente, notemos la reducida variación de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 1,960.75 para un promedio de 40,550.10 (alrededor del 5%), lo que muestra la buena estabilidad del sistema. Aunque los resultados cuantitativos son interesantes, la verdadera ventaja de este enfoque proviene de características más cualitativas que presentaremos en esta sección. Todos son ventajas obtenidas gracias al uso de un sistema multiagente adaptativo. La principal ventaja del uso de un sistema multiagente para una tarea de agrupamiento es introducir dinamismo en dicho sistema. El ontólogo puede hacer modificaciones y la jerarquía se adapta dependiendo de la solicitud. Es particularmente interesante en un contexto de ingeniería del conocimiento. De hecho, la jerarquía creada por el sistema está destinada a ser modificada por el ontólogo ya que es el resultado de un cálculo estadístico. Durante la revisión necesaria de los textos para examinar los contextos de uso de los términos [2], el ontólogo podrá interpretar el contenido real y revisar la propuesta del sistema. Es extremadamente difícil lograr esto con un enfoque centralizado de caja negra. En la mayoría de los casos, uno tiene que encontrar qué paso de razonamiento generó el error y modificar manualmente la clase resultante. Desafortunadamente, en este caso, todos los pasos de razonamiento que ocurrieron después de la creación de la clase modificada se pierden y deben ser recalculados teniendo en cuenta la modificación. Por eso, un sistema como ASIUM [6] intenta suavizar el problema con una colaboración entre el sistema y el usuario mostrando al ontólogo las clases creadas después de cada paso de razonamiento. Pero el ontólogo puede cometer un error y darse cuenta de ello demasiado tarde. Figura 6: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos un ejemplo gracias a algunas capturas de pantalla del prototipo en funcionamiento probado en un corpus relacionado con la medicina. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 6 después de la estabilización. Es evidente que el concepto descrito por el término lesión está mal ubicado. Las computaciones de similitud lo sitúan más cerca de femme (mujer) y chirurgien (cirujano) que de infección, gastro-enteritis y hepatitis. Esta posición incorrecta para la lesión se explica por el hecho de que sin la entrada del ontólogo, el razonamiento se basa únicamente en criterios estadísticos. Figura 7: Árbol de agentes conceptuales después de la modificación del ontólogo. Luego, el ontólogo reemplaza el concepto en la rama derecha, afectando a ConceptAgent:8 como su nuevo padre. El nombre ConceptAgent:X se asigna automáticamente a un agente conceptual que no está descrito por un término. El sistema reacciona por sí mismo y perfecciona la jerarquía de agrupación para obtener un árbol binario creando ConceptAgent:11. El nuevo estado estable es el de la figura 7. Este acoplamiento sistema-usuario es necesario para construir una ontología, pero no se necesita ningún ajuste particular al principio del algoritmo distribuido ya que cada agente realiza un procesamiento local autónomo y se comunica con su vecindario a través de mensajes. Además, este algoritmo puede ser distribuido de facto en una red de computadoras. La comunicación entre agentes se realiza enviando mensajes y cada uno mantiene su autonomía de decisión. Entonces, una modificación del sistema para hacerlo funcionar en red no requeriría ajustar el algoritmo. Por el contrario, solo sería necesario reestructurar la capa de comunicación y el proceso de creación de agentes, ya que en nuestra implementación actual no están en red. 4. EN LA JERARQUÍA DE MÚLTIPLES CRITERIOS En las secciones anteriores, asumimos que la similitud se puede calcular para cualquier par de términos. Pero, tan pronto como se utilizan datos reales, esta propiedad ya no se verifica. Algunos términos no tienen ningún valor de similitud con ningún término extraído. Además, para los nodos hoja a veces es interesante utilizar otros medios para posicionarlos en la jerarquía. Para esta estructuración de bajo nivel, los ontólogos generalmente se basan en The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1289 sus elecciones en heurísticas simples. Usando esta observación, construimos un nuevo conjunto de reglas, que no se basan en la similitud para respaldar la estructuración de bajo nivel. 4.1 Agregar reglas de cobertura de cabeza En este caso, los agentes pueden actuar con un punto de vista muy local simplemente mirando la relación padre/hijo. Cada agente puede intentar determinar si su padre es adecuado. Es posible adivinar esto porque cada agente conceptual está descrito por un conjunto de términos y gracias a la red de términos de Expansión de Cabeza. En el siguiente TX será el conjunto de términos que describen el concepto del agente X y head(TX) el conjunto de todos los términos que son cabeza de al menos un elemento de TX. Gracias a esas dos notaciones podemos describir la <br>función de adecuación</br> entre un padre P y un hijo C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Entonces, el mejor padre para C es el agente P que maximiza a(P, C). Un agente insatisfecho con su padre puede intentar encontrar uno mejor evaluando la idoneidad de los candidatos. Diseñamos un algoritmo complementario para dirigir esta búsqueda: cuando un agente C no está satisfecho con su padre P, evalúa a(Bi, C) con todos sus hermanos (notados Bi); luego se elige como nuevo padre aquel que maximice a(Bi, C). Figura 8: Árbol de agentes conceptuales después de la estabilización autónoma del sistema sin la regla de cobertura de cabeza. Ahora ilustramos este comportamiento de regla con un ejemplo. La Figura 8 muestra el estado del sistema después de la estabilización en los datos de prueba. Podemos notar que la hepatitis viral todavía está vinculada a la raíz taxonómica. Se debe al hecho de que no hay valor de similitud entre el término hepatitis viral y ninguno de los términos de los otros agentes conceptuales. Figura 9: Árbol de agentes conceptuales después de la activación de la regla de cobertura de la cabeza. Tras activar la regla de cobertura de la cabeza y permitir que el sistema se estabilice nuevamente, obtenemos la figura 9. Podemos ver que la hepatitis viral se deslizó a través de la rama que llevaba a la hepatitis y la eligió como su nueva progenitora. Es una elección por defecto sensata, ya que la hepatitis viral es un término más específico que la hepatitis. Esta regla tiende a hacer que los agentes descritos por un conjunto de términos se conviertan en hojas del árbol conceptual. Aborda nuestra preocupación por mejorar la estructuración de bajo nivel de nuestra taxonomía. Pero obviamente nuestros agentes carecen de un método para retroceder en caso de modificaciones en la taxonomía que los ubicarían en la rama incorrecta. Ese es uno de los puntos en los que nuestro sistema aún debe ser mejorado al agregar otro conjunto de reglas. 4.2 Sobre el uso de varios criterios En las secciones y ejemplos anteriores, solo utilizamos un algoritmo a la vez. El algoritmo de agrupamiento distribuido tiende a introducir nuevas capas en la taxonomía, mientras que el algoritmo de cobertura de cabeza tiende a empujar algunos de los agentes hacia las hojas de la taxonomía. Obviamente plantea la pregunta sobre cómo lidiar con múltiples criterios en la construcción de nuestra taxonomía, y cómo los agentes determinan sus prioridades en un momento dado. La solución que elegimos proviene de la búsqueda de minimizar la falta de cooperación dentro del sistema de acuerdo con el método ADELFE. Cada agente calcula tres grados de no cooperación y elige su prioridad actual dependiendo de cuál grado sea el más alto. Para un agente A dado que tiene un padre P, un conjunto de hermanos Bi y que recibió un conjunto de mensajes Mk con prioridad pk, los tres grados de no cooperación son: • μH (A) = 1 − a(P, A), es el grado de no cooperación de cobertura de cabeza, determinado por la cobertura de cabeza del padre, • μB(A) = max(1 − similitud(A, Bi)), es el grado de no cooperación de hermandad, determinado por el peor hermano de A en cuanto a similitudes, • μM (A) = max(pk), es el grado de no cooperación de mensaje, determinado por el mensaje más urgente recibido. Entonces, el grado de no cooperación μ(A) del agente A es: μ(A) = max(μH (A), μB(A), μM (A)) (4) Luego, tenemos tres casos que determinan qué tipo de acción elegirá A: • si μ(A) = μH (A) entonces A utilizará el algoritmo de cobertura de cabeza que detallamos en la subsección anterior • si μ(A) = μB(A) entonces A utilizará el algoritmo de agrupamiento distribuido (ver sección 3) • si μ(A) = μM (A) entonces A procesará Mk inmediatamente para ayudar a su remitente Estos tres casos resumen las actividades actuales de nuestros agentes: tienen que encontrar el mejor padre para ellos (μ(A) = μH (A)), mejorar la estructuración a través del agrupamiento (μ(A) = μB(A)) y procesar otros mensajes de agentes (μ(A) = μM (A)) para ayudarlos a cumplir sus propios objetivos. 4.3 Complejidad Experimental Revisitada Evaluamos la complejidad experimental de todo el sistema multiagente cuando todas las reglas están activadas. En este caso, la métrica utilizada es el número de mensajes intercambiados en el sistema. Una vez más, el sistema ha sido ejecutado con conjuntos de datos de entrada que van desde diez hasta cien términos. El valor dado es el promedio del número de mensajes enviados en el sistema en su totalidad durante cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 10. La curva número 1 representa el promedio del valor obtenido. La curva número 2 representa el promedio del valor obtenido cuando solo se activa el algoritmo de agrupamiento distribuido, no el conjunto completo de reglas. La curva número 3 representa el polinomio que minimiza el error con la curva número 1. El término de mayor grado de este polinomio es en n3, entonces nuestro sistema multiagente tiene una complejidad O(n3). Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Cantidad de mensajes Cantidad de términos de entrada 1. Dinamo, todas las reglas (en promedio, con mínimo y máximo) 2. Agrupamiento distribuido solo (en promedio) 2. Figura 10: Resultados experimentales en promedio de un polinomio cúbico. Además, notemos la variación muy pequeña de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 126.73 para un promedio de 20,737.03 (alrededor del 0.6%), lo que demuestra la excelente estabilidad del sistema. Finalmente, las reglas adicionales de cobertura de cabeza son una verdadera mejora sobre el algoritmo distribuido por sí solo. Introducen más restricciones y se alcanza el punto de estabilidad con menos interacciones y toma de decisiones por parte de los agentes. Significa que se intercambian menos mensajes en el sistema al obtener un árbol de mayor calidad para el ontólogo. 5. DISCUSIÓN Y PERSPECTIVAS 5.1 Limitación actual de nuestro enfoque La limitación más importante de nuestro algoritmo actual es que el resultado depende del orden en que se agregan los datos. Cuando el sistema funciona por sí solo en un conjunto de datos fijo proporcionado durante la inicialización, el resultado final es equivalente a lo que podríamos obtener con un algoritmo centralizado. Por el contrario, añadir un nuevo elemento después de una primera estabilización tiene un impacto en el resultado final. Figura 11: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos otro ejemplo del sistema en funcionamiento. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 11 después de la estabilización. Figura 12: Árbol de agentes conceptuales después de tener en cuenta la hepatitis. Luego, el ontólogo interactúa con el sistema y agrega un nuevo concepto descrito por el término hepatitis y vinculado a la raíz. El sistema reacciona y se estabiliza, luego obtenemos la figura 12 como resultado. La hepatitis se encuentra en la rama derecha, pero no hemos obtenido la misma organización que la figura 6 del ejemplo anterior. Necesitamos mejorar nuestro algoritmo distribuido para permitir que un concepto se mueva a lo largo de una rama. Actualmente estamos trabajando en las reglas requeridas, pero la comparación con el algoritmo centralizado se volverá muy difícil. En particular, ya que tendrán en cuenta criterios ignorados por el algoritmo centralizado. 5.2 Poda para la construcción de ontologías En la sección 3, presentamos el algoritmo de agrupamiento distribuido utilizado en el sistema Dynamo. Dado que este trabajo se basó inicialmente en este algoritmo, introdujo un claro sesgo hacia los árboles binarios como resultado. Pero debemos tener en cuenta que estamos tratando de obtener taxonomías que sean más refinadas y concisas. Aunque la regla de cobertura de la cabeza es una mejora porque se basa en cómo generalmente trabajan los ontólogos, solo aborda la estructuración a un nivel bajo y no a los niveles intermedios del árbol. Al observar la figura 7, es evidente que se podría realizar una poda en la taxonomía. En particular, dado que la lesión se movió, el ConceptAgent:9 podría ser eliminado, ya no es necesario. Además, la rama que comienza con ConceptAgent:8 respeta claramente la restricción de formar un árbol binario, pero sería más útil para el usuario en una forma más compacta y significativa. En este caso, ConceptAgent:10 y ConceptAgent:11 probablemente podrían fusionarse. Actualmente, nuestro sistema cuenta con las reglas necesarias para crear niveles intermedios en la taxonomía, o para que los conceptos se desplacen hacia la hoja. Como señalamos, no es suficiente, por lo que se necesitan nuevas reglas para permitir eliminar nodos del árbol o moverlos hacia la raíz. La mayor parte del trabajo necesario para desarrollar esas reglas consiste en encontrar la información estadística relevante que respaldará al ontólogo. CONCLUSIÓN Después de ser presentada como una solución prometedora, garantizar la calidad del modelo y su riqueza terminológica, la construcción de ontologías a partir del análisis de corpus textual es difícil y costosa. Requiere supervisión del analista y tener en cuenta el objetivo de la ontología. El uso de herramientas de procesamiento de lenguaje natural facilita la localización del conocimiento en textos a través del uso del lenguaje. Dicho esto, esas herramientas producen una gran cantidad de datos léxicos o gramaticales que no son triviales de examinar para definir elementos conceptuales. Nuestra contribución radica en este paso del proceso de modelado a partir de textos, antes de intentar normalizar o formalizar el resultado. Propusimos un enfoque basado en un sistema multiagente adaptativo para proporcionar al ontólogo una primera estructura taxonómica de conceptos. Nuestro sistema hace uso de una red terminológica resultante de un análisis realizado por Syntex. El estado actual de nuestro software permite producir estructuras simples, proponérselas al ontólogo y hacerlas evolucionar dependiendo de las modificaciones que él realice. Las actuaciones del sistema son interesantes y algunos aspectos son incluso comparables a su contraparte centralizada. Sus fortalezas son principalmente cualitativas ya que permite interacciones de usuario más sutiles y una adaptación progresiva a nueva información basada en el lenguaje. Desde el punto de vista de la construcción de la ontología, este trabajo es un primer paso que muestra la relevancia de nuestro enfoque. Debe continuar, tanto para garantizar una mejor robustez durante la clasificación, como para obtener estructuras semánticas más ricas que simples árboles. De estas mejoras, nos estamos enfocando principalmente en la poda para obtener mejores taxonomías. Actualmente estamos trabajando en el criterio para activar las acciones complementarias de los cambios de estructura aplicados por nuestro algoritmo de agrupamiento. En otras palabras, este algoritmo se introduce en el Sexto Congreso Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1291 niveles intermedios, y necesitamos poder eliminarlos si es necesario, para alcanzar un equilibrio dinámico. También desde el punto de vista de la ingeniería multiagente, su uso en un contexto de ontología dinámica ha demostrado su relevancia. Estas ontologías dinámicas pueden ser vistas como una resolución de problemas complejos, en tal caso la autoorganización a través de la cooperación ha sido una solución eficiente. Y, en general, es probable que sea interesante para otras tareas relacionadas con el diseño, incluso si nos estamos enfocando únicamente en la ingeniería del conocimiento en este artículo. Por supuesto, nuestro sistema aún requiere más trabajo de evaluación y validación para determinar con precisión las ventajas y desventajas de este enfoque. Estamos planeando trabajar en ese tipo de comparación en un futuro cercano. 7. REFERENCIAS [1] H. Assadi. Construcción de una ontología regional a partir de texto y su uso dentro de un sistema documental. Actas de la Conferencia Internacional sobre Ontología Formal y Sistemas de Información - FOIS98, páginas 236-249, 1998. [2] N. Aussenac-Gilles y D. Sörgel. Análisis de texto para ingeniería de ontologías y terminología. Revista de Ontología Aplicada, 2005. [3] J. Bao y V. Honavar. Construcción colaborativa de ontologías con wiki@nt. Actas del Taller de Evaluación de Herramientas Basadas en Ontologías (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes y G. Picard. Metodologías Orientadas a Agentes, capítulo 7. Ingeniería de Sistemas Multiagente Autoadaptativos: la Metodología ADELFE, páginas 172-202. Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna y Y. Wilks. Antecedentes y conocimiento previo en la construcción dinámica de ontologías. Taller de la Web Semántica, SIGIR03, agosto de 2003. [6] D. Faure y C. Nedellec. Un método de agrupamiento conceptual basado en corpus para marcos verbales y adquisición de ontologías. Taller LREC sobre la adaptación de recursos léxicos y corpus a sublenguajes y aplicaciones, 1998. [7] F. Gandon. Ingeniería de Ontologías: una Encuesta y un Retorno de Experiencia. INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes y P. Glize. Diseño Vivo para Sistemas Computacionales Abiertos. 12º Talleres Internacionales de la IEEE sobre Tecnologías Habilitadoras, Infraestructura para Empresas Colaborativas, páginas 389-394, junio de 2003. [9] M.-P. Gleizes, V. Camps y P. Glize. Una teoría de computación emergente basada en la autoorganización cooperativa para sistemas artificiales adaptativos. Cuarto Congreso Europeo de Ciencias de los Sistemas, septiembre de 1999. [10] J. Heflin y J. Hendler. Ontologías dinámicas en la web. Conferencia de la Asociación Americana de Inteligencia Artificial, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault y M.-C. Jaulent. Extracción de terminología del texto para construir una ontología en cuidados intensivos quirúrgicos. Actas del simposio anual de la AMIA 2002, 2002. [12] K. Lister, L. Sterling y K. Taveter. Reconciliando diferencias ontológicas mediante agentes asistentes. AAMAS06, mayo de 2006. [13] A. Maedche. Aprendizaje de ontologías para la Web Semántica. Editorial Kluwer Academic, 2002. [14] A. Maedche y S. Staab. Extracción de ontologías a partir de texto. EKAW 2000, páginas 189-202, 2000. [15] C. D. Manning y H. Schütze. Fundamentos del Procesamiento del Lenguaje Natural Estadístico. El MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding y S. Brueckner. Clustering jerárquico descentralizado dinámico en cualquier momento. 29ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, agosto de 2006. 1292 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "hepatitis": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of Ontology Learning.",
                "Our system named Dynamo is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
                "In this paper we present a distributed hierarchical clustering algorithm, core of our approach.",
                "It is evaluated and compared to a more conventional centralized algorithm.",
                "We also present how it has been improved using a multi-criteria approach.",
                "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete ontology building solution.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval.",
                "But building an ontology manually is a slow, tedious, costly, complex and time consuming process.",
                "Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date.",
                "It would mean creating dynamic ontologies [10] and it justifies the emergence of ontology learning techniques [14] [13].",
                "Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts.",
                "Our aim is not to build an exhaustive, general hierarchical ontology but a domain specific one.",
                "We propose a semi-automated tool since an external resource is required: the ontologist.",
                "An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies.",
                "In the multi-agent field, ontologies generally enable agents to understand each other [12].",
                "Theyre sometimes used to ease the ontology building process, in particular for collaborative contexts [3], but they rarely represent the ontology itself [16].",
                "Most works interested in the construction of ontologies [7] propose the refinement of ontologies.",
                "This process consists in using an existing ontology and building a new one from it.",
                "This approach is different from our approach because Dynamo starts from scratch.",
                "Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5].",
                "In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist.",
                "This paper first presents, in section 2, the big picture of the Dynamo system.",
                "In particular the motives that led to its creation and its general architecture.",
                "Then, in section 3 we discuss the distributed clustering algorithm used in Dynamo and compare it to a more classic centralized approach.",
                "Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering.",
                "And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2.",
                "DYNAMO OVERVIEW 2.1 Ontology as a Multi-Agent System Dynamo aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently.",
                "The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system.",
                "This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network.",
                "Dynamo takes a syntactical and terminological analysis of texts as input.",
                "It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts.",
                "As output, Dynamo provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network.",
                "An ontology can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations.",
                "Thus, our approach considers an ontology as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships.",
                "The ontology modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships.",
                "In this way, a dynamic ontology is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it.",
                "To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9].",
                "We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system.",
                "It justifies how we designed some of the rules used by our agents in order to maximize the cooperation degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
                "It addresses the needs of Knowledge Engineering in the context of dynamic ontology management and maintenance when the ontology is linked to a document collection.",
                "The Dynamo system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ? ?",
                "Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for ontology building tasks [11].",
                "We mainly selected it because of its robustness and the great amount of information extracted.",
                "In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1].",
                "In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term.",
                "For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term.",
                "Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term.",
                "With Dynamo, the term network obtained as the output of the extractor is stored in a database.",
                "For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1].",
                "Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15].",
                "In the case of terms we are generally dealing with their usage contexts.",
                "With Syntex, those contexts are identified by terms and characterized by some syntactic relations.",
                "The Dynamo multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4.",
                "It is designed to be both the system producing the resulting structure and the structure itself.",
                "It means that each agent represent a class in the taxonomy.",
                "Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3.",
                "DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in Dynamo.",
                "For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system).",
                "Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined.",
                "Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements.",
                "This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done.",
                "Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones.",
                "Our distributed algorithm is designed relying on those two facts.",
                "It is executed concurrently in each of the agents of the system.",
                "Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15].",
                "Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity.",
                "We now present the distributed algorithm used in our system.",
                "It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent.",
                "Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy.",
                "Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree).",
                "Then it sends a message to its parent P indicating its most dissimilar brother (here A1).",
                "Then P receives the same kind of message from each of its children.",
                "In the following, this kind of message will be called a vote.",
                "Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3).",
                "Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers.",
                "In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1).",
                "Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent.",
                "Ak−1 Ak AnA2A1 P P ...... ......",
                "Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial.",
                "The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent.",
                "The hierarchy just created a new intermediate level.",
                "Note that this algorithm generally converges, since the number of brothers of an agent drops.",
                "When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children).",
                "However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A.",
                "With the current system no decision can be taken.",
                "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 Quantitative Evaluation Now, we evaluate the properties of our distributed algorithm.",
                "It requires to begin with a quantitative evaluation, based on its complexity, while comparing it with the algorithm 1 from the previous section.",
                "Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary.",
                "For the distributed algorithm, the worst case means that for each run, only a two-item group can be created.",
                "Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations.",
                "For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times.",
                "And its body has the only similarity computation, so its cost is l−i.",
                "The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 .",
                "Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers.",
                "So each steps has a l × (l − 1) cost.",
                "Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built).",
                "Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity.",
                "But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm.",
                "This gap comes from the local decision making in each agent.",
                "Because of this, the similarity computations are done twice for each agent pair.",
                "We could conceive that an agent sends its computation result to its peer.",
                "But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1.",
                "Distributed algorithm (on average, with min and max) 2.",
                "Logarithmic polynomial 3.",
                "Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments.",
                "The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms.",
                "The given value is the average of comparisons made for one hundred of runs without any user interaction.",
                "It results in the plots of figure 5.",
                "The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case.",
                "It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning.",
                "Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average.",
                "Finally, lets note the reduced variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section.",
                "All are advantages obtained thanks to the use of an adaptive multi-agent system.",
                "The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system.",
                "The ontologist can make modifications and the hierarchy adapts depending on the request.",
                "It is particularly interesting in a knowledge engineering context.",
                "Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation.",
                "During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal.",
                "It is extremely difficult to realize this with a centralized black-box approach.",
                "In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class.",
                "Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account.",
                "That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning.",
                "But, the ontologist can make a mistake, and become aware of it too late.",
                "Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus.",
                "By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization.",
                "It is clear that the concept described by the term lésion (lesion) is misplaced.",
                "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (<br>hepatitis</br>).",
                "This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria.",
                "Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent.",
                "The name ConceptAgent:X is automatically given to a concept agent that is not described by a term.",
                "The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11.",
                "The new stable state if the one of figure 7.",
                "This system-user coupling is necessary to build an ontology, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages.",
                "Moreover, this algorithm can de facto be distributed on a computer network.",
                "The communication between agents is then done by sending messages and each one keeps its decision autonomy.",
                "Then, a system modification to make it run networked would not require to adjust the algorithm.",
                "On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4.",
                "MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair.",
                "But, as soon as one uses real data this property is not verified anymore.",
                "Some terms do not have any similarity value with any extracted term.",
                "Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy.",
                "For this low level structuring, ontologists generally base The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics.",
                "Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation.",
                "Each agent can try to determine if its parent is adequate.",
                "It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network.",
                "In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX .",
                "Thanks to those two notations we can describe the parent adequacy function a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C).",
                "An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates.",
                "We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent.",
                "Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example.",
                "Figure 8 shows the state of the system after stabilization on test data.",
                "We can notice that hépatite viral (viral <br>hepatitis</br>) is still linked to the taxonomy root.",
                "It is caused by the fact that there is no similarity value between the viral <br>hepatitis</br> term and any of the term of the other concept agents.",
                "Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9.",
                "We can see that viral <br>hepatitis</br> slipped through the branch leading to <br>hepatitis</br> and chose it as its new parent.",
                "It is a sensible default choice since viral <br>hepatitis</br> is a more specific term than <br>hepatitis</br>.",
                "This rule tends to push agents described by a set of term to become leafs of the concept tree.",
                "It addresses our concern to improve the low level structuring of our taxonomy.",
                "But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch.",
                "That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time.",
                "The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy.",
                "It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time.",
                "The solution we chose came from the search for minimizing non cooperation within the system in accordance with the ADELFE method.",
                "Each agent computes three non cooperation degrees and chooses its current priority depending on which degree is the highest.",
                "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non cooperation degrees are: • μH (A) = 1 − a(P, A), is the head coverage non cooperation degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
                "Then, the non cooperation degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated.",
                "In this case, the metric used is the number of messages exchanged in the system.",
                "Once again the system has been executed with input data sets ranging from ten to one hundred terms.",
                "The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction.",
                "It results in the plots of figure 10.",
                "Curve number 1 represents the average of the value obtained.",
                "Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set.",
                "Curve number 3 represents the polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1.",
                "Dynamo, all rules (on average, with min and max) 2.",
                "Distributed clustering only (on average) 2.",
                "Cubic polynomial Figure 10: Experimental results on average.",
                "Moreover, lets note the very small variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system.",
                "Finally the extra head coverage rules are a real improvement on the distributed algorithm alone.",
                "They introduce more constraints and stability point is reached with less interactions and decision making by the agents.",
                "It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5.",
                "DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added.",
                "When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm.",
                "On the contrary, adding a new item after a first stabilization has an impact on the final result.",
                "Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system.",
                "By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization.",
                "Figure 12: Concept agent tree after taking in account <br>hepatitis</br> Then, the ontologist interacts with the system and adds a new concept described by the term <br>hepatitis</br> and linked to the root.",
                "The system reacts and stabilizes, we then obtain figure 12 as a result. <br>hepatitis</br> is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example.",
                "We need to improve our distributed algorithm to allow a concept to move along a branch.",
                "We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult.",
                "In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the Dynamo system.",
                "Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result.",
                "But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise.",
                "Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree.",
                "By looking at figure 7, it is clear that some pruning could be done in the taxonomy.",
                "In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore.",
                "Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form.",
                "In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged.",
                "Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf.",
                "As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root.",
                "Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6.",
                "CONCLUSION After being presented as a promising solution, ensuring model quality and their terminological richness, ontology building from textual corpus analysis is difficult and costly.",
                "It requires analyst supervising and taking in account the ontology aim.",
                "Using natural languages processing tools ease the knowledge localization in texts through language uses.",
                "That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements.",
                "Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result.",
                "We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts.",
                "Our system makes use of a terminological network resulting from an analysis made by Syntex.",
                "The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made.",
                "Performances of the system are interesting and some aspects are even comparable to their centralized counterpart.",
                "Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information.",
                "From the point of view of ontology building, this work is a first step showing the relevance of our approach.",
                "It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees.",
                "From this improvements we are mostly focusing on the pruning to obtain better taxonomies.",
                "Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm.",
                "In other words this algorithm introduces inThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a dynamic equilibrium.",
                "Also from the multi-agent engineering point of view, their use in a dynamic ontology context has shown its relevance.",
                "This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through cooperation has been an efficient solution.",
                "And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper.",
                "Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach.",
                "Were planning to work on such benchmarking in the near future. 7.",
                "REFERENCES [1] H. Assadi.",
                "Construction of a regional ontology from text and its use within a documentary system.",
                "Proceedings of the International Conference on Formal Ontology and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel.",
                "Text analysis for ontology and terminology engineering.",
                "Journal of Applied Ontology, 2005. [3] J. Bao and V. Honavar.",
                "Collaborative ontology building with wiki@nt.",
                "Proceedings of the Workshop on Evaluation of Ontology-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard.",
                "Agent-Oriented Methodologies, chapter 7.",
                "Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202.",
                "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks.",
                "Background and foreground knowledge in dynamic ontology construction.",
                "Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec.",
                "A corpus-based conceptual clustering method for verb frames and ontology acquisition.",
                "LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon.",
                "Ontology Engineering: a Survey and a Return on Experience.",
                "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize.",
                "Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize.",
                "A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems.",
                "Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler.",
                "Dynamic ontologies on the web.",
                "American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent.",
                "Terminology extraction from text to build an ontology in surgical intensive care.",
                "Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter.",
                "Reconciling Ontological Differences by Assistant Agents.",
                "AAMAS06, May 2006. [13] A. Maedche.",
                "Ontology learning for the Semantic Web.",
                "Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab.",
                "Mining Ontologies from Text.",
                "EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze.",
                "Foundations of Statistical Natural Language Processing.",
                "The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner.",
                "Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)"
            ],
            "original_annotated_samples": [
                "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (<br>hepatitis</br>).",
                "We can notice that hépatite viral (viral <br>hepatitis</br>) is still linked to the taxonomy root.",
                "It is caused by the fact that there is no similarity value between the viral <br>hepatitis</br> term and any of the term of the other concept agents.",
                "We can see that viral <br>hepatitis</br> slipped through the branch leading to <br>hepatitis</br> and chose it as its new parent.",
                "It is a sensible default choice since viral <br>hepatitis</br> is a more specific term than <br>hepatitis</br>."
            ],
            "translated_annotated_samples": [
                "Las computaciones de similitud lo sitúan más cerca de femme (mujer) y chirurgien (cirujano) que de infección, gastro-enteritis y <br>hepatitis</br>.",
                "Podemos notar que la <br>hepatitis viral</br> todavía está vinculada a la raíz taxonómica.",
                "Se debe al hecho de que no hay valor de similitud entre el término <br>hepatitis viral</br> y ninguno de los términos de los otros agentes conceptuales.",
                "Podemos ver que la <br>hepatitis</br> viral se deslizó a través de la rama que llevaba a la <br>hepatitis</br> y la eligió como su nueva progenitora.",
                "Es una elección por defecto sensata, ya que la <br>hepatitis</br> viral es un término más específico que la <br>hepatitis</br>."
            ],
            "translated_text": "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de ontologías a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías. Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una arquitectura multiagente adaptativa. En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque. Se evalúa y se compara con un algoritmo centralizado más convencional. También presentamos cómo ha sido mejorado utilizando un enfoque de múltiples criterios. Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de ontologías. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Experimentación 1. INTRODUCCIÓN En la actualidad, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de información. Pero construir una ontología manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo. Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados. Significaría crear ontologías dinámicas [10] y justifica la aparición de técnicas de aprendizaje de ontologías [14] [13]. Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una ontología a partir de un conjunto específico de textos de un dominio. Nuestro objetivo no es construir una ontología jerárquica exhaustiva y general, sino una específica para un dominio. Proponemos una herramienta semi-automatizada ya que se requiere un recurso externo: el ontólogo. Un ontólogo es una especie de ingeniero cognitivo, o analista, que utiliza información de textos y entrevistas con expertos para diseñar ontologías. En el campo de los agentes múltiples, las ontologías generalmente permiten que los agentes se entiendan entre sí [12]. A veces se utilizan para facilitar el proceso de construcción de la ontología, en particular en contextos colaborativos [3], pero rara vez representan la ontología en sí misma [16]. La mayoría de los trabajos interesados en la construcción de ontologías [7] proponen el refinamiento de las ontologías. Este proceso consiste en utilizar una ontología existente y construir una nueva a partir de ella. Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero. Los investigadores, que trabajan en la construcción de ontologías a partir de textos, afirman que el trabajo a automatizar requiere recursos externos como un diccionario [14] o acceso a la web [5]. En nuestro trabajo, proponemos una interacción entre el ontólogo y el sistema, nuestro recurso externo radica tanto en los textos como en el ontólogo. Este documento primero presenta, en la sección 2, la visión general del sistema Dynamo. En particular, los motivos que llevaron a su creación y su arquitectura general. Luego, en la sección 3 discutimos el algoritmo de clustering distribuido utilizado en Dynamo y lo comparamos con un enfoque más clásico y centralizado. La sección 4 está dedicada a mejorar el comportamiento de los agentes que fue diseñado teniendo en cuenta criterios ignorados por el agrupamiento. Y finalmente, en la sección 5, discutimos las limitaciones de nuestro enfoque y explicamos cómo se abordarán en trabajos futuros. DYNAMO RESUMEN 2.1 Ontología como un Sistema Multiagente Dynamo tiene como objetivo reducir la necesidad de acciones manuales en el procesamiento de los resultados del análisis de texto y sugerir un inicio de red conceptual para construir ontologías de manera más eficiente. El enfoque elegido es completamente original en nuestro conocimiento y utiliza un sistema multiagente adaptativo. Esta elección se basa en las cualidades ofrecidas por el sistema multiagente: pueden facilitar el diseño interactivo de un sistema (en nuestro caso, una red conceptual), permiten su construcción incremental al tener en cuenta progresivamente nuevos datos (provenientes del análisis de texto y la interacción del usuario) y, por último pero no menos importante, pueden distribuirse fácilmente a través de una red informática. Dynamo realiza un análisis sintáctico y terminológico de textos como entrada. Utiliza varios criterios basados en estadísticas calculadas a partir de los contextos lingüísticos de los términos para crear y posicionar los conceptos. Como resultado, Dynamo proporciona al analista una organización jerárquica de conceptos (el sistema multiagente en sí mismo) que puede ser validada, refinada o modificada, hasta que obtenga un estado satisfactorio de la red semántica. Una ontología puede ser vista como un mapa estable constituido por entidades conceptuales, representadas aquí por agentes, vinculadas por relaciones etiquetadas. Por lo tanto, nuestro enfoque considera una ontología como un tipo de equilibrio entre sus concepto-agentes, donde sus fuerzas están definidas por sus relaciones potenciales. La modificación de la ontología es una perturbación del equilibrio previo por la aparición o desaparición de agentes o relaciones. De esta manera, una ontología dinámica es un proceso de autoorganización que ocurre cuando se incluyen nuevos textos en el corpus, o cuando el ontólogo interactúa con él. Para apoyar la flexibilidad necesaria de dicho sistema, utilizamos un sistema multiagente autoorganizado basado en un enfoque cooperativo [9]. Seguimos el método ADELFE [4] propuesto para guiar el diseño de este tipo de sistema multiagente. Se justifica cómo diseñamos algunas de las reglas utilizadas por nuestros agentes para maximizar el grado de cooperación dentro del sistema multiagente de Dynamos. 2.2 Arquitectura Propuesta En esta sección, presentamos nuestra arquitectura del sistema. Aborda las necesidades de la Ingeniería del Conocimiento en el contexto de la gestión y mantenimiento dinámico de ontologías cuando la ontología está vinculada a una colección de documentos. El sistema Dynamo consta de tres partes (cf. figura 1): • una red de términos, obtenida gracias a una herramienta de extracción de términos utilizada para preprocesar el corpus textual, • un sistema multiagente que utiliza la red de términos para realizar un agrupamiento jerárquico con el fin de obtener una taxonomía de conceptos, • una interfaz que permite al ontólogo visualizar y controlar el proceso de agrupamiento. El extractor de términos que utilizamos es Syntex, un software que ha sido utilizado eficientemente para tareas de construcción de ontologías [11]. Principalmente lo seleccionamos por su robustez y la gran cantidad de información extraída. En particular, crea una red de Expansión de Cabeza que ya ha demostrado ser interesante para un sistema de agrupamiento [1]. En una red de este tipo, cada término está vinculado a su término principal y, es decir, a la subfrase máxima ubicada como término principal de su término de expansión, y también a todos los términos para los cuales es un término principal o un término de expansión. Por ejemplo, la ingeniería del conocimiento a partir de texto tiene como término principal la ingeniería del conocimiento y como término de expansión el texto. Además, la ingeniería del conocimiento se compone del conocimiento como término principal y la ingeniería como término de expansión. Con Dynamo, el término de red obtenido como resultado del extractor se almacena en una base de datos. Para cada par de términos, asumimos que es posible calcular un valor de similitud para realizar un agrupamiento [6] [1]. Debido a la naturaleza de los datos, nos estamos enfocando únicamente en la computación de similitud entre objetos descritos gracias a variables binarias, lo que significa que cada elemento está descrito por la presencia o ausencia de un conjunto de características [15]. En el caso de los términos, generalmente estamos tratando con sus contextos de uso. Con Syntex, esos contextos son identificados por términos y caracterizados por algunas relaciones sintácticas. El sistema multiagente Dynamo implementa el algoritmo de clustering distribuido descrito en detalle en la sección 3 y las reglas descritas en la sección 4. Está diseñado para ser tanto el sistema que produce la estructura resultante como la estructura en sí misma. Significa que cada agente representa una clase en la taxonomía. Entonces, la salida del sistema es la organización obtenida a partir de la interacción entre agentes, teniendo en cuenta la retroalimentación proveniente del ontólogo cuando modifica la taxonomía dada sus necesidades o experiencia. CLUSTERING DISTRIBUIDO Esta sección presenta el algoritmo de clustering distribuido utilizado en Dynamo. Por el bien de la comprensión, y debido a su evaluación en la sección 3.1, recordamos el algoritmo centralizado básico utilizado para un agrupamiento jerárquico ascendente en un espacio no métrico, cuando se dispone de una medida de similitud simétrica [15] (que es el caso de las medidas utilizadas en nuestro sistema). Algoritmo 1: Algoritmo de agrupamiento jerárquico ascendente centralizado Datos: Lista L de elementos para organizar como una jerarquía Resultado: Raíz R de la jerarquía mientras longitud(L) > 1 hacer max ← 0; A ← nil; B ← nil; para i ← 1 a longitud(L) hacer I ← L[i]; para j ← i + 1 a longitud(L) hacer J ← L[j]; sim ← similitud(I, J); si sim > max entonces max ← sim; A ← I; B ← J; fin si fin para fin para quitar(A, L); quitar(B, L); agregar((A, B), L); fin mientras R ← L[1]; En el algoritmo 1, para cada paso de agrupamiento, se determina el par de elementos más similares. Esos dos elementos están agrupados en un conjunto, y la clase resultante se añade a la lista de elementos restantes. Este algoritmo se detiene cuando la lista tiene solo un elemento restante. 2 es decir, la subfrase máxima ubicada como cola del término The Sixth Intl. La jerarquía resultante del algoritmo 1 siempre es un árbol binario debido a la forma en que se realiza el agrupamiento. Además, agrupar los elementos más similares es equivalente a alejarlos de los menos similares. Nuestro algoritmo distribuido está diseñado basándose en esos dos hechos. Se ejecuta de forma simultánea en cada uno de los agentes del sistema. Cabe destacar que, en lo que sigue de este artículo, utilizamos para ambos algoritmos una similitud de Anderberg (con α = 0.75) y una estrategia de agrupamiento de enlace promedio [15]. Esas decisiones tienen un impacto en el árbol resultante, pero no afectan ni la ejecución global del algoritmo ni su complejidad. Ahora presentamos el algoritmo distribuido utilizado en nuestro sistema. Se inicia de la siguiente manera: • se crea un agente TOP que no tiene padre, será la raíz de la taxonomía resultante, • se crea un agente para cada término que se va a posicionar en la taxonomía, todos tienen como padre a TOP. Una vez que se establece esta estructura básica, el algoritmo se ejecuta hasta que alcanza el equilibrio y luego proporciona la taxonomía resultante. El proceso de la primera etapa (figura 2) se activa cuando un agente (aquí Ak) tiene más de un hermano (ya que queremos obtener un árbol binario). Luego envía un mensaje a su padre P indicando a su hermano más diferente (aquí A1). Entonces P recibe el mismo tipo de mensaje de cada uno de sus hijos. En lo siguiente, este tipo de mensaje se llamará voto. A continuación, cuando P ha recibido mensajes de todos sus hijos, comienza el segundo paso (figura 3). Gracias a los mensajes recibidos que indican las preferencias de sus hijos, P puede determinar tres subgrupos entre sus hijos: el hijo que recibió más votos de sus hermanos, es decir, el hijo que es más diferente del mayor número de sus hermanos. En caso de empate, uno de los ganadores es elegido al azar (aquí A1), los niños que permitieron la elección del primer grupo, es decir, los agentes que eligieron a su hermano del primer grupo como el más diferente (aquí Ak a An), los niños restantes (aquí A2 a Ak−1). Entonces P crea un nuevo agente P (teniendo a P como padre) y pide a los agentes del segundo grupo (aquí los agentes Ak a An) que lo elijan como su nuevo padre. Ak−1 Ak AnA2A1 P P ...... ...... \n\nAk−1 Ak AnA2A1 P P ...... ...... Figura 4: Agrupamiento distribuido: Paso 3 Finalmente, el paso 3 (figura 4) es trivial. Los niños rechazados por P (aquí el agente A2 a An) tienen en cuenta su mensaje y eligen a P como su nuevo padre. La jerarquía acaba de crear un nuevo nivel intermedio. Ten en cuenta que este algoritmo generalmente converge, ya que el número de hermanos de un agente disminuye. Cuando un agente tiene solamente un hermano restante, su actividad se detiene (aunque sigue procesando los mensajes que llegan de sus hijos). Sin embargo, en algunos casos podemos llegar a un conflicto circular en el procedimiento de votación cuando, por ejemplo, A vota en contra de B, B en contra de C y C en contra de A. Con el sistema actual no se puede tomar ninguna decisión. El procedimiento actual debería mejorarse para abordar esto, probablemente utilizando un método de votación clasificado. 3.1 Evaluación Cuantitativa Ahora, evaluamos las propiedades de nuestro algoritmo distribuido. Se requiere comenzar con una evaluación cuantitativa, basada en su complejidad, mientras se compara con el algoritmo 1 de la sección anterior. Su complejidad teórica se calcula para el peor caso, considerando la operación de cálculo de similitud como elemental. Para el algoritmo distribuido, el peor caso significa que en cada ejecución, solo se puede crear un grupo de dos elementos. Bajo esas condiciones, para un conjunto de datos dado de n elementos, podemos determinar la cantidad de cálculos de similitud. Para el algoritmo 1, notamos que l = longitud(L), luego el bucle más interno se ejecuta l - i veces. Y su cuerpo tiene la única computación de similitud, por lo que su costo es l−i. El segundo bucle for se ejecuta l veces para i que varía de 1 a l. Entonces su costo es Pl i=1(l − i) que puede simplificarse en l×(l−1) 2. Finalmente, para cada ejecución del bucle while, l se reduce de n a 1, lo que nos da t1(n) como la cantidad de cálculos de similitud para el algoritmo 1: t1(n) = nX l=1 l × (l − 1) 2 (1) Para el algoritmo distribuido, en un paso dado, cada uno de los l agentes evalúa la similitud con sus l −1 compañeros. Entonces, cada paso tiene un costo de l × (l − 1). Entonces, se crean grupos y se realiza otra votación con l disminuido en uno (ya que asumimos el peor caso, solo se forman grupos de tamaño 2 o l −1). Dado que l es igual a n en la primera ejecución, obtenemos tdist(n) como la cantidad de cálculos de similitud para el algoritmo distribuido: tdist(n) = nX l=1 l × (l − 1) (2) Ambos algoritmos tienen una complejidad O(n3). Pero en el peor de los casos, el algoritmo distribuido realiza el doble del número de el1288 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) operaciones elementales realizadas por el algoritmo centralizado. Esta brecha proviene de la toma de decisiones local en cada agente. Debido a esto, los cálculos de similitud se realizan dos veces para cada par de agentes. Podríamos concebir que un agente envía el resultado de su cálculo a su par. Sin embargo, simplemente trasladaría el problema al generar más comunicación en el sistema. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Cantidad de comparaciones Cantidad de términos de entrada 1. Algoritmo distribuido (en promedio, con mínimo y máximo) 2. Polinomio logarítmico 3. En la Figura 5 se muestra el algoritmo centralizado: Resultados experimentales. En un segundo paso, la complejidad promedio del algoritmo ha sido determinada mediante experimentos. El sistema multiagente ha sido ejecutado con conjuntos de datos de entrada generados aleatoriamente que van desde diez hasta cien términos. El valor dado es el promedio de las comparaciones realizadas para cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 5. El algoritmo es entonces más eficiente en promedio que el algoritmo centralizado, y su complejidad promedio está por debajo del peor caso. Se puede explicar por la baja probabilidad de que un conjunto de datos obligue al sistema a crear solo grupos mínimos (dos elementos) o máximos (n − 1 elementos) para cada paso de razonamiento. La curva número 2 representa el polinomio logarítmico que minimiza el error con respecto a la curva número 1. El término de mayor grado de este polinomio es n2 log(n), por lo tanto, nuestro algoritmo distribuido tiene una complejidad O(n2 log(n)) en promedio. Finalmente, notemos la reducida variación de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 1,960.75 para un promedio de 40,550.10 (alrededor del 5%), lo que muestra la buena estabilidad del sistema. Aunque los resultados cuantitativos son interesantes, la verdadera ventaja de este enfoque proviene de características más cualitativas que presentaremos en esta sección. Todos son ventajas obtenidas gracias al uso de un sistema multiagente adaptativo. La principal ventaja del uso de un sistema multiagente para una tarea de agrupamiento es introducir dinamismo en dicho sistema. El ontólogo puede hacer modificaciones y la jerarquía se adapta dependiendo de la solicitud. Es particularmente interesante en un contexto de ingeniería del conocimiento. De hecho, la jerarquía creada por el sistema está destinada a ser modificada por el ontólogo ya que es el resultado de un cálculo estadístico. Durante la revisión necesaria de los textos para examinar los contextos de uso de los términos [2], el ontólogo podrá interpretar el contenido real y revisar la propuesta del sistema. Es extremadamente difícil lograr esto con un enfoque centralizado de caja negra. En la mayoría de los casos, uno tiene que encontrar qué paso de razonamiento generó el error y modificar manualmente la clase resultante. Desafortunadamente, en este caso, todos los pasos de razonamiento que ocurrieron después de la creación de la clase modificada se pierden y deben ser recalculados teniendo en cuenta la modificación. Por eso, un sistema como ASIUM [6] intenta suavizar el problema con una colaboración entre el sistema y el usuario mostrando al ontólogo las clases creadas después de cada paso de razonamiento. Pero el ontólogo puede cometer un error y darse cuenta de ello demasiado tarde. Figura 6: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos un ejemplo gracias a algunas capturas de pantalla del prototipo en funcionamiento probado en un corpus relacionado con la medicina. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 6 después de la estabilización. Es evidente que el concepto descrito por el término lesión está mal ubicado. Las computaciones de similitud lo sitúan más cerca de femme (mujer) y chirurgien (cirujano) que de infección, gastro-enteritis y <br>hepatitis</br>. Esta posición incorrecta para la lesión se explica por el hecho de que sin la entrada del ontólogo, el razonamiento se basa únicamente en criterios estadísticos. Figura 7: Árbol de agentes conceptuales después de la modificación del ontólogo. Luego, el ontólogo reemplaza el concepto en la rama derecha, afectando a ConceptAgent:8 como su nuevo padre. El nombre ConceptAgent:X se asigna automáticamente a un agente conceptual que no está descrito por un término. El sistema reacciona por sí mismo y perfecciona la jerarquía de agrupación para obtener un árbol binario creando ConceptAgent:11. El nuevo estado estable es el de la figura 7. Este acoplamiento sistema-usuario es necesario para construir una ontología, pero no se necesita ningún ajuste particular al principio del algoritmo distribuido ya que cada agente realiza un procesamiento local autónomo y se comunica con su vecindario a través de mensajes. Además, este algoritmo puede ser distribuido de facto en una red de computadoras. La comunicación entre agentes se realiza enviando mensajes y cada uno mantiene su autonomía de decisión. Entonces, una modificación del sistema para hacerlo funcionar en red no requeriría ajustar el algoritmo. Por el contrario, solo sería necesario reestructurar la capa de comunicación y el proceso de creación de agentes, ya que en nuestra implementación actual no están en red. 4. EN LA JERARQUÍA DE MÚLTIPLES CRITERIOS En las secciones anteriores, asumimos que la similitud se puede calcular para cualquier par de términos. Pero, tan pronto como se utilizan datos reales, esta propiedad ya no se verifica. Algunos términos no tienen ningún valor de similitud con ningún término extraído. Además, para los nodos hoja a veces es interesante utilizar otros medios para posicionarlos en la jerarquía. Para esta estructuración de bajo nivel, los ontólogos generalmente se basan en The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1289 sus elecciones en heurísticas simples. Usando esta observación, construimos un nuevo conjunto de reglas, que no se basan en la similitud para respaldar la estructuración de bajo nivel. 4.1 Agregar reglas de cobertura de cabeza En este caso, los agentes pueden actuar con un punto de vista muy local simplemente mirando la relación padre/hijo. Cada agente puede intentar determinar si su padre es adecuado. Es posible adivinar esto porque cada agente conceptual está descrito por un conjunto de términos y gracias a la red de términos de Expansión de Cabeza. En el siguiente TX será el conjunto de términos que describen el concepto del agente X y head(TX) el conjunto de todos los términos que son cabeza de al menos un elemento de TX. Gracias a esas dos notaciones podemos describir la función de adecuación entre un padre P y un hijo C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Entonces, el mejor padre para C es el agente P que maximiza a(P, C). Un agente insatisfecho con su padre puede intentar encontrar uno mejor evaluando la idoneidad de los candidatos. Diseñamos un algoritmo complementario para dirigir esta búsqueda: cuando un agente C no está satisfecho con su padre P, evalúa a(Bi, C) con todos sus hermanos (notados Bi); luego se elige como nuevo padre aquel que maximice a(Bi, C). Figura 8: Árbol de agentes conceptuales después de la estabilización autónoma del sistema sin la regla de cobertura de cabeza. Ahora ilustramos este comportamiento de regla con un ejemplo. La Figura 8 muestra el estado del sistema después de la estabilización en los datos de prueba. Podemos notar que la <br>hepatitis viral</br> todavía está vinculada a la raíz taxonómica. Se debe al hecho de que no hay valor de similitud entre el término <br>hepatitis viral</br> y ninguno de los términos de los otros agentes conceptuales. Figura 9: Árbol de agentes conceptuales después de la activación de la regla de cobertura de la cabeza. Tras activar la regla de cobertura de la cabeza y permitir que el sistema se estabilice nuevamente, obtenemos la figura 9. Podemos ver que la <br>hepatitis</br> viral se deslizó a través de la rama que llevaba a la <br>hepatitis</br> y la eligió como su nueva progenitora. Es una elección por defecto sensata, ya que la <br>hepatitis</br> viral es un término más específico que la <br>hepatitis</br>. ",
            "candidates": [],
            "error": [
                [
                    "hepatitis",
                    "hepatitis viral",
                    "hepatitis viral",
                    "hepatitis",
                    "hepatitis",
                    "hepatitis",
                    "hepatitis"
                ]
            ]
        },
        "terminological richness": {
            "translated_key": "riqueza terminológica",
            "is_in_text": true,
            "original_annotated_sentences": [
                "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of Ontology Learning.",
                "Our system named Dynamo is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
                "In this paper we present a distributed hierarchical clustering algorithm, core of our approach.",
                "It is evaluated and compared to a more conventional centralized algorithm.",
                "We also present how it has been improved using a multi-criteria approach.",
                "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete ontology building solution.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval.",
                "But building an ontology manually is a slow, tedious, costly, complex and time consuming process.",
                "Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date.",
                "It would mean creating dynamic ontologies [10] and it justifies the emergence of ontology learning techniques [14] [13].",
                "Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts.",
                "Our aim is not to build an exhaustive, general hierarchical ontology but a domain specific one.",
                "We propose a semi-automated tool since an external resource is required: the ontologist.",
                "An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies.",
                "In the multi-agent field, ontologies generally enable agents to understand each other [12].",
                "Theyre sometimes used to ease the ontology building process, in particular for collaborative contexts [3], but they rarely represent the ontology itself [16].",
                "Most works interested in the construction of ontologies [7] propose the refinement of ontologies.",
                "This process consists in using an existing ontology and building a new one from it.",
                "This approach is different from our approach because Dynamo starts from scratch.",
                "Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5].",
                "In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist.",
                "This paper first presents, in section 2, the big picture of the Dynamo system.",
                "In particular the motives that led to its creation and its general architecture.",
                "Then, in section 3 we discuss the distributed clustering algorithm used in Dynamo and compare it to a more classic centralized approach.",
                "Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering.",
                "And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2.",
                "DYNAMO OVERVIEW 2.1 Ontology as a Multi-Agent System Dynamo aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently.",
                "The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system.",
                "This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network.",
                "Dynamo takes a syntactical and terminological analysis of texts as input.",
                "It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts.",
                "As output, Dynamo provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network.",
                "An ontology can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations.",
                "Thus, our approach considers an ontology as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships.",
                "The ontology modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships.",
                "In this way, a dynamic ontology is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it.",
                "To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9].",
                "We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system.",
                "It justifies how we designed some of the rules used by our agents in order to maximize the cooperation degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
                "It addresses the needs of Knowledge Engineering in the context of dynamic ontology management and maintenance when the ontology is linked to a document collection.",
                "The Dynamo system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ? ?",
                "Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for ontology building tasks [11].",
                "We mainly selected it because of its robustness and the great amount of information extracted.",
                "In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1].",
                "In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term.",
                "For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term.",
                "Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term.",
                "With Dynamo, the term network obtained as the output of the extractor is stored in a database.",
                "For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1].",
                "Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15].",
                "In the case of terms we are generally dealing with their usage contexts.",
                "With Syntex, those contexts are identified by terms and characterized by some syntactic relations.",
                "The Dynamo multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4.",
                "It is designed to be both the system producing the resulting structure and the structure itself.",
                "It means that each agent represent a class in the taxonomy.",
                "Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3.",
                "DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in Dynamo.",
                "For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system).",
                "Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined.",
                "Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements.",
                "This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done.",
                "Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones.",
                "Our distributed algorithm is designed relying on those two facts.",
                "It is executed concurrently in each of the agents of the system.",
                "Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15].",
                "Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity.",
                "We now present the distributed algorithm used in our system.",
                "It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent.",
                "Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy.",
                "Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree).",
                "Then it sends a message to its parent P indicating its most dissimilar brother (here A1).",
                "Then P receives the same kind of message from each of its children.",
                "In the following, this kind of message will be called a vote.",
                "Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3).",
                "Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers.",
                "In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1).",
                "Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent.",
                "Ak−1 Ak AnA2A1 P P ...... ......",
                "Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial.",
                "The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent.",
                "The hierarchy just created a new intermediate level.",
                "Note that this algorithm generally converges, since the number of brothers of an agent drops.",
                "When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children).",
                "However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A.",
                "With the current system no decision can be taken.",
                "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 Quantitative Evaluation Now, we evaluate the properties of our distributed algorithm.",
                "It requires to begin with a quantitative evaluation, based on its complexity, while comparing it with the algorithm 1 from the previous section.",
                "Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary.",
                "For the distributed algorithm, the worst case means that for each run, only a two-item group can be created.",
                "Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations.",
                "For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times.",
                "And its body has the only similarity computation, so its cost is l−i.",
                "The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 .",
                "Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers.",
                "So each steps has a l × (l − 1) cost.",
                "Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built).",
                "Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity.",
                "But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm.",
                "This gap comes from the local decision making in each agent.",
                "Because of this, the similarity computations are done twice for each agent pair.",
                "We could conceive that an agent sends its computation result to its peer.",
                "But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1.",
                "Distributed algorithm (on average, with min and max) 2.",
                "Logarithmic polynomial 3.",
                "Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments.",
                "The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms.",
                "The given value is the average of comparisons made for one hundred of runs without any user interaction.",
                "It results in the plots of figure 5.",
                "The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case.",
                "It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning.",
                "Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average.",
                "Finally, lets note the reduced variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section.",
                "All are advantages obtained thanks to the use of an adaptive multi-agent system.",
                "The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system.",
                "The ontologist can make modifications and the hierarchy adapts depending on the request.",
                "It is particularly interesting in a knowledge engineering context.",
                "Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation.",
                "During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal.",
                "It is extremely difficult to realize this with a centralized black-box approach.",
                "In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class.",
                "Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account.",
                "That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning.",
                "But, the ontologist can make a mistake, and become aware of it too late.",
                "Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus.",
                "By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization.",
                "It is clear that the concept described by the term lésion (lesion) is misplaced.",
                "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (hepatitis).",
                "This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria.",
                "Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent.",
                "The name ConceptAgent:X is automatically given to a concept agent that is not described by a term.",
                "The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11.",
                "The new stable state if the one of figure 7.",
                "This system-user coupling is necessary to build an ontology, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages.",
                "Moreover, this algorithm can de facto be distributed on a computer network.",
                "The communication between agents is then done by sending messages and each one keeps its decision autonomy.",
                "Then, a system modification to make it run networked would not require to adjust the algorithm.",
                "On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4.",
                "MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair.",
                "But, as soon as one uses real data this property is not verified anymore.",
                "Some terms do not have any similarity value with any extracted term.",
                "Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy.",
                "For this low level structuring, ontologists generally base The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics.",
                "Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation.",
                "Each agent can try to determine if its parent is adequate.",
                "It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network.",
                "In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX .",
                "Thanks to those two notations we can describe the parent adequacy function a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C).",
                "An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates.",
                "We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent.",
                "Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example.",
                "Figure 8 shows the state of the system after stabilization on test data.",
                "We can notice that hépatite viral (viral hepatitis) is still linked to the taxonomy root.",
                "It is caused by the fact that there is no similarity value between the viral hepatitis term and any of the term of the other concept agents.",
                "Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9.",
                "We can see that viral hepatitis slipped through the branch leading to hepatitis and chose it as its new parent.",
                "It is a sensible default choice since viral hepatitis is a more specific term than hepatitis.",
                "This rule tends to push agents described by a set of term to become leafs of the concept tree.",
                "It addresses our concern to improve the low level structuring of our taxonomy.",
                "But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch.",
                "That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time.",
                "The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy.",
                "It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time.",
                "The solution we chose came from the search for minimizing non cooperation within the system in accordance with the ADELFE method.",
                "Each agent computes three non cooperation degrees and chooses its current priority depending on which degree is the highest.",
                "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non cooperation degrees are: • μH (A) = 1 − a(P, A), is the head coverage non cooperation degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
                "Then, the non cooperation degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated.",
                "In this case, the metric used is the number of messages exchanged in the system.",
                "Once again the system has been executed with input data sets ranging from ten to one hundred terms.",
                "The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction.",
                "It results in the plots of figure 10.",
                "Curve number 1 represents the average of the value obtained.",
                "Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set.",
                "Curve number 3 represents the polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1.",
                "Dynamo, all rules (on average, with min and max) 2.",
                "Distributed clustering only (on average) 2.",
                "Cubic polynomial Figure 10: Experimental results on average.",
                "Moreover, lets note the very small variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system.",
                "Finally the extra head coverage rules are a real improvement on the distributed algorithm alone.",
                "They introduce more constraints and stability point is reached with less interactions and decision making by the agents.",
                "It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5.",
                "DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added.",
                "When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm.",
                "On the contrary, adding a new item after a first stabilization has an impact on the final result.",
                "Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system.",
                "By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization.",
                "Figure 12: Concept agent tree after taking in account hepatitis Then, the ontologist interacts with the system and adds a new concept described by the term hepatitis and linked to the root.",
                "The system reacts and stabilizes, we then obtain figure 12 as a result. hepatitis is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example.",
                "We need to improve our distributed algorithm to allow a concept to move along a branch.",
                "We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult.",
                "In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the Dynamo system.",
                "Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result.",
                "But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise.",
                "Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree.",
                "By looking at figure 7, it is clear that some pruning could be done in the taxonomy.",
                "In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore.",
                "Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form.",
                "In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged.",
                "Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf.",
                "As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root.",
                "Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6.",
                "CONCLUSION After being presented as a promising solution, ensuring model quality and their <br>terminological richness</br>, ontology building from textual corpus analysis is difficult and costly.",
                "It requires analyst supervising and taking in account the ontology aim.",
                "Using natural languages processing tools ease the knowledge localization in texts through language uses.",
                "That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements.",
                "Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result.",
                "We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts.",
                "Our system makes use of a terminological network resulting from an analysis made by Syntex.",
                "The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made.",
                "Performances of the system are interesting and some aspects are even comparable to their centralized counterpart.",
                "Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information.",
                "From the point of view of ontology building, this work is a first step showing the relevance of our approach.",
                "It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees.",
                "From this improvements we are mostly focusing on the pruning to obtain better taxonomies.",
                "Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm.",
                "In other words this algorithm introduces inThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a dynamic equilibrium.",
                "Also from the multi-agent engineering point of view, their use in a dynamic ontology context has shown its relevance.",
                "This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through cooperation has been an efficient solution.",
                "And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper.",
                "Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach.",
                "Were planning to work on such benchmarking in the near future. 7.",
                "REFERENCES [1] H. Assadi.",
                "Construction of a regional ontology from text and its use within a documentary system.",
                "Proceedings of the International Conference on Formal Ontology and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel.",
                "Text analysis for ontology and terminology engineering.",
                "Journal of Applied Ontology, 2005. [3] J. Bao and V. Honavar.",
                "Collaborative ontology building with wiki@nt.",
                "Proceedings of the Workshop on Evaluation of Ontology-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard.",
                "Agent-Oriented Methodologies, chapter 7.",
                "Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202.",
                "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks.",
                "Background and foreground knowledge in dynamic ontology construction.",
                "Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec.",
                "A corpus-based conceptual clustering method for verb frames and ontology acquisition.",
                "LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon.",
                "Ontology Engineering: a Survey and a Return on Experience.",
                "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize.",
                "Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize.",
                "A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems.",
                "Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler.",
                "Dynamic ontologies on the web.",
                "American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent.",
                "Terminology extraction from text to build an ontology in surgical intensive care.",
                "Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter.",
                "Reconciling Ontological Differences by Assistant Agents.",
                "AAMAS06, May 2006. [13] A. Maedche.",
                "Ontology learning for the Semantic Web.",
                "Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab.",
                "Mining Ontologies from Text.",
                "EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze.",
                "Foundations of Statistical Natural Language Processing.",
                "The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner.",
                "Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)"
            ],
            "original_annotated_samples": [
                "CONCLUSION After being presented as a promising solution, ensuring model quality and their <br>terminological richness</br>, ontology building from textual corpus analysis is difficult and costly."
            ],
            "translated_annotated_samples": [
                "CONCLUSIÓN Después de ser presentada como una solución prometedora, garantizar la calidad del modelo y su <br>riqueza terminológica</br>, la construcción de ontologías a partir del análisis de corpus textual es difícil y costosa."
            ],
            "translated_text": "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de ontologías a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías. Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una arquitectura multiagente adaptativa. En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque. Se evalúa y se compara con un algoritmo centralizado más convencional. También presentamos cómo ha sido mejorado utilizando un enfoque de múltiples criterios. Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de ontologías. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Experimentación 1. INTRODUCCIÓN En la actualidad, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de información. Pero construir una ontología manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo. Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados. Significaría crear ontologías dinámicas [10] y justifica la aparición de técnicas de aprendizaje de ontologías [14] [13]. Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una ontología a partir de un conjunto específico de textos de un dominio. Nuestro objetivo no es construir una ontología jerárquica exhaustiva y general, sino una específica para un dominio. Proponemos una herramienta semi-automatizada ya que se requiere un recurso externo: el ontólogo. Un ontólogo es una especie de ingeniero cognitivo, o analista, que utiliza información de textos y entrevistas con expertos para diseñar ontologías. En el campo de los agentes múltiples, las ontologías generalmente permiten que los agentes se entiendan entre sí [12]. A veces se utilizan para facilitar el proceso de construcción de la ontología, en particular en contextos colaborativos [3], pero rara vez representan la ontología en sí misma [16]. La mayoría de los trabajos interesados en la construcción de ontologías [7] proponen el refinamiento de las ontologías. Este proceso consiste en utilizar una ontología existente y construir una nueva a partir de ella. Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero. Los investigadores, que trabajan en la construcción de ontologías a partir de textos, afirman que el trabajo a automatizar requiere recursos externos como un diccionario [14] o acceso a la web [5]. En nuestro trabajo, proponemos una interacción entre el ontólogo y el sistema, nuestro recurso externo radica tanto en los textos como en el ontólogo. Este documento primero presenta, en la sección 2, la visión general del sistema Dynamo. En particular, los motivos que llevaron a su creación y su arquitectura general. Luego, en la sección 3 discutimos el algoritmo de clustering distribuido utilizado en Dynamo y lo comparamos con un enfoque más clásico y centralizado. La sección 4 está dedicada a mejorar el comportamiento de los agentes que fue diseñado teniendo en cuenta criterios ignorados por el agrupamiento. Y finalmente, en la sección 5, discutimos las limitaciones de nuestro enfoque y explicamos cómo se abordarán en trabajos futuros. DYNAMO RESUMEN 2.1 Ontología como un Sistema Multiagente Dynamo tiene como objetivo reducir la necesidad de acciones manuales en el procesamiento de los resultados del análisis de texto y sugerir un inicio de red conceptual para construir ontologías de manera más eficiente. El enfoque elegido es completamente original en nuestro conocimiento y utiliza un sistema multiagente adaptativo. Esta elección se basa en las cualidades ofrecidas por el sistema multiagente: pueden facilitar el diseño interactivo de un sistema (en nuestro caso, una red conceptual), permiten su construcción incremental al tener en cuenta progresivamente nuevos datos (provenientes del análisis de texto y la interacción del usuario) y, por último pero no menos importante, pueden distribuirse fácilmente a través de una red informática. Dynamo realiza un análisis sintáctico y terminológico de textos como entrada. Utiliza varios criterios basados en estadísticas calculadas a partir de los contextos lingüísticos de los términos para crear y posicionar los conceptos. Como resultado, Dynamo proporciona al analista una organización jerárquica de conceptos (el sistema multiagente en sí mismo) que puede ser validada, refinada o modificada, hasta que obtenga un estado satisfactorio de la red semántica. Una ontología puede ser vista como un mapa estable constituido por entidades conceptuales, representadas aquí por agentes, vinculadas por relaciones etiquetadas. Por lo tanto, nuestro enfoque considera una ontología como un tipo de equilibrio entre sus concepto-agentes, donde sus fuerzas están definidas por sus relaciones potenciales. La modificación de la ontología es una perturbación del equilibrio previo por la aparición o desaparición de agentes o relaciones. De esta manera, una ontología dinámica es un proceso de autoorganización que ocurre cuando se incluyen nuevos textos en el corpus, o cuando el ontólogo interactúa con él. Para apoyar la flexibilidad necesaria de dicho sistema, utilizamos un sistema multiagente autoorganizado basado en un enfoque cooperativo [9]. Seguimos el método ADELFE [4] propuesto para guiar el diseño de este tipo de sistema multiagente. Se justifica cómo diseñamos algunas de las reglas utilizadas por nuestros agentes para maximizar el grado de cooperación dentro del sistema multiagente de Dynamos. 2.2 Arquitectura Propuesta En esta sección, presentamos nuestra arquitectura del sistema. Aborda las necesidades de la Ingeniería del Conocimiento en el contexto de la gestión y mantenimiento dinámico de ontologías cuando la ontología está vinculada a una colección de documentos. El sistema Dynamo consta de tres partes (cf. figura 1): • una red de términos, obtenida gracias a una herramienta de extracción de términos utilizada para preprocesar el corpus textual, • un sistema multiagente que utiliza la red de términos para realizar un agrupamiento jerárquico con el fin de obtener una taxonomía de conceptos, • una interfaz que permite al ontólogo visualizar y controlar el proceso de agrupamiento. El extractor de términos que utilizamos es Syntex, un software que ha sido utilizado eficientemente para tareas de construcción de ontologías [11]. Principalmente lo seleccionamos por su robustez y la gran cantidad de información extraída. En particular, crea una red de Expansión de Cabeza que ya ha demostrado ser interesante para un sistema de agrupamiento [1]. En una red de este tipo, cada término está vinculado a su término principal y, es decir, a la subfrase máxima ubicada como término principal de su término de expansión, y también a todos los términos para los cuales es un término principal o un término de expansión. Por ejemplo, la ingeniería del conocimiento a partir de texto tiene como término principal la ingeniería del conocimiento y como término de expansión el texto. Además, la ingeniería del conocimiento se compone del conocimiento como término principal y la ingeniería como término de expansión. Con Dynamo, el término de red obtenido como resultado del extractor se almacena en una base de datos. Para cada par de términos, asumimos que es posible calcular un valor de similitud para realizar un agrupamiento [6] [1]. Debido a la naturaleza de los datos, nos estamos enfocando únicamente en la computación de similitud entre objetos descritos gracias a variables binarias, lo que significa que cada elemento está descrito por la presencia o ausencia de un conjunto de características [15]. En el caso de los términos, generalmente estamos tratando con sus contextos de uso. Con Syntex, esos contextos son identificados por términos y caracterizados por algunas relaciones sintácticas. El sistema multiagente Dynamo implementa el algoritmo de clustering distribuido descrito en detalle en la sección 3 y las reglas descritas en la sección 4. Está diseñado para ser tanto el sistema que produce la estructura resultante como la estructura en sí misma. Significa que cada agente representa una clase en la taxonomía. Entonces, la salida del sistema es la organización obtenida a partir de la interacción entre agentes, teniendo en cuenta la retroalimentación proveniente del ontólogo cuando modifica la taxonomía dada sus necesidades o experiencia. CLUSTERING DISTRIBUIDO Esta sección presenta el algoritmo de clustering distribuido utilizado en Dynamo. Por el bien de la comprensión, y debido a su evaluación en la sección 3.1, recordamos el algoritmo centralizado básico utilizado para un agrupamiento jerárquico ascendente en un espacio no métrico, cuando se dispone de una medida de similitud simétrica [15] (que es el caso de las medidas utilizadas en nuestro sistema). Algoritmo 1: Algoritmo de agrupamiento jerárquico ascendente centralizado Datos: Lista L de elementos para organizar como una jerarquía Resultado: Raíz R de la jerarquía mientras longitud(L) > 1 hacer max ← 0; A ← nil; B ← nil; para i ← 1 a longitud(L) hacer I ← L[i]; para j ← i + 1 a longitud(L) hacer J ← L[j]; sim ← similitud(I, J); si sim > max entonces max ← sim; A ← I; B ← J; fin si fin para fin para quitar(A, L); quitar(B, L); agregar((A, B), L); fin mientras R ← L[1]; En el algoritmo 1, para cada paso de agrupamiento, se determina el par de elementos más similares. Esos dos elementos están agrupados en un conjunto, y la clase resultante se añade a la lista de elementos restantes. Este algoritmo se detiene cuando la lista tiene solo un elemento restante. 2 es decir, la subfrase máxima ubicada como cola del término The Sixth Intl. La jerarquía resultante del algoritmo 1 siempre es un árbol binario debido a la forma en que se realiza el agrupamiento. Además, agrupar los elementos más similares es equivalente a alejarlos de los menos similares. Nuestro algoritmo distribuido está diseñado basándose en esos dos hechos. Se ejecuta de forma simultánea en cada uno de los agentes del sistema. Cabe destacar que, en lo que sigue de este artículo, utilizamos para ambos algoritmos una similitud de Anderberg (con α = 0.75) y una estrategia de agrupamiento de enlace promedio [15]. Esas decisiones tienen un impacto en el árbol resultante, pero no afectan ni la ejecución global del algoritmo ni su complejidad. Ahora presentamos el algoritmo distribuido utilizado en nuestro sistema. Se inicia de la siguiente manera: • se crea un agente TOP que no tiene padre, será la raíz de la taxonomía resultante, • se crea un agente para cada término que se va a posicionar en la taxonomía, todos tienen como padre a TOP. Una vez que se establece esta estructura básica, el algoritmo se ejecuta hasta que alcanza el equilibrio y luego proporciona la taxonomía resultante. El proceso de la primera etapa (figura 2) se activa cuando un agente (aquí Ak) tiene más de un hermano (ya que queremos obtener un árbol binario). Luego envía un mensaje a su padre P indicando a su hermano más diferente (aquí A1). Entonces P recibe el mismo tipo de mensaje de cada uno de sus hijos. En lo siguiente, este tipo de mensaje se llamará voto. A continuación, cuando P ha recibido mensajes de todos sus hijos, comienza el segundo paso (figura 3). Gracias a los mensajes recibidos que indican las preferencias de sus hijos, P puede determinar tres subgrupos entre sus hijos: el hijo que recibió más votos de sus hermanos, es decir, el hijo que es más diferente del mayor número de sus hermanos. En caso de empate, uno de los ganadores es elegido al azar (aquí A1), los niños que permitieron la elección del primer grupo, es decir, los agentes que eligieron a su hermano del primer grupo como el más diferente (aquí Ak a An), los niños restantes (aquí A2 a Ak−1). Entonces P crea un nuevo agente P (teniendo a P como padre) y pide a los agentes del segundo grupo (aquí los agentes Ak a An) que lo elijan como su nuevo padre. Ak−1 Ak AnA2A1 P P ...... ...... \n\nAk−1 Ak AnA2A1 P P ...... ...... Figura 4: Agrupamiento distribuido: Paso 3 Finalmente, el paso 3 (figura 4) es trivial. Los niños rechazados por P (aquí el agente A2 a An) tienen en cuenta su mensaje y eligen a P como su nuevo padre. La jerarquía acaba de crear un nuevo nivel intermedio. Ten en cuenta que este algoritmo generalmente converge, ya que el número de hermanos de un agente disminuye. Cuando un agente tiene solamente un hermano restante, su actividad se detiene (aunque sigue procesando los mensajes que llegan de sus hijos). Sin embargo, en algunos casos podemos llegar a un conflicto circular en el procedimiento de votación cuando, por ejemplo, A vota en contra de B, B en contra de C y C en contra de A. Con el sistema actual no se puede tomar ninguna decisión. El procedimiento actual debería mejorarse para abordar esto, probablemente utilizando un método de votación clasificado. 3.1 Evaluación Cuantitativa Ahora, evaluamos las propiedades de nuestro algoritmo distribuido. Se requiere comenzar con una evaluación cuantitativa, basada en su complejidad, mientras se compara con el algoritmo 1 de la sección anterior. Su complejidad teórica se calcula para el peor caso, considerando la operación de cálculo de similitud como elemental. Para el algoritmo distribuido, el peor caso significa que en cada ejecución, solo se puede crear un grupo de dos elementos. Bajo esas condiciones, para un conjunto de datos dado de n elementos, podemos determinar la cantidad de cálculos de similitud. Para el algoritmo 1, notamos que l = longitud(L), luego el bucle más interno se ejecuta l - i veces. Y su cuerpo tiene la única computación de similitud, por lo que su costo es l−i. El segundo bucle for se ejecuta l veces para i que varía de 1 a l. Entonces su costo es Pl i=1(l − i) que puede simplificarse en l×(l−1) 2. Finalmente, para cada ejecución del bucle while, l se reduce de n a 1, lo que nos da t1(n) como la cantidad de cálculos de similitud para el algoritmo 1: t1(n) = nX l=1 l × (l − 1) 2 (1) Para el algoritmo distribuido, en un paso dado, cada uno de los l agentes evalúa la similitud con sus l −1 compañeros. Entonces, cada paso tiene un costo de l × (l − 1). Entonces, se crean grupos y se realiza otra votación con l disminuido en uno (ya que asumimos el peor caso, solo se forman grupos de tamaño 2 o l −1). Dado que l es igual a n en la primera ejecución, obtenemos tdist(n) como la cantidad de cálculos de similitud para el algoritmo distribuido: tdist(n) = nX l=1 l × (l − 1) (2) Ambos algoritmos tienen una complejidad O(n3). Pero en el peor de los casos, el algoritmo distribuido realiza el doble del número de el1288 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) operaciones elementales realizadas por el algoritmo centralizado. Esta brecha proviene de la toma de decisiones local en cada agente. Debido a esto, los cálculos de similitud se realizan dos veces para cada par de agentes. Podríamos concebir que un agente envía el resultado de su cálculo a su par. Sin embargo, simplemente trasladaría el problema al generar más comunicación en el sistema. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Cantidad de comparaciones Cantidad de términos de entrada 1. Algoritmo distribuido (en promedio, con mínimo y máximo) 2. Polinomio logarítmico 3. En la Figura 5 se muestra el algoritmo centralizado: Resultados experimentales. En un segundo paso, la complejidad promedio del algoritmo ha sido determinada mediante experimentos. El sistema multiagente ha sido ejecutado con conjuntos de datos de entrada generados aleatoriamente que van desde diez hasta cien términos. El valor dado es el promedio de las comparaciones realizadas para cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 5. El algoritmo es entonces más eficiente en promedio que el algoritmo centralizado, y su complejidad promedio está por debajo del peor caso. Se puede explicar por la baja probabilidad de que un conjunto de datos obligue al sistema a crear solo grupos mínimos (dos elementos) o máximos (n − 1 elementos) para cada paso de razonamiento. La curva número 2 representa el polinomio logarítmico que minimiza el error con respecto a la curva número 1. El término de mayor grado de este polinomio es n2 log(n), por lo tanto, nuestro algoritmo distribuido tiene una complejidad O(n2 log(n)) en promedio. Finalmente, notemos la reducida variación de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 1,960.75 para un promedio de 40,550.10 (alrededor del 5%), lo que muestra la buena estabilidad del sistema. Aunque los resultados cuantitativos son interesantes, la verdadera ventaja de este enfoque proviene de características más cualitativas que presentaremos en esta sección. Todos son ventajas obtenidas gracias al uso de un sistema multiagente adaptativo. La principal ventaja del uso de un sistema multiagente para una tarea de agrupamiento es introducir dinamismo en dicho sistema. El ontólogo puede hacer modificaciones y la jerarquía se adapta dependiendo de la solicitud. Es particularmente interesante en un contexto de ingeniería del conocimiento. De hecho, la jerarquía creada por el sistema está destinada a ser modificada por el ontólogo ya que es el resultado de un cálculo estadístico. Durante la revisión necesaria de los textos para examinar los contextos de uso de los términos [2], el ontólogo podrá interpretar el contenido real y revisar la propuesta del sistema. Es extremadamente difícil lograr esto con un enfoque centralizado de caja negra. En la mayoría de los casos, uno tiene que encontrar qué paso de razonamiento generó el error y modificar manualmente la clase resultante. Desafortunadamente, en este caso, todos los pasos de razonamiento que ocurrieron después de la creación de la clase modificada se pierden y deben ser recalculados teniendo en cuenta la modificación. Por eso, un sistema como ASIUM [6] intenta suavizar el problema con una colaboración entre el sistema y el usuario mostrando al ontólogo las clases creadas después de cada paso de razonamiento. Pero el ontólogo puede cometer un error y darse cuenta de ello demasiado tarde. Figura 6: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos un ejemplo gracias a algunas capturas de pantalla del prototipo en funcionamiento probado en un corpus relacionado con la medicina. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 6 después de la estabilización. Es evidente que el concepto descrito por el término lesión está mal ubicado. Las computaciones de similitud lo sitúan más cerca de femme (mujer) y chirurgien (cirujano) que de infección, gastro-enteritis y hepatitis. Esta posición incorrecta para la lesión se explica por el hecho de que sin la entrada del ontólogo, el razonamiento se basa únicamente en criterios estadísticos. Figura 7: Árbol de agentes conceptuales después de la modificación del ontólogo. Luego, el ontólogo reemplaza el concepto en la rama derecha, afectando a ConceptAgent:8 como su nuevo padre. El nombre ConceptAgent:X se asigna automáticamente a un agente conceptual que no está descrito por un término. El sistema reacciona por sí mismo y perfecciona la jerarquía de agrupación para obtener un árbol binario creando ConceptAgent:11. El nuevo estado estable es el de la figura 7. Este acoplamiento sistema-usuario es necesario para construir una ontología, pero no se necesita ningún ajuste particular al principio del algoritmo distribuido ya que cada agente realiza un procesamiento local autónomo y se comunica con su vecindario a través de mensajes. Además, este algoritmo puede ser distribuido de facto en una red de computadoras. La comunicación entre agentes se realiza enviando mensajes y cada uno mantiene su autonomía de decisión. Entonces, una modificación del sistema para hacerlo funcionar en red no requeriría ajustar el algoritmo. Por el contrario, solo sería necesario reestructurar la capa de comunicación y el proceso de creación de agentes, ya que en nuestra implementación actual no están en red. 4. EN LA JERARQUÍA DE MÚLTIPLES CRITERIOS En las secciones anteriores, asumimos que la similitud se puede calcular para cualquier par de términos. Pero, tan pronto como se utilizan datos reales, esta propiedad ya no se verifica. Algunos términos no tienen ningún valor de similitud con ningún término extraído. Además, para los nodos hoja a veces es interesante utilizar otros medios para posicionarlos en la jerarquía. Para esta estructuración de bajo nivel, los ontólogos generalmente se basan en The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1289 sus elecciones en heurísticas simples. Usando esta observación, construimos un nuevo conjunto de reglas, que no se basan en la similitud para respaldar la estructuración de bajo nivel. 4.1 Agregar reglas de cobertura de cabeza En este caso, los agentes pueden actuar con un punto de vista muy local simplemente mirando la relación padre/hijo. Cada agente puede intentar determinar si su padre es adecuado. Es posible adivinar esto porque cada agente conceptual está descrito por un conjunto de términos y gracias a la red de términos de Expansión de Cabeza. En el siguiente TX será el conjunto de términos que describen el concepto del agente X y head(TX) el conjunto de todos los términos que son cabeza de al menos un elemento de TX. Gracias a esas dos notaciones podemos describir la función de adecuación entre un padre P y un hijo C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Entonces, el mejor padre para C es el agente P que maximiza a(P, C). Un agente insatisfecho con su padre puede intentar encontrar uno mejor evaluando la idoneidad de los candidatos. Diseñamos un algoritmo complementario para dirigir esta búsqueda: cuando un agente C no está satisfecho con su padre P, evalúa a(Bi, C) con todos sus hermanos (notados Bi); luego se elige como nuevo padre aquel que maximice a(Bi, C). Figura 8: Árbol de agentes conceptuales después de la estabilización autónoma del sistema sin la regla de cobertura de cabeza. Ahora ilustramos este comportamiento de regla con un ejemplo. La Figura 8 muestra el estado del sistema después de la estabilización en los datos de prueba. Podemos notar que la hepatitis viral todavía está vinculada a la raíz taxonómica. Se debe al hecho de que no hay valor de similitud entre el término hepatitis viral y ninguno de los términos de los otros agentes conceptuales. Figura 9: Árbol de agentes conceptuales después de la activación de la regla de cobertura de la cabeza. Tras activar la regla de cobertura de la cabeza y permitir que el sistema se estabilice nuevamente, obtenemos la figura 9. Podemos ver que la hepatitis viral se deslizó a través de la rama que llevaba a la hepatitis y la eligió como su nueva progenitora. Es una elección por defecto sensata, ya que la hepatitis viral es un término más específico que la hepatitis. Esta regla tiende a hacer que los agentes descritos por un conjunto de términos se conviertan en hojas del árbol conceptual. Aborda nuestra preocupación por mejorar la estructuración de bajo nivel de nuestra taxonomía. Pero obviamente nuestros agentes carecen de un método para retroceder en caso de modificaciones en la taxonomía que los ubicarían en la rama incorrecta. Ese es uno de los puntos en los que nuestro sistema aún debe ser mejorado al agregar otro conjunto de reglas. 4.2 Sobre el uso de varios criterios En las secciones y ejemplos anteriores, solo utilizamos un algoritmo a la vez. El algoritmo de agrupamiento distribuido tiende a introducir nuevas capas en la taxonomía, mientras que el algoritmo de cobertura de cabeza tiende a empujar algunos de los agentes hacia las hojas de la taxonomía. Obviamente plantea la pregunta sobre cómo lidiar con múltiples criterios en la construcción de nuestra taxonomía, y cómo los agentes determinan sus prioridades en un momento dado. La solución que elegimos proviene de la búsqueda de minimizar la falta de cooperación dentro del sistema de acuerdo con el método ADELFE. Cada agente calcula tres grados de no cooperación y elige su prioridad actual dependiendo de cuál grado sea el más alto. Para un agente A dado que tiene un padre P, un conjunto de hermanos Bi y que recibió un conjunto de mensajes Mk con prioridad pk, los tres grados de no cooperación son: • μH (A) = 1 − a(P, A), es el grado de no cooperación de cobertura de cabeza, determinado por la cobertura de cabeza del padre, • μB(A) = max(1 − similitud(A, Bi)), es el grado de no cooperación de hermandad, determinado por el peor hermano de A en cuanto a similitudes, • μM (A) = max(pk), es el grado de no cooperación de mensaje, determinado por el mensaje más urgente recibido. Entonces, el grado de no cooperación μ(A) del agente A es: μ(A) = max(μH (A), μB(A), μM (A)) (4) Luego, tenemos tres casos que determinan qué tipo de acción elegirá A: • si μ(A) = μH (A) entonces A utilizará el algoritmo de cobertura de cabeza que detallamos en la subsección anterior • si μ(A) = μB(A) entonces A utilizará el algoritmo de agrupamiento distribuido (ver sección 3) • si μ(A) = μM (A) entonces A procesará Mk inmediatamente para ayudar a su remitente Estos tres casos resumen las actividades actuales de nuestros agentes: tienen que encontrar el mejor padre para ellos (μ(A) = μH (A)), mejorar la estructuración a través del agrupamiento (μ(A) = μB(A)) y procesar otros mensajes de agentes (μ(A) = μM (A)) para ayudarlos a cumplir sus propios objetivos. 4.3 Complejidad Experimental Revisitada Evaluamos la complejidad experimental de todo el sistema multiagente cuando todas las reglas están activadas. En este caso, la métrica utilizada es el número de mensajes intercambiados en el sistema. Una vez más, el sistema ha sido ejecutado con conjuntos de datos de entrada que van desde diez hasta cien términos. El valor dado es el promedio del número de mensajes enviados en el sistema en su totalidad durante cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 10. La curva número 1 representa el promedio del valor obtenido. La curva número 2 representa el promedio del valor obtenido cuando solo se activa el algoritmo de agrupamiento distribuido, no el conjunto completo de reglas. La curva número 3 representa el polinomio que minimiza el error con la curva número 1. El término de mayor grado de este polinomio es en n3, entonces nuestro sistema multiagente tiene una complejidad O(n3). Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Cantidad de mensajes Cantidad de términos de entrada 1. Dinamo, todas las reglas (en promedio, con mínimo y máximo) 2. Agrupamiento distribuido solo (en promedio) 2. Figura 10: Resultados experimentales en promedio de un polinomio cúbico. Además, notemos la variación muy pequeña de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 126.73 para un promedio de 20,737.03 (alrededor del 0.6%), lo que demuestra la excelente estabilidad del sistema. Finalmente, las reglas adicionales de cobertura de cabeza son una verdadera mejora sobre el algoritmo distribuido por sí solo. Introducen más restricciones y se alcanza el punto de estabilidad con menos interacciones y toma de decisiones por parte de los agentes. Significa que se intercambian menos mensajes en el sistema al obtener un árbol de mayor calidad para el ontólogo. 5. DISCUSIÓN Y PERSPECTIVAS 5.1 Limitación actual de nuestro enfoque La limitación más importante de nuestro algoritmo actual es que el resultado depende del orden en que se agregan los datos. Cuando el sistema funciona por sí solo en un conjunto de datos fijo proporcionado durante la inicialización, el resultado final es equivalente a lo que podríamos obtener con un algoritmo centralizado. Por el contrario, añadir un nuevo elemento después de una primera estabilización tiene un impacto en el resultado final. Figura 11: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos otro ejemplo del sistema en funcionamiento. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 11 después de la estabilización. Figura 12: Árbol de agentes conceptuales después de tener en cuenta la hepatitis. Luego, el ontólogo interactúa con el sistema y agrega un nuevo concepto descrito por el término hepatitis y vinculado a la raíz. El sistema reacciona y se estabiliza, luego obtenemos la figura 12 como resultado. La hepatitis se encuentra en la rama derecha, pero no hemos obtenido la misma organización que la figura 6 del ejemplo anterior. Necesitamos mejorar nuestro algoritmo distribuido para permitir que un concepto se mueva a lo largo de una rama. Actualmente estamos trabajando en las reglas requeridas, pero la comparación con el algoritmo centralizado se volverá muy difícil. En particular, ya que tendrán en cuenta criterios ignorados por el algoritmo centralizado. 5.2 Poda para la construcción de ontologías En la sección 3, presentamos el algoritmo de agrupamiento distribuido utilizado en el sistema Dynamo. Dado que este trabajo se basó inicialmente en este algoritmo, introdujo un claro sesgo hacia los árboles binarios como resultado. Pero debemos tener en cuenta que estamos tratando de obtener taxonomías que sean más refinadas y concisas. Aunque la regla de cobertura de la cabeza es una mejora porque se basa en cómo generalmente trabajan los ontólogos, solo aborda la estructuración a un nivel bajo y no a los niveles intermedios del árbol. Al observar la figura 7, es evidente que se podría realizar una poda en la taxonomía. En particular, dado que la lesión se movió, el ConceptAgent:9 podría ser eliminado, ya no es necesario. Además, la rama que comienza con ConceptAgent:8 respeta claramente la restricción de formar un árbol binario, pero sería más útil para el usuario en una forma más compacta y significativa. En este caso, ConceptAgent:10 y ConceptAgent:11 probablemente podrían fusionarse. Actualmente, nuestro sistema cuenta con las reglas necesarias para crear niveles intermedios en la taxonomía, o para que los conceptos se desplacen hacia la hoja. Como señalamos, no es suficiente, por lo que se necesitan nuevas reglas para permitir eliminar nodos del árbol o moverlos hacia la raíz. La mayor parte del trabajo necesario para desarrollar esas reglas consiste en encontrar la información estadística relevante que respaldará al ontólogo. CONCLUSIÓN Después de ser presentada como una solución prometedora, garantizar la calidad del modelo y su <br>riqueza terminológica</br>, la construcción de ontologías a partir del análisis de corpus textual es difícil y costosa. Requiere supervisión del analista y tener en cuenta el objetivo de la ontología. El uso de herramientas de procesamiento de lenguaje natural facilita la localización del conocimiento en textos a través del uso del lenguaje. Dicho esto, esas herramientas producen una gran cantidad de datos léxicos o gramaticales que no son triviales de examinar para definir elementos conceptuales. Nuestra contribución radica en este paso del proceso de modelado a partir de textos, antes de intentar normalizar o formalizar el resultado. Propusimos un enfoque basado en un sistema multiagente adaptativo para proporcionar al ontólogo una primera estructura taxonómica de conceptos. Nuestro sistema hace uso de una red terminológica resultante de un análisis realizado por Syntex. El estado actual de nuestro software permite producir estructuras simples, proponérselas al ontólogo y hacerlas evolucionar dependiendo de las modificaciones que él realice. Las actuaciones del sistema son interesantes y algunos aspectos son incluso comparables a su contraparte centralizada. Sus fortalezas son principalmente cualitativas ya que permite interacciones de usuario más sutiles y una adaptación progresiva a nueva información basada en el lenguaje. Desde el punto de vista de la construcción de la ontología, este trabajo es un primer paso que muestra la relevancia de nuestro enfoque. Debe continuar, tanto para garantizar una mejor robustez durante la clasificación, como para obtener estructuras semánticas más ricas que simples árboles. De estas mejoras, nos estamos enfocando principalmente en la poda para obtener mejores taxonomías. Actualmente estamos trabajando en el criterio para activar las acciones complementarias de los cambios de estructura aplicados por nuestro algoritmo de agrupamiento. En otras palabras, este algoritmo se introduce en el Sexto Congreso Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1291 niveles intermedios, y necesitamos poder eliminarlos si es necesario, para alcanzar un equilibrio dinámico. También desde el punto de vista de la ingeniería multiagente, su uso en un contexto de ontología dinámica ha demostrado su relevancia. Estas ontologías dinámicas pueden ser vistas como una resolución de problemas complejos, en tal caso la autoorganización a través de la cooperación ha sido una solución eficiente. Y, en general, es probable que sea interesante para otras tareas relacionadas con el diseño, incluso si nos estamos enfocando únicamente en la ingeniería del conocimiento en este artículo. Por supuesto, nuestro sistema aún requiere más trabajo de evaluación y validación para determinar con precisión las ventajas y desventajas de este enfoque. Estamos planeando trabajar en ese tipo de comparación en un futuro cercano. 7. REFERENCIAS [1] H. Assadi. Construcción de una ontología regional a partir de texto y su uso dentro de un sistema documental. Actas de la Conferencia Internacional sobre Ontología Formal y Sistemas de Información - FOIS98, páginas 236-249, 1998. [2] N. Aussenac-Gilles y D. Sörgel. Análisis de texto para ingeniería de ontologías y terminología. Revista de Ontología Aplicada, 2005. [3] J. Bao y V. Honavar. Construcción colaborativa de ontologías con wiki@nt. Actas del Taller de Evaluación de Herramientas Basadas en Ontologías (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes y G. Picard. Metodologías Orientadas a Agentes, capítulo 7. Ingeniería de Sistemas Multiagente Autoadaptativos: la Metodología ADELFE, páginas 172-202. Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna y Y. Wilks. Antecedentes y conocimiento previo en la construcción dinámica de ontologías. Taller de la Web Semántica, SIGIR03, agosto de 2003. [6] D. Faure y C. Nedellec. Un método de agrupamiento conceptual basado en corpus para marcos verbales y adquisición de ontologías. Taller LREC sobre la adaptación de recursos léxicos y corpus a sublenguajes y aplicaciones, 1998. [7] F. Gandon. Ingeniería de Ontologías: una Encuesta y un Retorno de Experiencia. INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes y P. Glize. Diseño Vivo para Sistemas Computacionales Abiertos. 12º Talleres Internacionales de la IEEE sobre Tecnologías Habilitadoras, Infraestructura para Empresas Colaborativas, páginas 389-394, junio de 2003. [9] M.-P. Gleizes, V. Camps y P. Glize. Una teoría de computación emergente basada en la autoorganización cooperativa para sistemas artificiales adaptativos. Cuarto Congreso Europeo de Ciencias de los Sistemas, septiembre de 1999. [10] J. Heflin y J. Hendler. Ontologías dinámicas en la web. Conferencia de la Asociación Americana de Inteligencia Artificial, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault y M.-C. Jaulent. Extracción de terminología del texto para construir una ontología en cuidados intensivos quirúrgicos. Actas del simposio anual de la AMIA 2002, 2002. [12] K. Lister, L. Sterling y K. Taveter. Reconciliando diferencias ontológicas mediante agentes asistentes. AAMAS06, mayo de 2006. [13] A. Maedche. Aprendizaje de ontologías para la Web Semántica. Editorial Kluwer Academic, 2002. [14] A. Maedche y S. Staab. Extracción de ontologías a partir de texto. EKAW 2000, páginas 189-202, 2000. [15] C. D. Manning y H. Schütze. Fundamentos del Procesamiento del Lenguaje Natural Estadístico. El MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding y S. Brueckner. Clustering jerárquico descentralizado dinámico en cualquier momento. 29ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, agosto de 2006. 1292 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "model quality": {
            "translated_key": "calidad del modelo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of Ontology Learning.",
                "Our system named Dynamo is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
                "In this paper we present a distributed hierarchical clustering algorithm, core of our approach.",
                "It is evaluated and compared to a more conventional centralized algorithm.",
                "We also present how it has been improved using a multi-criteria approach.",
                "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete ontology building solution.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval.",
                "But building an ontology manually is a slow, tedious, costly, complex and time consuming process.",
                "Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date.",
                "It would mean creating dynamic ontologies [10] and it justifies the emergence of ontology learning techniques [14] [13].",
                "Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts.",
                "Our aim is not to build an exhaustive, general hierarchical ontology but a domain specific one.",
                "We propose a semi-automated tool since an external resource is required: the ontologist.",
                "An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies.",
                "In the multi-agent field, ontologies generally enable agents to understand each other [12].",
                "Theyre sometimes used to ease the ontology building process, in particular for collaborative contexts [3], but they rarely represent the ontology itself [16].",
                "Most works interested in the construction of ontologies [7] propose the refinement of ontologies.",
                "This process consists in using an existing ontology and building a new one from it.",
                "This approach is different from our approach because Dynamo starts from scratch.",
                "Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5].",
                "In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist.",
                "This paper first presents, in section 2, the big picture of the Dynamo system.",
                "In particular the motives that led to its creation and its general architecture.",
                "Then, in section 3 we discuss the distributed clustering algorithm used in Dynamo and compare it to a more classic centralized approach.",
                "Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering.",
                "And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2.",
                "DYNAMO OVERVIEW 2.1 Ontology as a Multi-Agent System Dynamo aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently.",
                "The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system.",
                "This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network.",
                "Dynamo takes a syntactical and terminological analysis of texts as input.",
                "It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts.",
                "As output, Dynamo provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network.",
                "An ontology can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations.",
                "Thus, our approach considers an ontology as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships.",
                "The ontology modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships.",
                "In this way, a dynamic ontology is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it.",
                "To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9].",
                "We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system.",
                "It justifies how we designed some of the rules used by our agents in order to maximize the cooperation degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
                "It addresses the needs of Knowledge Engineering in the context of dynamic ontology management and maintenance when the ontology is linked to a document collection.",
                "The Dynamo system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ? ?",
                "Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for ontology building tasks [11].",
                "We mainly selected it because of its robustness and the great amount of information extracted.",
                "In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1].",
                "In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term.",
                "For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term.",
                "Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term.",
                "With Dynamo, the term network obtained as the output of the extractor is stored in a database.",
                "For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1].",
                "Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15].",
                "In the case of terms we are generally dealing with their usage contexts.",
                "With Syntex, those contexts are identified by terms and characterized by some syntactic relations.",
                "The Dynamo multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4.",
                "It is designed to be both the system producing the resulting structure and the structure itself.",
                "It means that each agent represent a class in the taxonomy.",
                "Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3.",
                "DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in Dynamo.",
                "For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system).",
                "Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined.",
                "Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements.",
                "This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done.",
                "Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones.",
                "Our distributed algorithm is designed relying on those two facts.",
                "It is executed concurrently in each of the agents of the system.",
                "Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15].",
                "Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity.",
                "We now present the distributed algorithm used in our system.",
                "It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent.",
                "Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy.",
                "Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree).",
                "Then it sends a message to its parent P indicating its most dissimilar brother (here A1).",
                "Then P receives the same kind of message from each of its children.",
                "In the following, this kind of message will be called a vote.",
                "Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3).",
                "Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers.",
                "In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1).",
                "Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent.",
                "Ak−1 Ak AnA2A1 P P ...... ......",
                "Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial.",
                "The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent.",
                "The hierarchy just created a new intermediate level.",
                "Note that this algorithm generally converges, since the number of brothers of an agent drops.",
                "When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children).",
                "However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A.",
                "With the current system no decision can be taken.",
                "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 Quantitative Evaluation Now, we evaluate the properties of our distributed algorithm.",
                "It requires to begin with a quantitative evaluation, based on its complexity, while comparing it with the algorithm 1 from the previous section.",
                "Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary.",
                "For the distributed algorithm, the worst case means that for each run, only a two-item group can be created.",
                "Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations.",
                "For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times.",
                "And its body has the only similarity computation, so its cost is l−i.",
                "The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 .",
                "Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers.",
                "So each steps has a l × (l − 1) cost.",
                "Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built).",
                "Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity.",
                "But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm.",
                "This gap comes from the local decision making in each agent.",
                "Because of this, the similarity computations are done twice for each agent pair.",
                "We could conceive that an agent sends its computation result to its peer.",
                "But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1.",
                "Distributed algorithm (on average, with min and max) 2.",
                "Logarithmic polynomial 3.",
                "Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments.",
                "The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms.",
                "The given value is the average of comparisons made for one hundred of runs without any user interaction.",
                "It results in the plots of figure 5.",
                "The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case.",
                "It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning.",
                "Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average.",
                "Finally, lets note the reduced variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section.",
                "All are advantages obtained thanks to the use of an adaptive multi-agent system.",
                "The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system.",
                "The ontologist can make modifications and the hierarchy adapts depending on the request.",
                "It is particularly interesting in a knowledge engineering context.",
                "Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation.",
                "During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal.",
                "It is extremely difficult to realize this with a centralized black-box approach.",
                "In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class.",
                "Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account.",
                "That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning.",
                "But, the ontologist can make a mistake, and become aware of it too late.",
                "Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus.",
                "By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization.",
                "It is clear that the concept described by the term lésion (lesion) is misplaced.",
                "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (hepatitis).",
                "This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria.",
                "Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent.",
                "The name ConceptAgent:X is automatically given to a concept agent that is not described by a term.",
                "The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11.",
                "The new stable state if the one of figure 7.",
                "This system-user coupling is necessary to build an ontology, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages.",
                "Moreover, this algorithm can de facto be distributed on a computer network.",
                "The communication between agents is then done by sending messages and each one keeps its decision autonomy.",
                "Then, a system modification to make it run networked would not require to adjust the algorithm.",
                "On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4.",
                "MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair.",
                "But, as soon as one uses real data this property is not verified anymore.",
                "Some terms do not have any similarity value with any extracted term.",
                "Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy.",
                "For this low level structuring, ontologists generally base The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics.",
                "Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation.",
                "Each agent can try to determine if its parent is adequate.",
                "It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network.",
                "In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX .",
                "Thanks to those two notations we can describe the parent adequacy function a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C).",
                "An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates.",
                "We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent.",
                "Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example.",
                "Figure 8 shows the state of the system after stabilization on test data.",
                "We can notice that hépatite viral (viral hepatitis) is still linked to the taxonomy root.",
                "It is caused by the fact that there is no similarity value between the viral hepatitis term and any of the term of the other concept agents.",
                "Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9.",
                "We can see that viral hepatitis slipped through the branch leading to hepatitis and chose it as its new parent.",
                "It is a sensible default choice since viral hepatitis is a more specific term than hepatitis.",
                "This rule tends to push agents described by a set of term to become leafs of the concept tree.",
                "It addresses our concern to improve the low level structuring of our taxonomy.",
                "But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch.",
                "That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time.",
                "The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy.",
                "It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time.",
                "The solution we chose came from the search for minimizing non cooperation within the system in accordance with the ADELFE method.",
                "Each agent computes three non cooperation degrees and chooses its current priority depending on which degree is the highest.",
                "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non cooperation degrees are: • μH (A) = 1 − a(P, A), is the head coverage non cooperation degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
                "Then, the non cooperation degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated.",
                "In this case, the metric used is the number of messages exchanged in the system.",
                "Once again the system has been executed with input data sets ranging from ten to one hundred terms.",
                "The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction.",
                "It results in the plots of figure 10.",
                "Curve number 1 represents the average of the value obtained.",
                "Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set.",
                "Curve number 3 represents the polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1.",
                "Dynamo, all rules (on average, with min and max) 2.",
                "Distributed clustering only (on average) 2.",
                "Cubic polynomial Figure 10: Experimental results on average.",
                "Moreover, lets note the very small variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system.",
                "Finally the extra head coverage rules are a real improvement on the distributed algorithm alone.",
                "They introduce more constraints and stability point is reached with less interactions and decision making by the agents.",
                "It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5.",
                "DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added.",
                "When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm.",
                "On the contrary, adding a new item after a first stabilization has an impact on the final result.",
                "Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system.",
                "By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization.",
                "Figure 12: Concept agent tree after taking in account hepatitis Then, the ontologist interacts with the system and adds a new concept described by the term hepatitis and linked to the root.",
                "The system reacts and stabilizes, we then obtain figure 12 as a result. hepatitis is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example.",
                "We need to improve our distributed algorithm to allow a concept to move along a branch.",
                "We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult.",
                "In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the Dynamo system.",
                "Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result.",
                "But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise.",
                "Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree.",
                "By looking at figure 7, it is clear that some pruning could be done in the taxonomy.",
                "In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore.",
                "Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form.",
                "In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged.",
                "Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf.",
                "As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root.",
                "Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6.",
                "CONCLUSION After being presented as a promising solution, ensuring <br>model quality</br> and their terminological richness, ontology building from textual corpus analysis is difficult and costly.",
                "It requires analyst supervising and taking in account the ontology aim.",
                "Using natural languages processing tools ease the knowledge localization in texts through language uses.",
                "That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements.",
                "Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result.",
                "We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts.",
                "Our system makes use of a terminological network resulting from an analysis made by Syntex.",
                "The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made.",
                "Performances of the system are interesting and some aspects are even comparable to their centralized counterpart.",
                "Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information.",
                "From the point of view of ontology building, this work is a first step showing the relevance of our approach.",
                "It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees.",
                "From this improvements we are mostly focusing on the pruning to obtain better taxonomies.",
                "Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm.",
                "In other words this algorithm introduces inThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a dynamic equilibrium.",
                "Also from the multi-agent engineering point of view, their use in a dynamic ontology context has shown its relevance.",
                "This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through cooperation has been an efficient solution.",
                "And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper.",
                "Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach.",
                "Were planning to work on such benchmarking in the near future. 7.",
                "REFERENCES [1] H. Assadi.",
                "Construction of a regional ontology from text and its use within a documentary system.",
                "Proceedings of the International Conference on Formal Ontology and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel.",
                "Text analysis for ontology and terminology engineering.",
                "Journal of Applied Ontology, 2005. [3] J. Bao and V. Honavar.",
                "Collaborative ontology building with wiki@nt.",
                "Proceedings of the Workshop on Evaluation of Ontology-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard.",
                "Agent-Oriented Methodologies, chapter 7.",
                "Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202.",
                "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks.",
                "Background and foreground knowledge in dynamic ontology construction.",
                "Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec.",
                "A corpus-based conceptual clustering method for verb frames and ontology acquisition.",
                "LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon.",
                "Ontology Engineering: a Survey and a Return on Experience.",
                "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize.",
                "Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize.",
                "A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems.",
                "Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler.",
                "Dynamic ontologies on the web.",
                "American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent.",
                "Terminology extraction from text to build an ontology in surgical intensive care.",
                "Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter.",
                "Reconciling Ontological Differences by Assistant Agents.",
                "AAMAS06, May 2006. [13] A. Maedche.",
                "Ontology learning for the Semantic Web.",
                "Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab.",
                "Mining Ontologies from Text.",
                "EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze.",
                "Foundations of Statistical Natural Language Processing.",
                "The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner.",
                "Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)"
            ],
            "original_annotated_samples": [
                "CONCLUSION After being presented as a promising solution, ensuring <br>model quality</br> and their terminological richness, ontology building from textual corpus analysis is difficult and costly."
            ],
            "translated_annotated_samples": [
                "CONCLUSIÓN Después de ser presentada como una solución prometedora, garantizar la <br>calidad del modelo</br> y su riqueza terminológica, la construcción de ontologías a partir del análisis de corpus textual es difícil y costosa."
            ],
            "translated_text": "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de ontologías a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías. Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una arquitectura multiagente adaptativa. En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque. Se evalúa y se compara con un algoritmo centralizado más convencional. También presentamos cómo ha sido mejorado utilizando un enfoque de múltiples criterios. Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de ontologías. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Experimentación 1. INTRODUCCIÓN En la actualidad, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de información. Pero construir una ontología manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo. Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados. Significaría crear ontologías dinámicas [10] y justifica la aparición de técnicas de aprendizaje de ontologías [14] [13]. Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una ontología a partir de un conjunto específico de textos de un dominio. Nuestro objetivo no es construir una ontología jerárquica exhaustiva y general, sino una específica para un dominio. Proponemos una herramienta semi-automatizada ya que se requiere un recurso externo: el ontólogo. Un ontólogo es una especie de ingeniero cognitivo, o analista, que utiliza información de textos y entrevistas con expertos para diseñar ontologías. En el campo de los agentes múltiples, las ontologías generalmente permiten que los agentes se entiendan entre sí [12]. A veces se utilizan para facilitar el proceso de construcción de la ontología, en particular en contextos colaborativos [3], pero rara vez representan la ontología en sí misma [16]. La mayoría de los trabajos interesados en la construcción de ontologías [7] proponen el refinamiento de las ontologías. Este proceso consiste en utilizar una ontología existente y construir una nueva a partir de ella. Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero. Los investigadores, que trabajan en la construcción de ontologías a partir de textos, afirman que el trabajo a automatizar requiere recursos externos como un diccionario [14] o acceso a la web [5]. En nuestro trabajo, proponemos una interacción entre el ontólogo y el sistema, nuestro recurso externo radica tanto en los textos como en el ontólogo. Este documento primero presenta, en la sección 2, la visión general del sistema Dynamo. En particular, los motivos que llevaron a su creación y su arquitectura general. Luego, en la sección 3 discutimos el algoritmo de clustering distribuido utilizado en Dynamo y lo comparamos con un enfoque más clásico y centralizado. La sección 4 está dedicada a mejorar el comportamiento de los agentes que fue diseñado teniendo en cuenta criterios ignorados por el agrupamiento. Y finalmente, en la sección 5, discutimos las limitaciones de nuestro enfoque y explicamos cómo se abordarán en trabajos futuros. DYNAMO RESUMEN 2.1 Ontología como un Sistema Multiagente Dynamo tiene como objetivo reducir la necesidad de acciones manuales en el procesamiento de los resultados del análisis de texto y sugerir un inicio de red conceptual para construir ontologías de manera más eficiente. El enfoque elegido es completamente original en nuestro conocimiento y utiliza un sistema multiagente adaptativo. Esta elección se basa en las cualidades ofrecidas por el sistema multiagente: pueden facilitar el diseño interactivo de un sistema (en nuestro caso, una red conceptual), permiten su construcción incremental al tener en cuenta progresivamente nuevos datos (provenientes del análisis de texto y la interacción del usuario) y, por último pero no menos importante, pueden distribuirse fácilmente a través de una red informática. Dynamo realiza un análisis sintáctico y terminológico de textos como entrada. Utiliza varios criterios basados en estadísticas calculadas a partir de los contextos lingüísticos de los términos para crear y posicionar los conceptos. Como resultado, Dynamo proporciona al analista una organización jerárquica de conceptos (el sistema multiagente en sí mismo) que puede ser validada, refinada o modificada, hasta que obtenga un estado satisfactorio de la red semántica. Una ontología puede ser vista como un mapa estable constituido por entidades conceptuales, representadas aquí por agentes, vinculadas por relaciones etiquetadas. Por lo tanto, nuestro enfoque considera una ontología como un tipo de equilibrio entre sus concepto-agentes, donde sus fuerzas están definidas por sus relaciones potenciales. La modificación de la ontología es una perturbación del equilibrio previo por la aparición o desaparición de agentes o relaciones. De esta manera, una ontología dinámica es un proceso de autoorganización que ocurre cuando se incluyen nuevos textos en el corpus, o cuando el ontólogo interactúa con él. Para apoyar la flexibilidad necesaria de dicho sistema, utilizamos un sistema multiagente autoorganizado basado en un enfoque cooperativo [9]. Seguimos el método ADELFE [4] propuesto para guiar el diseño de este tipo de sistema multiagente. Se justifica cómo diseñamos algunas de las reglas utilizadas por nuestros agentes para maximizar el grado de cooperación dentro del sistema multiagente de Dynamos. 2.2 Arquitectura Propuesta En esta sección, presentamos nuestra arquitectura del sistema. Aborda las necesidades de la Ingeniería del Conocimiento en el contexto de la gestión y mantenimiento dinámico de ontologías cuando la ontología está vinculada a una colección de documentos. El sistema Dynamo consta de tres partes (cf. figura 1): • una red de términos, obtenida gracias a una herramienta de extracción de términos utilizada para preprocesar el corpus textual, • un sistema multiagente que utiliza la red de términos para realizar un agrupamiento jerárquico con el fin de obtener una taxonomía de conceptos, • una interfaz que permite al ontólogo visualizar y controlar el proceso de agrupamiento. El extractor de términos que utilizamos es Syntex, un software que ha sido utilizado eficientemente para tareas de construcción de ontologías [11]. Principalmente lo seleccionamos por su robustez y la gran cantidad de información extraída. En particular, crea una red de Expansión de Cabeza que ya ha demostrado ser interesante para un sistema de agrupamiento [1]. En una red de este tipo, cada término está vinculado a su término principal y, es decir, a la subfrase máxima ubicada como término principal de su término de expansión, y también a todos los términos para los cuales es un término principal o un término de expansión. Por ejemplo, la ingeniería del conocimiento a partir de texto tiene como término principal la ingeniería del conocimiento y como término de expansión el texto. Además, la ingeniería del conocimiento se compone del conocimiento como término principal y la ingeniería como término de expansión. Con Dynamo, el término de red obtenido como resultado del extractor se almacena en una base de datos. Para cada par de términos, asumimos que es posible calcular un valor de similitud para realizar un agrupamiento [6] [1]. Debido a la naturaleza de los datos, nos estamos enfocando únicamente en la computación de similitud entre objetos descritos gracias a variables binarias, lo que significa que cada elemento está descrito por la presencia o ausencia de un conjunto de características [15]. En el caso de los términos, generalmente estamos tratando con sus contextos de uso. Con Syntex, esos contextos son identificados por términos y caracterizados por algunas relaciones sintácticas. El sistema multiagente Dynamo implementa el algoritmo de clustering distribuido descrito en detalle en la sección 3 y las reglas descritas en la sección 4. Está diseñado para ser tanto el sistema que produce la estructura resultante como la estructura en sí misma. Significa que cada agente representa una clase en la taxonomía. Entonces, la salida del sistema es la organización obtenida a partir de la interacción entre agentes, teniendo en cuenta la retroalimentación proveniente del ontólogo cuando modifica la taxonomía dada sus necesidades o experiencia. CLUSTERING DISTRIBUIDO Esta sección presenta el algoritmo de clustering distribuido utilizado en Dynamo. Por el bien de la comprensión, y debido a su evaluación en la sección 3.1, recordamos el algoritmo centralizado básico utilizado para un agrupamiento jerárquico ascendente en un espacio no métrico, cuando se dispone de una medida de similitud simétrica [15] (que es el caso de las medidas utilizadas en nuestro sistema). Algoritmo 1: Algoritmo de agrupamiento jerárquico ascendente centralizado Datos: Lista L de elementos para organizar como una jerarquía Resultado: Raíz R de la jerarquía mientras longitud(L) > 1 hacer max ← 0; A ← nil; B ← nil; para i ← 1 a longitud(L) hacer I ← L[i]; para j ← i + 1 a longitud(L) hacer J ← L[j]; sim ← similitud(I, J); si sim > max entonces max ← sim; A ← I; B ← J; fin si fin para fin para quitar(A, L); quitar(B, L); agregar((A, B), L); fin mientras R ← L[1]; En el algoritmo 1, para cada paso de agrupamiento, se determina el par de elementos más similares. Esos dos elementos están agrupados en un conjunto, y la clase resultante se añade a la lista de elementos restantes. Este algoritmo se detiene cuando la lista tiene solo un elemento restante. 2 es decir, la subfrase máxima ubicada como cola del término The Sixth Intl. La jerarquía resultante del algoritmo 1 siempre es un árbol binario debido a la forma en que se realiza el agrupamiento. Además, agrupar los elementos más similares es equivalente a alejarlos de los menos similares. Nuestro algoritmo distribuido está diseñado basándose en esos dos hechos. Se ejecuta de forma simultánea en cada uno de los agentes del sistema. Cabe destacar que, en lo que sigue de este artículo, utilizamos para ambos algoritmos una similitud de Anderberg (con α = 0.75) y una estrategia de agrupamiento de enlace promedio [15]. Esas decisiones tienen un impacto en el árbol resultante, pero no afectan ni la ejecución global del algoritmo ni su complejidad. Ahora presentamos el algoritmo distribuido utilizado en nuestro sistema. Se inicia de la siguiente manera: • se crea un agente TOP que no tiene padre, será la raíz de la taxonomía resultante, • se crea un agente para cada término que se va a posicionar en la taxonomía, todos tienen como padre a TOP. Una vez que se establece esta estructura básica, el algoritmo se ejecuta hasta que alcanza el equilibrio y luego proporciona la taxonomía resultante. El proceso de la primera etapa (figura 2) se activa cuando un agente (aquí Ak) tiene más de un hermano (ya que queremos obtener un árbol binario). Luego envía un mensaje a su padre P indicando a su hermano más diferente (aquí A1). Entonces P recibe el mismo tipo de mensaje de cada uno de sus hijos. En lo siguiente, este tipo de mensaje se llamará voto. A continuación, cuando P ha recibido mensajes de todos sus hijos, comienza el segundo paso (figura 3). Gracias a los mensajes recibidos que indican las preferencias de sus hijos, P puede determinar tres subgrupos entre sus hijos: el hijo que recibió más votos de sus hermanos, es decir, el hijo que es más diferente del mayor número de sus hermanos. En caso de empate, uno de los ganadores es elegido al azar (aquí A1), los niños que permitieron la elección del primer grupo, es decir, los agentes que eligieron a su hermano del primer grupo como el más diferente (aquí Ak a An), los niños restantes (aquí A2 a Ak−1). Entonces P crea un nuevo agente P (teniendo a P como padre) y pide a los agentes del segundo grupo (aquí los agentes Ak a An) que lo elijan como su nuevo padre. Ak−1 Ak AnA2A1 P P ...... ...... \n\nAk−1 Ak AnA2A1 P P ...... ...... Figura 4: Agrupamiento distribuido: Paso 3 Finalmente, el paso 3 (figura 4) es trivial. Los niños rechazados por P (aquí el agente A2 a An) tienen en cuenta su mensaje y eligen a P como su nuevo padre. La jerarquía acaba de crear un nuevo nivel intermedio. Ten en cuenta que este algoritmo generalmente converge, ya que el número de hermanos de un agente disminuye. Cuando un agente tiene solamente un hermano restante, su actividad se detiene (aunque sigue procesando los mensajes que llegan de sus hijos). Sin embargo, en algunos casos podemos llegar a un conflicto circular en el procedimiento de votación cuando, por ejemplo, A vota en contra de B, B en contra de C y C en contra de A. Con el sistema actual no se puede tomar ninguna decisión. El procedimiento actual debería mejorarse para abordar esto, probablemente utilizando un método de votación clasificado. 3.1 Evaluación Cuantitativa Ahora, evaluamos las propiedades de nuestro algoritmo distribuido. Se requiere comenzar con una evaluación cuantitativa, basada en su complejidad, mientras se compara con el algoritmo 1 de la sección anterior. Su complejidad teórica se calcula para el peor caso, considerando la operación de cálculo de similitud como elemental. Para el algoritmo distribuido, el peor caso significa que en cada ejecución, solo se puede crear un grupo de dos elementos. Bajo esas condiciones, para un conjunto de datos dado de n elementos, podemos determinar la cantidad de cálculos de similitud. Para el algoritmo 1, notamos que l = longitud(L), luego el bucle más interno se ejecuta l - i veces. Y su cuerpo tiene la única computación de similitud, por lo que su costo es l−i. El segundo bucle for se ejecuta l veces para i que varía de 1 a l. Entonces su costo es Pl i=1(l − i) que puede simplificarse en l×(l−1) 2. Finalmente, para cada ejecución del bucle while, l se reduce de n a 1, lo que nos da t1(n) como la cantidad de cálculos de similitud para el algoritmo 1: t1(n) = nX l=1 l × (l − 1) 2 (1) Para el algoritmo distribuido, en un paso dado, cada uno de los l agentes evalúa la similitud con sus l −1 compañeros. Entonces, cada paso tiene un costo de l × (l − 1). Entonces, se crean grupos y se realiza otra votación con l disminuido en uno (ya que asumimos el peor caso, solo se forman grupos de tamaño 2 o l −1). Dado que l es igual a n en la primera ejecución, obtenemos tdist(n) como la cantidad de cálculos de similitud para el algoritmo distribuido: tdist(n) = nX l=1 l × (l − 1) (2) Ambos algoritmos tienen una complejidad O(n3). Pero en el peor de los casos, el algoritmo distribuido realiza el doble del número de el1288 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) operaciones elementales realizadas por el algoritmo centralizado. Esta brecha proviene de la toma de decisiones local en cada agente. Debido a esto, los cálculos de similitud se realizan dos veces para cada par de agentes. Podríamos concebir que un agente envía el resultado de su cálculo a su par. Sin embargo, simplemente trasladaría el problema al generar más comunicación en el sistema. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Cantidad de comparaciones Cantidad de términos de entrada 1. Algoritmo distribuido (en promedio, con mínimo y máximo) 2. Polinomio logarítmico 3. En la Figura 5 se muestra el algoritmo centralizado: Resultados experimentales. En un segundo paso, la complejidad promedio del algoritmo ha sido determinada mediante experimentos. El sistema multiagente ha sido ejecutado con conjuntos de datos de entrada generados aleatoriamente que van desde diez hasta cien términos. El valor dado es el promedio de las comparaciones realizadas para cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 5. El algoritmo es entonces más eficiente en promedio que el algoritmo centralizado, y su complejidad promedio está por debajo del peor caso. Se puede explicar por la baja probabilidad de que un conjunto de datos obligue al sistema a crear solo grupos mínimos (dos elementos) o máximos (n − 1 elementos) para cada paso de razonamiento. La curva número 2 representa el polinomio logarítmico que minimiza el error con respecto a la curva número 1. El término de mayor grado de este polinomio es n2 log(n), por lo tanto, nuestro algoritmo distribuido tiene una complejidad O(n2 log(n)) en promedio. Finalmente, notemos la reducida variación de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 1,960.75 para un promedio de 40,550.10 (alrededor del 5%), lo que muestra la buena estabilidad del sistema. Aunque los resultados cuantitativos son interesantes, la verdadera ventaja de este enfoque proviene de características más cualitativas que presentaremos en esta sección. Todos son ventajas obtenidas gracias al uso de un sistema multiagente adaptativo. La principal ventaja del uso de un sistema multiagente para una tarea de agrupamiento es introducir dinamismo en dicho sistema. El ontólogo puede hacer modificaciones y la jerarquía se adapta dependiendo de la solicitud. Es particularmente interesante en un contexto de ingeniería del conocimiento. De hecho, la jerarquía creada por el sistema está destinada a ser modificada por el ontólogo ya que es el resultado de un cálculo estadístico. Durante la revisión necesaria de los textos para examinar los contextos de uso de los términos [2], el ontólogo podrá interpretar el contenido real y revisar la propuesta del sistema. Es extremadamente difícil lograr esto con un enfoque centralizado de caja negra. En la mayoría de los casos, uno tiene que encontrar qué paso de razonamiento generó el error y modificar manualmente la clase resultante. Desafortunadamente, en este caso, todos los pasos de razonamiento que ocurrieron después de la creación de la clase modificada se pierden y deben ser recalculados teniendo en cuenta la modificación. Por eso, un sistema como ASIUM [6] intenta suavizar el problema con una colaboración entre el sistema y el usuario mostrando al ontólogo las clases creadas después de cada paso de razonamiento. Pero el ontólogo puede cometer un error y darse cuenta de ello demasiado tarde. Figura 6: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos un ejemplo gracias a algunas capturas de pantalla del prototipo en funcionamiento probado en un corpus relacionado con la medicina. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 6 después de la estabilización. Es evidente que el concepto descrito por el término lesión está mal ubicado. Las computaciones de similitud lo sitúan más cerca de femme (mujer) y chirurgien (cirujano) que de infección, gastro-enteritis y hepatitis. Esta posición incorrecta para la lesión se explica por el hecho de que sin la entrada del ontólogo, el razonamiento se basa únicamente en criterios estadísticos. Figura 7: Árbol de agentes conceptuales después de la modificación del ontólogo. Luego, el ontólogo reemplaza el concepto en la rama derecha, afectando a ConceptAgent:8 como su nuevo padre. El nombre ConceptAgent:X se asigna automáticamente a un agente conceptual que no está descrito por un término. El sistema reacciona por sí mismo y perfecciona la jerarquía de agrupación para obtener un árbol binario creando ConceptAgent:11. El nuevo estado estable es el de la figura 7. Este acoplamiento sistema-usuario es necesario para construir una ontología, pero no se necesita ningún ajuste particular al principio del algoritmo distribuido ya que cada agente realiza un procesamiento local autónomo y se comunica con su vecindario a través de mensajes. Además, este algoritmo puede ser distribuido de facto en una red de computadoras. La comunicación entre agentes se realiza enviando mensajes y cada uno mantiene su autonomía de decisión. Entonces, una modificación del sistema para hacerlo funcionar en red no requeriría ajustar el algoritmo. Por el contrario, solo sería necesario reestructurar la capa de comunicación y el proceso de creación de agentes, ya que en nuestra implementación actual no están en red. 4. EN LA JERARQUÍA DE MÚLTIPLES CRITERIOS En las secciones anteriores, asumimos que la similitud se puede calcular para cualquier par de términos. Pero, tan pronto como se utilizan datos reales, esta propiedad ya no se verifica. Algunos términos no tienen ningún valor de similitud con ningún término extraído. Además, para los nodos hoja a veces es interesante utilizar otros medios para posicionarlos en la jerarquía. Para esta estructuración de bajo nivel, los ontólogos generalmente se basan en The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1289 sus elecciones en heurísticas simples. Usando esta observación, construimos un nuevo conjunto de reglas, que no se basan en la similitud para respaldar la estructuración de bajo nivel. 4.1 Agregar reglas de cobertura de cabeza En este caso, los agentes pueden actuar con un punto de vista muy local simplemente mirando la relación padre/hijo. Cada agente puede intentar determinar si su padre es adecuado. Es posible adivinar esto porque cada agente conceptual está descrito por un conjunto de términos y gracias a la red de términos de Expansión de Cabeza. En el siguiente TX será el conjunto de términos que describen el concepto del agente X y head(TX) el conjunto de todos los términos que son cabeza de al menos un elemento de TX. Gracias a esas dos notaciones podemos describir la función de adecuación entre un padre P y un hijo C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Entonces, el mejor padre para C es el agente P que maximiza a(P, C). Un agente insatisfecho con su padre puede intentar encontrar uno mejor evaluando la idoneidad de los candidatos. Diseñamos un algoritmo complementario para dirigir esta búsqueda: cuando un agente C no está satisfecho con su padre P, evalúa a(Bi, C) con todos sus hermanos (notados Bi); luego se elige como nuevo padre aquel que maximice a(Bi, C). Figura 8: Árbol de agentes conceptuales después de la estabilización autónoma del sistema sin la regla de cobertura de cabeza. Ahora ilustramos este comportamiento de regla con un ejemplo. La Figura 8 muestra el estado del sistema después de la estabilización en los datos de prueba. Podemos notar que la hepatitis viral todavía está vinculada a la raíz taxonómica. Se debe al hecho de que no hay valor de similitud entre el término hepatitis viral y ninguno de los términos de los otros agentes conceptuales. Figura 9: Árbol de agentes conceptuales después de la activación de la regla de cobertura de la cabeza. Tras activar la regla de cobertura de la cabeza y permitir que el sistema se estabilice nuevamente, obtenemos la figura 9. Podemos ver que la hepatitis viral se deslizó a través de la rama que llevaba a la hepatitis y la eligió como su nueva progenitora. Es una elección por defecto sensata, ya que la hepatitis viral es un término más específico que la hepatitis. Esta regla tiende a hacer que los agentes descritos por un conjunto de términos se conviertan en hojas del árbol conceptual. Aborda nuestra preocupación por mejorar la estructuración de bajo nivel de nuestra taxonomía. Pero obviamente nuestros agentes carecen de un método para retroceder en caso de modificaciones en la taxonomía que los ubicarían en la rama incorrecta. Ese es uno de los puntos en los que nuestro sistema aún debe ser mejorado al agregar otro conjunto de reglas. 4.2 Sobre el uso de varios criterios En las secciones y ejemplos anteriores, solo utilizamos un algoritmo a la vez. El algoritmo de agrupamiento distribuido tiende a introducir nuevas capas en la taxonomía, mientras que el algoritmo de cobertura de cabeza tiende a empujar algunos de los agentes hacia las hojas de la taxonomía. Obviamente plantea la pregunta sobre cómo lidiar con múltiples criterios en la construcción de nuestra taxonomía, y cómo los agentes determinan sus prioridades en un momento dado. La solución que elegimos proviene de la búsqueda de minimizar la falta de cooperación dentro del sistema de acuerdo con el método ADELFE. Cada agente calcula tres grados de no cooperación y elige su prioridad actual dependiendo de cuál grado sea el más alto. Para un agente A dado que tiene un padre P, un conjunto de hermanos Bi y que recibió un conjunto de mensajes Mk con prioridad pk, los tres grados de no cooperación son: • μH (A) = 1 − a(P, A), es el grado de no cooperación de cobertura de cabeza, determinado por la cobertura de cabeza del padre, • μB(A) = max(1 − similitud(A, Bi)), es el grado de no cooperación de hermandad, determinado por el peor hermano de A en cuanto a similitudes, • μM (A) = max(pk), es el grado de no cooperación de mensaje, determinado por el mensaje más urgente recibido. Entonces, el grado de no cooperación μ(A) del agente A es: μ(A) = max(μH (A), μB(A), μM (A)) (4) Luego, tenemos tres casos que determinan qué tipo de acción elegirá A: • si μ(A) = μH (A) entonces A utilizará el algoritmo de cobertura de cabeza que detallamos en la subsección anterior • si μ(A) = μB(A) entonces A utilizará el algoritmo de agrupamiento distribuido (ver sección 3) • si μ(A) = μM (A) entonces A procesará Mk inmediatamente para ayudar a su remitente Estos tres casos resumen las actividades actuales de nuestros agentes: tienen que encontrar el mejor padre para ellos (μ(A) = μH (A)), mejorar la estructuración a través del agrupamiento (μ(A) = μB(A)) y procesar otros mensajes de agentes (μ(A) = μM (A)) para ayudarlos a cumplir sus propios objetivos. 4.3 Complejidad Experimental Revisitada Evaluamos la complejidad experimental de todo el sistema multiagente cuando todas las reglas están activadas. En este caso, la métrica utilizada es el número de mensajes intercambiados en el sistema. Una vez más, el sistema ha sido ejecutado con conjuntos de datos de entrada que van desde diez hasta cien términos. El valor dado es el promedio del número de mensajes enviados en el sistema en su totalidad durante cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 10. La curva número 1 representa el promedio del valor obtenido. La curva número 2 representa el promedio del valor obtenido cuando solo se activa el algoritmo de agrupamiento distribuido, no el conjunto completo de reglas. La curva número 3 representa el polinomio que minimiza el error con la curva número 1. El término de mayor grado de este polinomio es en n3, entonces nuestro sistema multiagente tiene una complejidad O(n3). Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Cantidad de mensajes Cantidad de términos de entrada 1. Dinamo, todas las reglas (en promedio, con mínimo y máximo) 2. Agrupamiento distribuido solo (en promedio) 2. Figura 10: Resultados experimentales en promedio de un polinomio cúbico. Además, notemos la variación muy pequeña de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 126.73 para un promedio de 20,737.03 (alrededor del 0.6%), lo que demuestra la excelente estabilidad del sistema. Finalmente, las reglas adicionales de cobertura de cabeza son una verdadera mejora sobre el algoritmo distribuido por sí solo. Introducen más restricciones y se alcanza el punto de estabilidad con menos interacciones y toma de decisiones por parte de los agentes. Significa que se intercambian menos mensajes en el sistema al obtener un árbol de mayor calidad para el ontólogo. 5. DISCUSIÓN Y PERSPECTIVAS 5.1 Limitación actual de nuestro enfoque La limitación más importante de nuestro algoritmo actual es que el resultado depende del orden en que se agregan los datos. Cuando el sistema funciona por sí solo en un conjunto de datos fijo proporcionado durante la inicialización, el resultado final es equivalente a lo que podríamos obtener con un algoritmo centralizado. Por el contrario, añadir un nuevo elemento después de una primera estabilización tiene un impacto en el resultado final. Figura 11: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos otro ejemplo del sistema en funcionamiento. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 11 después de la estabilización. Figura 12: Árbol de agentes conceptuales después de tener en cuenta la hepatitis. Luego, el ontólogo interactúa con el sistema y agrega un nuevo concepto descrito por el término hepatitis y vinculado a la raíz. El sistema reacciona y se estabiliza, luego obtenemos la figura 12 como resultado. La hepatitis se encuentra en la rama derecha, pero no hemos obtenido la misma organización que la figura 6 del ejemplo anterior. Necesitamos mejorar nuestro algoritmo distribuido para permitir que un concepto se mueva a lo largo de una rama. Actualmente estamos trabajando en las reglas requeridas, pero la comparación con el algoritmo centralizado se volverá muy difícil. En particular, ya que tendrán en cuenta criterios ignorados por el algoritmo centralizado. 5.2 Poda para la construcción de ontologías En la sección 3, presentamos el algoritmo de agrupamiento distribuido utilizado en el sistema Dynamo. Dado que este trabajo se basó inicialmente en este algoritmo, introdujo un claro sesgo hacia los árboles binarios como resultado. Pero debemos tener en cuenta que estamos tratando de obtener taxonomías que sean más refinadas y concisas. Aunque la regla de cobertura de la cabeza es una mejora porque se basa en cómo generalmente trabajan los ontólogos, solo aborda la estructuración a un nivel bajo y no a los niveles intermedios del árbol. Al observar la figura 7, es evidente que se podría realizar una poda en la taxonomía. En particular, dado que la lesión se movió, el ConceptAgent:9 podría ser eliminado, ya no es necesario. Además, la rama que comienza con ConceptAgent:8 respeta claramente la restricción de formar un árbol binario, pero sería más útil para el usuario en una forma más compacta y significativa. En este caso, ConceptAgent:10 y ConceptAgent:11 probablemente podrían fusionarse. Actualmente, nuestro sistema cuenta con las reglas necesarias para crear niveles intermedios en la taxonomía, o para que los conceptos se desplacen hacia la hoja. Como señalamos, no es suficiente, por lo que se necesitan nuevas reglas para permitir eliminar nodos del árbol o moverlos hacia la raíz. La mayor parte del trabajo necesario para desarrollar esas reglas consiste en encontrar la información estadística relevante que respaldará al ontólogo. CONCLUSIÓN Después de ser presentada como una solución prometedora, garantizar la <br>calidad del modelo</br> y su riqueza terminológica, la construcción de ontologías a partir del análisis de corpus textual es difícil y costosa. Requiere supervisión del analista y tener en cuenta el objetivo de la ontología. El uso de herramientas de procesamiento de lenguaje natural facilita la localización del conocimiento en textos a través del uso del lenguaje. Dicho esto, esas herramientas producen una gran cantidad de datos léxicos o gramaticales que no son triviales de examinar para definir elementos conceptuales. Nuestra contribución radica en este paso del proceso de modelado a partir de textos, antes de intentar normalizar o formalizar el resultado. Propusimos un enfoque basado en un sistema multiagente adaptativo para proporcionar al ontólogo una primera estructura taxonómica de conceptos. Nuestro sistema hace uso de una red terminológica resultante de un análisis realizado por Syntex. El estado actual de nuestro software permite producir estructuras simples, proponérselas al ontólogo y hacerlas evolucionar dependiendo de las modificaciones que él realice. Las actuaciones del sistema son interesantes y algunos aspectos son incluso comparables a su contraparte centralizada. Sus fortalezas son principalmente cualitativas ya que permite interacciones de usuario más sutiles y una adaptación progresiva a nueva información basada en el lenguaje. Desde el punto de vista de la construcción de la ontología, este trabajo es un primer paso que muestra la relevancia de nuestro enfoque. Debe continuar, tanto para garantizar una mejor robustez durante la clasificación, como para obtener estructuras semánticas más ricas que simples árboles. De estas mejoras, nos estamos enfocando principalmente en la poda para obtener mejores taxonomías. Actualmente estamos trabajando en el criterio para activar las acciones complementarias de los cambios de estructura aplicados por nuestro algoritmo de agrupamiento. En otras palabras, este algoritmo se introduce en el Sexto Congreso Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1291 niveles intermedios, y necesitamos poder eliminarlos si es necesario, para alcanzar un equilibrio dinámico. También desde el punto de vista de la ingeniería multiagente, su uso en un contexto de ontología dinámica ha demostrado su relevancia. Estas ontologías dinámicas pueden ser vistas como una resolución de problemas complejos, en tal caso la autoorganización a través de la cooperación ha sido una solución eficiente. Y, en general, es probable que sea interesante para otras tareas relacionadas con el diseño, incluso si nos estamos enfocando únicamente en la ingeniería del conocimiento en este artículo. Por supuesto, nuestro sistema aún requiere más trabajo de evaluación y validación para determinar con precisión las ventajas y desventajas de este enfoque. Estamos planeando trabajar en ese tipo de comparación en un futuro cercano. 7. REFERENCIAS [1] H. Assadi. Construcción de una ontología regional a partir de texto y su uso dentro de un sistema documental. Actas de la Conferencia Internacional sobre Ontología Formal y Sistemas de Información - FOIS98, páginas 236-249, 1998. [2] N. Aussenac-Gilles y D. Sörgel. Análisis de texto para ingeniería de ontologías y terminología. Revista de Ontología Aplicada, 2005. [3] J. Bao y V. Honavar. Construcción colaborativa de ontologías con wiki@nt. Actas del Taller de Evaluación de Herramientas Basadas en Ontologías (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes y G. Picard. Metodologías Orientadas a Agentes, capítulo 7. Ingeniería de Sistemas Multiagente Autoadaptativos: la Metodología ADELFE, páginas 172-202. Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna y Y. Wilks. Antecedentes y conocimiento previo en la construcción dinámica de ontologías. Taller de la Web Semántica, SIGIR03, agosto de 2003. [6] D. Faure y C. Nedellec. Un método de agrupamiento conceptual basado en corpus para marcos verbales y adquisición de ontologías. Taller LREC sobre la adaptación de recursos léxicos y corpus a sublenguajes y aplicaciones, 1998. [7] F. Gandon. Ingeniería de Ontologías: una Encuesta y un Retorno de Experiencia. INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes y P. Glize. Diseño Vivo para Sistemas Computacionales Abiertos. 12º Talleres Internacionales de la IEEE sobre Tecnologías Habilitadoras, Infraestructura para Empresas Colaborativas, páginas 389-394, junio de 2003. [9] M.-P. Gleizes, V. Camps y P. Glize. Una teoría de computación emergente basada en la autoorganización cooperativa para sistemas artificiales adaptativos. Cuarto Congreso Europeo de Ciencias de los Sistemas, septiembre de 1999. [10] J. Heflin y J. Hendler. Ontologías dinámicas en la web. Conferencia de la Asociación Americana de Inteligencia Artificial, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault y M.-C. Jaulent. Extracción de terminología del texto para construir una ontología en cuidados intensivos quirúrgicos. Actas del simposio anual de la AMIA 2002, 2002. [12] K. Lister, L. Sterling y K. Taveter. Reconciliando diferencias ontológicas mediante agentes asistentes. AAMAS06, mayo de 2006. [13] A. Maedche. Aprendizaje de ontologías para la Web Semántica. Editorial Kluwer Academic, 2002. [14] A. Maedche y S. Staab. Extracción de ontologías a partir de texto. EKAW 2000, páginas 189-202, 2000. [15] C. D. Manning y H. Schütze. Fundamentos del Procesamiento del Lenguaje Natural Estadístico. El MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding y S. Brueckner. Clustering jerárquico descentralizado dinámico en cualquier momento. 29ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, agosto de 2006. 1292 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "dynamic equilibrium": {
            "translated_key": "equilibrio dinámico",
            "is_in_text": true,
            "original_annotated_sentences": [
                "A Multi-Agent System for Building Dynamic Ontologies Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr ABSTRACT Ontologies building from text is still a time-consuming task which justifies the growth of Ontology Learning.",
                "Our system named Dynamo is designed along this domain but following an original approach based on an adaptive multi-agent architecture.",
                "In this paper we present a distributed hierarchical clustering algorithm, core of our approach.",
                "It is evaluated and compared to a more conventional centralized algorithm.",
                "We also present how it has been improved using a multi-criteria approach.",
                "With those results in mind, we discuss the limits of our system and add as perspectives the modifications required to reach a complete ontology building solution.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMultiagent Systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Nowadays, it is well established that ontologies are needed for semantic web, knowledge management, B2B... For knowledge management, ontologies are used to annotate documents and to enhance the information retrieval.",
                "But building an ontology manually is a slow, tedious, costly, complex and time consuming process.",
                "Currently, a real challenge lies in building them automatically or semi-automatically and keeping them up to date.",
                "It would mean creating dynamic ontologies [10] and it justifies the emergence of ontology learning techniques [14] [13].",
                "Our research focuses on Dynamo (an acronym of DYNAMic Ontologies), a tool based on an adaptive multi-agent system to construct and maintain an ontology from a domain specific set of texts.",
                "Our aim is not to build an exhaustive, general hierarchical ontology but a domain specific one.",
                "We propose a semi-automated tool since an external resource is required: the ontologist.",
                "An ontologist is a kind of cognitive engineer, or analyst, who is using information from texts and expert interviews to design ontologies.",
                "In the multi-agent field, ontologies generally enable agents to understand each other [12].",
                "Theyre sometimes used to ease the ontology building process, in particular for collaborative contexts [3], but they rarely represent the ontology itself [16].",
                "Most works interested in the construction of ontologies [7] propose the refinement of ontologies.",
                "This process consists in using an existing ontology and building a new one from it.",
                "This approach is different from our approach because Dynamo starts from scratch.",
                "Researchers, working on the construction of ontologies from texts, claim that the work to be automated requires external resources such as a dictionary [14], or web access [5].",
                "In our work, we propose an interaction between the ontologist and the system, our external resource lies both in the texts and the ontologist.",
                "This paper first presents, in section 2, the big picture of the Dynamo system.",
                "In particular the motives that led to its creation and its general architecture.",
                "Then, in section 3 we discuss the distributed clustering algorithm used in Dynamo and compare it to a more classic centralized approach.",
                "Section 4 is dedicated to some enhancement of the agents behavior that got designed by taking into account criteria ignored by clustering.",
                "And finally, in section 5, we discuss the limitations of our approach and explain how it will be addressed in further work. 2.",
                "DYNAMO OVERVIEW 2.1 Ontology as a Multi-Agent System Dynamo aims at reducing the need for manual actions in processing the text analysis results and at suggesting a concept network kick-off in order to build ontologies more efficiently.",
                "The chosen approach is completely original to our knowledge and uses an adaptive multi-agent system.",
                "This choice comes from the qualities offered by multi-agent system: they can ease the interactive design of a system [8] (in our case, a conceptual network), they allow its incremental building by progressively taking into account new data (coming from text analysis and user interaction), and last but not least they can be easily distributed across a computer network.",
                "Dynamo takes a syntactical and terminological analysis of texts as input.",
                "It uses several criteria based on statistics computed from the linguistic contexts of terms to create and position the concepts.",
                "As output, Dynamo provides to the analyst a hierarchical organization of concepts (the multi-agent system itself) that can be validated, refined of modified, until he/she obtains a satisfying state of 1286 978-81-904262-7-5 (RPS) c 2007 IFAAMAS the semantic network.",
                "An ontology can be seen as a stable map constituted of conceptual entities, represented here by agents, linked by labelled relations.",
                "Thus, our approach considers an ontology as a type of equilibrium between its concept-agents where their forces are defined by their potential relationships.",
                "The ontology modification is a perturbation of the previous equilibrium by the appearance or disappearance of agents or relationships.",
                "In this way, a dynamic ontology is a self-organizing process occurring when new texts are included into the corpus, or when the ontologist interacts with it.",
                "To support the needed flexibility of such a system we use a selforganizing multi-agent system based on a cooperative approach [9].",
                "We followed the ADELFE method [4] proposed to drive the design of this kind of multi-agent system.",
                "It justifies how we designed some of the rules used by our agents in order to maximize the cooperation degree within Dynamos multi-agent system. 2.2 Proposed Architecture In this section, we present our system architecture.",
                "It addresses the needs of Knowledge Engineering in the context of dynamic ontology management and maintenance when the ontology is linked to a document collection.",
                "The Dynamo system consists of three parts (cf. figure 1): • a term network, obtained thanks to a term extraction tool used to preprocess the textual corpus, • a multi-agent system which uses the term network to make a hierarchical clustering in order to obtain a taxonomy of concepts, • an interface allowing the ontologist to visualize and control the clustering process. ? ?",
                "Ontologist Interface System Concept Agent Term Term network Terms Extraction Tool Figure 1: System architecture The term extractor we use is Syntex, a software that has efficiently been used for ontology building tasks [11].",
                "We mainly selected it because of its robustness and the great amount of information extracted.",
                "In particular, it creates a Head-Expansion network which has already proven to be interesting for a clustering system [1].",
                "In such a network, each term is linked to its head term1 and 1 i.e. the maximum sub-phrase located as head of the term its expansion term2 , and also to all the terms for which it is a head or an expansion term.",
                "For example, knowledge engineering from text has knowledge engineering as head term and text as expansion term.",
                "Moreover, knowledge engineering is composed of knowledge as head term and engineering as expansion term.",
                "With Dynamo, the term network obtained as the output of the extractor is stored in a database.",
                "For each term pair, we assume that it is possible to compute a similarity value in order to make a clustering [6] [1].",
                "Because of the nature of the data, we are only focusing on similarity computation between objects described thanks to binary variables, that means that each item is described by the presence or absence of a characteristic set [15].",
                "In the case of terms we are generally dealing with their usage contexts.",
                "With Syntex, those contexts are identified by terms and characterized by some syntactic relations.",
                "The Dynamo multi-agent system implements the distributed clustering algorithm described in detail in section 3 and the rules described in section 4.",
                "It is designed to be both the system producing the resulting structure and the structure itself.",
                "It means that each agent represent a class in the taxonomy.",
                "Then, the system output is the organization obtained from the interaction between agents, while taking into account feedback coming from the ontologist when he/she modifies the taxonomy given his needs or expertise. 3.",
                "DISTRIBUTED CLUSTERING This section presents the distributed clustering algorithm used in Dynamo.",
                "For the sake of understanding, and because of its evaluation in section 3.1, we recall the basic centralized algorithm used for a hierarchical ascending clustering in a non metric space, when a symmetrical similarity measure is available [15] (which is the case of the measures used in our system).",
                "Algorithm 1: Centralized hierarchical ascending clustering algorithm Data: List L of items to organize as a hierarchy Result: Root R of the hierarchy while length(L) > 1 do max ← 0; A ← nil; B ← nil; for i ← 1 to length(L) do I ← L[i]; for j ← i + 1 to length(L) do J ← L[j]; sim ← similarity(I, J); if sim > max then max ← sim; A ← I; B ← J; end end end remove(A, L); remove(B, L); append((A, B), L); end R ← L[1]; In algorithm 1, for each clustering step, the pair of the most similar elements is determined.",
                "Those two elements are grouped in a cluster, and the resulting class is appended to the list of remaining elements.",
                "This algorithm stops when the list has only one element left. 2 i.e. the maximum sub-phrase located as tail of the term The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1287 The hierarchy resulting from algorithm 1 is always a binary tree because of the way grouping is done.",
                "Moreover grouping the most similar elements is equivalent to moving them away from the least similar ones.",
                "Our distributed algorithm is designed relying on those two facts.",
                "It is executed concurrently in each of the agents of the system.",
                "Note that, in the following of this paper, we used for both algorithms an Anderberg similarity (with α = 0.75) and an average link clustering strategy [15].",
                "Those choices have an impact on the resulting tree, but they impact neither the global execution of the algorithm nor its complexity.",
                "We now present the distributed algorithm used in our system.",
                "It is bootstrapped in the following way: • a TOP agent having no parent is created, it will be the root of the resulting taxonomy, • an agent is created for each term to be positioned in the taxonomy, they all have TOP as parent.",
                "Once this basic structure is set, the algorithm runs until it reaches equilibrium and then provides the resulting taxonomy.",
                "Ak−1 Ak AnA2A1 P ...... ...... A1 Figure 2: Distributed classification: Step 1 The process first step (figure 2) is triggered when an agent (here Ak) has more than one brother (since we want to obtain a binary tree).",
                "Then it sends a message to its parent P indicating its most dissimilar brother (here A1).",
                "Then P receives the same kind of message from each of its children.",
                "In the following, this kind of message will be called a vote.",
                "Ak−1 Ak AnA2A1 P P ...... ...... P P Figure 3: Distributed clustering: Step 2 Next, when P has got messages from all its children, it starts the second step (figure 3).",
                "Thanks to the received messages indicating the preferences of its children, P can determine three sub-groups among its children: • the child which got the most votes by its brothers, that is the child being the most dissimilar from the greatest number of its brothers.",
                "In case of a draw, one of the winners is chosen randomly (here A1), • the children that allowed the election of the first group, that is the agents which chose their brother of the first group as being the most dissimilar one (here Ak to An), • the remaining children (here A2 to Ak−1).",
                "Then P creates a new agent P (having P as parent) and asks agents from the second group (here agents Ak to An) to make it their new parent.",
                "Ak−1 Ak AnA2A1 P P ...... ......",
                "Figure 4: Distributed clustering: Step 3 Finally, step 3 (figure 4) is trivial.",
                "The children rejected by P (here agent A2 to An) take its message into account and choose P as their new parent.",
                "The hierarchy just created a new intermediate level.",
                "Note that this algorithm generally converges, since the number of brothers of an agent drops.",
                "When an agent has only one remaining brother, its activity stops (although it keeps processing messages coming from its children).",
                "However in a few cases we can reach a circular conflict in the voting procedure when for example A votes against B, B against C and C against A.",
                "With the current system no decision can be taken.",
                "The current procedure should be improved to address this, probably using a ranked voting method. 3.1 Quantitative Evaluation Now, we evaluate the properties of our distributed algorithm.",
                "It requires to begin with a quantitative evaluation, based on its complexity, while comparing it with the algorithm 1 from the previous section.",
                "Its theoretical complexity is calculated for the worst case, by considering the similarity computation operation as elementary.",
                "For the distributed algorithm, the worst case means that for each run, only a two-item group can be created.",
                "Under those conditions, for a given dataset of n items, we can determine the amount of similarity computations.",
                "For algorithm 1, we note l = length(L), then the most enclosed for loop is run l − i times.",
                "And its body has the only similarity computation, so its cost is l−i.",
                "The second for loop is ran l times for i ranging from 1 to l. Then its cost is Pl i=1(l − i) which can be simplified in l×(l−1) 2 .",
                "Finally for each run of the while loop, l is decreased from n to 1 which gives us t1(n) as the amount of similarity computations for algorithm 1: t1(n) = nX l=1 l × (l − 1) 2 (1) For the distributed algorithm, at a given step, each one of the l agents evaluates the similarity with its l −1 brothers.",
                "So each steps has a l × (l − 1) cost.",
                "Then, groups are created and another vote occurs with l decreased by one (since we assume worst case, only groups of size 2 or l −1 are built).",
                "Since l is equal to n on first run, we obtain tdist(n) as the amount of similarity computations for the distributed algorithm: tdist(n) = nX l=1 l × (l − 1) (2) Both algorithms then have an O(n3 ) complexity.",
                "But in the worst case, the distributed algorithm does twice the number of el1288 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) ementary operations done by the centralized algorithm.",
                "This gap comes from the local decision making in each agent.",
                "Because of this, the similarity computations are done twice for each agent pair.",
                "We could conceive that an agent sends its computation result to its peer.",
                "But, it would simply move the problem by generating more communication in the system. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Amountofcomparisons Amount of input terms 1.",
                "Distributed algorithm (on average, with min and max) 2.",
                "Logarithmic polynomial 3.",
                "Centralized algorithm Figure 5: Experimental results In a second step, the average complexity of the algorithm has been determined by experiments.",
                "The multi-agent system has been executed with randomly generated input data sets ranging from ten to one hundred terms.",
                "The given value is the average of comparisons made for one hundred of runs without any user interaction.",
                "It results in the plots of figure 5.",
                "The algorithm is then more efficient on average than the centralized algorithm, and its average complexity is below the worst case.",
                "It can be explained by the low probability that a data set forces the system to create only minimal groups (two items) or maximal (n − 1 elements) for each step of reasoning.",
                "Curve number 2 represents the logarithmic polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n2 log(n), then our distributed algorithm has a O(n2 log(n)) complexity on average.",
                "Finally, lets note the reduced variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 1,960.75 for an average of 40,550.10 (around 5%) which shows the good stability of the system. 3.2 Qualitative Evaluation Although the quantitative results are interesting, the real advantage of this approach comes from more qualitative characteristics that we will present in this section.",
                "All are advantages obtained thanks to the use of an adaptive multi-agent system.",
                "The main advantage to the use of a multi-agent system for a clustering task is to introduce dynamic in such a system.",
                "The ontologist can make modifications and the hierarchy adapts depending on the request.",
                "It is particularly interesting in a knowledge engineering context.",
                "Indeed, the hierarchy created by the system is meant to be modified by the ontologist since it is the result of a statistic computation.",
                "During the necessary look at the texts to examine the usage contexts of terms [2], the ontologist will be able to interpret the real content and to revise the system proposal.",
                "It is extremely difficult to realize this with a centralized black-box approach.",
                "In most cases, one has to find which reasoning step generated the error and to manually modify the resulting class.",
                "Unfortunately, in this case, all the reasoning steps that occurred after the creation of the modified class are lost and must be recalculated by taking the modification into account.",
                "That is why a system like ASIUM [6] tries to soften the problem with a system-user collaboration by showing to the ontologist the created classes after each step of reasoning.",
                "But, the ontologist can make a mistake, and become aware of it too late.",
                "Figure 6: Concept agent tree after autonomous stabilization of the system In order to illustrate our claims, we present an example thanks to a few screenshots from the working prototype tested on a medical related corpus.",
                "By using test data and letting the system work by itself, we obtain the hierarchy from figure 6 after stabilization.",
                "It is clear that the concept described by the term lésion (lesion) is misplaced.",
                "It happens that the similarity computations place it closer to femme (woman) and chirurgien (surgeon) than to infection, gastro-entérite (gastro-enteritis) and hépatite (hepatitis).",
                "This wrong position for lesion is explained by the fact that without ontologist input the reasoning is only done on statistics criteria.",
                "Figure 7: Concept agent tree after ontologist modification Then, the ontologist replaces the concept in the right branch, by affecting ConceptAgent:8 as its new parent.",
                "The name ConceptAgent:X is automatically given to a concept agent that is not described by a term.",
                "The system reacts by itself and refines the clustering hierarchy to obtain a binary tree by creating ConceptAgent:11.",
                "The new stable state if the one of figure 7.",
                "This system-user coupling is necessary to build an ontology, but no particular adjustment to the distributed algorithm principle is needed since each agent does an autonomous local processing and communicates with its neighborhood by messages.",
                "Moreover, this algorithm can de facto be distributed on a computer network.",
                "The communication between agents is then done by sending messages and each one keeps its decision autonomy.",
                "Then, a system modification to make it run networked would not require to adjust the algorithm.",
                "On the contrary, it would only require to rework the communication layer and the agent creation process since in our current implementation those are not networked. 4.",
                "MULTI-CRITERIA HIERARCHY In the previous sections, we assumed that similarity can be computed for any term pair.",
                "But, as soon as one uses real data this property is not verified anymore.",
                "Some terms do not have any similarity value with any extracted term.",
                "Moreover for leaf nodes it is sometimes interesting to use other means to position them in the hierarchy.",
                "For this low level structuring, ontologists generally base The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1289 their choices on simple heuristics.",
                "Using this observation, we built a new set of rules, which are not based on similarity to support low level structuring. 4.1 Adding Head Coverage Rules In this case, agents can act with a very local point of view simply by looking at the parent/child relation.",
                "Each agent can try to determine if its parent is adequate.",
                "It is possible to guess this because each concept agent is described by a set of terms and thanks to the Head-Expansion term network.",
                "In the following TX will be the set of terms describing concept agent X and head(TX ) the set of all the terms that are head of at least one element of TX .",
                "Thanks to those two notations we can describe the parent adequacy function a(P, C) between a parent P and a child C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Then, the best parent for C is the P agent that maximizes a(P, C).",
                "An agent unsatisfied by its parent can then try to find a better one by evaluating adequacy with candidates.",
                "We designed a complementary algorithm to drive this search: When an agent C is unsatisfied by its parent P, it evaluates a(Bi, C) with all its brothers (noted Bi) the one maximizing a(Bi, C) is then chosen as the new parent.",
                "Figure 8: Concept agent tree after autonomous stabilization of the system without head coverage rule We now illustrate this rule behavior with an example.",
                "Figure 8 shows the state of the system after stabilization on test data.",
                "We can notice that hépatite viral (viral hepatitis) is still linked to the taxonomy root.",
                "It is caused by the fact that there is no similarity value between the viral hepatitis term and any of the term of the other concept agents.",
                "Figure 9: Concept agent tree after activation of the head coverage rule After activating the head coverage rule and letting the system stabilize again we obtain figure 9.",
                "We can see that viral hepatitis slipped through the branch leading to hepatitis and chose it as its new parent.",
                "It is a sensible default choice since viral hepatitis is a more specific term than hepatitis.",
                "This rule tends to push agents described by a set of term to become leafs of the concept tree.",
                "It addresses our concern to improve the low level structuring of our taxonomy.",
                "But obviously our agents lack a way to backtrack in case of modifications in the taxonomy which would make them be located in the wrong branch.",
                "That is one of the point where our system still has to be improved by adding another set of rules. 4.2 On Using Several Criteria In the previous sections and examples, we only used one algorithm at a time.",
                "The distributed clustering algorithm tends to introduce new layers in the taxonomy, while the head coverage algorithm tends to push some of the agents toward the leafs of the taxonomy.",
                "It obviously raises the question on how to deal with multiple criteria in our taxonomy building, and how agents determine their priorities at a given time.",
                "The solution we chose came from the search for minimizing non cooperation within the system in accordance with the ADELFE method.",
                "Each agent computes three non cooperation degrees and chooses its current priority depending on which degree is the highest.",
                "For a given agent A having a parent P, a set of brothers Bi and which received a set of messages Mk having the priority pk the three non cooperation degrees are: • μH (A) = 1 − a(P, A), is the head coverage non cooperation degree, determined by the head coverage of the parent, • μB(A) = max(1 − similarity(A, Bi)), is the brotherhood non cooperation degree, determined by the worst brother of A regarding similarities, • μM (A) = max(pk), is the message non cooperation degree, determined by the most urgent message received.",
                "Then, the non cooperation degree μ(A) of agent A is: μ(A) = max(μH (A), μB(A), μM (A)) (4) Then, we have three cases determining which kind of action A will choose: • if μ(A) = μH (A) then A will use the head coverage algorithm we detailed in the previous subsection • if μ(A) = μB(A) then A will use the distributed clustering algorithm (see section 3) • if μ(A) = μM (A) then A will process Mk immediately in order to help its sender Those three cases summarize the current activities of our agents: they have to find the best parent for them (μ(A) = μH (A)), improve the structuring through clustering (μ(A) = μB(A)) and process other agent messages (μ(A) = μM (A)) in order to help them fulfill their own goals. 4.3 Experimental Complexity Revisited We evaluated the experimental complexity of the whole multiagent system when all the rules are activated.",
                "In this case, the metric used is the number of messages exchanged in the system.",
                "Once again the system has been executed with input data sets ranging from ten to one hundred terms.",
                "The given value is the average of message amount sent in the system as a whole for one hundred runs without user interaction.",
                "It results in the plots of figure 10.",
                "Curve number 1 represents the average of the value obtained.",
                "Curve number 2 represents the average of the value obtained when only the distributed clustering algorithm is activated, not the full rule set.",
                "Curve number 3 represents the polynomial minimizing the error with curve number 1.",
                "The highest degree term of this polynomial is in n3 , then our multi-agent system has a O(n3 ) complexity 1290 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Amountofmessages Amount of input terms 1.",
                "Dynamo, all rules (on average, with min and max) 2.",
                "Distributed clustering only (on average) 2.",
                "Cubic polynomial Figure 10: Experimental results on average.",
                "Moreover, lets note the very small variation of the average performances with the maximum and the minimum.",
                "In the worst case for 100 terms, the variation is of 126.73 for an average of 20,737.03 (around 0.6%) which proves the excellent stability of the system.",
                "Finally the extra head coverage rules are a real improvement on the distributed algorithm alone.",
                "They introduce more constraints and stability point is reached with less interactions and decision making by the agents.",
                "It means that less messages are exchanged in the system while obtaining a tree of higher quality for the ontologist. 5.",
                "DISCUSSION & PERSPECTIVES 5.1 Current Limitation of our Approach The most important limitation of our current algorithm is that the result depends on the order the data gets added.",
                "When the system works by itself on a fixed data set given during initialization, the final result is equivalent to what we could obtain with a centralized algorithm.",
                "On the contrary, adding a new item after a first stabilization has an impact on the final result.",
                "Figure 11: Concept agent tree after autonomous stabilization of the system To illustrate our claims, we present another example of the working system.",
                "By using test data and letting the system work by itself, we obtain the hierarchy of figure 11 after stabilization.",
                "Figure 12: Concept agent tree after taking in account hepatitis Then, the ontologist interacts with the system and adds a new concept described by the term hepatitis and linked to the root.",
                "The system reacts and stabilizes, we then obtain figure 12 as a result. hepatitis is located in the right branch, but we have not obtained the same organization as the figure 6 of the previous example.",
                "We need to improve our distributed algorithm to allow a concept to move along a branch.",
                "We are currently working on the required rules, but the comparison with centralized algorithm will become very difficult.",
                "In particular since they will take into account criteria ignored by the centralized algorithm. 5.2 Pruning for Ontologies Building In section 3, we presented the distributed clustering algorithm used in the Dynamo system.",
                "Since this work was first based on this algorithm, it introduced a clear bias toward binary trees as a result.",
                "But we have to keep in mind that we are trying to obtain taxonomies which are more refined and concise.",
                "Although the head coverage rule is an improvement because it is based on how the ontologists generally work, it only addresses low level structuring but not the intermediate levels of the tree.",
                "By looking at figure 7, it is clear that some pruning could be done in the taxonomy.",
                "In particular, since lésion moved, ConceptAgent:9 could be removed, it is not needed anymore.",
                "Moreover the branch starting with ConceptAgent:8 clearly respects the constraint to make a binary tree, but it would be more useful to the user in a more compact and meaningful form.",
                "In this case ConceptAgent:10 and ConceptAgent:11 could probably be merged.",
                "Currently, our system has the necessary rules to create intermediate levels in the taxonomy, or to have concepts shifting towards the leaf.",
                "As we pointed, it is not enough, so new rules are needed to allow removing nodes from the tree, or move them toward the root.",
                "Most of the work needed to develop those rules consists in finding the relevant statistic information that will support the ontologist. 6.",
                "CONCLUSION After being presented as a promising solution, ensuring model quality and their terminological richness, ontology building from textual corpus analysis is difficult and costly.",
                "It requires analyst supervising and taking in account the ontology aim.",
                "Using natural languages processing tools ease the knowledge localization in texts through language uses.",
                "That said, those tools produce a huge amount of lexical or grammatical data which is not trivial to examine in order to define conceptual elements.",
                "Our contribution lies in this step of the modeling process from texts, before any attempts to normalize or formalize the result.",
                "We proposed an approach based on an adaptive multi-agent system to provide the ontologist with a first taxonomic structure of concepts.",
                "Our system makes use of a terminological network resulting from an analysis made by Syntex.",
                "The current state of our software allows to produce simple structures, to propose them to the ontologist and to make them evolve depending on the modifications he made.",
                "Performances of the system are interesting and some aspects are even comparable to their centralized counterpart.",
                "Its strengths are mostly qualitative since it allows more subtle user interactions and a progressive adaptation to new linguistic based information.",
                "From the point of view of ontology building, this work is a first step showing the relevance of our approach.",
                "It must continue, both to ensure a better robustness during classification, and to obtain richer structures semantic wise than simple trees.",
                "From this improvements we are mostly focusing on the pruning to obtain better taxonomies.",
                "Were currently working on the criterion to trigger the complementary actions of the structure changes applied by our clustering algorithm.",
                "In other words this algorithm introduces inThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a <br>dynamic equilibrium</br>.",
                "Also from the multi-agent engineering point of view, their use in a dynamic ontology context has shown its relevance.",
                "This dynamic ontologies can be seen as complex problem solving, in such a case self-organization through cooperation has been an efficient solution.",
                "And, more generally its likely to be interesting for other design related tasks, even if were focusing only on knowledge engineering in this paper.",
                "Of course, our system still requires more evaluation and validation work to accurately determine the advantages and flaws of this approach.",
                "Were planning to work on such benchmarking in the near future. 7.",
                "REFERENCES [1] H. Assadi.",
                "Construction of a regional ontology from text and its use within a documentary system.",
                "Proceedings of the International Conference on Formal Ontology and Information Systems - FOIS98, pages 236-249, 1998. [2] N. Aussenac-Gilles and D. Sörgel.",
                "Text analysis for ontology and terminology engineering.",
                "Journal of Applied Ontology, 2005. [3] J. Bao and V. Honavar.",
                "Collaborative ontology building with wiki@nt.",
                "Proceedings of the Workshop on Evaluation of Ontology-Based Tools (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes, and G. Picard.",
                "Agent-Oriented Methodologies, chapter 7.",
                "Engineering Self-Adaptive Multi-Agent Systems : the ADELFE Methodology, pages 172-202.",
                "Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna, and Y. Wilks.",
                "Background and foreground knowledge in dynamic ontology construction.",
                "Semantic Web Workshop, SIGIR03, August 2003. [6] D. Faure and C. Nedellec.",
                "A corpus-based conceptual clustering method for verb frames and ontology acquisition.",
                "LREC workshop on adapting lexical and corpus resources to sublanguages and applications, 1998. [7] F. Gandon.",
                "Ontology Engineering: a Survey and a Return on Experience.",
                "INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes, and P. Glize.",
                "Living Design for Open Computational Systems. 12th IEEE International Workshops on Enabling Technologies, Infrastructure for Collaborative Enterprises, pages 389-394, June 2003. [9] M.-P. Gleizes, V. Camps, and P. Glize.",
                "A Theory of emergent computation based on cooperative self-organization for adaptive artificial systems.",
                "Fourth European Congress of Systems Science, September 1999. [10] J. Heflin and J. Hendler.",
                "Dynamic ontologies on the web.",
                "American Association for Artificial Intelligence Conference, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault, and M.-C. Jaulent.",
                "Terminology extraction from text to build an ontology in surgical intensive care.",
                "Proceedings of the AMIA 2002 annual symposium, 2002. [12] K. Lister, L. Sterling, and K. Taveter.",
                "Reconciling Ontological Differences by Assistant Agents.",
                "AAMAS06, May 2006. [13] A. Maedche.",
                "Ontology learning for the Semantic Web.",
                "Kluwer Academic Publisher, 2002. [14] A. Maedche and S. Staab.",
                "Mining Ontologies from Text.",
                "EKAW 2000, pages 189-202, 2000. [15] C. D. Manning and H. Schütze.",
                "Foundations of Statistical Natural Language Processing.",
                "The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding, and S. Brueckner.",
                "Dynamic decentralized any-time hierarchical clustering. 29th Annual International ACM SIGIR Conference on Research & Development on Information Retrieval, August 2006. 1292 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07)"
            ],
            "original_annotated_samples": [
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1291 termediate levels, and we need to be able to remove them if necessary, in order to reach a <br>dynamic equilibrium</br>."
            ],
            "translated_annotated_samples": [
                "Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1291 niveles intermedios, y necesitamos poder eliminarlos si es necesario, para alcanzar un <br>equilibrio dinámico</br>."
            ],
            "translated_text": "Un Sistema Multiagente para la Construcción de Ontologías Dinámicas Kévin Ottens ∗ IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE ottens@irit.fr Marie-Pierre Gleizes IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE gleizes@irit.fr Pierre Glize IRIT, Université Paul Sabatier 118 Route de Narbonne F-31062 TOULOUSE glize@irit.fr RESUMEN La construcción de ontologías a partir de texto sigue siendo una tarea que consume mucho tiempo, lo que justifica el crecimiento del Aprendizaje de Ontologías. Nuestro sistema llamado Dynamo está diseñado dentro de este dominio, pero siguiendo un enfoque original basado en una arquitectura multiagente adaptativa. En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque. Se evalúa y se compara con un algoritmo centralizado más convencional. También presentamos cómo ha sido mejorado utilizando un enfoque de múltiples criterios. Con esos resultados en mente, discutimos los límites de nuestro sistema y añadimos como perspectivas las modificaciones necesarias para alcanzar una solución completa de construcción de ontologías. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Experimentación 1. INTRODUCCIÓN En la actualidad, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de información. Pero construir una ontología manualmente es un proceso lento, tedioso, costoso, complejo y que consume mucho tiempo. Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados. Significaría crear ontologías dinámicas [10] y justifica la aparición de técnicas de aprendizaje de ontologías [14] [13]. Nuestra investigación se centra en Dynamo (acrónimo de DYNAMic Ontologies), una herramienta basada en un sistema multiagente adaptativo para construir y mantener una ontología a partir de un conjunto específico de textos de un dominio. Nuestro objetivo no es construir una ontología jerárquica exhaustiva y general, sino una específica para un dominio. Proponemos una herramienta semi-automatizada ya que se requiere un recurso externo: el ontólogo. Un ontólogo es una especie de ingeniero cognitivo, o analista, que utiliza información de textos y entrevistas con expertos para diseñar ontologías. En el campo de los agentes múltiples, las ontologías generalmente permiten que los agentes se entiendan entre sí [12]. A veces se utilizan para facilitar el proceso de construcción de la ontología, en particular en contextos colaborativos [3], pero rara vez representan la ontología en sí misma [16]. La mayoría de los trabajos interesados en la construcción de ontologías [7] proponen el refinamiento de las ontologías. Este proceso consiste en utilizar una ontología existente y construir una nueva a partir de ella. Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero. Los investigadores, que trabajan en la construcción de ontologías a partir de textos, afirman que el trabajo a automatizar requiere recursos externos como un diccionario [14] o acceso a la web [5]. En nuestro trabajo, proponemos una interacción entre el ontólogo y el sistema, nuestro recurso externo radica tanto en los textos como en el ontólogo. Este documento primero presenta, en la sección 2, la visión general del sistema Dynamo. En particular, los motivos que llevaron a su creación y su arquitectura general. Luego, en la sección 3 discutimos el algoritmo de clustering distribuido utilizado en Dynamo y lo comparamos con un enfoque más clásico y centralizado. La sección 4 está dedicada a mejorar el comportamiento de los agentes que fue diseñado teniendo en cuenta criterios ignorados por el agrupamiento. Y finalmente, en la sección 5, discutimos las limitaciones de nuestro enfoque y explicamos cómo se abordarán en trabajos futuros. DYNAMO RESUMEN 2.1 Ontología como un Sistema Multiagente Dynamo tiene como objetivo reducir la necesidad de acciones manuales en el procesamiento de los resultados del análisis de texto y sugerir un inicio de red conceptual para construir ontologías de manera más eficiente. El enfoque elegido es completamente original en nuestro conocimiento y utiliza un sistema multiagente adaptativo. Esta elección se basa en las cualidades ofrecidas por el sistema multiagente: pueden facilitar el diseño interactivo de un sistema (en nuestro caso, una red conceptual), permiten su construcción incremental al tener en cuenta progresivamente nuevos datos (provenientes del análisis de texto y la interacción del usuario) y, por último pero no menos importante, pueden distribuirse fácilmente a través de una red informática. Dynamo realiza un análisis sintáctico y terminológico de textos como entrada. Utiliza varios criterios basados en estadísticas calculadas a partir de los contextos lingüísticos de los términos para crear y posicionar los conceptos. Como resultado, Dynamo proporciona al analista una organización jerárquica de conceptos (el sistema multiagente en sí mismo) que puede ser validada, refinada o modificada, hasta que obtenga un estado satisfactorio de la red semántica. Una ontología puede ser vista como un mapa estable constituido por entidades conceptuales, representadas aquí por agentes, vinculadas por relaciones etiquetadas. Por lo tanto, nuestro enfoque considera una ontología como un tipo de equilibrio entre sus concepto-agentes, donde sus fuerzas están definidas por sus relaciones potenciales. La modificación de la ontología es una perturbación del equilibrio previo por la aparición o desaparición de agentes o relaciones. De esta manera, una ontología dinámica es un proceso de autoorganización que ocurre cuando se incluyen nuevos textos en el corpus, o cuando el ontólogo interactúa con él. Para apoyar la flexibilidad necesaria de dicho sistema, utilizamos un sistema multiagente autoorganizado basado en un enfoque cooperativo [9]. Seguimos el método ADELFE [4] propuesto para guiar el diseño de este tipo de sistema multiagente. Se justifica cómo diseñamos algunas de las reglas utilizadas por nuestros agentes para maximizar el grado de cooperación dentro del sistema multiagente de Dynamos. 2.2 Arquitectura Propuesta En esta sección, presentamos nuestra arquitectura del sistema. Aborda las necesidades de la Ingeniería del Conocimiento en el contexto de la gestión y mantenimiento dinámico de ontologías cuando la ontología está vinculada a una colección de documentos. El sistema Dynamo consta de tres partes (cf. figura 1): • una red de términos, obtenida gracias a una herramienta de extracción de términos utilizada para preprocesar el corpus textual, • un sistema multiagente que utiliza la red de términos para realizar un agrupamiento jerárquico con el fin de obtener una taxonomía de conceptos, • una interfaz que permite al ontólogo visualizar y controlar el proceso de agrupamiento. El extractor de términos que utilizamos es Syntex, un software que ha sido utilizado eficientemente para tareas de construcción de ontologías [11]. Principalmente lo seleccionamos por su robustez y la gran cantidad de información extraída. En particular, crea una red de Expansión de Cabeza que ya ha demostrado ser interesante para un sistema de agrupamiento [1]. En una red de este tipo, cada término está vinculado a su término principal y, es decir, a la subfrase máxima ubicada como término principal de su término de expansión, y también a todos los términos para los cuales es un término principal o un término de expansión. Por ejemplo, la ingeniería del conocimiento a partir de texto tiene como término principal la ingeniería del conocimiento y como término de expansión el texto. Además, la ingeniería del conocimiento se compone del conocimiento como término principal y la ingeniería como término de expansión. Con Dynamo, el término de red obtenido como resultado del extractor se almacena en una base de datos. Para cada par de términos, asumimos que es posible calcular un valor de similitud para realizar un agrupamiento [6] [1]. Debido a la naturaleza de los datos, nos estamos enfocando únicamente en la computación de similitud entre objetos descritos gracias a variables binarias, lo que significa que cada elemento está descrito por la presencia o ausencia de un conjunto de características [15]. En el caso de los términos, generalmente estamos tratando con sus contextos de uso. Con Syntex, esos contextos son identificados por términos y caracterizados por algunas relaciones sintácticas. El sistema multiagente Dynamo implementa el algoritmo de clustering distribuido descrito en detalle en la sección 3 y las reglas descritas en la sección 4. Está diseñado para ser tanto el sistema que produce la estructura resultante como la estructura en sí misma. Significa que cada agente representa una clase en la taxonomía. Entonces, la salida del sistema es la organización obtenida a partir de la interacción entre agentes, teniendo en cuenta la retroalimentación proveniente del ontólogo cuando modifica la taxonomía dada sus necesidades o experiencia. CLUSTERING DISTRIBUIDO Esta sección presenta el algoritmo de clustering distribuido utilizado en Dynamo. Por el bien de la comprensión, y debido a su evaluación en la sección 3.1, recordamos el algoritmo centralizado básico utilizado para un agrupamiento jerárquico ascendente en un espacio no métrico, cuando se dispone de una medida de similitud simétrica [15] (que es el caso de las medidas utilizadas en nuestro sistema). Algoritmo 1: Algoritmo de agrupamiento jerárquico ascendente centralizado Datos: Lista L de elementos para organizar como una jerarquía Resultado: Raíz R de la jerarquía mientras longitud(L) > 1 hacer max ← 0; A ← nil; B ← nil; para i ← 1 a longitud(L) hacer I ← L[i]; para j ← i + 1 a longitud(L) hacer J ← L[j]; sim ← similitud(I, J); si sim > max entonces max ← sim; A ← I; B ← J; fin si fin para fin para quitar(A, L); quitar(B, L); agregar((A, B), L); fin mientras R ← L[1]; En el algoritmo 1, para cada paso de agrupamiento, se determina el par de elementos más similares. Esos dos elementos están agrupados en un conjunto, y la clase resultante se añade a la lista de elementos restantes. Este algoritmo se detiene cuando la lista tiene solo un elemento restante. 2 es decir, la subfrase máxima ubicada como cola del término The Sixth Intl. La jerarquía resultante del algoritmo 1 siempre es un árbol binario debido a la forma en que se realiza el agrupamiento. Además, agrupar los elementos más similares es equivalente a alejarlos de los menos similares. Nuestro algoritmo distribuido está diseñado basándose en esos dos hechos. Se ejecuta de forma simultánea en cada uno de los agentes del sistema. Cabe destacar que, en lo que sigue de este artículo, utilizamos para ambos algoritmos una similitud de Anderberg (con α = 0.75) y una estrategia de agrupamiento de enlace promedio [15]. Esas decisiones tienen un impacto en el árbol resultante, pero no afectan ni la ejecución global del algoritmo ni su complejidad. Ahora presentamos el algoritmo distribuido utilizado en nuestro sistema. Se inicia de la siguiente manera: • se crea un agente TOP que no tiene padre, será la raíz de la taxonomía resultante, • se crea un agente para cada término que se va a posicionar en la taxonomía, todos tienen como padre a TOP. Una vez que se establece esta estructura básica, el algoritmo se ejecuta hasta que alcanza el equilibrio y luego proporciona la taxonomía resultante. El proceso de la primera etapa (figura 2) se activa cuando un agente (aquí Ak) tiene más de un hermano (ya que queremos obtener un árbol binario). Luego envía un mensaje a su padre P indicando a su hermano más diferente (aquí A1). Entonces P recibe el mismo tipo de mensaje de cada uno de sus hijos. En lo siguiente, este tipo de mensaje se llamará voto. A continuación, cuando P ha recibido mensajes de todos sus hijos, comienza el segundo paso (figura 3). Gracias a los mensajes recibidos que indican las preferencias de sus hijos, P puede determinar tres subgrupos entre sus hijos: el hijo que recibió más votos de sus hermanos, es decir, el hijo que es más diferente del mayor número de sus hermanos. En caso de empate, uno de los ganadores es elegido al azar (aquí A1), los niños que permitieron la elección del primer grupo, es decir, los agentes que eligieron a su hermano del primer grupo como el más diferente (aquí Ak a An), los niños restantes (aquí A2 a Ak−1). Entonces P crea un nuevo agente P (teniendo a P como padre) y pide a los agentes del segundo grupo (aquí los agentes Ak a An) que lo elijan como su nuevo padre. Ak−1 Ak AnA2A1 P P ...... ...... \n\nAk−1 Ak AnA2A1 P P ...... ...... Figura 4: Agrupamiento distribuido: Paso 3 Finalmente, el paso 3 (figura 4) es trivial. Los niños rechazados por P (aquí el agente A2 a An) tienen en cuenta su mensaje y eligen a P como su nuevo padre. La jerarquía acaba de crear un nuevo nivel intermedio. Ten en cuenta que este algoritmo generalmente converge, ya que el número de hermanos de un agente disminuye. Cuando un agente tiene solamente un hermano restante, su actividad se detiene (aunque sigue procesando los mensajes que llegan de sus hijos). Sin embargo, en algunos casos podemos llegar a un conflicto circular en el procedimiento de votación cuando, por ejemplo, A vota en contra de B, B en contra de C y C en contra de A. Con el sistema actual no se puede tomar ninguna decisión. El procedimiento actual debería mejorarse para abordar esto, probablemente utilizando un método de votación clasificado. 3.1 Evaluación Cuantitativa Ahora, evaluamos las propiedades de nuestro algoritmo distribuido. Se requiere comenzar con una evaluación cuantitativa, basada en su complejidad, mientras se compara con el algoritmo 1 de la sección anterior. Su complejidad teórica se calcula para el peor caso, considerando la operación de cálculo de similitud como elemental. Para el algoritmo distribuido, el peor caso significa que en cada ejecución, solo se puede crear un grupo de dos elementos. Bajo esas condiciones, para un conjunto de datos dado de n elementos, podemos determinar la cantidad de cálculos de similitud. Para el algoritmo 1, notamos que l = longitud(L), luego el bucle más interno se ejecuta l - i veces. Y su cuerpo tiene la única computación de similitud, por lo que su costo es l−i. El segundo bucle for se ejecuta l veces para i que varía de 1 a l. Entonces su costo es Pl i=1(l − i) que puede simplificarse en l×(l−1) 2. Finalmente, para cada ejecución del bucle while, l se reduce de n a 1, lo que nos da t1(n) como la cantidad de cálculos de similitud para el algoritmo 1: t1(n) = nX l=1 l × (l − 1) 2 (1) Para el algoritmo distribuido, en un paso dado, cada uno de los l agentes evalúa la similitud con sus l −1 compañeros. Entonces, cada paso tiene un costo de l × (l − 1). Entonces, se crean grupos y se realiza otra votación con l disminuido en uno (ya que asumimos el peor caso, solo se forman grupos de tamaño 2 o l −1). Dado que l es igual a n en la primera ejecución, obtenemos tdist(n) como la cantidad de cálculos de similitud para el algoritmo distribuido: tdist(n) = nX l=1 l × (l − 1) (2) Ambos algoritmos tienen una complejidad O(n3). Pero en el peor de los casos, el algoritmo distribuido realiza el doble del número de el1288 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) operaciones elementales realizadas por el algoritmo centralizado. Esta brecha proviene de la toma de decisiones local en cada agente. Debido a esto, los cálculos de similitud se realizan dos veces para cada par de agentes. Podríamos concebir que un agente envía el resultado de su cálculo a su par. Sin embargo, simplemente trasladaría el problema al generar más comunicación en el sistema. 0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 40 50 60 70 80 90 100 Cantidad de comparaciones Cantidad de términos de entrada 1. Algoritmo distribuido (en promedio, con mínimo y máximo) 2. Polinomio logarítmico 3. En la Figura 5 se muestra el algoritmo centralizado: Resultados experimentales. En un segundo paso, la complejidad promedio del algoritmo ha sido determinada mediante experimentos. El sistema multiagente ha sido ejecutado con conjuntos de datos de entrada generados aleatoriamente que van desde diez hasta cien términos. El valor dado es el promedio de las comparaciones realizadas para cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 5. El algoritmo es entonces más eficiente en promedio que el algoritmo centralizado, y su complejidad promedio está por debajo del peor caso. Se puede explicar por la baja probabilidad de que un conjunto de datos obligue al sistema a crear solo grupos mínimos (dos elementos) o máximos (n − 1 elementos) para cada paso de razonamiento. La curva número 2 representa el polinomio logarítmico que minimiza el error con respecto a la curva número 1. El término de mayor grado de este polinomio es n2 log(n), por lo tanto, nuestro algoritmo distribuido tiene una complejidad O(n2 log(n)) en promedio. Finalmente, notemos la reducida variación de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 1,960.75 para un promedio de 40,550.10 (alrededor del 5%), lo que muestra la buena estabilidad del sistema. Aunque los resultados cuantitativos son interesantes, la verdadera ventaja de este enfoque proviene de características más cualitativas que presentaremos en esta sección. Todos son ventajas obtenidas gracias al uso de un sistema multiagente adaptativo. La principal ventaja del uso de un sistema multiagente para una tarea de agrupamiento es introducir dinamismo en dicho sistema. El ontólogo puede hacer modificaciones y la jerarquía se adapta dependiendo de la solicitud. Es particularmente interesante en un contexto de ingeniería del conocimiento. De hecho, la jerarquía creada por el sistema está destinada a ser modificada por el ontólogo ya que es el resultado de un cálculo estadístico. Durante la revisión necesaria de los textos para examinar los contextos de uso de los términos [2], el ontólogo podrá interpretar el contenido real y revisar la propuesta del sistema. Es extremadamente difícil lograr esto con un enfoque centralizado de caja negra. En la mayoría de los casos, uno tiene que encontrar qué paso de razonamiento generó el error y modificar manualmente la clase resultante. Desafortunadamente, en este caso, todos los pasos de razonamiento que ocurrieron después de la creación de la clase modificada se pierden y deben ser recalculados teniendo en cuenta la modificación. Por eso, un sistema como ASIUM [6] intenta suavizar el problema con una colaboración entre el sistema y el usuario mostrando al ontólogo las clases creadas después de cada paso de razonamiento. Pero el ontólogo puede cometer un error y darse cuenta de ello demasiado tarde. Figura 6: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos un ejemplo gracias a algunas capturas de pantalla del prototipo en funcionamiento probado en un corpus relacionado con la medicina. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 6 después de la estabilización. Es evidente que el concepto descrito por el término lesión está mal ubicado. Las computaciones de similitud lo sitúan más cerca de femme (mujer) y chirurgien (cirujano) que de infección, gastro-enteritis y hepatitis. Esta posición incorrecta para la lesión se explica por el hecho de que sin la entrada del ontólogo, el razonamiento se basa únicamente en criterios estadísticos. Figura 7: Árbol de agentes conceptuales después de la modificación del ontólogo. Luego, el ontólogo reemplaza el concepto en la rama derecha, afectando a ConceptAgent:8 como su nuevo padre. El nombre ConceptAgent:X se asigna automáticamente a un agente conceptual que no está descrito por un término. El sistema reacciona por sí mismo y perfecciona la jerarquía de agrupación para obtener un árbol binario creando ConceptAgent:11. El nuevo estado estable es el de la figura 7. Este acoplamiento sistema-usuario es necesario para construir una ontología, pero no se necesita ningún ajuste particular al principio del algoritmo distribuido ya que cada agente realiza un procesamiento local autónomo y se comunica con su vecindario a través de mensajes. Además, este algoritmo puede ser distribuido de facto en una red de computadoras. La comunicación entre agentes se realiza enviando mensajes y cada uno mantiene su autonomía de decisión. Entonces, una modificación del sistema para hacerlo funcionar en red no requeriría ajustar el algoritmo. Por el contrario, solo sería necesario reestructurar la capa de comunicación y el proceso de creación de agentes, ya que en nuestra implementación actual no están en red. 4. EN LA JERARQUÍA DE MÚLTIPLES CRITERIOS En las secciones anteriores, asumimos que la similitud se puede calcular para cualquier par de términos. Pero, tan pronto como se utilizan datos reales, esta propiedad ya no se verifica. Algunos términos no tienen ningún valor de similitud con ningún término extraído. Además, para los nodos hoja a veces es interesante utilizar otros medios para posicionarlos en la jerarquía. Para esta estructuración de bajo nivel, los ontólogos generalmente se basan en The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1289 sus elecciones en heurísticas simples. Usando esta observación, construimos un nuevo conjunto de reglas, que no se basan en la similitud para respaldar la estructuración de bajo nivel. 4.1 Agregar reglas de cobertura de cabeza En este caso, los agentes pueden actuar con un punto de vista muy local simplemente mirando la relación padre/hijo. Cada agente puede intentar determinar si su padre es adecuado. Es posible adivinar esto porque cada agente conceptual está descrito por un conjunto de términos y gracias a la red de términos de Expansión de Cabeza. En el siguiente TX será el conjunto de términos que describen el concepto del agente X y head(TX) el conjunto de todos los términos que son cabeza de al menos un elemento de TX. Gracias a esas dos notaciones podemos describir la función de adecuación entre un padre P y un hijo C: a(P, C) = |TP ∩ head(TC )| |TP ∪ head(TC )| (3) Entonces, el mejor padre para C es el agente P que maximiza a(P, C). Un agente insatisfecho con su padre puede intentar encontrar uno mejor evaluando la idoneidad de los candidatos. Diseñamos un algoritmo complementario para dirigir esta búsqueda: cuando un agente C no está satisfecho con su padre P, evalúa a(Bi, C) con todos sus hermanos (notados Bi); luego se elige como nuevo padre aquel que maximice a(Bi, C). Figura 8: Árbol de agentes conceptuales después de la estabilización autónoma del sistema sin la regla de cobertura de cabeza. Ahora ilustramos este comportamiento de regla con un ejemplo. La Figura 8 muestra el estado del sistema después de la estabilización en los datos de prueba. Podemos notar que la hepatitis viral todavía está vinculada a la raíz taxonómica. Se debe al hecho de que no hay valor de similitud entre el término hepatitis viral y ninguno de los términos de los otros agentes conceptuales. Figura 9: Árbol de agentes conceptuales después de la activación de la regla de cobertura de la cabeza. Tras activar la regla de cobertura de la cabeza y permitir que el sistema se estabilice nuevamente, obtenemos la figura 9. Podemos ver que la hepatitis viral se deslizó a través de la rama que llevaba a la hepatitis y la eligió como su nueva progenitora. Es una elección por defecto sensata, ya que la hepatitis viral es un término más específico que la hepatitis. Esta regla tiende a hacer que los agentes descritos por un conjunto de términos se conviertan en hojas del árbol conceptual. Aborda nuestra preocupación por mejorar la estructuración de bajo nivel de nuestra taxonomía. Pero obviamente nuestros agentes carecen de un método para retroceder en caso de modificaciones en la taxonomía que los ubicarían en la rama incorrecta. Ese es uno de los puntos en los que nuestro sistema aún debe ser mejorado al agregar otro conjunto de reglas. 4.2 Sobre el uso de varios criterios En las secciones y ejemplos anteriores, solo utilizamos un algoritmo a la vez. El algoritmo de agrupamiento distribuido tiende a introducir nuevas capas en la taxonomía, mientras que el algoritmo de cobertura de cabeza tiende a empujar algunos de los agentes hacia las hojas de la taxonomía. Obviamente plantea la pregunta sobre cómo lidiar con múltiples criterios en la construcción de nuestra taxonomía, y cómo los agentes determinan sus prioridades en un momento dado. La solución que elegimos proviene de la búsqueda de minimizar la falta de cooperación dentro del sistema de acuerdo con el método ADELFE. Cada agente calcula tres grados de no cooperación y elige su prioridad actual dependiendo de cuál grado sea el más alto. Para un agente A dado que tiene un padre P, un conjunto de hermanos Bi y que recibió un conjunto de mensajes Mk con prioridad pk, los tres grados de no cooperación son: • μH (A) = 1 − a(P, A), es el grado de no cooperación de cobertura de cabeza, determinado por la cobertura de cabeza del padre, • μB(A) = max(1 − similitud(A, Bi)), es el grado de no cooperación de hermandad, determinado por el peor hermano de A en cuanto a similitudes, • μM (A) = max(pk), es el grado de no cooperación de mensaje, determinado por el mensaje más urgente recibido. Entonces, el grado de no cooperación μ(A) del agente A es: μ(A) = max(μH (A), μB(A), μM (A)) (4) Luego, tenemos tres casos que determinan qué tipo de acción elegirá A: • si μ(A) = μH (A) entonces A utilizará el algoritmo de cobertura de cabeza que detallamos en la subsección anterior • si μ(A) = μB(A) entonces A utilizará el algoritmo de agrupamiento distribuido (ver sección 3) • si μ(A) = μM (A) entonces A procesará Mk inmediatamente para ayudar a su remitente Estos tres casos resumen las actividades actuales de nuestros agentes: tienen que encontrar el mejor padre para ellos (μ(A) = μH (A)), mejorar la estructuración a través del agrupamiento (μ(A) = μB(A)) y procesar otros mensajes de agentes (μ(A) = μM (A)) para ayudarlos a cumplir sus propios objetivos. 4.3 Complejidad Experimental Revisitada Evaluamos la complejidad experimental de todo el sistema multiagente cuando todas las reglas están activadas. En este caso, la métrica utilizada es el número de mensajes intercambiados en el sistema. Una vez más, el sistema ha sido ejecutado con conjuntos de datos de entrada que van desde diez hasta cien términos. El valor dado es el promedio del número de mensajes enviados en el sistema en su totalidad durante cien ejecuciones sin interacción del usuario. Resulta en las gráficas de la figura 10. La curva número 1 representa el promedio del valor obtenido. La curva número 2 representa el promedio del valor obtenido cuando solo se activa el algoritmo de agrupamiento distribuido, no el conjunto completo de reglas. La curva número 3 representa el polinomio que minimiza el error con la curva número 1. El término de mayor grado de este polinomio es en n3, entonces nuestro sistema multiagente tiene una complejidad O(n3). Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Cantidad de mensajes Cantidad de términos de entrada 1. Dinamo, todas las reglas (en promedio, con mínimo y máximo) 2. Agrupamiento distribuido solo (en promedio) 2. Figura 10: Resultados experimentales en promedio de un polinomio cúbico. Además, notemos la variación muy pequeña de las actuaciones promedio con el máximo y el mínimo. En el peor caso para 100 términos, la variación es de 126.73 para un promedio de 20,737.03 (alrededor del 0.6%), lo que demuestra la excelente estabilidad del sistema. Finalmente, las reglas adicionales de cobertura de cabeza son una verdadera mejora sobre el algoritmo distribuido por sí solo. Introducen más restricciones y se alcanza el punto de estabilidad con menos interacciones y toma de decisiones por parte de los agentes. Significa que se intercambian menos mensajes en el sistema al obtener un árbol de mayor calidad para el ontólogo. 5. DISCUSIÓN Y PERSPECTIVAS 5.1 Limitación actual de nuestro enfoque La limitación más importante de nuestro algoritmo actual es que el resultado depende del orden en que se agregan los datos. Cuando el sistema funciona por sí solo en un conjunto de datos fijo proporcionado durante la inicialización, el resultado final es equivalente a lo que podríamos obtener con un algoritmo centralizado. Por el contrario, añadir un nuevo elemento después de una primera estabilización tiene un impacto en el resultado final. Figura 11: Árbol de agentes conceptuales después de la estabilización autónoma del sistema. Para ilustrar nuestras afirmaciones, presentamos otro ejemplo del sistema en funcionamiento. Al utilizar datos de prueba y permitir que el sistema funcione por sí mismo, obtenemos la jerarquía de la figura 11 después de la estabilización. Figura 12: Árbol de agentes conceptuales después de tener en cuenta la hepatitis. Luego, el ontólogo interactúa con el sistema y agrega un nuevo concepto descrito por el término hepatitis y vinculado a la raíz. El sistema reacciona y se estabiliza, luego obtenemos la figura 12 como resultado. La hepatitis se encuentra en la rama derecha, pero no hemos obtenido la misma organización que la figura 6 del ejemplo anterior. Necesitamos mejorar nuestro algoritmo distribuido para permitir que un concepto se mueva a lo largo de una rama. Actualmente estamos trabajando en las reglas requeridas, pero la comparación con el algoritmo centralizado se volverá muy difícil. En particular, ya que tendrán en cuenta criterios ignorados por el algoritmo centralizado. 5.2 Poda para la construcción de ontologías En la sección 3, presentamos el algoritmo de agrupamiento distribuido utilizado en el sistema Dynamo. Dado que este trabajo se basó inicialmente en este algoritmo, introdujo un claro sesgo hacia los árboles binarios como resultado. Pero debemos tener en cuenta que estamos tratando de obtener taxonomías que sean más refinadas y concisas. Aunque la regla de cobertura de la cabeza es una mejora porque se basa en cómo generalmente trabajan los ontólogos, solo aborda la estructuración a un nivel bajo y no a los niveles intermedios del árbol. Al observar la figura 7, es evidente que se podría realizar una poda en la taxonomía. En particular, dado que la lesión se movió, el ConceptAgent:9 podría ser eliminado, ya no es necesario. Además, la rama que comienza con ConceptAgent:8 respeta claramente la restricción de formar un árbol binario, pero sería más útil para el usuario en una forma más compacta y significativa. En este caso, ConceptAgent:10 y ConceptAgent:11 probablemente podrían fusionarse. Actualmente, nuestro sistema cuenta con las reglas necesarias para crear niveles intermedios en la taxonomía, o para que los conceptos se desplacen hacia la hoja. Como señalamos, no es suficiente, por lo que se necesitan nuevas reglas para permitir eliminar nodos del árbol o moverlos hacia la raíz. La mayor parte del trabajo necesario para desarrollar esas reglas consiste en encontrar la información estadística relevante que respaldará al ontólogo. CONCLUSIÓN Después de ser presentada como una solución prometedora, garantizar la calidad del modelo y su riqueza terminológica, la construcción de ontologías a partir del análisis de corpus textual es difícil y costosa. Requiere supervisión del analista y tener en cuenta el objetivo de la ontología. El uso de herramientas de procesamiento de lenguaje natural facilita la localización del conocimiento en textos a través del uso del lenguaje. Dicho esto, esas herramientas producen una gran cantidad de datos léxicos o gramaticales que no son triviales de examinar para definir elementos conceptuales. Nuestra contribución radica en este paso del proceso de modelado a partir de textos, antes de intentar normalizar o formalizar el resultado. Propusimos un enfoque basado en un sistema multiagente adaptativo para proporcionar al ontólogo una primera estructura taxonómica de conceptos. Nuestro sistema hace uso de una red terminológica resultante de un análisis realizado por Syntex. El estado actual de nuestro software permite producir estructuras simples, proponérselas al ontólogo y hacerlas evolucionar dependiendo de las modificaciones que él realice. Las actuaciones del sistema son interesantes y algunos aspectos son incluso comparables a su contraparte centralizada. Sus fortalezas son principalmente cualitativas ya que permite interacciones de usuario más sutiles y una adaptación progresiva a nueva información basada en el lenguaje. Desde el punto de vista de la construcción de la ontología, este trabajo es un primer paso que muestra la relevancia de nuestro enfoque. Debe continuar, tanto para garantizar una mejor robustez durante la clasificación, como para obtener estructuras semánticas más ricas que simples árboles. De estas mejoras, nos estamos enfocando principalmente en la poda para obtener mejores taxonomías. Actualmente estamos trabajando en el criterio para activar las acciones complementarias de los cambios de estructura aplicados por nuestro algoritmo de agrupamiento. En otras palabras, este algoritmo se introduce en el Sexto Congreso Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1291 niveles intermedios, y necesitamos poder eliminarlos si es necesario, para alcanzar un <br>equilibrio dinámico</br>. También desde el punto de vista de la ingeniería multiagente, su uso en un contexto de ontología dinámica ha demostrado su relevancia. Estas ontologías dinámicas pueden ser vistas como una resolución de problemas complejos, en tal caso la autoorganización a través de la cooperación ha sido una solución eficiente. Y, en general, es probable que sea interesante para otras tareas relacionadas con el diseño, incluso si nos estamos enfocando únicamente en la ingeniería del conocimiento en este artículo. Por supuesto, nuestro sistema aún requiere más trabajo de evaluación y validación para determinar con precisión las ventajas y desventajas de este enfoque. Estamos planeando trabajar en ese tipo de comparación en un futuro cercano. 7. REFERENCIAS [1] H. Assadi. Construcción de una ontología regional a partir de texto y su uso dentro de un sistema documental. Actas de la Conferencia Internacional sobre Ontología Formal y Sistemas de Información - FOIS98, páginas 236-249, 1998. [2] N. Aussenac-Gilles y D. Sörgel. Análisis de texto para ingeniería de ontologías y terminología. Revista de Ontología Aplicada, 2005. [3] J. Bao y V. Honavar. Construcción colaborativa de ontologías con wiki@nt. Actas del Taller de Evaluación de Herramientas Basadas en Ontologías (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P. Gleizes y G. Picard. Metodologías Orientadas a Agentes, capítulo 7. Ingeniería de Sistemas Multiagente Autoadaptativos: la Metodología ADELFE, páginas 172-202. Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna y Y. Wilks. Antecedentes y conocimiento previo en la construcción dinámica de ontologías. Taller de la Web Semántica, SIGIR03, agosto de 2003. [6] D. Faure y C. Nedellec. Un método de agrupamiento conceptual basado en corpus para marcos verbales y adquisición de ontologías. Taller LREC sobre la adaptación de recursos léxicos y corpus a sublenguajes y aplicaciones, 1998. [7] F. Gandon. Ingeniería de Ontologías: una Encuesta y un Retorno de Experiencia. INRIA, 2002. [8] J.-P. Georgé, G. Picard, M.-P. Gleizes y P. Glize. Diseño Vivo para Sistemas Computacionales Abiertos. 12º Talleres Internacionales de la IEEE sobre Tecnologías Habilitadoras, Infraestructura para Empresas Colaborativas, páginas 389-394, junio de 2003. [9] M.-P. Gleizes, V. Camps y P. Glize. Una teoría de computación emergente basada en la autoorganización cooperativa para sistemas artificiales adaptativos. Cuarto Congreso Europeo de Ciencias de los Sistemas, septiembre de 1999. [10] J. Heflin y J. Hendler. Ontologías dinámicas en la web. Conferencia de la Asociación Americana de Inteligencia Artificial, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault y M.-C. Jaulent. Extracción de terminología del texto para construir una ontología en cuidados intensivos quirúrgicos. Actas del simposio anual de la AMIA 2002, 2002. [12] K. Lister, L. Sterling y K. Taveter. Reconciliando diferencias ontológicas mediante agentes asistentes. AAMAS06, mayo de 2006. [13] A. Maedche. Aprendizaje de ontologías para la Web Semántica. Editorial Kluwer Academic, 2002. [14] A. Maedche y S. Staab. Extracción de ontologías a partir de texto. EKAW 2000, páginas 189-202, 2000. [15] C. D. Manning y H. Schütze. Fundamentos del Procesamiento del Lenguaje Natural Estadístico. El MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding y S. Brueckner. Clustering jerárquico descentralizado dinámico en cualquier momento. 29ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, agosto de 2006. 1292 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        }
    }
}