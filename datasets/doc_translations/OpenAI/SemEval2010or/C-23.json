{
    "id": "C-23",
    "original_text": "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C. ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers. Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes. However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers. In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids. Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time. We also provide an effective scheme for reducing the cost of reassembling data blocks. Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications. H.3.5 [Online Information Services]: Data sharing, Web-based services. General Terms Management, Performance, Design, Experimentation. 1. INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems. Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment. Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access. The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12]. Replicating popular content in distributed servers is widely used in practice [14, 17, 19]. Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites. Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity. Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients. One way to improve download speeds is to determine the best replica locations using replica selection techniques [19]. This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet. Another way is to use co-allocation technology [17] to download data. Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel. This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17]. Several co-allocation strategies were provided in previous work [17]. An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block. Therefore, it is important to reduce the differences in finishing time among replica servers. In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24]. Experimental results show that our approach is superior to previous methods and achieved the best overall performance. We also discuss combination cost and provide an effective scheme for reducing it. The remainder of this paper is organized as follows. Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3. In Section 4, an efficient replica selection service is proposed by us. Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6. Section 7 concludes this research paper. 2. BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory). The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4]. Data Grids [1, 2, 16] federate a lot of storage resources. Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19]. In other words, the role of a replica manager is to create or delete replicas, within specified storage systems. Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits. A replica manager typically maintains a replica catalog containing replica site addresses and the file instances. The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files. The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications. A replica or location is a subset of a collection that is stored on a particular physical storage system. There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid. These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems. The replica catalog includes optional entries that describe individual logical files. Logical files are entities with globally unique names that may have one or more physical instances. The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection. A Data Grid may contain multiple replica catalogs. For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest. It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections. In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19]. The criteria of selection depend on characteristics of the application. By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance. Much previous effort has been devoted to the replica selection problem. The common process of replica selection consists of three steps: data preparation, preprocessing and prediction. Then, applications can select a replica according to its specific attributes. Replica selection is important to data-intensive applications, and it can provide location transparency. When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications. Many organizations use the Globus Toolkit to build computational Grids to support their applications. The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management. Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security. GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol. They all use the GSI security protocol at the connection layer [10, 11, 16, 13]. The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3]. This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use. In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services. GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project. There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets. The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements. The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources. A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored. The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS. The Sysstat package incorporates the sar, mpstat, and iostat commands. The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection. The iostat command reports CPU statistics and I/O statistics for tty devices and disks. The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others. Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3. CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems. Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit. Applications specify the characteristics of desired data and pass the attribute description to a broker. The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files. Figure 1. Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23]. This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations. The co-allocation agent then downloads the data in parallel from the selected servers. In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers. GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks. Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels. Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections. Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8]. In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure. The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services. One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information. It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading). And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment. As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas. A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas. Several prediction metrics have been developed to help replica selection. For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs. In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection. In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP. It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block. Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows. It does not address the bandwidth differences among the various client-server links. History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates. Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing. The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size. Available servers are assigned single blocks to deliver in parallel. When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded. The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file. Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing. The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether. The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block. In most cases, this wastes much time and decreases overall performance. Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture. It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4. AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments. See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer. The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site. If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies. The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations. The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below. The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP. When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem. In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large. In other words, data file transfer times are tightly dependent on network bandwidth situations. Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible. The Network Weather Service (NWS) is a powerful toolkit for this purpose. CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs. CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site. The measurement of it is done by the Globus Toolkit / MDS. I/O state: Data Grid nodes consist of different heterogeneous storage systems. Data files in Data Grids are huge. If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance. We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service. We listed some influencing factors for our cost model in the preceding section. However, we must express these factors in mathematical notation for further analysis. We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants. The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors. OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading. After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times. When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance. Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time. Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials. The client then establishes a control channel, sets up transfer parameters, and requests data channel creation. When the channel has been established, the data begins flowing. Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests. Data pathways need be opened only once and may handle many transfers before being closed. This allows the same data pathways to be used for multiple file transfers. However, data channels must be explicitly reset between transfer requests. This is less time-costly. Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections. With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets. When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5. DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers. However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid. The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers. The goal is to make the expected finish time of all servers the same. As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths. The co-allocator then assigns the blocks to servers for transfer. At this moment, it is expected that the transfer finish time will be consistent at E(T1). However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2). Once the quickest server finishes its work at time T1, the next section is assigned to the servers again. This allows each server to finish its assigned workload by the expected time at E(T2). These adjustments are repeated until the entire file transfer is finished. Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ... Figure 2. The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3. When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix. The co-allocation service gets this list of selected replica servers. Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server. The RecursiveAdjustment Co-Allocation process is as follows. A new section of a file to be allocated is first defined. The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process. And thus, there are k sections, while Tj denotes the time section j allocated. UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned. Figure 3. The Recursive-Adjustment Co-Allocation process. In the next step, SEj is divided into several blocks and assigned to n servers. Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18]. The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round. Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future. This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish. If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj. In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers. After allocation, all channels continue transferring data blocks. When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again. The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation. These unassigned portions of the file ranges become smaller after each allocation. Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition. However, when is it appropriate to stop continuous adjustment? We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds. When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section. The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops. ExpectFinishedTime criterion specifies the remaining time transfer is expected to take. When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops. The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated. Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc. However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence. By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time. However, lower values will also increase co-allocation times, and hence, increase co-allocation costs. Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance. The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms. We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished. It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish. Of course, this makes it necessary to maintain the original splitting order. Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers. If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6. EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy. We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive). We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block. We also analyze the overall performances in the various cases. We performed wide-area data transfer experiments using our GridFTP GUI client tool. We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL). All these institutions are in Taiwan, and each is at least 10 Km from THU. Figure 4 shows our Data Grid testbed. Our servers have Globus 3.0.2 or above installed. Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4. Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB. For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers. Figure 5 shows a snapshot of our GridFTP client tool. This client tool is developed by using Java CoG. It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots. Table 1 shows average transmission rates between THU and each replica server. These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs. Table 1. GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5. Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme. Figure 6(a) shows total idle time for various file sizes. Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size. These results demonstrate that our approach efficiently reduces the differences in servers finish times. The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers. Figure 7 shows total completion time experimental results in a detailed cost structure view. Servers were at PU, DL, and HIT, with the client at THU. The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers. Our co-allocation scheme finished the job faster than the other co-allocation strategies. Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT. In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used. The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB. They also show that in most cases, overall performance increased as the number of co-allocated flows increased. We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case. However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase. On the contrary, it decreased. We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance. This means that more download flows do not necessarily result in higher performance. We must choose appropriate numbers of flows to achieve optimum performance. We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b). The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7. Completion times for various methods; servers are at PU, DL, and HIT. Table 2. The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7. CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks. A previous work showed that the dynamic co-allocation scheme leads to performance improvements. However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block. We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17]. In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment. Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server. We also discussed the re-combination cost and provided an effective scheme for reducing it. 8. REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I. Foster, A. Chervenak, and C. Kesselman. Protocols and Services for Distributed DataIntensive Science. ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I. Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I. Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I. Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I. Foster, and C. Kesselman. Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I. Foster, C. Kesselman, and S. Tuecke. The Anatomy of the Grid: Enabling Scalable Virtual Organizations. Int. J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I. Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I. Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I. Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I. Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804",
    "original_translation": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque. Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de transferencia de datos de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la transferencia de datos [24]. Los resultados experimentales muestran que nuestro enfoque es superior a los métodos anteriores y logró el mejor rendimiento general. También discutimos el costo de combinación y proporcionamos un esquema efectivo para reducirlo. El resto de este documento está organizado de la siguiente manera. La revisión de antecedentes relacionados y estudios se presentan en la Sección 2 y la arquitectura de co-asignación y trabajos relacionados se introducen en la Sección 3. En la Sección 4, proponemos un servicio eficiente de selección de réplicas. Nuestros enfoques de investigación se describen en la Sección 5, y los resultados experimentales y una evaluación del rendimiento de nuestro esquema se presentan en la Sección 6. La sección 7 concluye este documento de investigación. ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico). El término Data Grid tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes. Las Rejillas de Datos [1, 2, 16] federan una gran cantidad de recursos de almacenamiento. Grandes colecciones de datos medidos o calculados están surgiendo como recursos importantes en muchas aplicaciones intensivas en datos. 2.1.1 Gestión de Réplicas La gestión de réplicas implica la creación o eliminación de réplicas en un sitio de cuadrícula de datos [19]. En otras palabras, el rol de un administrador de réplicas es crear o eliminar réplicas, dentro de sistemas de almacenamiento especificados. La mayoría de las veces, estas réplicas son copias exactas de los archivos originales, creadas solo para aprovechar ciertos beneficios de rendimiento. Un administrador de réplicas generalmente mantiene un catálogo de réplicas que contiene las direcciones de los sitios de réplica y las instancias de archivos. El servicio de gestión de réplicas es responsable de administrar la replicación de copias completas y parciales de conjuntos de datos, definidos como colecciones de archivos. El servicio de gestión de réplicas es solo un componente en un entorno de Data Grid que brinda soporte para aplicaciones de alto rendimiento y alta intensidad de datos. Una réplica o ubicación es un subconjunto de una colección que se almacena en un sistema de almacenamiento físico particular. Puede haber múltiples subconjuntos posiblemente superpuestos de una colección almacenados en múltiples sistemas de almacenamiento en una Rejilla de Datos. Estos sistemas de almacenamiento en red pueden utilizar una variedad de tecnologías de almacenamiento subyacentes y protocolos de movimiento de datos, que son independientes de la gestión de réplicas. 2.1.2 Catálogo de Réplicas Como se mencionó anteriormente, el propósito del catálogo de réplicas es proporcionar mapeos entre nombres lógicos de archivos o colecciones y una o más copias de los objetos en sistemas de almacenamiento físico. El catálogo de réplicas incluye entradas opcionales que describen archivos lógicos individuales. Los archivos lógicos son entidades con nombres globalmente únicos que pueden tener una o más instancias físicas. El catálogo puede contener opcionalmente una entrada de archivo lógico en el catálogo de réplicas para cada archivo lógico en una colección. Una cuadrícula de datos puede contener múltiples catálogos de réplicas. Por ejemplo, una comunidad de investigadores interesados en un tema de investigación particular podría mantener un catálogo de réplicas para una colección de conjuntos de datos de interés mutuo. Es posible crear jerarquías de catálogos de réplicas para imponer una estructura similar a la de un directorio en colecciones lógicas relacionadas. Además, el administrador de réplicas puede realizar control de acceso en catálogos completos, así como en archivos lógicos individuales. 2.1.3 Selección de Réplicas El propósito de la selección de réplicas [16] es seleccionar una réplica entre los sitios que constituyen una Data Grid [19]. Los criterios de selección dependen de las características de la aplicación. Al utilizar este mecanismo, los usuarios de la Data Grid pueden gestionar fácilmente réplicas de conjuntos de datos en sus sitios, con un mejor rendimiento. Se ha dedicado mucho esfuerzo previo al problema de selección de réplicas. El proceso común de selección de réplicas consta de tres pasos: preparación de datos, preprocesamiento y predicción. Entonces, las aplicaciones pueden seleccionar una réplica según sus atributos específicos. La selección de réplicas es importante para aplicaciones intensivas en datos, y puede proporcionar transparencia de ubicación. Cuando un usuario solicita acceso a un conjunto de datos, el sistema determina una forma apropiada de entregar la réplica al usuario. 2.2 Globus Toolkit y GridFTP El Proyecto Globus [9, 11, 16] proporciona herramientas de software colectivamente llamadas El Kit de Herramientas Globus que facilita la construcción de Grids computacionales y aplicaciones basadas en Grid. Muchas organizaciones utilizan la Herramienta Globus para construir Grillas computacionales que apoyen sus aplicaciones. La composición del Globus Toolkit se puede visualizar como tres pilares: Gestión de Recursos, Servicios de Información y Gestión de Datos. Cada pilar representa un componente principal del Globus Toolkit y hace uso de una base común de seguridad. GRAM implementa un protocolo de gestión de recursos, MDS implementa un protocolo de servicios de información y GridFTP implementa un protocolo de transferencia de datos. Todos utilizan el protocolo de seguridad GSI en la capa de conexión [10, 11, 16, 13]. La alianza Globus propuso un protocolo común de transferencia y acceso de datos llamado GridFTP que proporciona un movimiento seguro y eficiente de datos en entornos de Grid. Este protocolo, que extiende el protocolo estándar FTP, proporciona un superconjunto de las características ofrecidas por los diversos sistemas de almacenamiento en red actualmente en uso. Para resolver los problemas que surgen, la comunidad de Data Grid intenta desarrollar un mecanismo seguro y eficiente de transporte de datos y servicios de gestión de réplicas. GridFTP es un protocolo de transporte de datos confiable, seguro y eficiente que se desarrolló como parte del proyecto Globus. Hay otra tecnología clave del proyecto Globus, llamada catálogo de réplicas [16], que se utiliza para registrar y gestionar copias completas y parciales de conjuntos de datos. El catálogo de réplicas contiene la información de mapeo de un archivo lógico o colección a uno o más archivos físicos. 2.3 Servicio Meteorológico de Red El Servicio Meteorológico de Red (NWS) [22] es un sistema de monitoreo generalizado y distribuido para producir pronósticos de rendimiento a corto plazo basados en mediciones de rendimiento históricas. El objetivo del sistema es caracterizar y predecir dinámicamente el rendimiento entregable a nivel de aplicación a partir de un conjunto de recursos de red y computacionales. Una instalación típica implica un nws_nameserver, uno o más nws_memory (que pueden residir en máquinas diferentes) y un nws_sensor ejecutándose en cada máquina con los recursos que se van a monitorear. El sistema incluye sensores para el rendimiento TCP/IP de extremo a extremo (ancho de banda y latencia), porcentaje de CPU disponible y memoria no paginada disponible. 798 2.4 Utilidades Sysstat Las utilidades Sysstat [15] son un conjunto de herramientas de monitoreo de rendimiento para el sistema operativo Linux. El paquete Sysstat incorpora los comandos sar, mpstat e iostat. El comando sar recopila y reporta información de actividad del sistema, la cual también puede ser guardada en un archivo de actividad del sistema para inspección futura. El comando iostat informa estadísticas de la CPU y estadísticas de E/S para dispositivos tty y discos. Las estadísticas reportadas por SAR se refieren a tasas de transferencia de E/S, actividad de paginación, actividades relacionadas con procesos, interrupciones, actividad de red, utilización de memoria y espacio de intercambio, utilización de CPU, actividades del kernel y estadísticas de TTY, entre otros. Las máquinas Uniprocessor (UP) y Symmetric multiprocessor (SMP) son totalmente compatibles. 3. La arquitectura de co-asignación propuesta en [17] consta de tres componentes principales: un servicio de información, un intermediario/co-asignador y sistemas de almacenamiento locales. La Figura 1 muestra la co-asignación de transferencias de datos de la red, que es una extensión de la plantilla básica para la gestión de recursos [7] proporcionada por Globus Toolkit. Las aplicaciones especifican las características de los datos deseados y envían la descripción de los atributos a un intermediario. El corredor consulta los recursos disponibles y obtiene las ubicaciones de réplicas de los servicios de información [6] y los servicios de gestión de réplicas [19], y luego obtiene una lista de ubicaciones físicas para los archivos deseados. Figura 1. La arquitectura de coasignación de cuadrícula de datos [17] pasa las ubicaciones candidatas de réplicas a un servicio de selección de réplicas [19], que fue presentado en un trabajo previo [23]. Este servicio de selección de réplicas proporciona estimaciones del rendimiento de transferencia de candidatos basadas en un modelo de costos y elige las cantidades apropiadas para solicitar a las ubicaciones más adecuadas. El agente de coasignación luego descarga los datos en paralelo desde los servidores seleccionados. En estas investigaciones, se utilizó GridFTP [1, 11, 16] para habilitar transferencias de datos en paralelo. GridFTP es un protocolo de transferencia de datos de alto rendimiento, seguro y confiable, optimizado para redes de área amplia de alta velocidad de banda ancha. Entre sus muchas características se encuentran la seguridad, los flujos paralelos, las transferencias de archivos parciales, las transferencias de terceros y los canales de datos reutilizables. Su capacidad de transferencia parcial de archivos permite recuperar archivos de servidores de datos especificando los desplazamientos de inicio y fin de las secciones de archivos. Las rejillas de datos consisten en recursos informáticos y de almacenamiento dispersos ubicados en diferentes países/regiones pero accesibles para los usuarios [8]. En este estudio utilizamos el middleware de cuadrícula Globus Toolkit [16] como infraestructura de la cuadrícula de datos. El Globus Toolkit proporciona soluciones para consideraciones como seguridad, gestión de recursos, gestión de datos y servicios de información. Uno de sus componentes principales es MDS [6, 11, 16, 25], el cual está diseñado para proporcionar un mecanismo estándar para descubrir y publicar información sobre el estado y la configuración de recursos. Proporciona una interfaz uniforme y flexible para los datos recopilados por proveedores de información de nivel inferior en dos modos: estáticos (por ejemplo, sistemas operativos, tipos de CPU y arquitecturas de sistemas) y datos dinámicos (por ejemplo, disponibilidad de disco, disponibilidad de memoria y carga). Y utiliza GridFTP [1, 11, 16], un protocolo de transporte de datos confiable, seguro y eficiente para proporcionar una gestión eficiente y transferencia de terabytes o petabytes de datos en un entorno de recursos distribuidos de amplia área. A medida que los conjuntos de datos se replican dentro de entornos de Grid para fiabilidad y rendimiento, los clientes requieren la capacidad de descubrir réplicas de datos existentes, y crear y registrar nuevas réplicas. Un Servicio de Localización de Réplicas (RLS) proporciona un mecanismo para descubrir y registrar réplicas existentes. Se han desarrollado varios métricas de predicción para ayudar en la selección de réplicas. Por ejemplo, Vazhkudai y Schopf [18, 20, 21] utilizaron historiales de transferencia de datos pasados para estimar las velocidades actuales de transferencia de datos. En nuestro trabajo previo [23, 24], propusimos un modelo de costo de selección de réplicas y un servicio de selección de réplicas para llevar a cabo la selección de réplicas. En [17], el autor propone una arquitectura de coasignación para coasignar transferencias de datos de Grid a través de múltiples conexiones, aprovechando la función de copia parcial de GridFTP. También proporciona Balanceo de Carga por Fuerza Bruta, Basado en Historial y Dinámico para asignar bloques de datos. Coasignación por Fuerza Bruta: La coasignación por Fuerza Bruta funciona dividiendo el tamaño del archivo de manera equitativa entre los flujos disponibles. No aborda las diferencias de ancho de banda entre los distintos enlaces cliente-servidor. Coasignación basada en historial: El esquema de coasignación basado en historial mantiene los tamaños de bloque por flujo proporcionales a las tasas de transferencia predichas. Balanceo de carga conservador: Uno de sus métodos de coasignación dinámica es el Balanceo de Carga Conservador. La estrategia de coasignación dinámica de equilibrio de carga conservadora divide los conjuntos de datos solicitados en k bloques disjuntos de tamaño igual. Los servidores disponibles se asignan bloques individuales para entregar en paralelo. Cuando un servidor termina de entregar un bloque, se solicita otro, y así sucesivamente, hasta que se descarga el archivo completo. Las cargas en los flujos coasignados se ajustan automáticamente porque los servidores más rápidos entregarán más rápidamente proporcionando porciones más grandes del archivo. Equilibrio de carga agresivo: Otra estrategia dinámica de colocación conjunta, presentada en [17], es el Equilibrio de carga agresivo. La estrategia de co-asignación dinámica de equilibrio de carga agresiva presentada en [17] añade funciones que modifican las entregas de tamaño de bloque al: (1) aumentar progresivamente las cantidades de datos solicitadas a servidores más rápidos, y (2) reducir las cantidades de datos solicitadas a servidores más lentos o dejar de solicitar datos de ellos por completo. Las estrategias de coasignación descritas anteriormente no solucionan la limitación de que los servidores más rápidos tengan que esperar a que el servidor más lento entregue su último bloque. En la mayoría de los casos, esto desperdicia mucho tiempo y disminuye el rendimiento general. Por lo tanto, proponemos un enfoque eficiente llamado Recursivo-Ajuste Co-Asignación y basado en una arquitectura de co-asignación. Mejora la co-asignación dinámica y reduce el tiempo de espera, mejorando así el rendimiento general de la transferencia. Un SERVICIO DE SELECCIÓN DE RÉPLICAS EFICIENTE Construimos un servicio de selección de réplicas para permitir a los clientes seleccionar los servidores de réplicas mejores en entornos de Data Grid. Consulte a continuación para obtener una descripción detallada. 4.1 Escenario de Selección de Réplicas Nuestro modelo propuesto de selección de réplicas se ilustra en [23], que muestra cómo un cliente identifica la mejor ubicación para una transferencia de réplica deseada. El cliente primero inicia sesión en un sitio local y ejecuta la aplicación de la plataforma Data Grid, la cual verifica si los archivos están disponibles en el sitio local. Si están presentes en el sitio local, la aplicación accede a ellos inmediatamente; de lo contrario, pasa los nombres de archivo lógicos al servidor del catálogo de réplicas, que devuelve una lista de ubicaciones físicas para todas las copias registradas. La aplicación envía esta lista de ubicaciones de réplicas a un servidor de selección de réplicas, que identifica las ubicaciones de destino del sistema de almacenamiento para todas las operaciones de transferencia de datos candidatas. El servidor de selección de réplicas envía las posibles ubicaciones de destino al servidor de información, el cual proporciona mediciones de rendimiento y predicciones de los tres factores del sistema descritos a continuación. El servidor de selección de réplicas elige mejores ubicaciones de réplicas según estas estimaciones y devuelve la información de ubicación a la aplicación de transferencia, la cual recibe la réplica a través de GridFTP. Cuando la aplicación finaliza, devuelve los resultados al usuario. 4.2 Factores del sistema Determinar la mejor base de datos entre muchas con las mismas réplicas es un problema significativo. En nuestro modelo, consideramos tres factores del sistema que afectan la selección de réplicas: Ancho de banda de red: Este es uno de los factores más significativos de Data Grid ya que los archivos de datos en entornos de Data Grid suelen ser muy grandes. En otras palabras, los tiempos de transferencia de archivos de datos dependen estrechamente de las situaciones de ancho de banda de la red. Debido a que el ancho de banda de la red es un factor dinámico inestable, debemos medirlo con frecuencia y predecirlo de la manera más precisa posible. El Servicio Meteorológico de Red (NWS) es una herramienta poderosa para este propósito. Carga de la CPU: Las plataformas de cuadrícula consisten en números de sistemas heterogéneos, construidos con diferentes arquitecturas de sistema, por ejemplo, plataformas de clúster, supercomputadoras, PC. La carga de la CPU es un factor del sistema dinámico, y una carga pesada en la CPU del sistema afectará sin duda el proceso de descarga de archivos de datos desde el sitio. La medición se realiza mediante el Toolkit Globus / MDS. Estado de E/S: Los nodos de la cuadrícula de datos consisten en diferentes sistemas de almacenamiento heterogéneos. Los archivos de datos en las redes de datos son enormes. Si el estado de E/S de un sitio del que deseamos descargar archivos está muy ocupado, afectará directamente el rendimiento de la transferencia de datos. Medimos los estados de E/S utilizando las utilidades sysstat [15]. Nuestro Modelo de Costo de Selección de Réplicas La función objetivo de un modelo de costos para el almacenamiento de datos distribuidos y replicados es la puntuación de información del servicio de información. Enumeramos algunos factores influyentes para nuestro modelo de costos en la sección anterior. Sin embargo, debemos expresar estos factores en notación matemática para un análisis más detallado. Suponemos que el nodo i es el sitio local en el que el usuario o la aplicación inicia sesión, y el nodo j posee la réplica que el usuario o la aplicación desea. Los siete parámetros del sistema que considera nuestro modelo de costos de selección de réplicas son: Scorei-j: el valor de puntuación representa qué tan eficientemente un usuario o aplicación en el nodo i puede adquirir una réplica del nodo j BW jiP: porcentaje de ancho de banda disponible del nodo i al nodo j; ancho de banda actual dividido por el ancho de banda teórico más alto BBW: peso del ancho de banda de red definido por el administrador de Data Grid CPU jP: porcentaje de estados de inactividad de la CPU del nodo j WCPU: peso de carga de la CPU definido por el administrador de Data Grid OI jP /: porcentaje de estados de inactividad de E/S del nodo j WI/O: peso del estado de E/S definido por el administrador de Data Grid Definimos la siguiente fórmula general utilizando estos factores del sistema. Los tres factores influyentes en esta fórmula: WBW, WCPU y WI/O describen los pesos de la CPU, E/S y ancho de banda de red, los cuales pueden ser determinados por los administradores de la organización de Data Grid según los diversos atributos de los sistemas de almacenamiento en los nodos de Data Grid, ya que algunos equipos de almacenamiento no afectan la carga de la CPU. Después de varias mediciones experimentales, determinamos que el ancho de banda de la red es el factor más significativo que influye directamente en los tiempos de transferencia de datos. Cuando realizamos transferencias de datos utilizando el protocolo GridFTP, descubrimos que los estados de la CPU y E/S afectan ligeramente el rendimiento de la transferencia de datos. Sus valores respectivos en nuestro entorno de Data Grid son 80%, 10% y 10%. 4.4 Análisis de Costo de Co-Asignación Cuando los clientes descargan conjuntos de datos utilizando la tecnología de co-asignación de GridFTP, se incurre en tres costos de tiempo: el tiempo requerido para la autenticación del cliente en el servidor de GridFTP, el tiempo real de transmisión de datos y el tiempo de reensamblaje de bloques de datos. Tiempo de autenticación: Antes de una transferencia, el cliente debe cargar un proxy de Globus y autenticarse en el servidor GridFTP con las credenciales de usuario especificadas. El cliente luego establece un canal de control, configura los parámetros de transferencia y solicita la creación de un canal de datos. Cuando se ha establecido el canal, los datos comienzan a fluir. Tiempo de transmisión: El tiempo de transmisión se mide desde el momento en que el cliente comienza a transferir hasta el momento en que se completan todos los trabajos de transmisión, e incluye el tiempo requerido para restablecer los canales de datos entre las solicitudes de transferencia. Las vías de datos solo necesitan abrirse una vez y pueden manejar muchas transferencias antes de cerrarse. Esto permite que las mismas vías de datos se utilicen para múltiples transferencias de archivos. Sin embargo, los canales de datos deben reiniciarse explícitamente entre las solicitudes de transferencia. Esto es menos costoso en tiempo. Tiempo de combinación: la arquitectura de coasignación explota la característica de copia parcial de la herramienta de movimiento de datos GridFTP para permitir transferencias de datos a través de múltiples conexiones. Con la transferencia parcial de archivos, se pueden recuperar secciones de archivos de servidores de datos especificando solo los desplazamientos de inicio y fin de la sección. Cuando se entregan estas secciones de archivo, es posible que necesiten ser reensambladas; la operación de reensamblaje conlleva un costo adicional de tiempo. 5. ESTRATEGIA DE COASIGNACIÓN DINÁMICA La coasignación dinámica, descrita anteriormente, es el enfoque más eficiente para reducir la influencia de las variaciones de red entre clientes y servidores. Sin embargo, el tiempo de inactividad de los servidores más rápidos esperando a que el servidor más lento entregue el último bloque sigue siendo un factor importante que afecta la eficiencia general, el cual el Balanceo de Carga Conservador y el Balanceo de Carga Agresivo [17] no pueden evitar de manera efectiva. El enfoque propuesto en el presente documento, un mecanismo de asignación dinámica llamado Coasignación Recursiva-Ajustable, puede superar esto y, por lo tanto, mejorar el rendimiento de transferencia de datos. 5.1 Coasignación Recursiva-Ajustable La Coasignación Recursiva-Ajustable funciona ajustando continuamente la carga de trabajo de cada servidor de réplicas para que corresponda a su ancho de banda en tiempo real durante las transferencias de archivos. El objetivo es hacer que el tiempo de finalización esperado de todos los servidores sea el mismo. Como muestra la Figura 2, cuando se selecciona primero una sección de archivo apropiada, se divide en tamaños de bloque adecuados según los anchos de banda del servidor respectivos. El coasignador luego asigna los bloques a los servidores para la transferencia. En este momento, se espera que el tiempo de finalización de la transferencia sea consistente en E(T1). Sin embargo, dado que los anchos de banda del servidor pueden fluctuar durante las entregas de segmentos, el tiempo real de finalización puede ser diferente (línea sólida, en la Figura 2). Una vez que el servidor más rápido termina su trabajo en el tiempo T1, la siguiente sección se asigna nuevamente a los servidores. Esto permite que cada servidor termine su carga de trabajo asignada para el tiempo esperado en E(T2). Estos ajustes se repiten hasta que se complete la transferencia de todo el archivo. Servidor 1 Servidor 2 Servidor 3 Ronda 1 Ronda 2 E(T1) E(T2)T1 Archivo A Sección 1 Sección 2 ... ... ... Figura 2. El proceso de ajuste del proceso de coasignación recursiva se ilustra en la Figura 3. Cuando un usuario solicita el archivo A, el servicio de selección de réplicas responde con el subconjunto de todos los servidores disponibles definidos por la matriz de rendimiento máximo. El servicio de co-asignación recibe esta lista de servidores réplica seleccionados. Suponiendo que se seleccionan n servidores réplica, Si denota el servidor i tal que 1 i n. Luego se establece una conexión para la descarga de archivos con cada servidor. El proceso de Co-Asignación de Ajuste Recursivo es el siguiente. Una nueva sección de un archivo a asignar es primero definida. El tamaño de la sección, SEj, es: SEj = TamañoArchivoNoAsignado , (0 < < 1) (2) donde SEj denota la sección j tal que 1 ≤ j ≤ k, asumiendo que asignamos k veces para el proceso de descarga. Y así, hay k secciones, mientras que Tj denota el tiempo asignado a la sección j. UnassignedFileSize es la porción del archivo A que aún no se ha distribuido para su descarga; inicialmente, UnassignedFileSize es igual al tamaño total del archivo A. es la tasa que determina cuánto de la sección queda por asignar. Figura 3. El proceso de Co-Asignación de Ajuste Recursivo. En el siguiente paso, SEj se divide en varios bloques y se asigna a n servidores. Cada servidor tiene una tasa de transferencia en tiempo real al cliente de Bi, la cual es medida por el Servicio Meteorológico de Red (NWS) [18]. El tamaño de bloque por flujo desde SEj para cada servidor i en el tiempo Tj es: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) donde UnFinishSizei denota el tamaño de bloques de transferencia no finalizados asignados en rondas anteriores en el servidor i. UnFinishSizei es igual a cero en la primera ronda. Idealmente, dependiendo del ancho de banda en tiempo real en el momento Tj, se espera que cada flujo termine su carga de trabajo en el futuro. Esto cumple con nuestro requisito de minimizar el tiempo que los servidores más rápidos deben esperar a que el servidor más lento termine. Si, en algunos casos, las variaciones en la red degradan considerablemente las tasas de transferencia, UnFinishSizei puede exceder n i ii n i ij BBzeUnFinishSiSE 11 *)(, que es el tamaño total del bloque que se espera transferir después de Tj. En tales casos, el coasignador elimina los servidores de antemano y asigna SEj a otros servidores. Después de la asignación, todos los canales continúan transfiriendo bloques de datos. Cuando un canal más rápido termina sus bloques de datos asignados, el coasignador comienza a asignar nuevamente una sección no asignada del archivo A. El proceso de asignar bloques de datos 801 para ajustar el tiempo de finalización del flujo esperado continúa hasta que se haya asignado todo el archivo. 5.2 Determinar cuándo detener el ajuste continuo Nuestro enfoque obtiene nuevas secciones de archivos completos dividiendo rangos de archivos no asignados en cada ronda de asignación. Estas porciones no asignadas de los rangos de archivo se vuelven más pequeñas después de cada asignación. Dado que el ajuste es continuo, funcionaría como un bucle infinito si no estuviera limitado por una condición de parada. Sin embargo, ¿cuándo es apropiado detener el ajuste continuo? Proporcionamos dos criterios de monitoreo, LeastSize y ExpectFinishedTime, para permitir a los usuarios definir umbrales de parada. Cuando se alcanza un umbral, el servidor de coasignación deja de dividir el resto del archivo y asigna ese resto como la sección final. El criterio LeastSize especifica el archivo más pequeño que queremos procesar, y cuando la porción no asignada de UnassignedFileSize cae por debajo de la especificación de LeastSize, la división se detiene. El criterio ExpectFinishedTime especifica el tiempo restante que se espera que dure la transferencia. Cuando el tiempo de transferencia esperado de la porción no asignada de un archivo cae por debajo del tiempo especificado por ExpectFinishedTime, la división del archivo se detiene. El valor esperado del tiempo de descanso se determina por: 1 n i iBFileSizeUnAssigned (4) Estos dos criterios determinan el tamaño final de la sección asignada. Valores de umbral más altos inducirán menos divisiones y generarán costos de co-asignación más bajos, que incluyen el establecimiento de conexiones, negociación, reensamblaje, etc. Sin embargo, aunque el tiempo total de ajuste de la coalocación puede ser menor, las variaciones de ancho de banda también pueden ejercer más influencia. Por el contrario, valores de umbral más bajos inducirán ajustes más frecuentes en la carga de trabajo del servidor dinámico y, en el caso de mayores fluctuaciones en la red, resultarán en menos diferencias en el tiempo de finalización de la transferencia del servidor. Sin embargo, valores más bajos también aumentarán los tiempos de coasignación, y por lo tanto, aumentarán los costos de coasignación. Por lo tanto, el entorno de internet, los tamaños de archivo transferidos y los costos de coasignación deben considerarse todos al determinar los umbrales óptimos. 5.3 Reducción de la Sobrecarga de Reensamblaje El proceso de reensamblar bloques después de transferencias de datos utilizando tecnología de coasignación resulta en una sobrecarga adicional y disminuye el rendimiento general. El sobrecosto de reensamblaje está relacionado con el tamaño total del bloque, y podría reducirse mediante la actualización de las capacidades del hardware o el uso de algoritmos de software mejores. Proponemos un mecanismo de reensamblaje alternativo eficiente para reducir la sobrecarga de combinación añadida una vez que se han completado todas las transmisiones de bloques. Se diferencia del método convencional en el que el software comienza el ensamblaje después de que todos los bloques hayan sido entregados, comenzando a ensamblar bloques una vez que finalizan las primeras entregas. Por supuesto, esto hace necesario mantener el orden original de división. Estrategias de coasignación como el Balanceo de Carga Conservador y la Coasignación de Ajuste Recursivo producen bloques adicionales durante las transferencias de archivos y pueden beneficiarse al habilitar el reensamblaje durante las transferencias de datos. Si algunos bloques se ensamblan de antemano, el costo de tiempo para ensamblar los bloques restantes después de que todas las transferencias finalicen puede reducirse. 6. RESULTADOS EXPERIMENTALES Y ANÁLISIS En esta sección, discutimos el rendimiento de nuestra estrategia de Co-Asignación Recursiva de Ajuste. Evaluamos cuatro esquemas de coalocación: (1) Fuerza Bruta (Brute), (2) Basado en Historial (History), (3) Balance de Carga Conservador (Conservative) y (4) Coalocación Co-Ajustada Recursiva (Recursive). Analizamos el rendimiento de cada esquema comparando su tiempo de finalización de transferencia y el tiempo total de inactividad que los servidores más rápidos pasaron esperando a que el servidor más lento terminara de entregar el último bloque. También analizamos el rendimiento general en los diferentes casos. Realizamos experimentos de transferencia de datos de gran área utilizando nuestra herramienta cliente GUI de GridFTP. Ejecutamos nuestra herramienta de cliente de co-asignación en nuestra plataforma de pruebas en la Universidad de Tunghai (THU), en la ciudad de Taichung, Taiwán, y obtuvimos archivos de cuatro servidores réplica seleccionados: uno en la Universidad de Providence (PU), uno en la Escuela Secundaria Li-Zen (LZ), uno en la Escuela de Tecnología Hsiuping (HIT) y uno en la Escuela Secundaria Da-Li (DL). Todas estas instituciones están en Taiwán, y cada una está al menos a 10 km de la THU. La Figura 4 muestra nuestro banco de pruebas de la cuadrícula de datos. Nuestros servidores tienen instalado Globus 3.0.2 o una versión superior. Escuela Secundaria THU Li-Zen (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD Escuela Secundaria Da-Li (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figura 4. En nuestro banco de pruebas de Data Grid, en los siguientes experimentos, establecimos = 0.5, el umbral de LeastSize en 10MB, y experimentamos con tamaños de archivo de 10 MB, 50 MB, 100 MB, 500 MB, 1000 MB, 2000 MB y 4000 MB. Para la comparación, medimos el rendimiento del Balanceo de Carga Conservador en cada tamaño utilizando los mismos números de bloques. La Figura 5 muestra una captura de pantalla de nuestra herramienta cliente GridFTP. Esta herramienta de cliente está desarrollada utilizando Java CoG. Permite un desarrollo de aplicaciones más fácil y rápido al fomentar la reutilización colaborativa de código y evitar la duplicación de esfuerzos entre entornos de resolución de problemas, portales científicos, middleware de Grid y pilotos colaborativos. La Tabla 1 muestra las tasas de transmisión promedio entre THU y cada servidor réplica. Estos números fueron obtenidos al transferir archivos de 500MB, 1000MB y 2000MB desde un único servidor réplica utilizando nuestra herramienta cliente GridFTP, y cada número es un promedio de varias ejecuciones. Tabla 1. Tasa de transmisión de extremo a extremo de GridFTP desde THU a varios servidores. Tasa de transmisión promedio del servidor: HIT 61.5 Mbps, LZ 59.5 Mbps, DL 32.1 Mbps, PU 26.7 Mbps. Figura 5. Nuestra herramienta cliente GridFTP analizó el efecto de servidores más rápidos esperando al servidor más lento para entregar el último bloque en cada esquema. La Figura 6(a) muestra el tiempo total de inactividad para diferentes tamaños de archivo. Tenga en cuenta que nuestro esquema de Co-Asignación Recursiva logró mejoras significativas en el rendimiento en comparación con otros esquemas para cada tamaño de archivo. Estos resultados demuestran que nuestro enfoque reduce eficientemente las diferencias en los tiempos de finalización de los servidores. Los resultados experimentales mostrados en la Figura 6(b) indican que nuestro esquema de comenzar la reensamblaje de bloques tan pronto como los primeros bloques han sido entregados completamente reduce el tiempo de combinación, ayudando así a estrategias de co-asignación como el Balance de Carga Conservador y la Co-Asignación de Ajuste Recursivo que producen más bloques durante las transferencias de datos. La Figura 7 muestra los resultados experimentales del tiempo total de finalización en una vista detallada de la estructura de costos. Los servidores estaban en PU, DL y HIT, con el cliente en THU. Las tres primeras barras para cada tamaño de archivo representan el tiempo para descargar el archivo completo desde un único servidor, mientras que las otras barras muestran descargas coasignadas utilizando los tres servidores. Nuestro esquema de coasignación terminó el trabajo más rápido que las otras estrategias de coasignación. Por lo tanto, podemos inferir que las principales ventajas que ofrece nuestra tecnología son tiempos de transmisión y combinación más bajos que otras estrategias de co-asignación. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de espera (seg) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de combinación (seg) Brute3 History3 Conservative3 Recursive3 Figura 6. (a) Tiempos de inactividad para varios métodos; los servidores están en PU, DL y HIT. (b) Tiempos de combinación para varios métodos; los servidores están en PU, DL y HIT. En el siguiente experimento, utilizamos la estrategia de Coasignación Recursiva-Ajustable con varios conjuntos de servidores réplica y medimos el rendimiento general, donde el rendimiento general es: Rendimiento Total = Tamaño del archivo / Tiempo Total de Finalización (5). La Tabla 2 enumera todos los experimentos que realizamos y los conjuntos de servidores réplica utilizados. Los resultados en la Figura 8(a) muestran que el uso de tecnologías de coallocation no produjo ninguna mejora para tamaños de archivo más pequeños como 10MB. También muestran que en la mayoría de los casos, el rendimiento general aumentó a medida que aumentaba el número de flujos coasignados. Observamos que para nuestro banco de pruebas y nuestra tecnología de coasignación, el rendimiento general alcanzó su valor más alto en el caso REC3_2. Sin embargo, en el caso REC4, cuando agregamos un flujo al conjunto de servidores réplica, el rendimiento no aumentó. Por el contrario, disminuyó. Podemos inferir que la eficiencia de coasignación alcanzó la saturación en el caso REC3_2, y que flujos adicionales causaron sobrecarga adicional y redujeron el rendimiento general. Esto significa que más flujos de descarga no necesariamente resultan en un rendimiento más alto. Debemos elegir un número adecuado de flujos para lograr un rendimiento óptimo. Mostramos la vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4 en la Figura 8(b). El costo detallado consiste en el tiempo de autenticación, tiempo de transferencia y tiempo de combinación. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de finalización (seg) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 7. Tiempos de finalización para varios métodos; los servidores están en PU, DL y HIT. Tabla 2. Los conjuntos de servidores réplica para todos los casos son: Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 8. (a) Rendimientos generales para varios conjuntos de servidores. (b) Vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4. 7. CONCLUSIONES La arquitectura de coasignación proporciona un agente coordinado para asignar bloques de datos. Un trabajo previo mostró que el esquema de co-asignación dinámica conduce a mejoras en el rendimiento. Sin embargo, no puede manejar el tiempo de inactividad de los servidores más rápidos, que deben esperar a que el servidor más lento entregue su bloque final. Propusimos el esquema de Co-Asignación Recursiva-Ajustable para mejorar el rendimiento de transferencia de datos utilizando la arquitectura de co-asignación en [17]. En este enfoque, las cargas de trabajo de los servidores de réplica seleccionados se ajustan continuamente durante las transferencias de datos, y proporcionamos una función que permite a los usuarios definir un umbral final de bloque 803, de acuerdo con su entorno de cuadrícula de datos. Los resultados experimentales muestran la efectividad de nuestra técnica propuesta en mejorar el tiempo de transferencia y reducir el tiempo total de inactividad esperando al servidor más lento. También discutimos el costo de recombinación y proporcionamos un esquema efectivo para reducirlo. 8. REFERENCIAS [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Gestión y Transferencia de Datos en Entornos de Redes Computacionales de Alto Rendimiento, Computación Paralela, 28(5):749-771, mayo de 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Transporte de Datos Seguro y Eficiente y Gestión de Réplicas para la Computación de Alto Rendimiento con Datos Intensivos, Actas del Decimoctavo Simposio IEEE sobre Sistemas y Tecnologías de Almacenamiento Masivo, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I. Foster, A. Chervenak y C. Kesselman. Protocolos y Servicios para la Ciencia de Datos Intensivos Distribuidos. Actas de ACAT2000, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I. Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt y M. Ripeanu, Giggle: Un marco para la construcción de servicios de ubicación de réplicas escalables, Actas de SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I. Foster, C. Kesselman, C. Salisbury y S. Tuecke, La Data Grid: Hacia una arquitectura para la gestión distribuida y análisis de grandes conjuntos de datos científicos, Revista de Aplicaciones de Redes y Computadoras, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I. Foster y C. Kesselman, Servicios de Información de Grid para Compartir Recursos Distribuidos, Actas del Décimo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-1001), 181-194, agosto de 2001. [7] K. Czajkowski, I. Foster y C. Kesselman. Coasignación de recursos en rejillas computacionales, Actas del Octavo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-899), agosto de 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz y M. Sgaravatto, Prototipo 1 de DataGrid, Conferencia de Redes de TERENA, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, junio de 2002, [9] I. Foster, C. Kesselman y S. Tuecke. La Anatomía de la Red: Permitiendo Organizaciones Virtuales Escalables. Int. Revista de Aplicaciones de Supercomputadoras y Computación de Alto Rendimiento, 15(3), pp. 200-222, 2001. [10] I. Foster y C. Kesselman, Globus: Un conjunto de herramientas de infraestructura de metacomputación, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger y K. Stockinger, Gestión de datos en un Proyecto Internacional de Grid de Datos, Proc. del Primer Taller Internacional de Grid Computing IEEE/ACM - Grid 2000, Bangalore, India, diciembre de 2000. [13] IBM Red Books, Introducción a la Computación en Grid con Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I. Foster, K. Holtman y B. Tierney, Replicación de archivos y objetos en rejillas de datos, Journal of Cluster Computing, 5(3):305-314, 2002. [15] Página de inicio de utilidades SYSSTAT, http://perso.wanadoo.fr/sebastien.godard/ [16] La Alianza Globus, http://www.globus.org/ [17] S. Vazhkudai, Facilitando la coasignación de transferencias de datos en rejillas, Proc. del Cuarto Taller Internacional sobre Computación en Rejilla, pp. 41-51, noviembre de 2003. [18] S. Vazhkudai y J. Schopf, Uso de técnicas de regresión para predecir grandes transferencias de datos, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, agosto de 2003. [19] S. Vazhkudai, S. Tuecke e I. Foster, Selección de réplicas en la malla de datos de Globus, Actas del 1er Simposio Internacional sobre Computación en Clúster y la Malla (CCGRID 2001), pp. 106-113, mayo de 2001. [20] S. Vazhkudai, J. Schopf, Predicción de transferencias de datos esporádicas en la malla, Actas del 11º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-11 02), pp. 188-196, julio de 2002. [21] S. Vazhkudai, J. Schopf e I. Foster, Prediciendo el rendimiento de transferencias de datos de amplia área, Actas del 16º Simposio Internacional de Procesamiento Paralelo y Distribuido (IPDPS 2002), pp. 34-43, abril de 2002, pp. 34-43. [22] R. Wolski, N. Spring y J. Hayes, El Servicio de Pronóstico del Tiempo de Red: Un Servicio de Pronóstico de Rendimiento de Recursos Distribuidos para Metacomputación, Sistemas Informáticos de Generación Futura, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li y Ching-Hsien Hsu, Análisis de rendimiento de la aplicación de tecnología de selección de réplicas para entornos de Grid de Datos, PaCT 2005, Notas de Conferencias en Ciencias de la Computación, vol. 3603, pp. 278-287, Springer-Verlag, septiembre de 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li y ChingHsien Hsu, Un Esquema de Co-Asignación Recursiva en Entornos de Grid de Datos, ICA3PP 2005 Algoritmo y Arquitectura para Procesamiento Paralelo, Notas de Conferencias en Ciencias de la Computación, vol. 3719, pp. 40-49, Springer-Verlag, octubre de 2005. [25] X. Zhang, J. Freschl y J. Schopf, Un Estudio de Rendimiento de Servicios de Monitoreo e Información para Sistemas Distribuidos, Actas del 12º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-12 03), pp. 270-282, agosto de 2003.",
    "original_sentences": [
        "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
        "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
        "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
        "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
        "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
        "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
        "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
        "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
        "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
        "General Terms Management, Performance, Design, Experimentation. 1.",
        "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
        "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
        "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
        "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
        "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
        "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
        "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
        "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
        "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
        "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
        "Another way is to use co-allocation technology [17] to download data.",
        "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
        "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
        "Several co-allocation strategies were provided in previous work [17].",
        "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
        "Therefore, it is important to reduce the differences in finishing time among replica servers.",
        "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
        "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
        "We also discuss combination cost and provide an effective scheme for reducing it.",
        "The remainder of this paper is organized as follows.",
        "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
        "In Section 4, an efficient replica selection service is proposed by us.",
        "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
        "Section 7 concludes this research paper. 2.",
        "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
        "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
        "Data Grids [1, 2, 16] federate a lot of storage resources.",
        "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
        "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
        "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
        "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
        "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
        "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
        "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
        "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
        "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
        "The replica catalog includes optional entries that describe individual logical files.",
        "Logical files are entities with globally unique names that may have one or more physical instances.",
        "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
        "A Data Grid may contain multiple replica catalogs.",
        "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
        "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
        "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
        "The criteria of selection depend on characteristics of the application.",
        "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
        "Much previous effort has been devoted to the replica selection problem.",
        "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
        "Then, applications can select a replica according to its specific attributes.",
        "Replica selection is important to data-intensive applications, and it can provide location transparency.",
        "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
        "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
        "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
        "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
        "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
        "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
        "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
        "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
        "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
        "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
        "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
        "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
        "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
        "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
        "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
        "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
        "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
        "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
        "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
        "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
        "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
        "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
        "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
        "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
        "Figure 1.",
        "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
        "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
        "The co-allocation agent then downloads the data in parallel from the selected servers.",
        "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
        "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
        "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
        "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
        "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
        "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
        "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
        "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
        "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
        "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
        "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
        "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
        "Several prediction metrics have been developed to help replica selection.",
        "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
        "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
        "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
        "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
        "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
        "It does not address the bandwidth differences among the various client-server links.",
        "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
        "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
        "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
        "Available servers are assigned single blocks to deliver in parallel.",
        "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
        "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
        "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
        "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
        "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
        "In most cases, this wastes much time and decreases overall performance.",
        "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
        "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
        "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
        "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
        "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
        "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
        "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
        "The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
        "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
        "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
        "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
        "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
        "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
        "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
        "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
        "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
        "The measurement of it is done by the Globus Toolkit / MDS.",
        "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
        "Data files in Data Grids are huge.",
        "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
        "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
        "We listed some influencing factors for our cost model in the preceding section.",
        "However, we must express these factors in mathematical notation for further analysis.",
        "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
        "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
        "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
        "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
        "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
        "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
        "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
        "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
        "When the channel has been established, the data begins flowing.",
        "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
        "Data pathways need be opened only once and may handle many transfers before being closed.",
        "This allows the same data pathways to be used for multiple file transfers.",
        "However, data channels must be explicitly reset between transfer requests.",
        "This is less time-costly.",
        "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
        "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
        "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
        "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
        "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
        "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
        "The goal is to make the expected finish time of all servers the same.",
        "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
        "The co-allocator then assigns the blocks to servers for transfer.",
        "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
        "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
        "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
        "This allows each server to finish its assigned workload by the expected time at E(T2).",
        "These adjustments are repeated until the entire file transfer is finished.",
        "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
        "Figure 2.",
        "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
        "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
        "The co-allocation service gets this list of selected replica servers.",
        "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
        "The RecursiveAdjustment Co-Allocation process is as follows.",
        "A new section of a file to be allocated is first defined.",
        "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
        "And thus, there are k sections, while Tj denotes the time section j allocated.",
        "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
        "Figure 3.",
        "The Recursive-Adjustment Co-Allocation process.",
        "In the next step, SEj is divided into several blocks and assigned to n servers.",
        "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
        "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
        "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
        "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
        "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
        "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
        "After allocation, all channels continue transferring data blocks.",
        "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
        "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
        "These unassigned portions of the file ranges become smaller after each allocation.",
        "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
        "However, when is it appropriate to stop continuous adjustment?",
        "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
        "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
        "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
        "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
        "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
        "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
        "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
        "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
        "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
        "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
        "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
        "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
        "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
        "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
        "Of course, this makes it necessary to maintain the original splitting order.",
        "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
        "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
        "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
        "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
        "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
        "We also analyze the overall performances in the various cases.",
        "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
        "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
        "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
        "Figure 4 shows our Data Grid testbed.",
        "Our servers have Globus 3.0.2 or above installed.",
        "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
        "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
        "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
        "Figure 5 shows a snapshot of our GridFTP client tool.",
        "This client tool is developed by using Java CoG.",
        "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
        "Table 1 shows average transmission rates between THU and each replica server.",
        "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
        "Table 1.",
        "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
        "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
        "Figure 6(a) shows total idle time for various file sizes.",
        "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
        "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
        "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
        "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
        "Servers were at PU, DL, and HIT, with the client at THU.",
        "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
        "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
        "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
        "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
        "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
        "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
        "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
        "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
        "On the contrary, it decreased.",
        "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
        "This means that more download flows do not necessarily result in higher performance.",
        "We must choose appropriate numbers of flows to achieve optimum performance.",
        "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
        "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
        "Completion times for various methods; servers are at PU, DL, and HIT.",
        "Table 2.",
        "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
        "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
        "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
        "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
        "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
        "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
        "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
        "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
        "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
        "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
        "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
        "Foster, A. Chervenak, and C. Kesselman.",
        "Protocols and Services for Distributed DataIntensive Science.",
        "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
        "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
        "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
        "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
        "Foster, and C. Kesselman.",
        "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
        "Foster, C. Kesselman, and S. Tuecke.",
        "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
        "Int.",
        "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
        "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
        "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
        "Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
        "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
    ],
    "translated_text_sentences": [
        "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C.",
        "La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores.",
        "Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales.",
        "Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica.",
        "En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos.",
        "Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos.",
        "También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos.",
        "Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas.",
        "H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web.",
        "Gestión, Rendimiento, Diseño, Experimentación. 1.",
        "INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño.",
        "La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid.",
        "Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos.",
        "La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12].",
        "La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19].",
        "Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios.",
        "Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes.",
        "La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes.",
        "Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19].",
        "Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet.",
        "Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos.",
        "La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo.",
        "Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17].",
        "Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17].",
        "Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque.",
        "Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los servidores réplica.",
        "En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de transferencia de datos de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la transferencia de datos [24].",
        "Los resultados experimentales muestran que nuestro enfoque es superior a los métodos anteriores y logró el mejor rendimiento general.",
        "También discutimos el costo de combinación y proporcionamos un esquema efectivo para reducirlo.",
        "El resto de este documento está organizado de la siguiente manera.",
        "La revisión de antecedentes relacionados y estudios se presentan en la Sección 2 y la arquitectura de co-asignación y trabajos relacionados se introducen en la Sección 3.",
        "En la Sección 4, proponemos un servicio eficiente de selección de réplicas.",
        "Nuestros enfoques de investigación se describen en la Sección 5, y los resultados experimentales y una evaluación del rendimiento de nuestro esquema se presentan en la Sección 6.",
        "La sección 7 concluye este documento de investigación.",
        "ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico).",
        "El término Data Grid tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes.",
        "Las Rejillas de Datos [1, 2, 16] federan una gran cantidad de recursos de almacenamiento.",
        "Grandes colecciones de datos medidos o calculados están surgiendo como recursos importantes en muchas aplicaciones intensivas en datos. 2.1.1 Gestión de Réplicas La gestión de réplicas implica la creación o eliminación de réplicas en un sitio de cuadrícula de datos [19].",
        "En otras palabras, el rol de un administrador de réplicas es crear o eliminar réplicas, dentro de sistemas de almacenamiento especificados.",
        "La mayoría de las veces, estas réplicas son copias exactas de los archivos originales, creadas solo para aprovechar ciertos beneficios de rendimiento.",
        "Un administrador de réplicas generalmente mantiene un catálogo de réplicas que contiene las direcciones de los sitios de réplica y las instancias de archivos.",
        "El servicio de gestión de réplicas es responsable de administrar la replicación de copias completas y parciales de conjuntos de datos, definidos como colecciones de archivos.",
        "El servicio de gestión de réplicas es solo un componente en un entorno de Data Grid que brinda soporte para aplicaciones de alto rendimiento y alta intensidad de datos.",
        "Una réplica o ubicación es un subconjunto de una colección que se almacena en un sistema de almacenamiento físico particular.",
        "Puede haber múltiples subconjuntos posiblemente superpuestos de una colección almacenados en múltiples sistemas de almacenamiento en una Rejilla de Datos.",
        "Estos sistemas de almacenamiento en red pueden utilizar una variedad de tecnologías de almacenamiento subyacentes y protocolos de movimiento de datos, que son independientes de la gestión de réplicas. 2.1.2 Catálogo de Réplicas Como se mencionó anteriormente, el propósito del catálogo de réplicas es proporcionar mapeos entre nombres lógicos de archivos o colecciones y una o más copias de los objetos en sistemas de almacenamiento físico.",
        "El catálogo de réplicas incluye entradas opcionales que describen archivos lógicos individuales.",
        "Los archivos lógicos son entidades con nombres globalmente únicos que pueden tener una o más instancias físicas.",
        "El catálogo puede contener opcionalmente una entrada de archivo lógico en el catálogo de réplicas para cada archivo lógico en una colección.",
        "Una cuadrícula de datos puede contener múltiples catálogos de réplicas.",
        "Por ejemplo, una comunidad de investigadores interesados en un tema de investigación particular podría mantener un catálogo de réplicas para una colección de conjuntos de datos de interés mutuo.",
        "Es posible crear jerarquías de catálogos de réplicas para imponer una estructura similar a la de un directorio en colecciones lógicas relacionadas.",
        "Además, el administrador de réplicas puede realizar control de acceso en catálogos completos, así como en archivos lógicos individuales. 2.1.3 Selección de Réplicas El propósito de la selección de réplicas [16] es seleccionar una réplica entre los sitios que constituyen una Data Grid [19].",
        "Los criterios de selección dependen de las características de la aplicación.",
        "Al utilizar este mecanismo, los usuarios de la Data Grid pueden gestionar fácilmente réplicas de conjuntos de datos en sus sitios, con un mejor rendimiento.",
        "Se ha dedicado mucho esfuerzo previo al problema de selección de réplicas.",
        "El proceso común de selección de réplicas consta de tres pasos: preparación de datos, preprocesamiento y predicción.",
        "Entonces, las aplicaciones pueden seleccionar una réplica según sus atributos específicos.",
        "La selección de réplicas es importante para aplicaciones intensivas en datos, y puede proporcionar transparencia de ubicación.",
        "Cuando un usuario solicita acceso a un conjunto de datos, el sistema determina una forma apropiada de entregar la réplica al usuario. 2.2 Globus Toolkit y GridFTP El Proyecto Globus [9, 11, 16] proporciona herramientas de software colectivamente llamadas El Kit de Herramientas Globus que facilita la construcción de Grids computacionales y aplicaciones basadas en Grid.",
        "Muchas organizaciones utilizan la Herramienta Globus para construir Grillas computacionales que apoyen sus aplicaciones.",
        "La composición del Globus Toolkit se puede visualizar como tres pilares: Gestión de Recursos, Servicios de Información y Gestión de Datos.",
        "Cada pilar representa un componente principal del Globus Toolkit y hace uso de una base común de seguridad.",
        "GRAM implementa un protocolo de gestión de recursos, MDS implementa un protocolo de servicios de información y GridFTP implementa un protocolo de transferencia de datos.",
        "Todos utilizan el protocolo de seguridad GSI en la capa de conexión [10, 11, 16, 13].",
        "La alianza Globus propuso un protocolo común de transferencia y acceso de datos llamado GridFTP que proporciona un movimiento seguro y eficiente de datos en entornos de Grid.",
        "Este protocolo, que extiende el protocolo estándar FTP, proporciona un superconjunto de las características ofrecidas por los diversos sistemas de almacenamiento en red actualmente en uso.",
        "Para resolver los problemas que surgen, la comunidad de Data Grid intenta desarrollar un mecanismo seguro y eficiente de transporte de datos y servicios de gestión de réplicas.",
        "GridFTP es un protocolo de transporte de datos confiable, seguro y eficiente que se desarrolló como parte del proyecto Globus.",
        "Hay otra tecnología clave del proyecto Globus, llamada catálogo de réplicas [16], que se utiliza para registrar y gestionar copias completas y parciales de conjuntos de datos.",
        "El catálogo de réplicas contiene la información de mapeo de un archivo lógico o colección a uno o más archivos físicos. 2.3 Servicio Meteorológico de Red El Servicio Meteorológico de Red (NWS) [22] es un sistema de monitoreo generalizado y distribuido para producir pronósticos de rendimiento a corto plazo basados en mediciones de rendimiento históricas.",
        "El objetivo del sistema es caracterizar y predecir dinámicamente el rendimiento entregable a nivel de aplicación a partir de un conjunto de recursos de red y computacionales.",
        "Una instalación típica implica un nws_nameserver, uno o más nws_memory (que pueden residir en máquinas diferentes) y un nws_sensor ejecutándose en cada máquina con los recursos que se van a monitorear.",
        "El sistema incluye sensores para el rendimiento TCP/IP de extremo a extremo (ancho de banda y latencia), porcentaje de CPU disponible y memoria no paginada disponible. 798 2.4 Utilidades Sysstat Las utilidades Sysstat [15] son un conjunto de herramientas de monitoreo de rendimiento para el sistema operativo Linux.",
        "El paquete Sysstat incorpora los comandos sar, mpstat e iostat.",
        "El comando sar recopila y reporta información de actividad del sistema, la cual también puede ser guardada en un archivo de actividad del sistema para inspección futura.",
        "El comando iostat informa estadísticas de la CPU y estadísticas de E/S para dispositivos tty y discos.",
        "Las estadísticas reportadas por SAR se refieren a tasas de transferencia de E/S, actividad de paginación, actividades relacionadas con procesos, interrupciones, actividad de red, utilización de memoria y espacio de intercambio, utilización de CPU, actividades del kernel y estadísticas de TTY, entre otros.",
        "Las máquinas Uniprocessor (UP) y Symmetric multiprocessor (SMP) son totalmente compatibles. 3.",
        "La arquitectura de co-asignación propuesta en [17] consta de tres componentes principales: un servicio de información, un intermediario/co-asignador y sistemas de almacenamiento locales.",
        "La Figura 1 muestra la co-asignación de transferencias de datos de la red, que es una extensión de la plantilla básica para la gestión de recursos [7] proporcionada por Globus Toolkit.",
        "Las aplicaciones especifican las características de los datos deseados y envían la descripción de los atributos a un intermediario.",
        "El corredor consulta los recursos disponibles y obtiene las ubicaciones de réplicas de los servicios de información [6] y los servicios de gestión de réplicas [19], y luego obtiene una lista de ubicaciones físicas para los archivos deseados.",
        "Figura 1.",
        "La arquitectura de coasignación de cuadrícula de datos [17] pasa las ubicaciones candidatas de réplicas a un servicio de selección de réplicas [19], que fue presentado en un trabajo previo [23].",
        "Este servicio de selección de réplicas proporciona estimaciones del rendimiento de transferencia de candidatos basadas en un modelo de costos y elige las cantidades apropiadas para solicitar a las ubicaciones más adecuadas.",
        "El agente de coasignación luego descarga los datos en paralelo desde los servidores seleccionados.",
        "En estas investigaciones, se utilizó GridFTP [1, 11, 16] para habilitar transferencias de datos en paralelo.",
        "GridFTP es un protocolo de transferencia de datos de alto rendimiento, seguro y confiable, optimizado para redes de área amplia de alta velocidad de banda ancha.",
        "Entre sus muchas características se encuentran la seguridad, los flujos paralelos, las transferencias de archivos parciales, las transferencias de terceros y los canales de datos reutilizables.",
        "Su capacidad de transferencia parcial de archivos permite recuperar archivos de servidores de datos especificando los desplazamientos de inicio y fin de las secciones de archivos.",
        "Las rejillas de datos consisten en recursos informáticos y de almacenamiento dispersos ubicados en diferentes países/regiones pero accesibles para los usuarios [8].",
        "En este estudio utilizamos el middleware de cuadrícula Globus Toolkit [16] como infraestructura de la cuadrícula de datos.",
        "El Globus Toolkit proporciona soluciones para consideraciones como seguridad, gestión de recursos, gestión de datos y servicios de información.",
        "Uno de sus componentes principales es MDS [6, 11, 16, 25], el cual está diseñado para proporcionar un mecanismo estándar para descubrir y publicar información sobre el estado y la configuración de recursos.",
        "Proporciona una interfaz uniforme y flexible para los datos recopilados por proveedores de información de nivel inferior en dos modos: estáticos (por ejemplo, sistemas operativos, tipos de CPU y arquitecturas de sistemas) y datos dinámicos (por ejemplo, disponibilidad de disco, disponibilidad de memoria y carga).",
        "Y utiliza GridFTP [1, 11, 16], un protocolo de transporte de datos confiable, seguro y eficiente para proporcionar una gestión eficiente y transferencia de terabytes o petabytes de datos en un entorno de recursos distribuidos de amplia área.",
        "A medida que los conjuntos de datos se replican dentro de entornos de Grid para fiabilidad y rendimiento, los clientes requieren la capacidad de descubrir réplicas de datos existentes, y crear y registrar nuevas réplicas.",
        "Un Servicio de Localización de Réplicas (RLS) proporciona un mecanismo para descubrir y registrar réplicas existentes.",
        "Se han desarrollado varios métricas de predicción para ayudar en la selección de réplicas.",
        "Por ejemplo, Vazhkudai y Schopf [18, 20, 21] utilizaron historiales de transferencia de datos pasados para estimar las velocidades actuales de transferencia de datos.",
        "En nuestro trabajo previo [23, 24], propusimos un modelo de costo de selección de réplicas y un servicio de selección de réplicas para llevar a cabo la selección de réplicas.",
        "En [17], el autor propone una arquitectura de coasignación para coasignar transferencias de datos de Grid a través de múltiples conexiones, aprovechando la función de copia parcial de GridFTP.",
        "También proporciona Balanceo de Carga por Fuerza Bruta, Basado en Historial y Dinámico para asignar bloques de datos.",
        "Coasignación por Fuerza Bruta: La coasignación por Fuerza Bruta funciona dividiendo el tamaño del archivo de manera equitativa entre los flujos disponibles.",
        "No aborda las diferencias de ancho de banda entre los distintos enlaces cliente-servidor.",
        "Coasignación basada en historial: El esquema de coasignación basado en historial mantiene los tamaños de bloque por flujo proporcionales a las tasas de transferencia predichas.",
        "Balanceo de carga conservador: Uno de sus métodos de coasignación dinámica es el Balanceo de Carga Conservador.",
        "La estrategia de coasignación dinámica de equilibrio de carga conservadora divide los conjuntos de datos solicitados en k bloques disjuntos de tamaño igual.",
        "Los servidores disponibles se asignan bloques individuales para entregar en paralelo.",
        "Cuando un servidor termina de entregar un bloque, se solicita otro, y así sucesivamente, hasta que se descarga el archivo completo.",
        "Las cargas en los flujos coasignados se ajustan automáticamente porque los servidores más rápidos entregarán más rápidamente proporcionando porciones más grandes del archivo.",
        "Equilibrio de carga agresivo: Otra estrategia dinámica de colocación conjunta, presentada en [17], es el Equilibrio de carga agresivo.",
        "La estrategia de co-asignación dinámica de equilibrio de carga agresiva presentada en [17] añade funciones que modifican las entregas de tamaño de bloque al: (1) aumentar progresivamente las cantidades de datos solicitadas a servidores más rápidos, y (2) reducir las cantidades de datos solicitadas a servidores más lentos o dejar de solicitar datos de ellos por completo.",
        "Las estrategias de coasignación descritas anteriormente no solucionan la limitación de que los servidores más rápidos tengan que esperar a que el servidor más lento entregue su último bloque.",
        "En la mayoría de los casos, esto desperdicia mucho tiempo y disminuye el rendimiento general.",
        "Por lo tanto, proponemos un enfoque eficiente llamado Recursivo-Ajuste Co-Asignación y basado en una arquitectura de co-asignación.",
        "Mejora la co-asignación dinámica y reduce el tiempo de espera, mejorando así el rendimiento general de la transferencia.",
        "Un SERVICIO DE SELECCIÓN DE RÉPLICAS EFICIENTE Construimos un servicio de selección de réplicas para permitir a los clientes seleccionar los servidores de réplicas mejores en entornos de Data Grid.",
        "Consulte a continuación para obtener una descripción detallada. 4.1 Escenario de Selección de Réplicas Nuestro modelo propuesto de selección de réplicas se ilustra en [23], que muestra cómo un cliente identifica la mejor ubicación para una transferencia de réplica deseada.",
        "El cliente primero inicia sesión en un sitio local y ejecuta la aplicación de la plataforma Data Grid, la cual verifica si los archivos están disponibles en el sitio local.",
        "Si están presentes en el sitio local, la aplicación accede a ellos inmediatamente; de lo contrario, pasa los nombres de archivo lógicos al servidor del catálogo de réplicas, que devuelve una lista de ubicaciones físicas para todas las copias registradas.",
        "La aplicación envía esta lista de ubicaciones de réplicas a un servidor de selección de réplicas, que identifica las ubicaciones de destino del sistema de almacenamiento para todas las operaciones de transferencia de datos candidatas.",
        "El servidor de selección de réplicas envía las posibles ubicaciones de destino al servidor de información, el cual proporciona mediciones de rendimiento y predicciones de los tres factores del sistema descritos a continuación.",
        "El servidor de selección de réplicas elige mejores ubicaciones de réplicas según estas estimaciones y devuelve la información de ubicación a la aplicación de transferencia, la cual recibe la réplica a través de GridFTP.",
        "Cuando la aplicación finaliza, devuelve los resultados al usuario. 4.2 Factores del sistema Determinar la mejor base de datos entre muchas con las mismas réplicas es un problema significativo.",
        "En nuestro modelo, consideramos tres factores del sistema que afectan la selección de réplicas: Ancho de banda de red: Este es uno de los factores más significativos de Data Grid ya que los archivos de datos en entornos de Data Grid suelen ser muy grandes.",
        "En otras palabras, los tiempos de transferencia de archivos de datos dependen estrechamente de las situaciones de ancho de banda de la red.",
        "Debido a que el ancho de banda de la red es un factor dinámico inestable, debemos medirlo con frecuencia y predecirlo de la manera más precisa posible.",
        "El Servicio Meteorológico de Red (NWS) es una herramienta poderosa para este propósito.",
        "Carga de la CPU: Las plataformas de cuadrícula consisten en números de sistemas heterogéneos, construidos con diferentes arquitecturas de sistema, por ejemplo, plataformas de clúster, supercomputadoras, PC.",
        "La carga de la CPU es un factor del sistema dinámico, y una carga pesada en la CPU del sistema afectará sin duda el proceso de descarga de archivos de datos desde el sitio.",
        "La medición se realiza mediante el Toolkit Globus / MDS.",
        "Estado de E/S: Los nodos de la cuadrícula de datos consisten en diferentes sistemas de almacenamiento heterogéneos.",
        "Los archivos de datos en las redes de datos son enormes.",
        "Si el estado de E/S de un sitio del que deseamos descargar archivos está muy ocupado, afectará directamente el rendimiento de la transferencia de datos.",
        "Medimos los estados de E/S utilizando las utilidades sysstat [15]. Nuestro Modelo de Costo de Selección de Réplicas La función objetivo de un modelo de costos para el almacenamiento de datos distribuidos y replicados es la puntuación de información del servicio de información.",
        "Enumeramos algunos factores influyentes para nuestro modelo de costos en la sección anterior.",
        "Sin embargo, debemos expresar estos factores en notación matemática para un análisis más detallado.",
        "Suponemos que el nodo i es el sitio local en el que el usuario o la aplicación inicia sesión, y el nodo j posee la réplica que el usuario o la aplicación desea.",
        "Los siete parámetros del sistema que considera nuestro modelo de costos de selección de réplicas son: Scorei-j: el valor de puntuación representa qué tan eficientemente un usuario o aplicación en el nodo i puede adquirir una réplica del nodo j BW jiP: porcentaje de ancho de banda disponible del nodo i al nodo j; ancho de banda actual dividido por el ancho de banda teórico más alto BBW: peso del ancho de banda de red definido por el administrador de Data Grid CPU jP: porcentaje de estados de inactividad de la CPU del nodo j WCPU: peso de carga de la CPU definido por el administrador de Data Grid OI jP /: porcentaje de estados de inactividad de E/S del nodo j WI/O: peso del estado de E/S definido por el administrador de Data Grid Definimos la siguiente fórmula general utilizando estos factores del sistema.",
        "Los tres factores influyentes en esta fórmula: WBW, WCPU y WI/O describen los pesos de la CPU, E/S y ancho de banda de red, los cuales pueden ser determinados por los administradores de la organización de Data Grid según los diversos atributos de los sistemas de almacenamiento en los nodos de Data Grid, ya que algunos equipos de almacenamiento no afectan la carga de la CPU.",
        "Después de varias mediciones experimentales, determinamos que el ancho de banda de la red es el factor más significativo que influye directamente en los tiempos de transferencia de datos.",
        "Cuando realizamos transferencias de datos utilizando el protocolo GridFTP, descubrimos que los estados de la CPU y E/S afectan ligeramente el rendimiento de la transferencia de datos.",
        "Sus valores respectivos en nuestro entorno de Data Grid son 80%, 10% y 10%. 4.4 Análisis de Costo de Co-Asignación Cuando los clientes descargan conjuntos de datos utilizando la tecnología de co-asignación de GridFTP, se incurre en tres costos de tiempo: el tiempo requerido para la autenticación del cliente en el servidor de GridFTP, el tiempo real de transmisión de datos y el tiempo de reensamblaje de bloques de datos.",
        "Tiempo de autenticación: Antes de una transferencia, el cliente debe cargar un proxy de Globus y autenticarse en el servidor GridFTP con las credenciales de usuario especificadas.",
        "El cliente luego establece un canal de control, configura los parámetros de transferencia y solicita la creación de un canal de datos.",
        "Cuando se ha establecido el canal, los datos comienzan a fluir.",
        "Tiempo de transmisión: El tiempo de transmisión se mide desde el momento en que el cliente comienza a transferir hasta el momento en que se completan todos los trabajos de transmisión, e incluye el tiempo requerido para restablecer los canales de datos entre las solicitudes de transferencia.",
        "Las vías de datos solo necesitan abrirse una vez y pueden manejar muchas transferencias antes de cerrarse.",
        "Esto permite que las mismas vías de datos se utilicen para múltiples transferencias de archivos.",
        "Sin embargo, los canales de datos deben reiniciarse explícitamente entre las solicitudes de transferencia.",
        "Esto es menos costoso en tiempo.",
        "Tiempo de combinación: la arquitectura de coasignación explota la característica de copia parcial de la herramienta de movimiento de datos GridFTP para permitir transferencias de datos a través de múltiples conexiones.",
        "Con la transferencia parcial de archivos, se pueden recuperar secciones de archivos de servidores de datos especificando solo los desplazamientos de inicio y fin de la sección.",
        "Cuando se entregan estas secciones de archivo, es posible que necesiten ser reensambladas; la operación de reensamblaje conlleva un costo adicional de tiempo. 5.",
        "ESTRATEGIA DE COASIGNACIÓN DINÁMICA La coasignación dinámica, descrita anteriormente, es el enfoque más eficiente para reducir la influencia de las variaciones de red entre clientes y servidores.",
        "Sin embargo, el tiempo de inactividad de los servidores más rápidos esperando a que el servidor más lento entregue el último bloque sigue siendo un factor importante que afecta la eficiencia general, el cual el Balanceo de Carga Conservador y el Balanceo de Carga Agresivo [17] no pueden evitar de manera efectiva.",
        "El enfoque propuesto en el presente documento, un mecanismo de asignación dinámica llamado Coasignación Recursiva-Ajustable, puede superar esto y, por lo tanto, mejorar el rendimiento de transferencia de datos. 5.1 Coasignación Recursiva-Ajustable La Coasignación Recursiva-Ajustable funciona ajustando continuamente la carga de trabajo de cada servidor de réplicas para que corresponda a su ancho de banda en tiempo real durante las transferencias de archivos.",
        "El objetivo es hacer que el tiempo de finalización esperado de todos los servidores sea el mismo.",
        "Como muestra la Figura 2, cuando se selecciona primero una sección de archivo apropiada, se divide en tamaños de bloque adecuados según los anchos de banda del servidor respectivos.",
        "El coasignador luego asigna los bloques a los servidores para la transferencia.",
        "En este momento, se espera que el tiempo de finalización de la transferencia sea consistente en E(T1).",
        "Sin embargo, dado que los anchos de banda del servidor pueden fluctuar durante las entregas de segmentos, el tiempo real de finalización puede ser diferente (línea sólida, en la Figura 2).",
        "Una vez que el servidor más rápido termina su trabajo en el tiempo T1, la siguiente sección se asigna nuevamente a los servidores.",
        "Esto permite que cada servidor termine su carga de trabajo asignada para el tiempo esperado en E(T2).",
        "Estos ajustes se repiten hasta que se complete la transferencia de todo el archivo.",
        "Servidor 1 Servidor 2 Servidor 3 Ronda 1 Ronda 2 E(T1) E(T2)T1 Archivo A Sección 1 Sección 2 ... ... ...",
        "Figura 2.",
        "El proceso de ajuste del proceso de coasignación recursiva se ilustra en la Figura 3.",
        "Cuando un usuario solicita el archivo A, el servicio de selección de réplicas responde con el subconjunto de todos los servidores disponibles definidos por la matriz de rendimiento máximo.",
        "El servicio de co-asignación recibe esta lista de servidores réplica seleccionados.",
        "Suponiendo que se seleccionan n servidores réplica, Si denota el servidor i tal que 1 i n. Luego se establece una conexión para la descarga de archivos con cada servidor.",
        "El proceso de Co-Asignación de Ajuste Recursivo es el siguiente.",
        "Una nueva sección de un archivo a asignar es primero definida.",
        "El tamaño de la sección, SEj, es: SEj = TamañoArchivoNoAsignado , (0 < < 1) (2) donde SEj denota la sección j tal que 1 ≤ j ≤ k, asumiendo que asignamos k veces para el proceso de descarga.",
        "Y así, hay k secciones, mientras que Tj denota el tiempo asignado a la sección j.",
        "UnassignedFileSize es la porción del archivo A que aún no se ha distribuido para su descarga; inicialmente, UnassignedFileSize es igual al tamaño total del archivo A. es la tasa que determina cuánto de la sección queda por asignar.",
        "Figura 3.",
        "El proceso de Co-Asignación de Ajuste Recursivo.",
        "En el siguiente paso, SEj se divide en varios bloques y se asigna a n servidores.",
        "Cada servidor tiene una tasa de transferencia en tiempo real al cliente de Bi, la cual es medida por el Servicio Meteorológico de Red (NWS) [18].",
        "El tamaño de bloque por flujo desde SEj para cada servidor i en el tiempo Tj es: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) donde UnFinishSizei denota el tamaño de bloques de transferencia no finalizados asignados en rondas anteriores en el servidor i. UnFinishSizei es igual a cero en la primera ronda.",
        "Idealmente, dependiendo del ancho de banda en tiempo real en el momento Tj, se espera que cada flujo termine su carga de trabajo en el futuro.",
        "Esto cumple con nuestro requisito de minimizar el tiempo que los servidores más rápidos deben esperar a que el servidor más lento termine.",
        "Si, en algunos casos, las variaciones en la red degradan considerablemente las tasas de transferencia, UnFinishSizei puede exceder n i ii n i ij BBzeUnFinishSiSE 11 *)(, que es el tamaño total del bloque que se espera transferir después de Tj.",
        "En tales casos, el coasignador elimina los servidores de antemano y asigna SEj a otros servidores.",
        "Después de la asignación, todos los canales continúan transfiriendo bloques de datos.",
        "Cuando un canal más rápido termina sus bloques de datos asignados, el coasignador comienza a asignar nuevamente una sección no asignada del archivo A.",
        "El proceso de asignar bloques de datos 801 para ajustar el tiempo de finalización del flujo esperado continúa hasta que se haya asignado todo el archivo. 5.2 Determinar cuándo detener el ajuste continuo Nuestro enfoque obtiene nuevas secciones de archivos completos dividiendo rangos de archivos no asignados en cada ronda de asignación.",
        "Estas porciones no asignadas de los rangos de archivo se vuelven más pequeñas después de cada asignación.",
        "Dado que el ajuste es continuo, funcionaría como un bucle infinito si no estuviera limitado por una condición de parada.",
        "Sin embargo, ¿cuándo es apropiado detener el ajuste continuo?",
        "Proporcionamos dos criterios de monitoreo, LeastSize y ExpectFinishedTime, para permitir a los usuarios definir umbrales de parada.",
        "Cuando se alcanza un umbral, el servidor de coasignación deja de dividir el resto del archivo y asigna ese resto como la sección final.",
        "El criterio LeastSize especifica el archivo más pequeño que queremos procesar, y cuando la porción no asignada de UnassignedFileSize cae por debajo de la especificación de LeastSize, la división se detiene.",
        "El criterio ExpectFinishedTime especifica el tiempo restante que se espera que dure la transferencia.",
        "Cuando el tiempo de transferencia esperado de la porción no asignada de un archivo cae por debajo del tiempo especificado por ExpectFinishedTime, la división del archivo se detiene.",
        "El valor esperado del tiempo de descanso se determina por: 1 n i iBFileSizeUnAssigned (4) Estos dos criterios determinan el tamaño final de la sección asignada.",
        "Valores de umbral más altos inducirán menos divisiones y generarán costos de co-asignación más bajos, que incluyen el establecimiento de conexiones, negociación, reensamblaje, etc.",
        "Sin embargo, aunque el tiempo total de ajuste de la coalocación puede ser menor, las variaciones de ancho de banda también pueden ejercer más influencia.",
        "Por el contrario, valores de umbral más bajos inducirán ajustes más frecuentes en la carga de trabajo del servidor dinámico y, en el caso de mayores fluctuaciones en la red, resultarán en menos diferencias en el tiempo de finalización de la transferencia del servidor.",
        "Sin embargo, valores más bajos también aumentarán los tiempos de coasignación, y por lo tanto, aumentarán los costos de coasignación.",
        "Por lo tanto, el entorno de internet, los tamaños de archivo transferidos y los costos de coasignación deben considerarse todos al determinar los umbrales óptimos. 5.3 Reducción de la Sobrecarga de Reensamblaje El proceso de reensamblar bloques después de transferencias de datos utilizando tecnología de coasignación resulta en una sobrecarga adicional y disminuye el rendimiento general.",
        "El sobrecosto de reensamblaje está relacionado con el tamaño total del bloque, y podría reducirse mediante la actualización de las capacidades del hardware o el uso de algoritmos de software mejores.",
        "Proponemos un mecanismo de reensamblaje alternativo eficiente para reducir la sobrecarga de combinación añadida una vez que se han completado todas las transmisiones de bloques.",
        "Se diferencia del método convencional en el que el software comienza el ensamblaje después de que todos los bloques hayan sido entregados, comenzando a ensamblar bloques una vez que finalizan las primeras entregas.",
        "Por supuesto, esto hace necesario mantener el orden original de división.",
        "Estrategias de coasignación como el Balanceo de Carga Conservador y la Coasignación de Ajuste Recursivo producen bloques adicionales durante las transferencias de archivos y pueden beneficiarse al habilitar el reensamblaje durante las transferencias de datos.",
        "Si algunos bloques se ensamblan de antemano, el costo de tiempo para ensamblar los bloques restantes después de que todas las transferencias finalicen puede reducirse. 6.",
        "RESULTADOS EXPERIMENTALES Y ANÁLISIS En esta sección, discutimos el rendimiento de nuestra estrategia de Co-Asignación Recursiva de Ajuste.",
        "Evaluamos cuatro esquemas de coalocación: (1) Fuerza Bruta (Brute), (2) Basado en Historial (History), (3) Balance de Carga Conservador (Conservative) y (4) Coalocación Co-Ajustada Recursiva (Recursive).",
        "Analizamos el rendimiento de cada esquema comparando su tiempo de finalización de transferencia y el tiempo total de inactividad que los servidores más rápidos pasaron esperando a que el servidor más lento terminara de entregar el último bloque.",
        "También analizamos el rendimiento general en los diferentes casos.",
        "Realizamos experimentos de transferencia de datos de gran área utilizando nuestra herramienta cliente GUI de GridFTP.",
        "Ejecutamos nuestra herramienta de cliente de co-asignación en nuestra plataforma de pruebas en la Universidad de Tunghai (THU), en la ciudad de Taichung, Taiwán, y obtuvimos archivos de cuatro servidores réplica seleccionados: uno en la Universidad de Providence (PU), uno en la Escuela Secundaria Li-Zen (LZ), uno en la Escuela de Tecnología Hsiuping (HIT) y uno en la Escuela Secundaria Da-Li (DL).",
        "Todas estas instituciones están en Taiwán, y cada una está al menos a 10 km de la THU.",
        "La Figura 4 muestra nuestro banco de pruebas de la cuadrícula de datos.",
        "Nuestros servidores tienen instalado Globus 3.0.2 o una versión superior.",
        "Escuela Secundaria THU Li-Zen (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD Escuela Secundaria Da-Li (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figura 4.",
        "En nuestro banco de pruebas de Data Grid, en los siguientes experimentos, establecimos = 0.5, el umbral de LeastSize en 10MB, y experimentamos con tamaños de archivo de 10 MB, 50 MB, 100 MB, 500 MB, 1000 MB, 2000 MB y 4000 MB.",
        "Para la comparación, medimos el rendimiento del Balanceo de Carga Conservador en cada tamaño utilizando los mismos números de bloques.",
        "La Figura 5 muestra una captura de pantalla de nuestra herramienta cliente GridFTP.",
        "Esta herramienta de cliente está desarrollada utilizando Java CoG.",
        "Permite un desarrollo de aplicaciones más fácil y rápido al fomentar la reutilización colaborativa de código y evitar la duplicación de esfuerzos entre entornos de resolución de problemas, portales científicos, middleware de Grid y pilotos colaborativos.",
        "La Tabla 1 muestra las tasas de transmisión promedio entre THU y cada servidor réplica.",
        "Estos números fueron obtenidos al transferir archivos de 500MB, 1000MB y 2000MB desde un único servidor réplica utilizando nuestra herramienta cliente GridFTP, y cada número es un promedio de varias ejecuciones.",
        "Tabla 1.",
        "Tasa de transmisión de extremo a extremo de GridFTP desde THU a varios servidores. Tasa de transmisión promedio del servidor: HIT 61.5 Mbps, LZ 59.5 Mbps, DL 32.1 Mbps, PU 26.7 Mbps. Figura 5.",
        "Nuestra herramienta cliente GridFTP analizó el efecto de servidores más rápidos esperando al servidor más lento para entregar el último bloque en cada esquema.",
        "La Figura 6(a) muestra el tiempo total de inactividad para diferentes tamaños de archivo.",
        "Tenga en cuenta que nuestro esquema de Co-Asignación Recursiva logró mejoras significativas en el rendimiento en comparación con otros esquemas para cada tamaño de archivo.",
        "Estos resultados demuestran que nuestro enfoque reduce eficientemente las diferencias en los tiempos de finalización de los servidores.",
        "Los resultados experimentales mostrados en la Figura 6(b) indican que nuestro esquema de comenzar la reensamblaje de bloques tan pronto como los primeros bloques han sido entregados completamente reduce el tiempo de combinación, ayudando así a estrategias de co-asignación como el Balance de Carga Conservador y la Co-Asignación de Ajuste Recursivo que producen más bloques durante las transferencias de datos.",
        "La Figura 7 muestra los resultados experimentales del tiempo total de finalización en una vista detallada de la estructura de costos.",
        "Los servidores estaban en PU, DL y HIT, con el cliente en THU.",
        "Las tres primeras barras para cada tamaño de archivo representan el tiempo para descargar el archivo completo desde un único servidor, mientras que las otras barras muestran descargas coasignadas utilizando los tres servidores.",
        "Nuestro esquema de coasignación terminó el trabajo más rápido que las otras estrategias de coasignación.",
        "Por lo tanto, podemos inferir que las principales ventajas que ofrece nuestra tecnología son tiempos de transmisión y combinación más bajos que otras estrategias de co-asignación. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de espera (seg) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de combinación (seg) Brute3 History3 Conservative3 Recursive3 Figura 6. (a) Tiempos de inactividad para varios métodos; los servidores están en PU, DL y HIT. (b) Tiempos de combinación para varios métodos; los servidores están en PU, DL y HIT.",
        "En el siguiente experimento, utilizamos la estrategia de Coasignación Recursiva-Ajustable con varios conjuntos de servidores réplica y medimos el rendimiento general, donde el rendimiento general es: Rendimiento Total = Tamaño del archivo / Tiempo Total de Finalización (5). La Tabla 2 enumera todos los experimentos que realizamos y los conjuntos de servidores réplica utilizados.",
        "Los resultados en la Figura 8(a) muestran que el uso de tecnologías de coallocation no produjo ninguna mejora para tamaños de archivo más pequeños como 10MB.",
        "También muestran que en la mayoría de los casos, el rendimiento general aumentó a medida que aumentaba el número de flujos coasignados.",
        "Observamos que para nuestro banco de pruebas y nuestra tecnología de coasignación, el rendimiento general alcanzó su valor más alto en el caso REC3_2.",
        "Sin embargo, en el caso REC4, cuando agregamos un flujo al conjunto de servidores réplica, el rendimiento no aumentó.",
        "Por el contrario, disminuyó.",
        "Podemos inferir que la eficiencia de coasignación alcanzó la saturación en el caso REC3_2, y que flujos adicionales causaron sobrecarga adicional y redujeron el rendimiento general.",
        "Esto significa que más flujos de descarga no necesariamente resultan en un rendimiento más alto.",
        "Debemos elegir un número adecuado de flujos para lograr un rendimiento óptimo.",
        "Mostramos la vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4 en la Figura 8(b).",
        "El costo detallado consiste en el tiempo de autenticación, tiempo de transferencia y tiempo de combinación. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de finalización (seg) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 7.",
        "Tiempos de finalización para varios métodos; los servidores están en PU, DL y HIT.",
        "Tabla 2.",
        "Los conjuntos de servidores réplica para todos los casos son: Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 8. (a) Rendimientos generales para varios conjuntos de servidores. (b) Vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4. 7.",
        "CONCLUSIONES La arquitectura de coasignación proporciona un agente coordinado para asignar bloques de datos.",
        "Un trabajo previo mostró que el esquema de co-asignación dinámica conduce a mejoras en el rendimiento.",
        "Sin embargo, no puede manejar el tiempo de inactividad de los servidores más rápidos, que deben esperar a que el servidor más lento entregue su bloque final.",
        "Propusimos el esquema de Co-Asignación Recursiva-Ajustable para mejorar el rendimiento de transferencia de datos utilizando la arquitectura de co-asignación en [17].",
        "En este enfoque, las cargas de trabajo de los servidores de réplica seleccionados se ajustan continuamente durante las transferencias de datos, y proporcionamos una función que permite a los usuarios definir un umbral final de bloque 803, de acuerdo con su entorno de cuadrícula de datos.",
        "Los resultados experimentales muestran la efectividad de nuestra técnica propuesta en mejorar el tiempo de transferencia y reducir el tiempo total de inactividad esperando al servidor más lento.",
        "También discutimos el costo de recombinación y proporcionamos un esquema efectivo para reducirlo. 8.",
        "REFERENCIAS [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
        "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Gestión y Transferencia de Datos en Entornos de Redes Computacionales de Alto Rendimiento, Computación Paralela, 28(5):749-771, mayo de 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
        "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Transporte de Datos Seguro y Eficiente y Gestión de Réplicas para la Computación de Alto Rendimiento con Datos Intensivos, Actas del Decimoctavo Simposio IEEE sobre Sistemas y Tecnologías de Almacenamiento Masivo, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
        "Foster, A. Chervenak y C. Kesselman.",
        "Protocolos y Servicios para la Ciencia de Datos Intensivos Distribuidos.",
        "Actas de ACAT2000, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
        "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt y M. Ripeanu, Giggle: Un marco para la construcción de servicios de ubicación de réplicas escalables, Actas de SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
        "Foster, C. Kesselman, C. Salisbury y S. Tuecke, La Data Grid: Hacia una arquitectura para la gestión distribuida y análisis de grandes conjuntos de datos científicos, Revista de Aplicaciones de Redes y Computadoras, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
        "Foster y C. Kesselman, Servicios de Información de Grid para Compartir Recursos Distribuidos, Actas del Décimo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-1001), 181-194, agosto de 2001. [7] K. Czajkowski, I.",
        "Foster y C. Kesselman.",
        "Coasignación de recursos en rejillas computacionales, Actas del Octavo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-899), agosto de 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz y M. Sgaravatto, Prototipo 1 de DataGrid, Conferencia de Redes de TERENA, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, junio de 2002, [9] I.",
        "Foster, C. Kesselman y S. Tuecke.",
        "La Anatomía de la Red: Permitiendo Organizaciones Virtuales Escalables.",
        "Int.",
        "Revista de Aplicaciones de Supercomputadoras y Computación de Alto Rendimiento, 15(3), pp. 200-222, 2001. [10] I.",
        "Foster y C. Kesselman, Globus: Un conjunto de herramientas de infraestructura de metacomputación, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger y K. Stockinger, Gestión de datos en un Proyecto Internacional de Grid de Datos, Proc. del Primer Taller Internacional de Grid Computing IEEE/ACM - Grid 2000, Bangalore, India, diciembre de 2000. [13] IBM Red Books, Introducción a la Computación en Grid con Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
        "Foster, K. Holtman y B. Tierney, Replicación de archivos y objetos en rejillas de datos, Journal of Cluster Computing, 5(3):305-314, 2002. [15] Página de inicio de utilidades SYSSTAT, http://perso.wanadoo.fr/sebastien.godard/ [16] La Alianza Globus, http://www.globus.org/ [17] S. Vazhkudai, Facilitando la coasignación de transferencias de datos en rejillas, Proc. del Cuarto Taller Internacional sobre Computación en Rejilla, pp. 41-51, noviembre de 2003. [18] S. Vazhkudai y J. Schopf, Uso de técnicas de regresión para predecir grandes transferencias de datos, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, agosto de 2003. [19] S. Vazhkudai, S. Tuecke e I.",
        "Foster, Selección de réplicas en la malla de datos de Globus, Actas del 1er Simposio Internacional sobre Computación en Clúster y la Malla (CCGRID 2001), pp. 106-113, mayo de 2001. [20] S. Vazhkudai, J. Schopf, Predicción de transferencias de datos esporádicas en la malla, Actas del 11º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-11 02), pp. 188-196, julio de 2002. [21] S. Vazhkudai, J. Schopf e I.",
        "Foster, Prediciendo el rendimiento de transferencias de datos de amplia área, Actas del 16º Simposio Internacional de Procesamiento Paralelo y Distribuido (IPDPS 2002), pp. 34-43, abril de 2002, pp. 34-43. [22] R. Wolski, N. Spring y J. Hayes, El Servicio de Pronóstico del Tiempo de Red: Un Servicio de Pronóstico de Rendimiento de Recursos Distribuidos para Metacomputación, Sistemas Informáticos de Generación Futura, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li y Ching-Hsien Hsu, Análisis de rendimiento de la aplicación de tecnología de selección de réplicas para entornos de Grid de Datos, PaCT 2005, Notas de Conferencias en Ciencias de la Computación, vol. 3603, pp. 278-287, Springer-Verlag, septiembre de 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li y ChingHsien Hsu, Un Esquema de Co-Asignación Recursiva en Entornos de Grid de Datos, ICA3PP 2005 Algoritmo y Arquitectura para Procesamiento Paralelo, Notas de Conferencias en Ciencias de la Computación, vol. 3719, pp. 40-49, Springer-Verlag, octubre de 2005. [25] X. Zhang, J. Freschl y J. Schopf, Un Estudio de Rendimiento de Servicios de Monitoreo e Información para Sistemas Distribuidos, Actas del 12º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-12 03), pp. 270-282, agosto de 2003."
    ],
    "error_count": 10,
    "keys": {
        "distributed resource": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for <br>distributed resource</br> Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A <br>distributed resource</br> Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "Foster, and C. Kesselman, Grid Information Services for <br>distributed resource</br> Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A <br>distributed resource</br> Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "translated_annotated_samples": [
                "Foster y C. Kesselman, Servicios de Información de Grid para Compartir Recursos Distribuidos, Actas del Décimo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-1001), 181-194, agosto de 2001. [7] K. Czajkowski, I.",
                "Foster, Prediciendo el rendimiento de transferencias de datos de amplia área, Actas del 16º Simposio Internacional de Procesamiento Paralelo y Distribuido (IPDPS 2002), pp. 34-43, abril de 2002, pp. 34-43. [22] R. Wolski, N. Spring y J. Hayes, El Servicio de Pronóstico del Tiempo de Red: Un Servicio de Pronóstico de Rendimiento de Recursos Distribuidos para Metacomputación, Sistemas Informáticos de Generación Futura, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li y Ching-Hsien Hsu, Análisis de rendimiento de la aplicación de tecnología de selección de réplicas para entornos de Grid de Datos, PaCT 2005, Notas de Conferencias en Ciencias de la Computación, vol. 3603, pp. 278-287, Springer-Verlag, septiembre de 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li y ChingHsien Hsu, Un Esquema de Co-Asignación Recursiva en Entornos de Grid de Datos, ICA3PP 2005 Algoritmo y Arquitectura para Procesamiento Paralelo, Notas de Conferencias en Ciencias de la Computación, vol. 3719, pp. 40-49, Springer-Verlag, octubre de 2005. [25] X. Zhang, J. Freschl y J. Schopf, Un Estudio de Rendimiento de Servicios de Monitoreo e Información para Sistemas Distribuidos, Actas del 12º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-12 03), pp. 270-282, agosto de 2003."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque. Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de transferencia de datos de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la transferencia de datos [24]. Los resultados experimentales muestran que nuestro enfoque es superior a los métodos anteriores y logró el mejor rendimiento general. También discutimos el costo de combinación y proporcionamos un esquema efectivo para reducirlo. El resto de este documento está organizado de la siguiente manera. La revisión de antecedentes relacionados y estudios se presentan en la Sección 2 y la arquitectura de co-asignación y trabajos relacionados se introducen en la Sección 3. En la Sección 4, proponemos un servicio eficiente de selección de réplicas. Nuestros enfoques de investigación se describen en la Sección 5, y los resultados experimentales y una evaluación del rendimiento de nuestro esquema se presentan en la Sección 6. La sección 7 concluye este documento de investigación. ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico). El término Data Grid tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes. Las Rejillas de Datos [1, 2, 16] federan una gran cantidad de recursos de almacenamiento. Grandes colecciones de datos medidos o calculados están surgiendo como recursos importantes en muchas aplicaciones intensivas en datos. 2.1.1 Gestión de Réplicas La gestión de réplicas implica la creación o eliminación de réplicas en un sitio de cuadrícula de datos [19]. En otras palabras, el rol de un administrador de réplicas es crear o eliminar réplicas, dentro de sistemas de almacenamiento especificados. La mayoría de las veces, estas réplicas son copias exactas de los archivos originales, creadas solo para aprovechar ciertos beneficios de rendimiento. Un administrador de réplicas generalmente mantiene un catálogo de réplicas que contiene las direcciones de los sitios de réplica y las instancias de archivos. El servicio de gestión de réplicas es responsable de administrar la replicación de copias completas y parciales de conjuntos de datos, definidos como colecciones de archivos. El servicio de gestión de réplicas es solo un componente en un entorno de Data Grid que brinda soporte para aplicaciones de alto rendimiento y alta intensidad de datos. Una réplica o ubicación es un subconjunto de una colección que se almacena en un sistema de almacenamiento físico particular. Puede haber múltiples subconjuntos posiblemente superpuestos de una colección almacenados en múltiples sistemas de almacenamiento en una Rejilla de Datos. Estos sistemas de almacenamiento en red pueden utilizar una variedad de tecnologías de almacenamiento subyacentes y protocolos de movimiento de datos, que son independientes de la gestión de réplicas. 2.1.2 Catálogo de Réplicas Como se mencionó anteriormente, el propósito del catálogo de réplicas es proporcionar mapeos entre nombres lógicos de archivos o colecciones y una o más copias de los objetos en sistemas de almacenamiento físico. El catálogo de réplicas incluye entradas opcionales que describen archivos lógicos individuales. Los archivos lógicos son entidades con nombres globalmente únicos que pueden tener una o más instancias físicas. El catálogo puede contener opcionalmente una entrada de archivo lógico en el catálogo de réplicas para cada archivo lógico en una colección. Una cuadrícula de datos puede contener múltiples catálogos de réplicas. Por ejemplo, una comunidad de investigadores interesados en un tema de investigación particular podría mantener un catálogo de réplicas para una colección de conjuntos de datos de interés mutuo. Es posible crear jerarquías de catálogos de réplicas para imponer una estructura similar a la de un directorio en colecciones lógicas relacionadas. Además, el administrador de réplicas puede realizar control de acceso en catálogos completos, así como en archivos lógicos individuales. 2.1.3 Selección de Réplicas El propósito de la selección de réplicas [16] es seleccionar una réplica entre los sitios que constituyen una Data Grid [19]. Los criterios de selección dependen de las características de la aplicación. Al utilizar este mecanismo, los usuarios de la Data Grid pueden gestionar fácilmente réplicas de conjuntos de datos en sus sitios, con un mejor rendimiento. Se ha dedicado mucho esfuerzo previo al problema de selección de réplicas. El proceso común de selección de réplicas consta de tres pasos: preparación de datos, preprocesamiento y predicción. Entonces, las aplicaciones pueden seleccionar una réplica según sus atributos específicos. La selección de réplicas es importante para aplicaciones intensivas en datos, y puede proporcionar transparencia de ubicación. Cuando un usuario solicita acceso a un conjunto de datos, el sistema determina una forma apropiada de entregar la réplica al usuario. 2.2 Globus Toolkit y GridFTP El Proyecto Globus [9, 11, 16] proporciona herramientas de software colectivamente llamadas El Kit de Herramientas Globus que facilita la construcción de Grids computacionales y aplicaciones basadas en Grid. Muchas organizaciones utilizan la Herramienta Globus para construir Grillas computacionales que apoyen sus aplicaciones. La composición del Globus Toolkit se puede visualizar como tres pilares: Gestión de Recursos, Servicios de Información y Gestión de Datos. Cada pilar representa un componente principal del Globus Toolkit y hace uso de una base común de seguridad. GRAM implementa un protocolo de gestión de recursos, MDS implementa un protocolo de servicios de información y GridFTP implementa un protocolo de transferencia de datos. Todos utilizan el protocolo de seguridad GSI en la capa de conexión [10, 11, 16, 13]. La alianza Globus propuso un protocolo común de transferencia y acceso de datos llamado GridFTP que proporciona un movimiento seguro y eficiente de datos en entornos de Grid. Este protocolo, que extiende el protocolo estándar FTP, proporciona un superconjunto de las características ofrecidas por los diversos sistemas de almacenamiento en red actualmente en uso. Para resolver los problemas que surgen, la comunidad de Data Grid intenta desarrollar un mecanismo seguro y eficiente de transporte de datos y servicios de gestión de réplicas. GridFTP es un protocolo de transporte de datos confiable, seguro y eficiente que se desarrolló como parte del proyecto Globus. Hay otra tecnología clave del proyecto Globus, llamada catálogo de réplicas [16], que se utiliza para registrar y gestionar copias completas y parciales de conjuntos de datos. El catálogo de réplicas contiene la información de mapeo de un archivo lógico o colección a uno o más archivos físicos. 2.3 Servicio Meteorológico de Red El Servicio Meteorológico de Red (NWS) [22] es un sistema de monitoreo generalizado y distribuido para producir pronósticos de rendimiento a corto plazo basados en mediciones de rendimiento históricas. El objetivo del sistema es caracterizar y predecir dinámicamente el rendimiento entregable a nivel de aplicación a partir de un conjunto de recursos de red y computacionales. Una instalación típica implica un nws_nameserver, uno o más nws_memory (que pueden residir en máquinas diferentes) y un nws_sensor ejecutándose en cada máquina con los recursos que se van a monitorear. El sistema incluye sensores para el rendimiento TCP/IP de extremo a extremo (ancho de banda y latencia), porcentaje de CPU disponible y memoria no paginada disponible. 798 2.4 Utilidades Sysstat Las utilidades Sysstat [15] son un conjunto de herramientas de monitoreo de rendimiento para el sistema operativo Linux. El paquete Sysstat incorpora los comandos sar, mpstat e iostat. El comando sar recopila y reporta información de actividad del sistema, la cual también puede ser guardada en un archivo de actividad del sistema para inspección futura. El comando iostat informa estadísticas de la CPU y estadísticas de E/S para dispositivos tty y discos. Las estadísticas reportadas por SAR se refieren a tasas de transferencia de E/S, actividad de paginación, actividades relacionadas con procesos, interrupciones, actividad de red, utilización de memoria y espacio de intercambio, utilización de CPU, actividades del kernel y estadísticas de TTY, entre otros. Las máquinas Uniprocessor (UP) y Symmetric multiprocessor (SMP) son totalmente compatibles. 3. La arquitectura de co-asignación propuesta en [17] consta de tres componentes principales: un servicio de información, un intermediario/co-asignador y sistemas de almacenamiento locales. La Figura 1 muestra la co-asignación de transferencias de datos de la red, que es una extensión de la plantilla básica para la gestión de recursos [7] proporcionada por Globus Toolkit. Las aplicaciones especifican las características de los datos deseados y envían la descripción de los atributos a un intermediario. El corredor consulta los recursos disponibles y obtiene las ubicaciones de réplicas de los servicios de información [6] y los servicios de gestión de réplicas [19], y luego obtiene una lista de ubicaciones físicas para los archivos deseados. Figura 1. La arquitectura de coasignación de cuadrícula de datos [17] pasa las ubicaciones candidatas de réplicas a un servicio de selección de réplicas [19], que fue presentado en un trabajo previo [23]. Este servicio de selección de réplicas proporciona estimaciones del rendimiento de transferencia de candidatos basadas en un modelo de costos y elige las cantidades apropiadas para solicitar a las ubicaciones más adecuadas. El agente de coasignación luego descarga los datos en paralelo desde los servidores seleccionados. En estas investigaciones, se utilizó GridFTP [1, 11, 16] para habilitar transferencias de datos en paralelo. GridFTP es un protocolo de transferencia de datos de alto rendimiento, seguro y confiable, optimizado para redes de área amplia de alta velocidad de banda ancha. Entre sus muchas características se encuentran la seguridad, los flujos paralelos, las transferencias de archivos parciales, las transferencias de terceros y los canales de datos reutilizables. Su capacidad de transferencia parcial de archivos permite recuperar archivos de servidores de datos especificando los desplazamientos de inicio y fin de las secciones de archivos. Las rejillas de datos consisten en recursos informáticos y de almacenamiento dispersos ubicados en diferentes países/regiones pero accesibles para los usuarios [8]. En este estudio utilizamos el middleware de cuadrícula Globus Toolkit [16] como infraestructura de la cuadrícula de datos. El Globus Toolkit proporciona soluciones para consideraciones como seguridad, gestión de recursos, gestión de datos y servicios de información. Uno de sus componentes principales es MDS [6, 11, 16, 25], el cual está diseñado para proporcionar un mecanismo estándar para descubrir y publicar información sobre el estado y la configuración de recursos. Proporciona una interfaz uniforme y flexible para los datos recopilados por proveedores de información de nivel inferior en dos modos: estáticos (por ejemplo, sistemas operativos, tipos de CPU y arquitecturas de sistemas) y datos dinámicos (por ejemplo, disponibilidad de disco, disponibilidad de memoria y carga). Y utiliza GridFTP [1, 11, 16], un protocolo de transporte de datos confiable, seguro y eficiente para proporcionar una gestión eficiente y transferencia de terabytes o petabytes de datos en un entorno de recursos distribuidos de amplia área. A medida que los conjuntos de datos se replican dentro de entornos de Grid para fiabilidad y rendimiento, los clientes requieren la capacidad de descubrir réplicas de datos existentes, y crear y registrar nuevas réplicas. Un Servicio de Localización de Réplicas (RLS) proporciona un mecanismo para descubrir y registrar réplicas existentes. Se han desarrollado varios métricas de predicción para ayudar en la selección de réplicas. Por ejemplo, Vazhkudai y Schopf [18, 20, 21] utilizaron historiales de transferencia de datos pasados para estimar las velocidades actuales de transferencia de datos. En nuestro trabajo previo [23, 24], propusimos un modelo de costo de selección de réplicas y un servicio de selección de réplicas para llevar a cabo la selección de réplicas. En [17], el autor propone una arquitectura de coasignación para coasignar transferencias de datos de Grid a través de múltiples conexiones, aprovechando la función de copia parcial de GridFTP. También proporciona Balanceo de Carga por Fuerza Bruta, Basado en Historial y Dinámico para asignar bloques de datos. Coasignación por Fuerza Bruta: La coasignación por Fuerza Bruta funciona dividiendo el tamaño del archivo de manera equitativa entre los flujos disponibles. No aborda las diferencias de ancho de banda entre los distintos enlaces cliente-servidor. Coasignación basada en historial: El esquema de coasignación basado en historial mantiene los tamaños de bloque por flujo proporcionales a las tasas de transferencia predichas. Balanceo de carga conservador: Uno de sus métodos de coasignación dinámica es el Balanceo de Carga Conservador. La estrategia de coasignación dinámica de equilibrio de carga conservadora divide los conjuntos de datos solicitados en k bloques disjuntos de tamaño igual. Los servidores disponibles se asignan bloques individuales para entregar en paralelo. Cuando un servidor termina de entregar un bloque, se solicita otro, y así sucesivamente, hasta que se descarga el archivo completo. Las cargas en los flujos coasignados se ajustan automáticamente porque los servidores más rápidos entregarán más rápidamente proporcionando porciones más grandes del archivo. Equilibrio de carga agresivo: Otra estrategia dinámica de colocación conjunta, presentada en [17], es el Equilibrio de carga agresivo. La estrategia de co-asignación dinámica de equilibrio de carga agresiva presentada en [17] añade funciones que modifican las entregas de tamaño de bloque al: (1) aumentar progresivamente las cantidades de datos solicitadas a servidores más rápidos, y (2) reducir las cantidades de datos solicitadas a servidores más lentos o dejar de solicitar datos de ellos por completo. Las estrategias de coasignación descritas anteriormente no solucionan la limitación de que los servidores más rápidos tengan que esperar a que el servidor más lento entregue su último bloque. En la mayoría de los casos, esto desperdicia mucho tiempo y disminuye el rendimiento general. Por lo tanto, proponemos un enfoque eficiente llamado Recursivo-Ajuste Co-Asignación y basado en una arquitectura de co-asignación. Mejora la co-asignación dinámica y reduce el tiempo de espera, mejorando así el rendimiento general de la transferencia. Un SERVICIO DE SELECCIÓN DE RÉPLICAS EFICIENTE Construimos un servicio de selección de réplicas para permitir a los clientes seleccionar los servidores de réplicas mejores en entornos de Data Grid. Consulte a continuación para obtener una descripción detallada. 4.1 Escenario de Selección de Réplicas Nuestro modelo propuesto de selección de réplicas se ilustra en [23], que muestra cómo un cliente identifica la mejor ubicación para una transferencia de réplica deseada. El cliente primero inicia sesión en un sitio local y ejecuta la aplicación de la plataforma Data Grid, la cual verifica si los archivos están disponibles en el sitio local. Si están presentes en el sitio local, la aplicación accede a ellos inmediatamente; de lo contrario, pasa los nombres de archivo lógicos al servidor del catálogo de réplicas, que devuelve una lista de ubicaciones físicas para todas las copias registradas. La aplicación envía esta lista de ubicaciones de réplicas a un servidor de selección de réplicas, que identifica las ubicaciones de destino del sistema de almacenamiento para todas las operaciones de transferencia de datos candidatas. El servidor de selección de réplicas envía las posibles ubicaciones de destino al servidor de información, el cual proporciona mediciones de rendimiento y predicciones de los tres factores del sistema descritos a continuación. El servidor de selección de réplicas elige mejores ubicaciones de réplicas según estas estimaciones y devuelve la información de ubicación a la aplicación de transferencia, la cual recibe la réplica a través de GridFTP. Cuando la aplicación finaliza, devuelve los resultados al usuario. 4.2 Factores del sistema Determinar la mejor base de datos entre muchas con las mismas réplicas es un problema significativo. En nuestro modelo, consideramos tres factores del sistema que afectan la selección de réplicas: Ancho de banda de red: Este es uno de los factores más significativos de Data Grid ya que los archivos de datos en entornos de Data Grid suelen ser muy grandes. En otras palabras, los tiempos de transferencia de archivos de datos dependen estrechamente de las situaciones de ancho de banda de la red. Debido a que el ancho de banda de la red es un factor dinámico inestable, debemos medirlo con frecuencia y predecirlo de la manera más precisa posible. El Servicio Meteorológico de Red (NWS) es una herramienta poderosa para este propósito. Carga de la CPU: Las plataformas de cuadrícula consisten en números de sistemas heterogéneos, construidos con diferentes arquitecturas de sistema, por ejemplo, plataformas de clúster, supercomputadoras, PC. La carga de la CPU es un factor del sistema dinámico, y una carga pesada en la CPU del sistema afectará sin duda el proceso de descarga de archivos de datos desde el sitio. La medición se realiza mediante el Toolkit Globus / MDS. Estado de E/S: Los nodos de la cuadrícula de datos consisten en diferentes sistemas de almacenamiento heterogéneos. Los archivos de datos en las redes de datos son enormes. Si el estado de E/S de un sitio del que deseamos descargar archivos está muy ocupado, afectará directamente el rendimiento de la transferencia de datos. Medimos los estados de E/S utilizando las utilidades sysstat [15]. Nuestro Modelo de Costo de Selección de Réplicas La función objetivo de un modelo de costos para el almacenamiento de datos distribuidos y replicados es la puntuación de información del servicio de información. Enumeramos algunos factores influyentes para nuestro modelo de costos en la sección anterior. Sin embargo, debemos expresar estos factores en notación matemática para un análisis más detallado. Suponemos que el nodo i es el sitio local en el que el usuario o la aplicación inicia sesión, y el nodo j posee la réplica que el usuario o la aplicación desea. Los siete parámetros del sistema que considera nuestro modelo de costos de selección de réplicas son: Scorei-j: el valor de puntuación representa qué tan eficientemente un usuario o aplicación en el nodo i puede adquirir una réplica del nodo j BW jiP: porcentaje de ancho de banda disponible del nodo i al nodo j; ancho de banda actual dividido por el ancho de banda teórico más alto BBW: peso del ancho de banda de red definido por el administrador de Data Grid CPU jP: porcentaje de estados de inactividad de la CPU del nodo j WCPU: peso de carga de la CPU definido por el administrador de Data Grid OI jP /: porcentaje de estados de inactividad de E/S del nodo j WI/O: peso del estado de E/S definido por el administrador de Data Grid Definimos la siguiente fórmula general utilizando estos factores del sistema. Los tres factores influyentes en esta fórmula: WBW, WCPU y WI/O describen los pesos de la CPU, E/S y ancho de banda de red, los cuales pueden ser determinados por los administradores de la organización de Data Grid según los diversos atributos de los sistemas de almacenamiento en los nodos de Data Grid, ya que algunos equipos de almacenamiento no afectan la carga de la CPU. Después de varias mediciones experimentales, determinamos que el ancho de banda de la red es el factor más significativo que influye directamente en los tiempos de transferencia de datos. Cuando realizamos transferencias de datos utilizando el protocolo GridFTP, descubrimos que los estados de la CPU y E/S afectan ligeramente el rendimiento de la transferencia de datos. Sus valores respectivos en nuestro entorno de Data Grid son 80%, 10% y 10%. 4.4 Análisis de Costo de Co-Asignación Cuando los clientes descargan conjuntos de datos utilizando la tecnología de co-asignación de GridFTP, se incurre en tres costos de tiempo: el tiempo requerido para la autenticación del cliente en el servidor de GridFTP, el tiempo real de transmisión de datos y el tiempo de reensamblaje de bloques de datos. Tiempo de autenticación: Antes de una transferencia, el cliente debe cargar un proxy de Globus y autenticarse en el servidor GridFTP con las credenciales de usuario especificadas. El cliente luego establece un canal de control, configura los parámetros de transferencia y solicita la creación de un canal de datos. Cuando se ha establecido el canal, los datos comienzan a fluir. Tiempo de transmisión: El tiempo de transmisión se mide desde el momento en que el cliente comienza a transferir hasta el momento en que se completan todos los trabajos de transmisión, e incluye el tiempo requerido para restablecer los canales de datos entre las solicitudes de transferencia. Las vías de datos solo necesitan abrirse una vez y pueden manejar muchas transferencias antes de cerrarse. Esto permite que las mismas vías de datos se utilicen para múltiples transferencias de archivos. Sin embargo, los canales de datos deben reiniciarse explícitamente entre las solicitudes de transferencia. Esto es menos costoso en tiempo. Tiempo de combinación: la arquitectura de coasignación explota la característica de copia parcial de la herramienta de movimiento de datos GridFTP para permitir transferencias de datos a través de múltiples conexiones. Con la transferencia parcial de archivos, se pueden recuperar secciones de archivos de servidores de datos especificando solo los desplazamientos de inicio y fin de la sección. Cuando se entregan estas secciones de archivo, es posible que necesiten ser reensambladas; la operación de reensamblaje conlleva un costo adicional de tiempo. 5. ESTRATEGIA DE COASIGNACIÓN DINÁMICA La coasignación dinámica, descrita anteriormente, es el enfoque más eficiente para reducir la influencia de las variaciones de red entre clientes y servidores. Sin embargo, el tiempo de inactividad de los servidores más rápidos esperando a que el servidor más lento entregue el último bloque sigue siendo un factor importante que afecta la eficiencia general, el cual el Balanceo de Carga Conservador y el Balanceo de Carga Agresivo [17] no pueden evitar de manera efectiva. El enfoque propuesto en el presente documento, un mecanismo de asignación dinámica llamado Coasignación Recursiva-Ajustable, puede superar esto y, por lo tanto, mejorar el rendimiento de transferencia de datos. 5.1 Coasignación Recursiva-Ajustable La Coasignación Recursiva-Ajustable funciona ajustando continuamente la carga de trabajo de cada servidor de réplicas para que corresponda a su ancho de banda en tiempo real durante las transferencias de archivos. El objetivo es hacer que el tiempo de finalización esperado de todos los servidores sea el mismo. Como muestra la Figura 2, cuando se selecciona primero una sección de archivo apropiada, se divide en tamaños de bloque adecuados según los anchos de banda del servidor respectivos. El coasignador luego asigna los bloques a los servidores para la transferencia. En este momento, se espera que el tiempo de finalización de la transferencia sea consistente en E(T1). Sin embargo, dado que los anchos de banda del servidor pueden fluctuar durante las entregas de segmentos, el tiempo real de finalización puede ser diferente (línea sólida, en la Figura 2). Una vez que el servidor más rápido termina su trabajo en el tiempo T1, la siguiente sección se asigna nuevamente a los servidores. Esto permite que cada servidor termine su carga de trabajo asignada para el tiempo esperado en E(T2). Estos ajustes se repiten hasta que se complete la transferencia de todo el archivo. Servidor 1 Servidor 2 Servidor 3 Ronda 1 Ronda 2 E(T1) E(T2)T1 Archivo A Sección 1 Sección 2 ... ... ... Figura 2. El proceso de ajuste del proceso de coasignación recursiva se ilustra en la Figura 3. Cuando un usuario solicita el archivo A, el servicio de selección de réplicas responde con el subconjunto de todos los servidores disponibles definidos por la matriz de rendimiento máximo. El servicio de co-asignación recibe esta lista de servidores réplica seleccionados. Suponiendo que se seleccionan n servidores réplica, Si denota el servidor i tal que 1 i n. Luego se establece una conexión para la descarga de archivos con cada servidor. El proceso de Co-Asignación de Ajuste Recursivo es el siguiente. Una nueva sección de un archivo a asignar es primero definida. El tamaño de la sección, SEj, es: SEj = TamañoArchivoNoAsignado , (0 < < 1) (2) donde SEj denota la sección j tal que 1 ≤ j ≤ k, asumiendo que asignamos k veces para el proceso de descarga. Y así, hay k secciones, mientras que Tj denota el tiempo asignado a la sección j. UnassignedFileSize es la porción del archivo A que aún no se ha distribuido para su descarga; inicialmente, UnassignedFileSize es igual al tamaño total del archivo A. es la tasa que determina cuánto de la sección queda por asignar. Figura 3. El proceso de Co-Asignación de Ajuste Recursivo. En el siguiente paso, SEj se divide en varios bloques y se asigna a n servidores. Cada servidor tiene una tasa de transferencia en tiempo real al cliente de Bi, la cual es medida por el Servicio Meteorológico de Red (NWS) [18]. El tamaño de bloque por flujo desde SEj para cada servidor i en el tiempo Tj es: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) donde UnFinishSizei denota el tamaño de bloques de transferencia no finalizados asignados en rondas anteriores en el servidor i. UnFinishSizei es igual a cero en la primera ronda. Idealmente, dependiendo del ancho de banda en tiempo real en el momento Tj, se espera que cada flujo termine su carga de trabajo en el futuro. Esto cumple con nuestro requisito de minimizar el tiempo que los servidores más rápidos deben esperar a que el servidor más lento termine. Si, en algunos casos, las variaciones en la red degradan considerablemente las tasas de transferencia, UnFinishSizei puede exceder n i ii n i ij BBzeUnFinishSiSE 11 *)(, que es el tamaño total del bloque que se espera transferir después de Tj. En tales casos, el coasignador elimina los servidores de antemano y asigna SEj a otros servidores. Después de la asignación, todos los canales continúan transfiriendo bloques de datos. Cuando un canal más rápido termina sus bloques de datos asignados, el coasignador comienza a asignar nuevamente una sección no asignada del archivo A. El proceso de asignar bloques de datos 801 para ajustar el tiempo de finalización del flujo esperado continúa hasta que se haya asignado todo el archivo. 5.2 Determinar cuándo detener el ajuste continuo Nuestro enfoque obtiene nuevas secciones de archivos completos dividiendo rangos de archivos no asignados en cada ronda de asignación. Estas porciones no asignadas de los rangos de archivo se vuelven más pequeñas después de cada asignación. Dado que el ajuste es continuo, funcionaría como un bucle infinito si no estuviera limitado por una condición de parada. Sin embargo, ¿cuándo es apropiado detener el ajuste continuo? Proporcionamos dos criterios de monitoreo, LeastSize y ExpectFinishedTime, para permitir a los usuarios definir umbrales de parada. Cuando se alcanza un umbral, el servidor de coasignación deja de dividir el resto del archivo y asigna ese resto como la sección final. El criterio LeastSize especifica el archivo más pequeño que queremos procesar, y cuando la porción no asignada de UnassignedFileSize cae por debajo de la especificación de LeastSize, la división se detiene. El criterio ExpectFinishedTime especifica el tiempo restante que se espera que dure la transferencia. Cuando el tiempo de transferencia esperado de la porción no asignada de un archivo cae por debajo del tiempo especificado por ExpectFinishedTime, la división del archivo se detiene. El valor esperado del tiempo de descanso se determina por: 1 n i iBFileSizeUnAssigned (4) Estos dos criterios determinan el tamaño final de la sección asignada. Valores de umbral más altos inducirán menos divisiones y generarán costos de co-asignación más bajos, que incluyen el establecimiento de conexiones, negociación, reensamblaje, etc. Sin embargo, aunque el tiempo total de ajuste de la coalocación puede ser menor, las variaciones de ancho de banda también pueden ejercer más influencia. Por el contrario, valores de umbral más bajos inducirán ajustes más frecuentes en la carga de trabajo del servidor dinámico y, en el caso de mayores fluctuaciones en la red, resultarán en menos diferencias en el tiempo de finalización de la transferencia del servidor. Sin embargo, valores más bajos también aumentarán los tiempos de coasignación, y por lo tanto, aumentarán los costos de coasignación. Por lo tanto, el entorno de internet, los tamaños de archivo transferidos y los costos de coasignación deben considerarse todos al determinar los umbrales óptimos. 5.3 Reducción de la Sobrecarga de Reensamblaje El proceso de reensamblar bloques después de transferencias de datos utilizando tecnología de coasignación resulta en una sobrecarga adicional y disminuye el rendimiento general. El sobrecosto de reensamblaje está relacionado con el tamaño total del bloque, y podría reducirse mediante la actualización de las capacidades del hardware o el uso de algoritmos de software mejores. Proponemos un mecanismo de reensamblaje alternativo eficiente para reducir la sobrecarga de combinación añadida una vez que se han completado todas las transmisiones de bloques. Se diferencia del método convencional en el que el software comienza el ensamblaje después de que todos los bloques hayan sido entregados, comenzando a ensamblar bloques una vez que finalizan las primeras entregas. Por supuesto, esto hace necesario mantener el orden original de división. Estrategias de coasignación como el Balanceo de Carga Conservador y la Coasignación de Ajuste Recursivo producen bloques adicionales durante las transferencias de archivos y pueden beneficiarse al habilitar el reensamblaje durante las transferencias de datos. Si algunos bloques se ensamblan de antemano, el costo de tiempo para ensamblar los bloques restantes después de que todas las transferencias finalicen puede reducirse. 6. RESULTADOS EXPERIMENTALES Y ANÁLISIS En esta sección, discutimos el rendimiento de nuestra estrategia de Co-Asignación Recursiva de Ajuste. Evaluamos cuatro esquemas de coalocación: (1) Fuerza Bruta (Brute), (2) Basado en Historial (History), (3) Balance de Carga Conservador (Conservative) y (4) Coalocación Co-Ajustada Recursiva (Recursive). Analizamos el rendimiento de cada esquema comparando su tiempo de finalización de transferencia y el tiempo total de inactividad que los servidores más rápidos pasaron esperando a que el servidor más lento terminara de entregar el último bloque. También analizamos el rendimiento general en los diferentes casos. Realizamos experimentos de transferencia de datos de gran área utilizando nuestra herramienta cliente GUI de GridFTP. Ejecutamos nuestra herramienta de cliente de co-asignación en nuestra plataforma de pruebas en la Universidad de Tunghai (THU), en la ciudad de Taichung, Taiwán, y obtuvimos archivos de cuatro servidores réplica seleccionados: uno en la Universidad de Providence (PU), uno en la Escuela Secundaria Li-Zen (LZ), uno en la Escuela de Tecnología Hsiuping (HIT) y uno en la Escuela Secundaria Da-Li (DL). Todas estas instituciones están en Taiwán, y cada una está al menos a 10 km de la THU. La Figura 4 muestra nuestro banco de pruebas de la cuadrícula de datos. Nuestros servidores tienen instalado Globus 3.0.2 o una versión superior. Escuela Secundaria THU Li-Zen (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD Escuela Secundaria Da-Li (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figura 4. En nuestro banco de pruebas de Data Grid, en los siguientes experimentos, establecimos = 0.5, el umbral de LeastSize en 10MB, y experimentamos con tamaños de archivo de 10 MB, 50 MB, 100 MB, 500 MB, 1000 MB, 2000 MB y 4000 MB. Para la comparación, medimos el rendimiento del Balanceo de Carga Conservador en cada tamaño utilizando los mismos números de bloques. La Figura 5 muestra una captura de pantalla de nuestra herramienta cliente GridFTP. Esta herramienta de cliente está desarrollada utilizando Java CoG. Permite un desarrollo de aplicaciones más fácil y rápido al fomentar la reutilización colaborativa de código y evitar la duplicación de esfuerzos entre entornos de resolución de problemas, portales científicos, middleware de Grid y pilotos colaborativos. La Tabla 1 muestra las tasas de transmisión promedio entre THU y cada servidor réplica. Estos números fueron obtenidos al transferir archivos de 500MB, 1000MB y 2000MB desde un único servidor réplica utilizando nuestra herramienta cliente GridFTP, y cada número es un promedio de varias ejecuciones. Tabla 1. Tasa de transmisión de extremo a extremo de GridFTP desde THU a varios servidores. Tasa de transmisión promedio del servidor: HIT 61.5 Mbps, LZ 59.5 Mbps, DL 32.1 Mbps, PU 26.7 Mbps. Figura 5. Nuestra herramienta cliente GridFTP analizó el efecto de servidores más rápidos esperando al servidor más lento para entregar el último bloque en cada esquema. La Figura 6(a) muestra el tiempo total de inactividad para diferentes tamaños de archivo. Tenga en cuenta que nuestro esquema de Co-Asignación Recursiva logró mejoras significativas en el rendimiento en comparación con otros esquemas para cada tamaño de archivo. Estos resultados demuestran que nuestro enfoque reduce eficientemente las diferencias en los tiempos de finalización de los servidores. Los resultados experimentales mostrados en la Figura 6(b) indican que nuestro esquema de comenzar la reensamblaje de bloques tan pronto como los primeros bloques han sido entregados completamente reduce el tiempo de combinación, ayudando así a estrategias de co-asignación como el Balance de Carga Conservador y la Co-Asignación de Ajuste Recursivo que producen más bloques durante las transferencias de datos. La Figura 7 muestra los resultados experimentales del tiempo total de finalización en una vista detallada de la estructura de costos. Los servidores estaban en PU, DL y HIT, con el cliente en THU. Las tres primeras barras para cada tamaño de archivo representan el tiempo para descargar el archivo completo desde un único servidor, mientras que las otras barras muestran descargas coasignadas utilizando los tres servidores. Nuestro esquema de coasignación terminó el trabajo más rápido que las otras estrategias de coasignación. Por lo tanto, podemos inferir que las principales ventajas que ofrece nuestra tecnología son tiempos de transmisión y combinación más bajos que otras estrategias de co-asignación. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de espera (seg) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de combinación (seg) Brute3 History3 Conservative3 Recursive3 Figura 6. (a) Tiempos de inactividad para varios métodos; los servidores están en PU, DL y HIT. (b) Tiempos de combinación para varios métodos; los servidores están en PU, DL y HIT. En el siguiente experimento, utilizamos la estrategia de Coasignación Recursiva-Ajustable con varios conjuntos de servidores réplica y medimos el rendimiento general, donde el rendimiento general es: Rendimiento Total = Tamaño del archivo / Tiempo Total de Finalización (5). La Tabla 2 enumera todos los experimentos que realizamos y los conjuntos de servidores réplica utilizados. Los resultados en la Figura 8(a) muestran que el uso de tecnologías de coallocation no produjo ninguna mejora para tamaños de archivo más pequeños como 10MB. También muestran que en la mayoría de los casos, el rendimiento general aumentó a medida que aumentaba el número de flujos coasignados. Observamos que para nuestro banco de pruebas y nuestra tecnología de coasignación, el rendimiento general alcanzó su valor más alto en el caso REC3_2. Sin embargo, en el caso REC4, cuando agregamos un flujo al conjunto de servidores réplica, el rendimiento no aumentó. Por el contrario, disminuyó. Podemos inferir que la eficiencia de coasignación alcanzó la saturación en el caso REC3_2, y que flujos adicionales causaron sobrecarga adicional y redujeron el rendimiento general. Esto significa que más flujos de descarga no necesariamente resultan en un rendimiento más alto. Debemos elegir un número adecuado de flujos para lograr un rendimiento óptimo. Mostramos la vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4 en la Figura 8(b). El costo detallado consiste en el tiempo de autenticación, tiempo de transferencia y tiempo de combinación. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de finalización (seg) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 7. Tiempos de finalización para varios métodos; los servidores están en PU, DL y HIT. Tabla 2. Los conjuntos de servidores réplica para todos los casos son: Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 8. (a) Rendimientos generales para varios conjuntos de servidores. (b) Vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4. 7. CONCLUSIONES La arquitectura de coasignación proporciona un agente coordinado para asignar bloques de datos. Un trabajo previo mostró que el esquema de co-asignación dinámica conduce a mejoras en el rendimiento. Sin embargo, no puede manejar el tiempo de inactividad de los servidores más rápidos, que deben esperar a que el servidor más lento entregue su bloque final. Propusimos el esquema de Co-Asignación Recursiva-Ajustable para mejorar el rendimiento de transferencia de datos utilizando la arquitectura de co-asignación en [17]. En este enfoque, las cargas de trabajo de los servidores de réplica seleccionados se ajustan continuamente durante las transferencias de datos, y proporcionamos una función que permite a los usuarios definir un umbral final de bloque 803, de acuerdo con su entorno de cuadrícula de datos. Los resultados experimentales muestran la efectividad de nuestra técnica propuesta en mejorar el tiempo de transferencia y reducir el tiempo total de inactividad esperando al servidor más lento. También discutimos el costo de recombinación y proporcionamos un esquema efectivo para reducirlo. 8. REFERENCIAS [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Gestión y Transferencia de Datos en Entornos de Redes Computacionales de Alto Rendimiento, Computación Paralela, 28(5):749-771, mayo de 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Transporte de Datos Seguro y Eficiente y Gestión de Réplicas para la Computación de Alto Rendimiento con Datos Intensivos, Actas del Decimoctavo Simposio IEEE sobre Sistemas y Tecnologías de Almacenamiento Masivo, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I. Foster, A. Chervenak y C. Kesselman. Protocolos y Servicios para la Ciencia de Datos Intensivos Distribuidos. Actas de ACAT2000, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I. Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt y M. Ripeanu, Giggle: Un marco para la construcción de servicios de ubicación de réplicas escalables, Actas de SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I. Foster, C. Kesselman, C. Salisbury y S. Tuecke, La Data Grid: Hacia una arquitectura para la gestión distribuida y análisis de grandes conjuntos de datos científicos, Revista de Aplicaciones de Redes y Computadoras, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I. Foster y C. Kesselman, Servicios de Información de Grid para Compartir Recursos Distribuidos, Actas del Décimo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-1001), 181-194, agosto de 2001. [7] K. Czajkowski, I. Foster y C. Kesselman. Coasignación de recursos en rejillas computacionales, Actas del Octavo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-899), agosto de 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz y M. Sgaravatto, Prototipo 1 de DataGrid, Conferencia de Redes de TERENA, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, junio de 2002, [9] I. Foster, C. Kesselman y S. Tuecke. La Anatomía de la Red: Permitiendo Organizaciones Virtuales Escalables. Int. Revista de Aplicaciones de Supercomputadoras y Computación de Alto Rendimiento, 15(3), pp. 200-222, 2001. [10] I. Foster y C. Kesselman, Globus: Un conjunto de herramientas de infraestructura de metacomputación, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger y K. Stockinger, Gestión de datos en un Proyecto Internacional de Grid de Datos, Proc. del Primer Taller Internacional de Grid Computing IEEE/ACM - Grid 2000, Bangalore, India, diciembre de 2000. [13] IBM Red Books, Introducción a la Computación en Grid con Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I. Foster, K. Holtman y B. Tierney, Replicación de archivos y objetos en rejillas de datos, Journal of Cluster Computing, 5(3):305-314, 2002. [15] Página de inicio de utilidades SYSSTAT, http://perso.wanadoo.fr/sebastien.godard/ [16] La Alianza Globus, http://www.globus.org/ [17] S. Vazhkudai, Facilitando la coasignación de transferencias de datos en rejillas, Proc. del Cuarto Taller Internacional sobre Computación en Rejilla, pp. 41-51, noviembre de 2003. [18] S. Vazhkudai y J. Schopf, Uso de técnicas de regresión para predecir grandes transferencias de datos, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, agosto de 2003. [19] S. Vazhkudai, S. Tuecke e I. Foster, Selección de réplicas en la malla de datos de Globus, Actas del 1er Simposio Internacional sobre Computación en Clúster y la Malla (CCGRID 2001), pp. 106-113, mayo de 2001. [20] S. Vazhkudai, J. Schopf, Predicción de transferencias de datos esporádicas en la malla, Actas del 11º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-11 02), pp. 188-196, julio de 2002. [21] S. Vazhkudai, J. Schopf e I. Foster, Prediciendo el rendimiento de transferencias de datos de amplia área, Actas del 16º Simposio Internacional de Procesamiento Paralelo y Distribuido (IPDPS 2002), pp. 34-43, abril de 2002, pp. 34-43. [22] R. Wolski, N. Spring y J. Hayes, El Servicio de Pronóstico del Tiempo de Red: Un Servicio de Pronóstico de Rendimiento de Recursos Distribuidos para Metacomputación, Sistemas Informáticos de Generación Futura, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li y Ching-Hsien Hsu, Análisis de rendimiento de la aplicación de tecnología de selección de réplicas para entornos de Grid de Datos, PaCT 2005, Notas de Conferencias en Ciencias de la Computación, vol. 3603, pp. 278-287, Springer-Verlag, septiembre de 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li y ChingHsien Hsu, Un Esquema de Co-Asignación Recursiva en Entornos de Grid de Datos, ICA3PP 2005 Algoritmo y Arquitectura para Procesamiento Paralelo, Notas de Conferencias en Ciencias de la Computación, vol. 3719, pp. 40-49, Springer-Verlag, octubre de 2005. [25] X. Zhang, J. Freschl y J. Schopf, Un Estudio de Rendimiento de Servicios de Monitoreo e Información para Sistemas Distribuidos, Actas del 12º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-12 03), pp. 270-282, agosto de 2003. ",
            "candidates": [],
            "error": [
                []
            ]
        },
        "data grid application": {
            "translated_key": "aplicación de cuadrícula de datos",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": [
                []
            ]
        },
        "replication": {
            "translated_key": "replicación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the <br>replication</br> of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object <br>replication</br> in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "The replica management service is responsible for managing the <br>replication</br> of complete and partial copies of datasets, defined as collections of files.",
                "Foster, K. Holtman, and B. Tierney, File and Object <br>replication</br> in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I."
            ],
            "translated_annotated_samples": [
                "El servicio de gestión de réplicas es responsable de administrar la <br>replicación</br> de copias completas y parciales de conjuntos de datos, definidos como colecciones de archivos.",
                "Foster, K. Holtman y B. Tierney, Replicación de archivos y objetos en rejillas de datos, Journal of Cluster Computing, 5(3):305-314, 2002. [15] Página de inicio de utilidades SYSSTAT, http://perso.wanadoo.fr/sebastien.godard/ [16] La Alianza Globus, http://www.globus.org/ [17] S. Vazhkudai, Facilitando la coasignación de transferencias de datos en rejillas, Proc. del Cuarto Taller Internacional sobre Computación en Rejilla, pp. 41-51, noviembre de 2003. [18] S. Vazhkudai y J. Schopf, Uso de técnicas de regresión para predecir grandes transferencias de datos, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, agosto de 2003. [19] S. Vazhkudai, S. Tuecke e I."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque. Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de transferencia de datos de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la transferencia de datos [24]. Los resultados experimentales muestran que nuestro enfoque es superior a los métodos anteriores y logró el mejor rendimiento general. También discutimos el costo de combinación y proporcionamos un esquema efectivo para reducirlo. El resto de este documento está organizado de la siguiente manera. La revisión de antecedentes relacionados y estudios se presentan en la Sección 2 y la arquitectura de co-asignación y trabajos relacionados se introducen en la Sección 3. En la Sección 4, proponemos un servicio eficiente de selección de réplicas. Nuestros enfoques de investigación se describen en la Sección 5, y los resultados experimentales y una evaluación del rendimiento de nuestro esquema se presentan en la Sección 6. La sección 7 concluye este documento de investigación. ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico). El término Data Grid tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes. Las Rejillas de Datos [1, 2, 16] federan una gran cantidad de recursos de almacenamiento. Grandes colecciones de datos medidos o calculados están surgiendo como recursos importantes en muchas aplicaciones intensivas en datos. 2.1.1 Gestión de Réplicas La gestión de réplicas implica la creación o eliminación de réplicas en un sitio de cuadrícula de datos [19]. En otras palabras, el rol de un administrador de réplicas es crear o eliminar réplicas, dentro de sistemas de almacenamiento especificados. La mayoría de las veces, estas réplicas son copias exactas de los archivos originales, creadas solo para aprovechar ciertos beneficios de rendimiento. Un administrador de réplicas generalmente mantiene un catálogo de réplicas que contiene las direcciones de los sitios de réplica y las instancias de archivos. El servicio de gestión de réplicas es responsable de administrar la <br>replicación</br> de copias completas y parciales de conjuntos de datos, definidos como colecciones de archivos. El servicio de gestión de réplicas es solo un componente en un entorno de Data Grid que brinda soporte para aplicaciones de alto rendimiento y alta intensidad de datos. Una réplica o ubicación es un subconjunto de una colección que se almacena en un sistema de almacenamiento físico particular. Puede haber múltiples subconjuntos posiblemente superpuestos de una colección almacenados en múltiples sistemas de almacenamiento en una Rejilla de Datos. Estos sistemas de almacenamiento en red pueden utilizar una variedad de tecnologías de almacenamiento subyacentes y protocolos de movimiento de datos, que son independientes de la gestión de réplicas. 2.1.2 Catálogo de Réplicas Como se mencionó anteriormente, el propósito del catálogo de réplicas es proporcionar mapeos entre nombres lógicos de archivos o colecciones y una o más copias de los objetos en sistemas de almacenamiento físico. El catálogo de réplicas incluye entradas opcionales que describen archivos lógicos individuales. Los archivos lógicos son entidades con nombres globalmente únicos que pueden tener una o más instancias físicas. El catálogo puede contener opcionalmente una entrada de archivo lógico en el catálogo de réplicas para cada archivo lógico en una colección. Una cuadrícula de datos puede contener múltiples catálogos de réplicas. Por ejemplo, una comunidad de investigadores interesados en un tema de investigación particular podría mantener un catálogo de réplicas para una colección de conjuntos de datos de interés mutuo. Es posible crear jerarquías de catálogos de réplicas para imponer una estructura similar a la de un directorio en colecciones lógicas relacionadas. Además, el administrador de réplicas puede realizar control de acceso en catálogos completos, así como en archivos lógicos individuales. 2.1.3 Selección de Réplicas El propósito de la selección de réplicas [16] es seleccionar una réplica entre los sitios que constituyen una Data Grid [19]. Los criterios de selección dependen de las características de la aplicación. Al utilizar este mecanismo, los usuarios de la Data Grid pueden gestionar fácilmente réplicas de conjuntos de datos en sus sitios, con un mejor rendimiento. Se ha dedicado mucho esfuerzo previo al problema de selección de réplicas. El proceso común de selección de réplicas consta de tres pasos: preparación de datos, preprocesamiento y predicción. Entonces, las aplicaciones pueden seleccionar una réplica según sus atributos específicos. La selección de réplicas es importante para aplicaciones intensivas en datos, y puede proporcionar transparencia de ubicación. Cuando un usuario solicita acceso a un conjunto de datos, el sistema determina una forma apropiada de entregar la réplica al usuario. 2.2 Globus Toolkit y GridFTP El Proyecto Globus [9, 11, 16] proporciona herramientas de software colectivamente llamadas El Kit de Herramientas Globus que facilita la construcción de Grids computacionales y aplicaciones basadas en Grid. Muchas organizaciones utilizan la Herramienta Globus para construir Grillas computacionales que apoyen sus aplicaciones. La composición del Globus Toolkit se puede visualizar como tres pilares: Gestión de Recursos, Servicios de Información y Gestión de Datos. Cada pilar representa un componente principal del Globus Toolkit y hace uso de una base común de seguridad. GRAM implementa un protocolo de gestión de recursos, MDS implementa un protocolo de servicios de información y GridFTP implementa un protocolo de transferencia de datos. Todos utilizan el protocolo de seguridad GSI en la capa de conexión [10, 11, 16, 13]. La alianza Globus propuso un protocolo común de transferencia y acceso de datos llamado GridFTP que proporciona un movimiento seguro y eficiente de datos en entornos de Grid. Este protocolo, que extiende el protocolo estándar FTP, proporciona un superconjunto de las características ofrecidas por los diversos sistemas de almacenamiento en red actualmente en uso. Para resolver los problemas que surgen, la comunidad de Data Grid intenta desarrollar un mecanismo seguro y eficiente de transporte de datos y servicios de gestión de réplicas. GridFTP es un protocolo de transporte de datos confiable, seguro y eficiente que se desarrolló como parte del proyecto Globus. Hay otra tecnología clave del proyecto Globus, llamada catálogo de réplicas [16], que se utiliza para registrar y gestionar copias completas y parciales de conjuntos de datos. El catálogo de réplicas contiene la información de mapeo de un archivo lógico o colección a uno o más archivos físicos. 2.3 Servicio Meteorológico de Red El Servicio Meteorológico de Red (NWS) [22] es un sistema de monitoreo generalizado y distribuido para producir pronósticos de rendimiento a corto plazo basados en mediciones de rendimiento históricas. El objetivo del sistema es caracterizar y predecir dinámicamente el rendimiento entregable a nivel de aplicación a partir de un conjunto de recursos de red y computacionales. Una instalación típica implica un nws_nameserver, uno o más nws_memory (que pueden residir en máquinas diferentes) y un nws_sensor ejecutándose en cada máquina con los recursos que se van a monitorear. El sistema incluye sensores para el rendimiento TCP/IP de extremo a extremo (ancho de banda y latencia), porcentaje de CPU disponible y memoria no paginada disponible. 798 2.4 Utilidades Sysstat Las utilidades Sysstat [15] son un conjunto de herramientas de monitoreo de rendimiento para el sistema operativo Linux. El paquete Sysstat incorpora los comandos sar, mpstat e iostat. El comando sar recopila y reporta información de actividad del sistema, la cual también puede ser guardada en un archivo de actividad del sistema para inspección futura. El comando iostat informa estadísticas de la CPU y estadísticas de E/S para dispositivos tty y discos. Las estadísticas reportadas por SAR se refieren a tasas de transferencia de E/S, actividad de paginación, actividades relacionadas con procesos, interrupciones, actividad de red, utilización de memoria y espacio de intercambio, utilización de CPU, actividades del kernel y estadísticas de TTY, entre otros. Las máquinas Uniprocessor (UP) y Symmetric multiprocessor (SMP) son totalmente compatibles. 3. La arquitectura de co-asignación propuesta en [17] consta de tres componentes principales: un servicio de información, un intermediario/co-asignador y sistemas de almacenamiento locales. La Figura 1 muestra la co-asignación de transferencias de datos de la red, que es una extensión de la plantilla básica para la gestión de recursos [7] proporcionada por Globus Toolkit. Las aplicaciones especifican las características de los datos deseados y envían la descripción de los atributos a un intermediario. El corredor consulta los recursos disponibles y obtiene las ubicaciones de réplicas de los servicios de información [6] y los servicios de gestión de réplicas [19], y luego obtiene una lista de ubicaciones físicas para los archivos deseados. Figura 1. La arquitectura de coasignación de cuadrícula de datos [17] pasa las ubicaciones candidatas de réplicas a un servicio de selección de réplicas [19], que fue presentado en un trabajo previo [23]. Este servicio de selección de réplicas proporciona estimaciones del rendimiento de transferencia de candidatos basadas en un modelo de costos y elige las cantidades apropiadas para solicitar a las ubicaciones más adecuadas. El agente de coasignación luego descarga los datos en paralelo desde los servidores seleccionados. En estas investigaciones, se utilizó GridFTP [1, 11, 16] para habilitar transferencias de datos en paralelo. GridFTP es un protocolo de transferencia de datos de alto rendimiento, seguro y confiable, optimizado para redes de área amplia de alta velocidad de banda ancha. Entre sus muchas características se encuentran la seguridad, los flujos paralelos, las transferencias de archivos parciales, las transferencias de terceros y los canales de datos reutilizables. Su capacidad de transferencia parcial de archivos permite recuperar archivos de servidores de datos especificando los desplazamientos de inicio y fin de las secciones de archivos. Las rejillas de datos consisten en recursos informáticos y de almacenamiento dispersos ubicados en diferentes países/regiones pero accesibles para los usuarios [8]. En este estudio utilizamos el middleware de cuadrícula Globus Toolkit [16] como infraestructura de la cuadrícula de datos. El Globus Toolkit proporciona soluciones para consideraciones como seguridad, gestión de recursos, gestión de datos y servicios de información. Uno de sus componentes principales es MDS [6, 11, 16, 25], el cual está diseñado para proporcionar un mecanismo estándar para descubrir y publicar información sobre el estado y la configuración de recursos. Proporciona una interfaz uniforme y flexible para los datos recopilados por proveedores de información de nivel inferior en dos modos: estáticos (por ejemplo, sistemas operativos, tipos de CPU y arquitecturas de sistemas) y datos dinámicos (por ejemplo, disponibilidad de disco, disponibilidad de memoria y carga). Y utiliza GridFTP [1, 11, 16], un protocolo de transporte de datos confiable, seguro y eficiente para proporcionar una gestión eficiente y transferencia de terabytes o petabytes de datos en un entorno de recursos distribuidos de amplia área. A medida que los conjuntos de datos se replican dentro de entornos de Grid para fiabilidad y rendimiento, los clientes requieren la capacidad de descubrir réplicas de datos existentes, y crear y registrar nuevas réplicas. Un Servicio de Localización de Réplicas (RLS) proporciona un mecanismo para descubrir y registrar réplicas existentes. Se han desarrollado varios métricas de predicción para ayudar en la selección de réplicas. Por ejemplo, Vazhkudai y Schopf [18, 20, 21] utilizaron historiales de transferencia de datos pasados para estimar las velocidades actuales de transferencia de datos. En nuestro trabajo previo [23, 24], propusimos un modelo de costo de selección de réplicas y un servicio de selección de réplicas para llevar a cabo la selección de réplicas. En [17], el autor propone una arquitectura de coasignación para coasignar transferencias de datos de Grid a través de múltiples conexiones, aprovechando la función de copia parcial de GridFTP. También proporciona Balanceo de Carga por Fuerza Bruta, Basado en Historial y Dinámico para asignar bloques de datos. Coasignación por Fuerza Bruta: La coasignación por Fuerza Bruta funciona dividiendo el tamaño del archivo de manera equitativa entre los flujos disponibles. No aborda las diferencias de ancho de banda entre los distintos enlaces cliente-servidor. Coasignación basada en historial: El esquema de coasignación basado en historial mantiene los tamaños de bloque por flujo proporcionales a las tasas de transferencia predichas. Balanceo de carga conservador: Uno de sus métodos de coasignación dinámica es el Balanceo de Carga Conservador. La estrategia de coasignación dinámica de equilibrio de carga conservadora divide los conjuntos de datos solicitados en k bloques disjuntos de tamaño igual. Los servidores disponibles se asignan bloques individuales para entregar en paralelo. Cuando un servidor termina de entregar un bloque, se solicita otro, y así sucesivamente, hasta que se descarga el archivo completo. Las cargas en los flujos coasignados se ajustan automáticamente porque los servidores más rápidos entregarán más rápidamente proporcionando porciones más grandes del archivo. Equilibrio de carga agresivo: Otra estrategia dinámica de colocación conjunta, presentada en [17], es el Equilibrio de carga agresivo. La estrategia de co-asignación dinámica de equilibrio de carga agresiva presentada en [17] añade funciones que modifican las entregas de tamaño de bloque al: (1) aumentar progresivamente las cantidades de datos solicitadas a servidores más rápidos, y (2) reducir las cantidades de datos solicitadas a servidores más lentos o dejar de solicitar datos de ellos por completo. Las estrategias de coasignación descritas anteriormente no solucionan la limitación de que los servidores más rápidos tengan que esperar a que el servidor más lento entregue su último bloque. En la mayoría de los casos, esto desperdicia mucho tiempo y disminuye el rendimiento general. Por lo tanto, proponemos un enfoque eficiente llamado Recursivo-Ajuste Co-Asignación y basado en una arquitectura de co-asignación. Mejora la co-asignación dinámica y reduce el tiempo de espera, mejorando así el rendimiento general de la transferencia. Un SERVICIO DE SELECCIÓN DE RÉPLICAS EFICIENTE Construimos un servicio de selección de réplicas para permitir a los clientes seleccionar los servidores de réplicas mejores en entornos de Data Grid. Consulte a continuación para obtener una descripción detallada. 4.1 Escenario de Selección de Réplicas Nuestro modelo propuesto de selección de réplicas se ilustra en [23], que muestra cómo un cliente identifica la mejor ubicación para una transferencia de réplica deseada. El cliente primero inicia sesión en un sitio local y ejecuta la aplicación de la plataforma Data Grid, la cual verifica si los archivos están disponibles en el sitio local. Si están presentes en el sitio local, la aplicación accede a ellos inmediatamente; de lo contrario, pasa los nombres de archivo lógicos al servidor del catálogo de réplicas, que devuelve una lista de ubicaciones físicas para todas las copias registradas. La aplicación envía esta lista de ubicaciones de réplicas a un servidor de selección de réplicas, que identifica las ubicaciones de destino del sistema de almacenamiento para todas las operaciones de transferencia de datos candidatas. El servidor de selección de réplicas envía las posibles ubicaciones de destino al servidor de información, el cual proporciona mediciones de rendimiento y predicciones de los tres factores del sistema descritos a continuación. El servidor de selección de réplicas elige mejores ubicaciones de réplicas según estas estimaciones y devuelve la información de ubicación a la aplicación de transferencia, la cual recibe la réplica a través de GridFTP. Cuando la aplicación finaliza, devuelve los resultados al usuario. 4.2 Factores del sistema Determinar la mejor base de datos entre muchas con las mismas réplicas es un problema significativo. En nuestro modelo, consideramos tres factores del sistema que afectan la selección de réplicas: Ancho de banda de red: Este es uno de los factores más significativos de Data Grid ya que los archivos de datos en entornos de Data Grid suelen ser muy grandes. En otras palabras, los tiempos de transferencia de archivos de datos dependen estrechamente de las situaciones de ancho de banda de la red. Debido a que el ancho de banda de la red es un factor dinámico inestable, debemos medirlo con frecuencia y predecirlo de la manera más precisa posible. El Servicio Meteorológico de Red (NWS) es una herramienta poderosa para este propósito. Carga de la CPU: Las plataformas de cuadrícula consisten en números de sistemas heterogéneos, construidos con diferentes arquitecturas de sistema, por ejemplo, plataformas de clúster, supercomputadoras, PC. La carga de la CPU es un factor del sistema dinámico, y una carga pesada en la CPU del sistema afectará sin duda el proceso de descarga de archivos de datos desde el sitio. La medición se realiza mediante el Toolkit Globus / MDS. Estado de E/S: Los nodos de la cuadrícula de datos consisten en diferentes sistemas de almacenamiento heterogéneos. Los archivos de datos en las redes de datos son enormes. Si el estado de E/S de un sitio del que deseamos descargar archivos está muy ocupado, afectará directamente el rendimiento de la transferencia de datos. Medimos los estados de E/S utilizando las utilidades sysstat [15]. Nuestro Modelo de Costo de Selección de Réplicas La función objetivo de un modelo de costos para el almacenamiento de datos distribuidos y replicados es la puntuación de información del servicio de información. Enumeramos algunos factores influyentes para nuestro modelo de costos en la sección anterior. Sin embargo, debemos expresar estos factores en notación matemática para un análisis más detallado. Suponemos que el nodo i es el sitio local en el que el usuario o la aplicación inicia sesión, y el nodo j posee la réplica que el usuario o la aplicación desea. Los siete parámetros del sistema que considera nuestro modelo de costos de selección de réplicas son: Scorei-j: el valor de puntuación representa qué tan eficientemente un usuario o aplicación en el nodo i puede adquirir una réplica del nodo j BW jiP: porcentaje de ancho de banda disponible del nodo i al nodo j; ancho de banda actual dividido por el ancho de banda teórico más alto BBW: peso del ancho de banda de red definido por el administrador de Data Grid CPU jP: porcentaje de estados de inactividad de la CPU del nodo j WCPU: peso de carga de la CPU definido por el administrador de Data Grid OI jP /: porcentaje de estados de inactividad de E/S del nodo j WI/O: peso del estado de E/S definido por el administrador de Data Grid Definimos la siguiente fórmula general utilizando estos factores del sistema. Los tres factores influyentes en esta fórmula: WBW, WCPU y WI/O describen los pesos de la CPU, E/S y ancho de banda de red, los cuales pueden ser determinados por los administradores de la organización de Data Grid según los diversos atributos de los sistemas de almacenamiento en los nodos de Data Grid, ya que algunos equipos de almacenamiento no afectan la carga de la CPU. Después de varias mediciones experimentales, determinamos que el ancho de banda de la red es el factor más significativo que influye directamente en los tiempos de transferencia de datos. Cuando realizamos transferencias de datos utilizando el protocolo GridFTP, descubrimos que los estados de la CPU y E/S afectan ligeramente el rendimiento de la transferencia de datos. Sus valores respectivos en nuestro entorno de Data Grid son 80%, 10% y 10%. 4.4 Análisis de Costo de Co-Asignación Cuando los clientes descargan conjuntos de datos utilizando la tecnología de co-asignación de GridFTP, se incurre en tres costos de tiempo: el tiempo requerido para la autenticación del cliente en el servidor de GridFTP, el tiempo real de transmisión de datos y el tiempo de reensamblaje de bloques de datos. Tiempo de autenticación: Antes de una transferencia, el cliente debe cargar un proxy de Globus y autenticarse en el servidor GridFTP con las credenciales de usuario especificadas. El cliente luego establece un canal de control, configura los parámetros de transferencia y solicita la creación de un canal de datos. Cuando se ha establecido el canal, los datos comienzan a fluir. Tiempo de transmisión: El tiempo de transmisión se mide desde el momento en que el cliente comienza a transferir hasta el momento en que se completan todos los trabajos de transmisión, e incluye el tiempo requerido para restablecer los canales de datos entre las solicitudes de transferencia. Las vías de datos solo necesitan abrirse una vez y pueden manejar muchas transferencias antes de cerrarse. Esto permite que las mismas vías de datos se utilicen para múltiples transferencias de archivos. Sin embargo, los canales de datos deben reiniciarse explícitamente entre las solicitudes de transferencia. Esto es menos costoso en tiempo. Tiempo de combinación: la arquitectura de coasignación explota la característica de copia parcial de la herramienta de movimiento de datos GridFTP para permitir transferencias de datos a través de múltiples conexiones. Con la transferencia parcial de archivos, se pueden recuperar secciones de archivos de servidores de datos especificando solo los desplazamientos de inicio y fin de la sección. Cuando se entregan estas secciones de archivo, es posible que necesiten ser reensambladas; la operación de reensamblaje conlleva un costo adicional de tiempo. 5. ESTRATEGIA DE COASIGNACIÓN DINÁMICA La coasignación dinámica, descrita anteriormente, es el enfoque más eficiente para reducir la influencia de las variaciones de red entre clientes y servidores. Sin embargo, el tiempo de inactividad de los servidores más rápidos esperando a que el servidor más lento entregue el último bloque sigue siendo un factor importante que afecta la eficiencia general, el cual el Balanceo de Carga Conservador y el Balanceo de Carga Agresivo [17] no pueden evitar de manera efectiva. El enfoque propuesto en el presente documento, un mecanismo de asignación dinámica llamado Coasignación Recursiva-Ajustable, puede superar esto y, por lo tanto, mejorar el rendimiento de transferencia de datos. 5.1 Coasignación Recursiva-Ajustable La Coasignación Recursiva-Ajustable funciona ajustando continuamente la carga de trabajo de cada servidor de réplicas para que corresponda a su ancho de banda en tiempo real durante las transferencias de archivos. El objetivo es hacer que el tiempo de finalización esperado de todos los servidores sea el mismo. Como muestra la Figura 2, cuando se selecciona primero una sección de archivo apropiada, se divide en tamaños de bloque adecuados según los anchos de banda del servidor respectivos. El coasignador luego asigna los bloques a los servidores para la transferencia. En este momento, se espera que el tiempo de finalización de la transferencia sea consistente en E(T1). Sin embargo, dado que los anchos de banda del servidor pueden fluctuar durante las entregas de segmentos, el tiempo real de finalización puede ser diferente (línea sólida, en la Figura 2). Una vez que el servidor más rápido termina su trabajo en el tiempo T1, la siguiente sección se asigna nuevamente a los servidores. Esto permite que cada servidor termine su carga de trabajo asignada para el tiempo esperado en E(T2). Estos ajustes se repiten hasta que se complete la transferencia de todo el archivo. Servidor 1 Servidor 2 Servidor 3 Ronda 1 Ronda 2 E(T1) E(T2)T1 Archivo A Sección 1 Sección 2 ... ... ... Figura 2. El proceso de ajuste del proceso de coasignación recursiva se ilustra en la Figura 3. Cuando un usuario solicita el archivo A, el servicio de selección de réplicas responde con el subconjunto de todos los servidores disponibles definidos por la matriz de rendimiento máximo. El servicio de co-asignación recibe esta lista de servidores réplica seleccionados. Suponiendo que se seleccionan n servidores réplica, Si denota el servidor i tal que 1 i n. Luego se establece una conexión para la descarga de archivos con cada servidor. El proceso de Co-Asignación de Ajuste Recursivo es el siguiente. Una nueva sección de un archivo a asignar es primero definida. El tamaño de la sección, SEj, es: SEj = TamañoArchivoNoAsignado , (0 < < 1) (2) donde SEj denota la sección j tal que 1 ≤ j ≤ k, asumiendo que asignamos k veces para el proceso de descarga. Y así, hay k secciones, mientras que Tj denota el tiempo asignado a la sección j. UnassignedFileSize es la porción del archivo A que aún no se ha distribuido para su descarga; inicialmente, UnassignedFileSize es igual al tamaño total del archivo A. es la tasa que determina cuánto de la sección queda por asignar. Figura 3. El proceso de Co-Asignación de Ajuste Recursivo. En el siguiente paso, SEj se divide en varios bloques y se asigna a n servidores. Cada servidor tiene una tasa de transferencia en tiempo real al cliente de Bi, la cual es medida por el Servicio Meteorológico de Red (NWS) [18]. El tamaño de bloque por flujo desde SEj para cada servidor i en el tiempo Tj es: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) donde UnFinishSizei denota el tamaño de bloques de transferencia no finalizados asignados en rondas anteriores en el servidor i. UnFinishSizei es igual a cero en la primera ronda. Idealmente, dependiendo del ancho de banda en tiempo real en el momento Tj, se espera que cada flujo termine su carga de trabajo en el futuro. Esto cumple con nuestro requisito de minimizar el tiempo que los servidores más rápidos deben esperar a que el servidor más lento termine. Si, en algunos casos, las variaciones en la red degradan considerablemente las tasas de transferencia, UnFinishSizei puede exceder n i ii n i ij BBzeUnFinishSiSE 11 *)(, que es el tamaño total del bloque que se espera transferir después de Tj. En tales casos, el coasignador elimina los servidores de antemano y asigna SEj a otros servidores. Después de la asignación, todos los canales continúan transfiriendo bloques de datos. Cuando un canal más rápido termina sus bloques de datos asignados, el coasignador comienza a asignar nuevamente una sección no asignada del archivo A. El proceso de asignar bloques de datos 801 para ajustar el tiempo de finalización del flujo esperado continúa hasta que se haya asignado todo el archivo. 5.2 Determinar cuándo detener el ajuste continuo Nuestro enfoque obtiene nuevas secciones de archivos completos dividiendo rangos de archivos no asignados en cada ronda de asignación. Estas porciones no asignadas de los rangos de archivo se vuelven más pequeñas después de cada asignación. Dado que el ajuste es continuo, funcionaría como un bucle infinito si no estuviera limitado por una condición de parada. Sin embargo, ¿cuándo es apropiado detener el ajuste continuo? Proporcionamos dos criterios de monitoreo, LeastSize y ExpectFinishedTime, para permitir a los usuarios definir umbrales de parada. Cuando se alcanza un umbral, el servidor de coasignación deja de dividir el resto del archivo y asigna ese resto como la sección final. El criterio LeastSize especifica el archivo más pequeño que queremos procesar, y cuando la porción no asignada de UnassignedFileSize cae por debajo de la especificación de LeastSize, la división se detiene. El criterio ExpectFinishedTime especifica el tiempo restante que se espera que dure la transferencia. Cuando el tiempo de transferencia esperado de la porción no asignada de un archivo cae por debajo del tiempo especificado por ExpectFinishedTime, la división del archivo se detiene. El valor esperado del tiempo de descanso se determina por: 1 n i iBFileSizeUnAssigned (4) Estos dos criterios determinan el tamaño final de la sección asignada. Valores de umbral más altos inducirán menos divisiones y generarán costos de co-asignación más bajos, que incluyen el establecimiento de conexiones, negociación, reensamblaje, etc. Sin embargo, aunque el tiempo total de ajuste de la coalocación puede ser menor, las variaciones de ancho de banda también pueden ejercer más influencia. Por el contrario, valores de umbral más bajos inducirán ajustes más frecuentes en la carga de trabajo del servidor dinámico y, en el caso de mayores fluctuaciones en la red, resultarán en menos diferencias en el tiempo de finalización de la transferencia del servidor. Sin embargo, valores más bajos también aumentarán los tiempos de coasignación, y por lo tanto, aumentarán los costos de coasignación. Por lo tanto, el entorno de internet, los tamaños de archivo transferidos y los costos de coasignación deben considerarse todos al determinar los umbrales óptimos. 5.3 Reducción de la Sobrecarga de Reensamblaje El proceso de reensamblar bloques después de transferencias de datos utilizando tecnología de coasignación resulta en una sobrecarga adicional y disminuye el rendimiento general. El sobrecosto de reensamblaje está relacionado con el tamaño total del bloque, y podría reducirse mediante la actualización de las capacidades del hardware o el uso de algoritmos de software mejores. Proponemos un mecanismo de reensamblaje alternativo eficiente para reducir la sobrecarga de combinación añadida una vez que se han completado todas las transmisiones de bloques. Se diferencia del método convencional en el que el software comienza el ensamblaje después de que todos los bloques hayan sido entregados, comenzando a ensamblar bloques una vez que finalizan las primeras entregas. Por supuesto, esto hace necesario mantener el orden original de división. Estrategias de coasignación como el Balanceo de Carga Conservador y la Coasignación de Ajuste Recursivo producen bloques adicionales durante las transferencias de archivos y pueden beneficiarse al habilitar el reensamblaje durante las transferencias de datos. Si algunos bloques se ensamblan de antemano, el costo de tiempo para ensamblar los bloques restantes después de que todas las transferencias finalicen puede reducirse. 6. RESULTADOS EXPERIMENTALES Y ANÁLISIS En esta sección, discutimos el rendimiento de nuestra estrategia de Co-Asignación Recursiva de Ajuste. Evaluamos cuatro esquemas de coalocación: (1) Fuerza Bruta (Brute), (2) Basado en Historial (History), (3) Balance de Carga Conservador (Conservative) y (4) Coalocación Co-Ajustada Recursiva (Recursive). Analizamos el rendimiento de cada esquema comparando su tiempo de finalización de transferencia y el tiempo total de inactividad que los servidores más rápidos pasaron esperando a que el servidor más lento terminara de entregar el último bloque. También analizamos el rendimiento general en los diferentes casos. Realizamos experimentos de transferencia de datos de gran área utilizando nuestra herramienta cliente GUI de GridFTP. Ejecutamos nuestra herramienta de cliente de co-asignación en nuestra plataforma de pruebas en la Universidad de Tunghai (THU), en la ciudad de Taichung, Taiwán, y obtuvimos archivos de cuatro servidores réplica seleccionados: uno en la Universidad de Providence (PU), uno en la Escuela Secundaria Li-Zen (LZ), uno en la Escuela de Tecnología Hsiuping (HIT) y uno en la Escuela Secundaria Da-Li (DL). Todas estas instituciones están en Taiwán, y cada una está al menos a 10 km de la THU. La Figura 4 muestra nuestro banco de pruebas de la cuadrícula de datos. Nuestros servidores tienen instalado Globus 3.0.2 o una versión superior. Escuela Secundaria THU Li-Zen (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD Escuela Secundaria Da-Li (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figura 4. En nuestro banco de pruebas de Data Grid, en los siguientes experimentos, establecimos = 0.5, el umbral de LeastSize en 10MB, y experimentamos con tamaños de archivo de 10 MB, 50 MB, 100 MB, 500 MB, 1000 MB, 2000 MB y 4000 MB. Para la comparación, medimos el rendimiento del Balanceo de Carga Conservador en cada tamaño utilizando los mismos números de bloques. La Figura 5 muestra una captura de pantalla de nuestra herramienta cliente GridFTP. Esta herramienta de cliente está desarrollada utilizando Java CoG. Permite un desarrollo de aplicaciones más fácil y rápido al fomentar la reutilización colaborativa de código y evitar la duplicación de esfuerzos entre entornos de resolución de problemas, portales científicos, middleware de Grid y pilotos colaborativos. La Tabla 1 muestra las tasas de transmisión promedio entre THU y cada servidor réplica. Estos números fueron obtenidos al transferir archivos de 500MB, 1000MB y 2000MB desde un único servidor réplica utilizando nuestra herramienta cliente GridFTP, y cada número es un promedio de varias ejecuciones. Tabla 1. Tasa de transmisión de extremo a extremo de GridFTP desde THU a varios servidores. Tasa de transmisión promedio del servidor: HIT 61.5 Mbps, LZ 59.5 Mbps, DL 32.1 Mbps, PU 26.7 Mbps. Figura 5. Nuestra herramienta cliente GridFTP analizó el efecto de servidores más rápidos esperando al servidor más lento para entregar el último bloque en cada esquema. La Figura 6(a) muestra el tiempo total de inactividad para diferentes tamaños de archivo. Tenga en cuenta que nuestro esquema de Co-Asignación Recursiva logró mejoras significativas en el rendimiento en comparación con otros esquemas para cada tamaño de archivo. Estos resultados demuestran que nuestro enfoque reduce eficientemente las diferencias en los tiempos de finalización de los servidores. Los resultados experimentales mostrados en la Figura 6(b) indican que nuestro esquema de comenzar la reensamblaje de bloques tan pronto como los primeros bloques han sido entregados completamente reduce el tiempo de combinación, ayudando así a estrategias de co-asignación como el Balance de Carga Conservador y la Co-Asignación de Ajuste Recursivo que producen más bloques durante las transferencias de datos. La Figura 7 muestra los resultados experimentales del tiempo total de finalización en una vista detallada de la estructura de costos. Los servidores estaban en PU, DL y HIT, con el cliente en THU. Las tres primeras barras para cada tamaño de archivo representan el tiempo para descargar el archivo completo desde un único servidor, mientras que las otras barras muestran descargas coasignadas utilizando los tres servidores. Nuestro esquema de coasignación terminó el trabajo más rápido que las otras estrategias de coasignación. Por lo tanto, podemos inferir que las principales ventajas que ofrece nuestra tecnología son tiempos de transmisión y combinación más bajos que otras estrategias de co-asignación. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de espera (seg) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de combinación (seg) Brute3 History3 Conservative3 Recursive3 Figura 6. (a) Tiempos de inactividad para varios métodos; los servidores están en PU, DL y HIT. (b) Tiempos de combinación para varios métodos; los servidores están en PU, DL y HIT. En el siguiente experimento, utilizamos la estrategia de Coasignación Recursiva-Ajustable con varios conjuntos de servidores réplica y medimos el rendimiento general, donde el rendimiento general es: Rendimiento Total = Tamaño del archivo / Tiempo Total de Finalización (5). La Tabla 2 enumera todos los experimentos que realizamos y los conjuntos de servidores réplica utilizados. Los resultados en la Figura 8(a) muestran que el uso de tecnologías de coallocation no produjo ninguna mejora para tamaños de archivo más pequeños como 10MB. También muestran que en la mayoría de los casos, el rendimiento general aumentó a medida que aumentaba el número de flujos coasignados. Observamos que para nuestro banco de pruebas y nuestra tecnología de coasignación, el rendimiento general alcanzó su valor más alto en el caso REC3_2. Sin embargo, en el caso REC4, cuando agregamos un flujo al conjunto de servidores réplica, el rendimiento no aumentó. Por el contrario, disminuyó. Podemos inferir que la eficiencia de coasignación alcanzó la saturación en el caso REC3_2, y que flujos adicionales causaron sobrecarga adicional y redujeron el rendimiento general. Esto significa que más flujos de descarga no necesariamente resultan en un rendimiento más alto. Debemos elegir un número adecuado de flujos para lograr un rendimiento óptimo. Mostramos la vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4 en la Figura 8(b). El costo detallado consiste en el tiempo de autenticación, tiempo de transferencia y tiempo de combinación. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de finalización (seg) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 7. Tiempos de finalización para varios métodos; los servidores están en PU, DL y HIT. Tabla 2. Los conjuntos de servidores réplica para todos los casos son: Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 8. (a) Rendimientos generales para varios conjuntos de servidores. (b) Vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4. 7. CONCLUSIONES La arquitectura de coasignación proporciona un agente coordinado para asignar bloques de datos. Un trabajo previo mostró que el esquema de co-asignación dinámica conduce a mejoras en el rendimiento. Sin embargo, no puede manejar el tiempo de inactividad de los servidores más rápidos, que deben esperar a que el servidor más lento entregue su bloque final. Propusimos el esquema de Co-Asignación Recursiva-Ajustable para mejorar el rendimiento de transferencia de datos utilizando la arquitectura de co-asignación en [17]. En este enfoque, las cargas de trabajo de los servidores de réplica seleccionados se ajustan continuamente durante las transferencias de datos, y proporcionamos una función que permite a los usuarios definir un umbral final de bloque 803, de acuerdo con su entorno de cuadrícula de datos. Los resultados experimentales muestran la efectividad de nuestra técnica propuesta en mejorar el tiempo de transferencia y reducir el tiempo total de inactividad esperando al servidor más lento. También discutimos el costo de recombinación y proporcionamos un esquema efectivo para reducirlo. 8. REFERENCIAS [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Gestión y Transferencia de Datos en Entornos de Redes Computacionales de Alto Rendimiento, Computación Paralela, 28(5):749-771, mayo de 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Transporte de Datos Seguro y Eficiente y Gestión de Réplicas para la Computación de Alto Rendimiento con Datos Intensivos, Actas del Decimoctavo Simposio IEEE sobre Sistemas y Tecnologías de Almacenamiento Masivo, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I. Foster, A. Chervenak y C. Kesselman. Protocolos y Servicios para la Ciencia de Datos Intensivos Distribuidos. Actas de ACAT2000, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I. Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt y M. Ripeanu, Giggle: Un marco para la construcción de servicios de ubicación de réplicas escalables, Actas de SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I. Foster, C. Kesselman, C. Salisbury y S. Tuecke, La Data Grid: Hacia una arquitectura para la gestión distribuida y análisis de grandes conjuntos de datos científicos, Revista de Aplicaciones de Redes y Computadoras, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I. Foster y C. Kesselman, Servicios de Información de Grid para Compartir Recursos Distribuidos, Actas del Décimo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-1001), 181-194, agosto de 2001. [7] K. Czajkowski, I. Foster y C. Kesselman. Coasignación de recursos en rejillas computacionales, Actas del Octavo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-899), agosto de 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz y M. Sgaravatto, Prototipo 1 de DataGrid, Conferencia de Redes de TERENA, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, junio de 2002, [9] I. Foster, C. Kesselman y S. Tuecke. La Anatomía de la Red: Permitiendo Organizaciones Virtuales Escalables. Int. Revista de Aplicaciones de Supercomputadoras y Computación de Alto Rendimiento, 15(3), pp. 200-222, 2001. [10] I. Foster y C. Kesselman, Globus: Un conjunto de herramientas de infraestructura de metacomputación, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger y K. Stockinger, Gestión de datos en un Proyecto Internacional de Grid de Datos, Proc. del Primer Taller Internacional de Grid Computing IEEE/ACM - Grid 2000, Bangalore, India, diciembre de 2000. [13] IBM Red Books, Introducción a la Computación en Grid con Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I. Foster, K. Holtman y B. Tierney, Replicación de archivos y objetos en rejillas de datos, Journal of Cluster Computing, 5(3):305-314, 2002. [15] Página de inicio de utilidades SYSSTAT, http://perso.wanadoo.fr/sebastien.godard/ [16] La Alianza Globus, http://www.globus.org/ [17] S. Vazhkudai, Facilitando la coasignación de transferencias de datos en rejillas, Proc. del Cuarto Taller Internacional sobre Computación en Rejilla, pp. 41-51, noviembre de 2003. [18] S. Vazhkudai y J. Schopf, Uso de técnicas de regresión para predecir grandes transferencias de datos, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, agosto de 2003. [19] S. Vazhkudai, S. Tuecke e I. Foster, Selección de réplicas en la malla de datos de Globus, Actas del 1er Simposio Internacional sobre Computación en Clúster y la Malla (CCGRID 2001), pp. 106-113, mayo de 2001. [20] S. Vazhkudai, J. Schopf, Predicción de transferencias de datos esporádicas en la malla, Actas del 11º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-11 02), pp. 188-196, julio de 2002. [21] S. Vazhkudai, J. Schopf e I. Foster, Prediciendo el rendimiento de transferencias de datos de amplia área, Actas del 16º Simposio Internacional de Procesamiento Paralelo y Distribuido (IPDPS 2002), pp. 34-43, abril de 2002, pp. 34-43. [22] R. Wolski, N. Spring y J. Hayes, El Servicio de Pronóstico del Tiempo de Red: Un Servicio de Pronóstico de Rendimiento de Recursos Distribuidos para Metacomputación, Sistemas Informáticos de Generación Futura, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li y Ching-Hsien Hsu, Análisis de rendimiento de la aplicación de tecnología de selección de réplicas para entornos de Grid de Datos, PaCT 2005, Notas de Conferencias en Ciencias de la Computación, vol. 3603, pp. 278-287, Springer-Verlag, septiembre de 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li y ChingHsien Hsu, Un Esquema de Co-Asignación Recursiva en Entornos de Grid de Datos, ICA3PP 2005 Algoritmo y Arquitectura para Procesamiento Paralelo, Notas de Conferencias en Ciencias de la Computación, vol. 3719, pp. 40-49, Springer-Verlag, octubre de 2005. [25] X. Zhang, J. Freschl y J. Schopf, Un Estudio de Rendimiento de Servicios de Monitoreo e Información para Sistemas Distribuidos, Actas del 12º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-12 03), pp. 270-282, agosto de 2003. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "co-allocation": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The <br>co-allocation</br> architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several <br>co-allocation</br> strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment <br>co-allocation</br> scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use <br>co-allocation</br> technology [17] to download data.",
                "<br>co-allocation</br> of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several <br>co-allocation</br> strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic <br>co-allocation</br> scheme based on <br>co-allocation</br> Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the <br>co-allocation</br> architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "<br>co-allocation</br> ARCHITECTURE AND RELATED WORK The <br>co-allocation</br> architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the <br>co-allocation</br> of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid <br>co-allocation</br> Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The <br>co-allocation</br> agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes <br>co-allocation</br> architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force <br>co-allocation</br>: Brute-Force <br>co-allocation</br> works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based <br>co-allocation</br>: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic <br>co-allocation</br> strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic <br>co-allocation</br> strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The <br>co-allocation</br> strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment <br>co-allocation</br> and based 799 on a <br>co-allocation</br> architecture.",
                "It improves dynamic <br>co-allocation</br> and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 <br>co-allocation</br> Cost Analysis When clients download datasets using GridFTP <br>co-allocation</br> technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: <br>co-allocation</br> architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC <br>co-allocation</br> STRATEGY Dynamic <br>co-allocation</br>, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment <br>co-allocation</br> Recursive-Adjustment <br>co-allocation</br> works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment <br>co-allocation</br> process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The <br>co-allocation</br> service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment <br>co-allocation</br> process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment <br>co-allocation</br> process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the <br>co-allocation</br> server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower <br>co-allocation</br> costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase <br>co-allocation</br> times, and hence, increase <br>co-allocation</br> costs.",
                "Therefore, the internet environment, transferred file sizes, and <br>co-allocation</br> costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "<br>co-allocation</br> strategies such as Conservative Load Balancing and Recursive-Adjustment <br>co-allocation</br> produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment <br>co-allocation</br> strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment <br>co-allocation</br> (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our <br>co-allocation</br> client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment <br>co-allocation</br> scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding <br>co-allocation</br> strategies like Conservative Load Balancing and RecursiveAdjustment <br>co-allocation</br> that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our <br>co-allocation</br> scheme finished the job faster than the other <br>co-allocation</br> strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other <br>co-allocation</br> strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our <br>co-allocation</br> technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the <br>co-allocation</br> efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The <br>co-allocation</br> architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic <br>co-allocation</br> scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment <br>co-allocation</br> scheme to improve data transfer performances using the <br>co-allocation</br> architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the <br>co-allocation</br> of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment <br>co-allocation</br> Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The <br>co-allocation</br> architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several <br>co-allocation</br> strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment <br>co-allocation</br> scheme, to improve the performance of data transfer in Data Grids.",
                "Another way is to use <br>co-allocation</br> technology [17] to download data.",
                "<br>co-allocation</br> of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel."
            ],
            "translated_annotated_samples": [
                "La arquitectura de <br>co-asignación</br> se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores.",
                "Varias estrategias de <br>coasignación</br> han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales.",
                "En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos.",
                "Otra forma es utilizar la <br>tecnología de co-asignación</br> [17] para descargar datos.",
                "La <br>coasignación</br> de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de <br>co-asignación</br> se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de <br>coasignación</br> han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la <br>tecnología de co-asignación</br> [17] para descargar datos. La <br>coasignación</br> de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. ",
            "candidates": [],
            "error": [
                [
                    "co-asignación",
                    "coasignación",
                    "tecnología de co-asignación",
                    "coasignación"
                ]
            ]
        },
        "large dataset": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their <br>large dataset</br>s over several sites.",
                "Downloading <br>large dataset</br>s from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their <br>large dataset</br>s over several sites.",
                "Downloading <br>large dataset</br>s from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity."
            ],
            "translated_annotated_samples": [
                "Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus <br>grandes conjuntos de datos</br> en varios sitios.",
                "Descargar grandes <br>conjuntos de datos</br> desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus <br>grandes conjuntos de datos</br> en varios sitios. Descargar grandes <br>conjuntos de datos</br> desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque. Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de transferencia de datos de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la transferencia de datos [24]. Los resultados experimentales muestran que nuestro enfoque es superior a los métodos anteriores y logró el mejor rendimiento general. También discutimos el costo de combinación y proporcionamos un esquema efectivo para reducirlo. El resto de este documento está organizado de la siguiente manera. La revisión de antecedentes relacionados y estudios se presentan en la Sección 2 y la arquitectura de co-asignación y trabajos relacionados se introducen en la Sección 3. En la Sección 4, proponemos un servicio eficiente de selección de réplicas. Nuestros enfoques de investigación se describen en la Sección 5, y los resultados experimentales y una evaluación del rendimiento de nuestro esquema se presentan en la Sección 6. La sección 7 concluye este documento de investigación. ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico). El término Data Grid tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes. Las Rejillas de Datos [1, 2, 16] federan una gran cantidad de recursos de almacenamiento. Grandes colecciones de datos medidos o calculados están surgiendo como recursos importantes en muchas aplicaciones intensivas en datos. 2.1.1 Gestión de Réplicas La gestión de réplicas implica la creación o eliminación de réplicas en un sitio de cuadrícula de datos [19]. En otras palabras, el rol de un administrador de réplicas es crear o eliminar réplicas, dentro de sistemas de almacenamiento especificados. La mayoría de las veces, estas réplicas son copias exactas de los archivos originales, creadas solo para aprovechar ciertos beneficios de rendimiento. Un administrador de réplicas generalmente mantiene un catálogo de réplicas que contiene las direcciones de los sitios de réplica y las instancias de archivos. El servicio de gestión de réplicas es responsable de administrar la replicación de copias completas y parciales de conjuntos de datos, definidos como colecciones de archivos. El servicio de gestión de réplicas es solo un componente en un entorno de Data Grid que brinda soporte para aplicaciones de alto rendimiento y alta intensidad de datos. Una réplica o ubicación es un subconjunto de una colección que se almacena en un sistema de almacenamiento físico particular. Puede haber múltiples subconjuntos posiblemente superpuestos de una colección almacenados en múltiples sistemas de almacenamiento en una Rejilla de Datos. Estos sistemas de almacenamiento en red pueden utilizar una variedad de tecnologías de almacenamiento subyacentes y protocolos de movimiento de datos, que son independientes de la gestión de réplicas. 2.1.2 Catálogo de Réplicas Como se mencionó anteriormente, el propósito del catálogo de réplicas es proporcionar mapeos entre nombres lógicos de archivos o colecciones y una o más copias de los objetos en sistemas de almacenamiento físico. El catálogo de réplicas incluye entradas opcionales que describen archivos lógicos individuales. Los archivos lógicos son entidades con nombres globalmente únicos que pueden tener una o más instancias físicas. El catálogo puede contener opcionalmente una entrada de archivo lógico en el catálogo de réplicas para cada archivo lógico en una colección. Una cuadrícula de datos puede contener múltiples catálogos de réplicas. Por ejemplo, una comunidad de investigadores interesados en un tema de investigación particular podría mantener un catálogo de réplicas para una colección de conjuntos de datos de interés mutuo. Es posible crear jerarquías de catálogos de réplicas para imponer una estructura similar a la de un directorio en colecciones lógicas relacionadas. Además, el administrador de réplicas puede realizar control de acceso en catálogos completos, así como en archivos lógicos individuales. 2.1.3 Selección de Réplicas El propósito de la selección de réplicas [16] es seleccionar una réplica entre los sitios que constituyen una Data Grid [19]. Los criterios de selección dependen de las características de la aplicación. Al utilizar este mecanismo, los usuarios de la Data Grid pueden gestionar fácilmente réplicas de conjuntos de datos en sus sitios, con un mejor rendimiento. Se ha dedicado mucho esfuerzo previo al problema de selección de réplicas. El proceso común de selección de réplicas consta de tres pasos: preparación de datos, preprocesamiento y predicción. Entonces, las aplicaciones pueden seleccionar una réplica según sus atributos específicos. La selección de réplicas es importante para aplicaciones intensivas en datos, y puede proporcionar transparencia de ubicación. Cuando un usuario solicita acceso a un conjunto de datos, el sistema determina una forma apropiada de entregar la réplica al usuario. 2.2 Globus Toolkit y GridFTP El Proyecto Globus [9, 11, 16] proporciona herramientas de software colectivamente llamadas El Kit de Herramientas Globus que facilita la construcción de Grids computacionales y aplicaciones basadas en Grid. Muchas organizaciones utilizan la Herramienta Globus para construir Grillas computacionales que apoyen sus aplicaciones. La composición del Globus Toolkit se puede visualizar como tres pilares: Gestión de Recursos, Servicios de Información y Gestión de Datos. Cada pilar representa un componente principal del Globus Toolkit y hace uso de una base común de seguridad. GRAM implementa un protocolo de gestión de recursos, MDS implementa un protocolo de servicios de información y GridFTP implementa un protocolo de transferencia de datos. Todos utilizan el protocolo de seguridad GSI en la capa de conexión [10, 11, 16, 13]. La alianza Globus propuso un protocolo común de transferencia y acceso de datos llamado GridFTP que proporciona un movimiento seguro y eficiente de datos en entornos de Grid. Este protocolo, que extiende el protocolo estándar FTP, proporciona un superconjunto de las características ofrecidas por los diversos sistemas de almacenamiento en red actualmente en uso. Para resolver los problemas que surgen, la comunidad de Data Grid intenta desarrollar un mecanismo seguro y eficiente de transporte de datos y servicios de gestión de réplicas. GridFTP es un protocolo de transporte de datos confiable, seguro y eficiente que se desarrolló como parte del proyecto Globus. Hay otra tecnología clave del proyecto Globus, llamada catálogo de réplicas [16], que se utiliza para registrar y gestionar copias completas y parciales de conjuntos de datos. El catálogo de réplicas contiene la información de mapeo de un archivo lógico o colección a uno o más archivos físicos. 2.3 Servicio Meteorológico de Red El Servicio Meteorológico de Red (NWS) [22] es un sistema de monitoreo generalizado y distribuido para producir pronósticos de rendimiento a corto plazo basados en mediciones de rendimiento históricas. El objetivo del sistema es caracterizar y predecir dinámicamente el rendimiento entregable a nivel de aplicación a partir de un conjunto de recursos de red y computacionales. Una instalación típica implica un nws_nameserver, uno o más nws_memory (que pueden residir en máquinas diferentes) y un nws_sensor ejecutándose en cada máquina con los recursos que se van a monitorear. El sistema incluye sensores para el rendimiento TCP/IP de extremo a extremo (ancho de banda y latencia), porcentaje de CPU disponible y memoria no paginada disponible. 798 2.4 Utilidades Sysstat Las utilidades Sysstat [15] son un conjunto de herramientas de monitoreo de rendimiento para el sistema operativo Linux. El paquete Sysstat incorpora los comandos sar, mpstat e iostat. El comando sar recopila y reporta información de actividad del sistema, la cual también puede ser guardada en un archivo de actividad del sistema para inspección futura. El comando iostat informa estadísticas de la CPU y estadísticas de E/S para dispositivos tty y discos. Las estadísticas reportadas por SAR se refieren a tasas de transferencia de E/S, actividad de paginación, actividades relacionadas con procesos, interrupciones, actividad de red, utilización de memoria y espacio de intercambio, utilización de CPU, actividades del kernel y estadísticas de TTY, entre otros. Las máquinas Uniprocessor (UP) y Symmetric multiprocessor (SMP) son totalmente compatibles. 3. La arquitectura de co-asignación propuesta en [17] consta de tres componentes principales: un servicio de información, un intermediario/co-asignador y sistemas de almacenamiento locales. La Figura 1 muestra la co-asignación de transferencias de datos de la red, que es una extensión de la plantilla básica para la gestión de recursos [7] proporcionada por Globus Toolkit. Las aplicaciones especifican las características de los datos deseados y envían la descripción de los atributos a un intermediario. El corredor consulta los recursos disponibles y obtiene las ubicaciones de réplicas de los servicios de información [6] y los servicios de gestión de réplicas [19], y luego obtiene una lista de ubicaciones físicas para los archivos deseados. Figura 1. La arquitectura de coasignación de cuadrícula de datos [17] pasa las ubicaciones candidatas de réplicas a un servicio de selección de réplicas [19], que fue presentado en un trabajo previo [23]. Este servicio de selección de réplicas proporciona estimaciones del rendimiento de transferencia de candidatos basadas en un modelo de costos y elige las cantidades apropiadas para solicitar a las ubicaciones más adecuadas. El agente de coasignación luego descarga los datos en paralelo desde los servidores seleccionados. En estas investigaciones, se utilizó GridFTP [1, 11, 16] para habilitar transferencias de datos en paralelo. GridFTP es un protocolo de transferencia de datos de alto rendimiento, seguro y confiable, optimizado para redes de área amplia de alta velocidad de banda ancha. Entre sus muchas características se encuentran la seguridad, los flujos paralelos, las transferencias de archivos parciales, las transferencias de terceros y los canales de datos reutilizables. Su capacidad de transferencia parcial de archivos permite recuperar archivos de servidores de datos especificando los desplazamientos de inicio y fin de las secciones de archivos. Las rejillas de datos consisten en recursos informáticos y de almacenamiento dispersos ubicados en diferentes países/regiones pero accesibles para los usuarios [8]. En este estudio utilizamos el middleware de cuadrícula Globus Toolkit [16] como infraestructura de la cuadrícula de datos. El Globus Toolkit proporciona soluciones para consideraciones como seguridad, gestión de recursos, gestión de datos y servicios de información. Uno de sus componentes principales es MDS [6, 11, 16, 25], el cual está diseñado para proporcionar un mecanismo estándar para descubrir y publicar información sobre el estado y la configuración de recursos. Proporciona una interfaz uniforme y flexible para los datos recopilados por proveedores de información de nivel inferior en dos modos: estáticos (por ejemplo, sistemas operativos, tipos de CPU y arquitecturas de sistemas) y datos dinámicos (por ejemplo, disponibilidad de disco, disponibilidad de memoria y carga). Y utiliza GridFTP [1, 11, 16], un protocolo de transporte de datos confiable, seguro y eficiente para proporcionar una gestión eficiente y transferencia de terabytes o petabytes de datos en un entorno de recursos distribuidos de amplia área. A medida que los conjuntos de datos se replican dentro de entornos de Grid para fiabilidad y rendimiento, los clientes requieren la capacidad de descubrir réplicas de datos existentes, y crear y registrar nuevas réplicas. Un Servicio de Localización de Réplicas (RLS) proporciona un mecanismo para descubrir y registrar réplicas existentes. Se han desarrollado varios métricas de predicción para ayudar en la selección de réplicas. Por ejemplo, Vazhkudai y Schopf [18, 20, 21] utilizaron historiales de transferencia de datos pasados para estimar las velocidades actuales de transferencia de datos. En nuestro trabajo previo [23, 24], propusimos un modelo de costo de selección de réplicas y un servicio de selección de réplicas para llevar a cabo la selección de réplicas. En [17], el autor propone una arquitectura de coasignación para coasignar transferencias de datos de Grid a través de múltiples conexiones, aprovechando la función de copia parcial de GridFTP. También proporciona Balanceo de Carga por Fuerza Bruta, Basado en Historial y Dinámico para asignar bloques de datos. Coasignación por Fuerza Bruta: La coasignación por Fuerza Bruta funciona dividiendo el tamaño del archivo de manera equitativa entre los flujos disponibles. No aborda las diferencias de ancho de banda entre los distintos enlaces cliente-servidor. Coasignación basada en historial: El esquema de coasignación basado en historial mantiene los tamaños de bloque por flujo proporcionales a las tasas de transferencia predichas. Balanceo de carga conservador: Uno de sus métodos de coasignación dinámica es el Balanceo de Carga Conservador. La estrategia de coasignación dinámica de equilibrio de carga conservadora divide los conjuntos de datos solicitados en k bloques disjuntos de tamaño igual. Los servidores disponibles se asignan bloques individuales para entregar en paralelo. Cuando un servidor termina de entregar un bloque, se solicita otro, y así sucesivamente, hasta que se descarga el archivo completo. Las cargas en los flujos coasignados se ajustan automáticamente porque los servidores más rápidos entregarán más rápidamente proporcionando porciones más grandes del archivo. Equilibrio de carga agresivo: Otra estrategia dinámica de colocación conjunta, presentada en [17], es el Equilibrio de carga agresivo. La estrategia de co-asignación dinámica de equilibrio de carga agresiva presentada en [17] añade funciones que modifican las entregas de tamaño de bloque al: (1) aumentar progresivamente las cantidades de datos solicitadas a servidores más rápidos, y (2) reducir las cantidades de datos solicitadas a servidores más lentos o dejar de solicitar datos de ellos por completo. Las estrategias de coasignación descritas anteriormente no solucionan la limitación de que los servidores más rápidos tengan que esperar a que el servidor más lento entregue su último bloque. En la mayoría de los casos, esto desperdicia mucho tiempo y disminuye el rendimiento general. Por lo tanto, proponemos un enfoque eficiente llamado Recursivo-Ajuste Co-Asignación y basado en una arquitectura de co-asignación. Mejora la co-asignación dinámica y reduce el tiempo de espera, mejorando así el rendimiento general de la transferencia. Un SERVICIO DE SELECCIÓN DE RÉPLICAS EFICIENTE Construimos un servicio de selección de réplicas para permitir a los clientes seleccionar los servidores de réplicas mejores en entornos de Data Grid. Consulte a continuación para obtener una descripción detallada. 4.1 Escenario de Selección de Réplicas Nuestro modelo propuesto de selección de réplicas se ilustra en [23], que muestra cómo un cliente identifica la mejor ubicación para una transferencia de réplica deseada. El cliente primero inicia sesión en un sitio local y ejecuta la aplicación de la plataforma Data Grid, la cual verifica si los archivos están disponibles en el sitio local. Si están presentes en el sitio local, la aplicación accede a ellos inmediatamente; de lo contrario, pasa los nombres de archivo lógicos al servidor del catálogo de réplicas, que devuelve una lista de ubicaciones físicas para todas las copias registradas. La aplicación envía esta lista de ubicaciones de réplicas a un servidor de selección de réplicas, que identifica las ubicaciones de destino del sistema de almacenamiento para todas las operaciones de transferencia de datos candidatas. El servidor de selección de réplicas envía las posibles ubicaciones de destino al servidor de información, el cual proporciona mediciones de rendimiento y predicciones de los tres factores del sistema descritos a continuación. El servidor de selección de réplicas elige mejores ubicaciones de réplicas según estas estimaciones y devuelve la información de ubicación a la aplicación de transferencia, la cual recibe la réplica a través de GridFTP. Cuando la aplicación finaliza, devuelve los resultados al usuario. 4.2 Factores del sistema Determinar la mejor base de datos entre muchas con las mismas réplicas es un problema significativo. En nuestro modelo, consideramos tres factores del sistema que afectan la selección de réplicas: Ancho de banda de red: Este es uno de los factores más significativos de Data Grid ya que los archivos de datos en entornos de Data Grid suelen ser muy grandes. En otras palabras, los tiempos de transferencia de archivos de datos dependen estrechamente de las situaciones de ancho de banda de la red. Debido a que el ancho de banda de la red es un factor dinámico inestable, debemos medirlo con frecuencia y predecirlo de la manera más precisa posible. El Servicio Meteorológico de Red (NWS) es una herramienta poderosa para este propósito. Carga de la CPU: Las plataformas de cuadrícula consisten en números de sistemas heterogéneos, construidos con diferentes arquitecturas de sistema, por ejemplo, plataformas de clúster, supercomputadoras, PC. La carga de la CPU es un factor del sistema dinámico, y una carga pesada en la CPU del sistema afectará sin duda el proceso de descarga de archivos de datos desde el sitio. La medición se realiza mediante el Toolkit Globus / MDS. Estado de E/S: Los nodos de la cuadrícula de datos consisten en diferentes sistemas de almacenamiento heterogéneos. Los archivos de datos en las redes de datos son enormes. Si el estado de E/S de un sitio del que deseamos descargar archivos está muy ocupado, afectará directamente el rendimiento de la transferencia de datos. Medimos los estados de E/S utilizando las utilidades sysstat [15]. Nuestro Modelo de Costo de Selección de Réplicas La función objetivo de un modelo de costos para el almacenamiento de datos distribuidos y replicados es la puntuación de información del servicio de información. Enumeramos algunos factores influyentes para nuestro modelo de costos en la sección anterior. Sin embargo, debemos expresar estos factores en notación matemática para un análisis más detallado. Suponemos que el nodo i es el sitio local en el que el usuario o la aplicación inicia sesión, y el nodo j posee la réplica que el usuario o la aplicación desea. Los siete parámetros del sistema que considera nuestro modelo de costos de selección de réplicas son: Scorei-j: el valor de puntuación representa qué tan eficientemente un usuario o aplicación en el nodo i puede adquirir una réplica del nodo j BW jiP: porcentaje de ancho de banda disponible del nodo i al nodo j; ancho de banda actual dividido por el ancho de banda teórico más alto BBW: peso del ancho de banda de red definido por el administrador de Data Grid CPU jP: porcentaje de estados de inactividad de la CPU del nodo j WCPU: peso de carga de la CPU definido por el administrador de Data Grid OI jP /: porcentaje de estados de inactividad de E/S del nodo j WI/O: peso del estado de E/S definido por el administrador de Data Grid Definimos la siguiente fórmula general utilizando estos factores del sistema. Los tres factores influyentes en esta fórmula: WBW, WCPU y WI/O describen los pesos de la CPU, E/S y ancho de banda de red, los cuales pueden ser determinados por los administradores de la organización de Data Grid según los diversos atributos de los sistemas de almacenamiento en los nodos de Data Grid, ya que algunos equipos de almacenamiento no afectan la carga de la CPU. Después de varias mediciones experimentales, determinamos que el ancho de banda de la red es el factor más significativo que influye directamente en los tiempos de transferencia de datos. Cuando realizamos transferencias de datos utilizando el protocolo GridFTP, descubrimos que los estados de la CPU y E/S afectan ligeramente el rendimiento de la transferencia de datos. Sus valores respectivos en nuestro entorno de Data Grid son 80%, 10% y 10%. 4.4 Análisis de Costo de Co-Asignación Cuando los clientes descargan conjuntos de datos utilizando la tecnología de co-asignación de GridFTP, se incurre en tres costos de tiempo: el tiempo requerido para la autenticación del cliente en el servidor de GridFTP, el tiempo real de transmisión de datos y el tiempo de reensamblaje de bloques de datos. Tiempo de autenticación: Antes de una transferencia, el cliente debe cargar un proxy de Globus y autenticarse en el servidor GridFTP con las credenciales de usuario especificadas. El cliente luego establece un canal de control, configura los parámetros de transferencia y solicita la creación de un canal de datos. Cuando se ha establecido el canal, los datos comienzan a fluir. Tiempo de transmisión: El tiempo de transmisión se mide desde el momento en que el cliente comienza a transferir hasta el momento en que se completan todos los trabajos de transmisión, e incluye el tiempo requerido para restablecer los canales de datos entre las solicitudes de transferencia. Las vías de datos solo necesitan abrirse una vez y pueden manejar muchas transferencias antes de cerrarse. Esto permite que las mismas vías de datos se utilicen para múltiples transferencias de archivos. Sin embargo, los canales de datos deben reiniciarse explícitamente entre las solicitudes de transferencia. Esto es menos costoso en tiempo. Tiempo de combinación: la arquitectura de coasignación explota la característica de copia parcial de la herramienta de movimiento de datos GridFTP para permitir transferencias de datos a través de múltiples conexiones. Con la transferencia parcial de archivos, se pueden recuperar secciones de archivos de servidores de datos especificando solo los desplazamientos de inicio y fin de la sección. Cuando se entregan estas secciones de archivo, es posible que necesiten ser reensambladas; la operación de reensamblaje conlleva un costo adicional de tiempo. 5. ESTRATEGIA DE COASIGNACIÓN DINÁMICA La coasignación dinámica, descrita anteriormente, es el enfoque más eficiente para reducir la influencia de las variaciones de red entre clientes y servidores. Sin embargo, el tiempo de inactividad de los servidores más rápidos esperando a que el servidor más lento entregue el último bloque sigue siendo un factor importante que afecta la eficiencia general, el cual el Balanceo de Carga Conservador y el Balanceo de Carga Agresivo [17] no pueden evitar de manera efectiva. El enfoque propuesto en el presente documento, un mecanismo de asignación dinámica llamado Coasignación Recursiva-Ajustable, puede superar esto y, por lo tanto, mejorar el rendimiento de transferencia de datos. 5.1 Coasignación Recursiva-Ajustable La Coasignación Recursiva-Ajustable funciona ajustando continuamente la carga de trabajo de cada servidor de réplicas para que corresponda a su ancho de banda en tiempo real durante las transferencias de archivos. El objetivo es hacer que el tiempo de finalización esperado de todos los servidores sea el mismo. Como muestra la Figura 2, cuando se selecciona primero una sección de archivo apropiada, se divide en tamaños de bloque adecuados según los anchos de banda del servidor respectivos. El coasignador luego asigna los bloques a los servidores para la transferencia. En este momento, se espera que el tiempo de finalización de la transferencia sea consistente en E(T1). Sin embargo, dado que los anchos de banda del servidor pueden fluctuar durante las entregas de segmentos, el tiempo real de finalización puede ser diferente (línea sólida, en la Figura 2). Una vez que el servidor más rápido termina su trabajo en el tiempo T1, la siguiente sección se asigna nuevamente a los servidores. Esto permite que cada servidor termine su carga de trabajo asignada para el tiempo esperado en E(T2). Estos ajustes se repiten hasta que se complete la transferencia de todo el archivo. Servidor 1 Servidor 2 Servidor 3 Ronda 1 Ronda 2 E(T1) E(T2)T1 Archivo A Sección 1 Sección 2 ... ... ... Figura 2. El proceso de ajuste del proceso de coasignación recursiva se ilustra en la Figura 3. Cuando un usuario solicita el archivo A, el servicio de selección de réplicas responde con el subconjunto de todos los servidores disponibles definidos por la matriz de rendimiento máximo. El servicio de co-asignación recibe esta lista de servidores réplica seleccionados. Suponiendo que se seleccionan n servidores réplica, Si denota el servidor i tal que 1 i n. Luego se establece una conexión para la descarga de archivos con cada servidor. El proceso de Co-Asignación de Ajuste Recursivo es el siguiente. Una nueva sección de un archivo a asignar es primero definida. El tamaño de la sección, SEj, es: SEj = TamañoArchivoNoAsignado , (0 < < 1) (2) donde SEj denota la sección j tal que 1 ≤ j ≤ k, asumiendo que asignamos k veces para el proceso de descarga. Y así, hay k secciones, mientras que Tj denota el tiempo asignado a la sección j. UnassignedFileSize es la porción del archivo A que aún no se ha distribuido para su descarga; inicialmente, UnassignedFileSize es igual al tamaño total del archivo A. es la tasa que determina cuánto de la sección queda por asignar. Figura 3. El proceso de Co-Asignación de Ajuste Recursivo. En el siguiente paso, SEj se divide en varios bloques y se asigna a n servidores. Cada servidor tiene una tasa de transferencia en tiempo real al cliente de Bi, la cual es medida por el Servicio Meteorológico de Red (NWS) [18]. El tamaño de bloque por flujo desde SEj para cada servidor i en el tiempo Tj es: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) donde UnFinishSizei denota el tamaño de bloques de transferencia no finalizados asignados en rondas anteriores en el servidor i. UnFinishSizei es igual a cero en la primera ronda. Idealmente, dependiendo del ancho de banda en tiempo real en el momento Tj, se espera que cada flujo termine su carga de trabajo en el futuro. Esto cumple con nuestro requisito de minimizar el tiempo que los servidores más rápidos deben esperar a que el servidor más lento termine. Si, en algunos casos, las variaciones en la red degradan considerablemente las tasas de transferencia, UnFinishSizei puede exceder n i ii n i ij BBzeUnFinishSiSE 11 *)(, que es el tamaño total del bloque que se espera transferir después de Tj. En tales casos, el coasignador elimina los servidores de antemano y asigna SEj a otros servidores. Después de la asignación, todos los canales continúan transfiriendo bloques de datos. Cuando un canal más rápido termina sus bloques de datos asignados, el coasignador comienza a asignar nuevamente una sección no asignada del archivo A. El proceso de asignar bloques de datos 801 para ajustar el tiempo de finalización del flujo esperado continúa hasta que se haya asignado todo el archivo. 5.2 Determinar cuándo detener el ajuste continuo Nuestro enfoque obtiene nuevas secciones de archivos completos dividiendo rangos de archivos no asignados en cada ronda de asignación. Estas porciones no asignadas de los rangos de archivo se vuelven más pequeñas después de cada asignación. Dado que el ajuste es continuo, funcionaría como un bucle infinito si no estuviera limitado por una condición de parada. Sin embargo, ¿cuándo es apropiado detener el ajuste continuo? Proporcionamos dos criterios de monitoreo, LeastSize y ExpectFinishedTime, para permitir a los usuarios definir umbrales de parada. Cuando se alcanza un umbral, el servidor de coasignación deja de dividir el resto del archivo y asigna ese resto como la sección final. El criterio LeastSize especifica el archivo más pequeño que queremos procesar, y cuando la porción no asignada de UnassignedFileSize cae por debajo de la especificación de LeastSize, la división se detiene. El criterio ExpectFinishedTime especifica el tiempo restante que se espera que dure la transferencia. Cuando el tiempo de transferencia esperado de la porción no asignada de un archivo cae por debajo del tiempo especificado por ExpectFinishedTime, la división del archivo se detiene. El valor esperado del tiempo de descanso se determina por: 1 n i iBFileSizeUnAssigned (4) Estos dos criterios determinan el tamaño final de la sección asignada. Valores de umbral más altos inducirán menos divisiones y generarán costos de co-asignación más bajos, que incluyen el establecimiento de conexiones, negociación, reensamblaje, etc. Sin embargo, aunque el tiempo total de ajuste de la coalocación puede ser menor, las variaciones de ancho de banda también pueden ejercer más influencia. Por el contrario, valores de umbral más bajos inducirán ajustes más frecuentes en la carga de trabajo del servidor dinámico y, en el caso de mayores fluctuaciones en la red, resultarán en menos diferencias en el tiempo de finalización de la transferencia del servidor. Sin embargo, valores más bajos también aumentarán los tiempos de coasignación, y por lo tanto, aumentarán los costos de coasignación. Por lo tanto, el entorno de internet, los tamaños de archivo transferidos y los costos de coasignación deben considerarse todos al determinar los umbrales óptimos. 5.3 Reducción de la Sobrecarga de Reensamblaje El proceso de reensamblar bloques después de transferencias de datos utilizando tecnología de coasignación resulta en una sobrecarga adicional y disminuye el rendimiento general. El sobrecosto de reensamblaje está relacionado con el tamaño total del bloque, y podría reducirse mediante la actualización de las capacidades del hardware o el uso de algoritmos de software mejores. Proponemos un mecanismo de reensamblaje alternativo eficiente para reducir la sobrecarga de combinación añadida una vez que se han completado todas las transmisiones de bloques. Se diferencia del método convencional en el que el software comienza el ensamblaje después de que todos los bloques hayan sido entregados, comenzando a ensamblar bloques una vez que finalizan las primeras entregas. Por supuesto, esto hace necesario mantener el orden original de división. Estrategias de coasignación como el Balanceo de Carga Conservador y la Coasignación de Ajuste Recursivo producen bloques adicionales durante las transferencias de archivos y pueden beneficiarse al habilitar el reensamblaje durante las transferencias de datos. Si algunos bloques se ensamblan de antemano, el costo de tiempo para ensamblar los bloques restantes después de que todas las transferencias finalicen puede reducirse. 6. RESULTADOS EXPERIMENTALES Y ANÁLISIS En esta sección, discutimos el rendimiento de nuestra estrategia de Co-Asignación Recursiva de Ajuste. Evaluamos cuatro esquemas de coalocación: (1) Fuerza Bruta (Brute), (2) Basado en Historial (History), (3) Balance de Carga Conservador (Conservative) y (4) Coalocación Co-Ajustada Recursiva (Recursive). Analizamos el rendimiento de cada esquema comparando su tiempo de finalización de transferencia y el tiempo total de inactividad que los servidores más rápidos pasaron esperando a que el servidor más lento terminara de entregar el último bloque. También analizamos el rendimiento general en los diferentes casos. Realizamos experimentos de transferencia de datos de gran área utilizando nuestra herramienta cliente GUI de GridFTP. Ejecutamos nuestra herramienta de cliente de co-asignación en nuestra plataforma de pruebas en la Universidad de Tunghai (THU), en la ciudad de Taichung, Taiwán, y obtuvimos archivos de cuatro servidores réplica seleccionados: uno en la Universidad de Providence (PU), uno en la Escuela Secundaria Li-Zen (LZ), uno en la Escuela de Tecnología Hsiuping (HIT) y uno en la Escuela Secundaria Da-Li (DL). Todas estas instituciones están en Taiwán, y cada una está al menos a 10 km de la THU. La Figura 4 muestra nuestro banco de pruebas de la cuadrícula de datos. Nuestros servidores tienen instalado Globus 3.0.2 o una versión superior. Escuela Secundaria THU Li-Zen (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD Escuela Secundaria Da-Li (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figura 4. En nuestro banco de pruebas de Data Grid, en los siguientes experimentos, establecimos = 0.5, el umbral de LeastSize en 10MB, y experimentamos con tamaños de archivo de 10 MB, 50 MB, 100 MB, 500 MB, 1000 MB, 2000 MB y 4000 MB. Para la comparación, medimos el rendimiento del Balanceo de Carga Conservador en cada tamaño utilizando los mismos números de bloques. La Figura 5 muestra una captura de pantalla de nuestra herramienta cliente GridFTP. Esta herramienta de cliente está desarrollada utilizando Java CoG. Permite un desarrollo de aplicaciones más fácil y rápido al fomentar la reutilización colaborativa de código y evitar la duplicación de esfuerzos entre entornos de resolución de problemas, portales científicos, middleware de Grid y pilotos colaborativos. La Tabla 1 muestra las tasas de transmisión promedio entre THU y cada servidor réplica. Estos números fueron obtenidos al transferir archivos de 500MB, 1000MB y 2000MB desde un único servidor réplica utilizando nuestra herramienta cliente GridFTP, y cada número es un promedio de varias ejecuciones. Tabla 1. Tasa de transmisión de extremo a extremo de GridFTP desde THU a varios servidores. Tasa de transmisión promedio del servidor: HIT 61.5 Mbps, LZ 59.5 Mbps, DL 32.1 Mbps, PU 26.7 Mbps. Figura 5. Nuestra herramienta cliente GridFTP analizó el efecto de servidores más rápidos esperando al servidor más lento para entregar el último bloque en cada esquema. La Figura 6(a) muestra el tiempo total de inactividad para diferentes tamaños de archivo. Tenga en cuenta que nuestro esquema de Co-Asignación Recursiva logró mejoras significativas en el rendimiento en comparación con otros esquemas para cada tamaño de archivo. Estos resultados demuestran que nuestro enfoque reduce eficientemente las diferencias en los tiempos de finalización de los servidores. Los resultados experimentales mostrados en la Figura 6(b) indican que nuestro esquema de comenzar la reensamblaje de bloques tan pronto como los primeros bloques han sido entregados completamente reduce el tiempo de combinación, ayudando así a estrategias de co-asignación como el Balance de Carga Conservador y la Co-Asignación de Ajuste Recursivo que producen más bloques durante las transferencias de datos. La Figura 7 muestra los resultados experimentales del tiempo total de finalización en una vista detallada de la estructura de costos. Los servidores estaban en PU, DL y HIT, con el cliente en THU. Las tres primeras barras para cada tamaño de archivo representan el tiempo para descargar el archivo completo desde un único servidor, mientras que las otras barras muestran descargas coasignadas utilizando los tres servidores. Nuestro esquema de coasignación terminó el trabajo más rápido que las otras estrategias de coasignación. Por lo tanto, podemos inferir que las principales ventajas que ofrece nuestra tecnología son tiempos de transmisión y combinación más bajos que otras estrategias de co-asignación. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de espera (seg) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de combinación (seg) Brute3 History3 Conservative3 Recursive3 Figura 6. (a) Tiempos de inactividad para varios métodos; los servidores están en PU, DL y HIT. (b) Tiempos de combinación para varios métodos; los servidores están en PU, DL y HIT. En el siguiente experimento, utilizamos la estrategia de Coasignación Recursiva-Ajustable con varios conjuntos de servidores réplica y medimos el rendimiento general, donde el rendimiento general es: Rendimiento Total = Tamaño del archivo / Tiempo Total de Finalización (5). La Tabla 2 enumera todos los experimentos que realizamos y los conjuntos de servidores réplica utilizados. Los resultados en la Figura 8(a) muestran que el uso de tecnologías de coallocation no produjo ninguna mejora para tamaños de archivo más pequeños como 10MB. También muestran que en la mayoría de los casos, el rendimiento general aumentó a medida que aumentaba el número de flujos coasignados. Observamos que para nuestro banco de pruebas y nuestra tecnología de coasignación, el rendimiento general alcanzó su valor más alto en el caso REC3_2. Sin embargo, en el caso REC4, cuando agregamos un flujo al conjunto de servidores réplica, el rendimiento no aumentó. Por el contrario, disminuyó. Podemos inferir que la eficiencia de coasignación alcanzó la saturación en el caso REC3_2, y que flujos adicionales causaron sobrecarga adicional y redujeron el rendimiento general. Esto significa que más flujos de descarga no necesariamente resultan en un rendimiento más alto. Debemos elegir un número adecuado de flujos para lograr un rendimiento óptimo. Mostramos la vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4 en la Figura 8(b). El costo detallado consiste en el tiempo de autenticación, tiempo de transferencia y tiempo de combinación. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de finalización (seg) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 7. Tiempos de finalización para varios métodos; los servidores están en PU, DL y HIT. Tabla 2. Los conjuntos de servidores réplica para todos los casos son: Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 8. (a) Rendimientos generales para varios conjuntos de servidores. (b) Vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4. 7. CONCLUSIONES La arquitectura de coasignación proporciona un agente coordinado para asignar bloques de datos. Un trabajo previo mostró que el esquema de co-asignación dinámica conduce a mejoras en el rendimiento. Sin embargo, no puede manejar el tiempo de inactividad de los servidores más rápidos, que deben esperar a que el servidor más lento entregue su bloque final. Propusimos el esquema de Co-Asignación Recursiva-Ajustable para mejorar el rendimiento de transferencia de datos utilizando la arquitectura de co-asignación en [17]. En este enfoque, las cargas de trabajo de los servidores de réplica seleccionados se ajustan continuamente durante las transferencias de datos, y proporcionamos una función que permite a los usuarios definir un umbral final de bloque 803, de acuerdo con su entorno de cuadrícula de datos. Los resultados experimentales muestran la efectividad de nuestra técnica propuesta en mejorar el tiempo de transferencia y reducir el tiempo total de inactividad esperando al servidor más lento. También discutimos el costo de recombinación y proporcionamos un esquema efectivo para reducirlo. 8. REFERENCIAS [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Gestión y Transferencia de Datos en Entornos de Redes Computacionales de Alto Rendimiento, Computación Paralela, 28(5):749-771, mayo de 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Transporte de Datos Seguro y Eficiente y Gestión de Réplicas para la Computación de Alto Rendimiento con Datos Intensivos, Actas del Decimoctavo Simposio IEEE sobre Sistemas y Tecnologías de Almacenamiento Masivo, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I. Foster, A. Chervenak y C. Kesselman. Protocolos y Servicios para la Ciencia de Datos Intensivos Distribuidos. Actas de ACAT2000, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I. Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt y M. Ripeanu, Giggle: Un marco para la construcción de servicios de ubicación de réplicas escalables, Actas de SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I. Foster, C. Kesselman, C. Salisbury y S. Tuecke, La Data Grid: Hacia una arquitectura para la gestión distribuida y análisis de grandes conjuntos de datos científicos, Revista de Aplicaciones de Redes y Computadoras, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I. Foster y C. Kesselman, Servicios de Información de Grid para Compartir Recursos Distribuidos, Actas del Décimo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-1001), 181-194, agosto de 2001. [7] K. Czajkowski, I. Foster y C. Kesselman. Coasignación de recursos en rejillas computacionales, Actas del Octavo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-899), agosto de 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz y M. Sgaravatto, Prototipo 1 de DataGrid, Conferencia de Redes de TERENA, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, junio de 2002, [9] I. Foster, C. Kesselman y S. Tuecke. La Anatomía de la Red: Permitiendo Organizaciones Virtuales Escalables. Int. Revista de Aplicaciones de Supercomputadoras y Computación de Alto Rendimiento, 15(3), pp. 200-222, 2001. [10] I. Foster y C. Kesselman, Globus: Un conjunto de herramientas de infraestructura de metacomputación, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger y K. Stockinger, Gestión de datos en un Proyecto Internacional de Grid de Datos, Proc. del Primer Taller Internacional de Grid Computing IEEE/ACM - Grid 2000, Bangalore, India, diciembre de 2000. [13] IBM Red Books, Introducción a la Computación en Grid con Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I. Foster, K. Holtman y B. Tierney, Replicación de archivos y objetos en rejillas de datos, Journal of Cluster Computing, 5(3):305-314, 2002. [15] Página de inicio de utilidades SYSSTAT, http://perso.wanadoo.fr/sebastien.godard/ [16] La Alianza Globus, http://www.globus.org/ [17] S. Vazhkudai, Facilitando la coasignación de transferencias de datos en rejillas, Proc. del Cuarto Taller Internacional sobre Computación en Rejilla, pp. 41-51, noviembre de 2003. [18] S. Vazhkudai y J. Schopf, Uso de técnicas de regresión para predecir grandes transferencias de datos, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, agosto de 2003. [19] S. Vazhkudai, S. Tuecke e I. Foster, Selección de réplicas en la malla de datos de Globus, Actas del 1er Simposio Internacional sobre Computación en Clúster y la Malla (CCGRID 2001), pp. 106-113, mayo de 2001. [20] S. Vazhkudai, J. Schopf, Predicción de transferencias de datos esporádicas en la malla, Actas del 11º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-11 02), pp. 188-196, julio de 2002. [21] S. Vazhkudai, J. Schopf e I. Foster, Prediciendo el rendimiento de transferencias de datos de amplia área, Actas del 16º Simposio Internacional de Procesamiento Paralelo y Distribuido (IPDPS 2002), pp. 34-43, abril de 2002, pp. 34-43. [22] R. Wolski, N. Spring y J. Hayes, El Servicio de Pronóstico del Tiempo de Red: Un Servicio de Pronóstico de Rendimiento de Recursos Distribuidos para Metacomputación, Sistemas Informáticos de Generación Futura, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li y Ching-Hsien Hsu, Análisis de rendimiento de la aplicación de tecnología de selección de réplicas para entornos de Grid de Datos, PaCT 2005, Notas de Conferencias en Ciencias de la Computación, vol. 3603, pp. 278-287, Springer-Verlag, septiembre de 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li y ChingHsien Hsu, Un Esquema de Co-Asignación Recursiva en Entornos de Grid de Datos, ICA3PP 2005 Algoritmo y Arquitectura para Procesamiento Paralelo, Notas de Conferencias en Ciencias de la Computación, vol. 3719, pp. 40-49, Springer-Verlag, octubre de 2005. [25] X. Zhang, J. Freschl y J. Schopf, Un Estudio de Rendimiento de Servicios de Monitoreo e Información para Sistemas Distribuidos, Actas del 12º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-12 03), pp. 270-282, agosto de 2003. ",
            "candidates": [],
            "error": [
                [
                    "grandes conjuntos de datos",
                    "conjuntos de datos"
                ]
            ]
        },
        "resource management protocol": {
            "translated_key": "protocolo de gestión de recursos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a <br>resource management protocol</br>, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "GRAM implements a <br>resource management protocol</br>, MDS implements an information services protocol, and GridFTP implements a data transfer protocol."
            ],
            "translated_annotated_samples": [
                "GRAM implementa un <br>protocolo de gestión de recursos</br>, MDS implementa un protocolo de servicios de información y GridFTP implementa un protocolo de transferencia de datos."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque. Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de transferencia de datos de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la transferencia de datos [24]. Los resultados experimentales muestran que nuestro enfoque es superior a los métodos anteriores y logró el mejor rendimiento general. También discutimos el costo de combinación y proporcionamos un esquema efectivo para reducirlo. El resto de este documento está organizado de la siguiente manera. La revisión de antecedentes relacionados y estudios se presentan en la Sección 2 y la arquitectura de co-asignación y trabajos relacionados se introducen en la Sección 3. En la Sección 4, proponemos un servicio eficiente de selección de réplicas. Nuestros enfoques de investigación se describen en la Sección 5, y los resultados experimentales y una evaluación del rendimiento de nuestro esquema se presentan en la Sección 6. La sección 7 concluye este documento de investigación. ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico). El término Data Grid tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes. Las Rejillas de Datos [1, 2, 16] federan una gran cantidad de recursos de almacenamiento. Grandes colecciones de datos medidos o calculados están surgiendo como recursos importantes en muchas aplicaciones intensivas en datos. 2.1.1 Gestión de Réplicas La gestión de réplicas implica la creación o eliminación de réplicas en un sitio de cuadrícula de datos [19]. En otras palabras, el rol de un administrador de réplicas es crear o eliminar réplicas, dentro de sistemas de almacenamiento especificados. La mayoría de las veces, estas réplicas son copias exactas de los archivos originales, creadas solo para aprovechar ciertos beneficios de rendimiento. Un administrador de réplicas generalmente mantiene un catálogo de réplicas que contiene las direcciones de los sitios de réplica y las instancias de archivos. El servicio de gestión de réplicas es responsable de administrar la replicación de copias completas y parciales de conjuntos de datos, definidos como colecciones de archivos. El servicio de gestión de réplicas es solo un componente en un entorno de Data Grid que brinda soporte para aplicaciones de alto rendimiento y alta intensidad de datos. Una réplica o ubicación es un subconjunto de una colección que se almacena en un sistema de almacenamiento físico particular. Puede haber múltiples subconjuntos posiblemente superpuestos de una colección almacenados en múltiples sistemas de almacenamiento en una Rejilla de Datos. Estos sistemas de almacenamiento en red pueden utilizar una variedad de tecnologías de almacenamiento subyacentes y protocolos de movimiento de datos, que son independientes de la gestión de réplicas. 2.1.2 Catálogo de Réplicas Como se mencionó anteriormente, el propósito del catálogo de réplicas es proporcionar mapeos entre nombres lógicos de archivos o colecciones y una o más copias de los objetos en sistemas de almacenamiento físico. El catálogo de réplicas incluye entradas opcionales que describen archivos lógicos individuales. Los archivos lógicos son entidades con nombres globalmente únicos que pueden tener una o más instancias físicas. El catálogo puede contener opcionalmente una entrada de archivo lógico en el catálogo de réplicas para cada archivo lógico en una colección. Una cuadrícula de datos puede contener múltiples catálogos de réplicas. Por ejemplo, una comunidad de investigadores interesados en un tema de investigación particular podría mantener un catálogo de réplicas para una colección de conjuntos de datos de interés mutuo. Es posible crear jerarquías de catálogos de réplicas para imponer una estructura similar a la de un directorio en colecciones lógicas relacionadas. Además, el administrador de réplicas puede realizar control de acceso en catálogos completos, así como en archivos lógicos individuales. 2.1.3 Selección de Réplicas El propósito de la selección de réplicas [16] es seleccionar una réplica entre los sitios que constituyen una Data Grid [19]. Los criterios de selección dependen de las características de la aplicación. Al utilizar este mecanismo, los usuarios de la Data Grid pueden gestionar fácilmente réplicas de conjuntos de datos en sus sitios, con un mejor rendimiento. Se ha dedicado mucho esfuerzo previo al problema de selección de réplicas. El proceso común de selección de réplicas consta de tres pasos: preparación de datos, preprocesamiento y predicción. Entonces, las aplicaciones pueden seleccionar una réplica según sus atributos específicos. La selección de réplicas es importante para aplicaciones intensivas en datos, y puede proporcionar transparencia de ubicación. Cuando un usuario solicita acceso a un conjunto de datos, el sistema determina una forma apropiada de entregar la réplica al usuario. 2.2 Globus Toolkit y GridFTP El Proyecto Globus [9, 11, 16] proporciona herramientas de software colectivamente llamadas El Kit de Herramientas Globus que facilita la construcción de Grids computacionales y aplicaciones basadas en Grid. Muchas organizaciones utilizan la Herramienta Globus para construir Grillas computacionales que apoyen sus aplicaciones. La composición del Globus Toolkit se puede visualizar como tres pilares: Gestión de Recursos, Servicios de Información y Gestión de Datos. Cada pilar representa un componente principal del Globus Toolkit y hace uso de una base común de seguridad. GRAM implementa un <br>protocolo de gestión de recursos</br>, MDS implementa un protocolo de servicios de información y GridFTP implementa un protocolo de transferencia de datos. Todos utilizan el protocolo de seguridad GSI en la capa de conexión [10, 11, 16, 13]. La alianza Globus propuso un protocolo común de transferencia y acceso de datos llamado GridFTP que proporciona un movimiento seguro y eficiente de datos en entornos de Grid. Este protocolo, que extiende el protocolo estándar FTP, proporciona un superconjunto de las características ofrecidas por los diversos sistemas de almacenamiento en red actualmente en uso. Para resolver los problemas que surgen, la comunidad de Data Grid intenta desarrollar un mecanismo seguro y eficiente de transporte de datos y servicios de gestión de réplicas. GridFTP es un protocolo de transporte de datos confiable, seguro y eficiente que se desarrolló como parte del proyecto Globus. Hay otra tecnología clave del proyecto Globus, llamada catálogo de réplicas [16], que se utiliza para registrar y gestionar copias completas y parciales de conjuntos de datos. El catálogo de réplicas contiene la información de mapeo de un archivo lógico o colección a uno o más archivos físicos. 2.3 Servicio Meteorológico de Red El Servicio Meteorológico de Red (NWS) [22] es un sistema de monitoreo generalizado y distribuido para producir pronósticos de rendimiento a corto plazo basados en mediciones de rendimiento históricas. El objetivo del sistema es caracterizar y predecir dinámicamente el rendimiento entregable a nivel de aplicación a partir de un conjunto de recursos de red y computacionales. Una instalación típica implica un nws_nameserver, uno o más nws_memory (que pueden residir en máquinas diferentes) y un nws_sensor ejecutándose en cada máquina con los recursos que se van a monitorear. El sistema incluye sensores para el rendimiento TCP/IP de extremo a extremo (ancho de banda y latencia), porcentaje de CPU disponible y memoria no paginada disponible. 798 2.4 Utilidades Sysstat Las utilidades Sysstat [15] son un conjunto de herramientas de monitoreo de rendimiento para el sistema operativo Linux. El paquete Sysstat incorpora los comandos sar, mpstat e iostat. El comando sar recopila y reporta información de actividad del sistema, la cual también puede ser guardada en un archivo de actividad del sistema para inspección futura. El comando iostat informa estadísticas de la CPU y estadísticas de E/S para dispositivos tty y discos. Las estadísticas reportadas por SAR se refieren a tasas de transferencia de E/S, actividad de paginación, actividades relacionadas con procesos, interrupciones, actividad de red, utilización de memoria y espacio de intercambio, utilización de CPU, actividades del kernel y estadísticas de TTY, entre otros. Las máquinas Uniprocessor (UP) y Symmetric multiprocessor (SMP) son totalmente compatibles. 3. La arquitectura de co-asignación propuesta en [17] consta de tres componentes principales: un servicio de información, un intermediario/co-asignador y sistemas de almacenamiento locales. La Figura 1 muestra la co-asignación de transferencias de datos de la red, que es una extensión de la plantilla básica para la gestión de recursos [7] proporcionada por Globus Toolkit. Las aplicaciones especifican las características de los datos deseados y envían la descripción de los atributos a un intermediario. El corredor consulta los recursos disponibles y obtiene las ubicaciones de réplicas de los servicios de información [6] y los servicios de gestión de réplicas [19], y luego obtiene una lista de ubicaciones físicas para los archivos deseados. Figura 1. La arquitectura de coasignación de cuadrícula de datos [17] pasa las ubicaciones candidatas de réplicas a un servicio de selección de réplicas [19], que fue presentado en un trabajo previo [23]. Este servicio de selección de réplicas proporciona estimaciones del rendimiento de transferencia de candidatos basadas en un modelo de costos y elige las cantidades apropiadas para solicitar a las ubicaciones más adecuadas. El agente de coasignación luego descarga los datos en paralelo desde los servidores seleccionados. En estas investigaciones, se utilizó GridFTP [1, 11, 16] para habilitar transferencias de datos en paralelo. GridFTP es un protocolo de transferencia de datos de alto rendimiento, seguro y confiable, optimizado para redes de área amplia de alta velocidad de banda ancha. Entre sus muchas características se encuentran la seguridad, los flujos paralelos, las transferencias de archivos parciales, las transferencias de terceros y los canales de datos reutilizables. Su capacidad de transferencia parcial de archivos permite recuperar archivos de servidores de datos especificando los desplazamientos de inicio y fin de las secciones de archivos. Las rejillas de datos consisten en recursos informáticos y de almacenamiento dispersos ubicados en diferentes países/regiones pero accesibles para los usuarios [8]. En este estudio utilizamos el middleware de cuadrícula Globus Toolkit [16] como infraestructura de la cuadrícula de datos. El Globus Toolkit proporciona soluciones para consideraciones como seguridad, gestión de recursos, gestión de datos y servicios de información. Uno de sus componentes principales es MDS [6, 11, 16, 25], el cual está diseñado para proporcionar un mecanismo estándar para descubrir y publicar información sobre el estado y la configuración de recursos. Proporciona una interfaz uniforme y flexible para los datos recopilados por proveedores de información de nivel inferior en dos modos: estáticos (por ejemplo, sistemas operativos, tipos de CPU y arquitecturas de sistemas) y datos dinámicos (por ejemplo, disponibilidad de disco, disponibilidad de memoria y carga). Y utiliza GridFTP [1, 11, 16], un protocolo de transporte de datos confiable, seguro y eficiente para proporcionar una gestión eficiente y transferencia de terabytes o petabytes de datos en un entorno de recursos distribuidos de amplia área. A medida que los conjuntos de datos se replican dentro de entornos de Grid para fiabilidad y rendimiento, los clientes requieren la capacidad de descubrir réplicas de datos existentes, y crear y registrar nuevas réplicas. Un Servicio de Localización de Réplicas (RLS) proporciona un mecanismo para descubrir y registrar réplicas existentes. Se han desarrollado varios métricas de predicción para ayudar en la selección de réplicas. Por ejemplo, Vazhkudai y Schopf [18, 20, 21] utilizaron historiales de transferencia de datos pasados para estimar las velocidades actuales de transferencia de datos. En nuestro trabajo previo [23, 24], propusimos un modelo de costo de selección de réplicas y un servicio de selección de réplicas para llevar a cabo la selección de réplicas. En [17], el autor propone una arquitectura de coasignación para coasignar transferencias de datos de Grid a través de múltiples conexiones, aprovechando la función de copia parcial de GridFTP. También proporciona Balanceo de Carga por Fuerza Bruta, Basado en Historial y Dinámico para asignar bloques de datos. Coasignación por Fuerza Bruta: La coasignación por Fuerza Bruta funciona dividiendo el tamaño del archivo de manera equitativa entre los flujos disponibles. No aborda las diferencias de ancho de banda entre los distintos enlaces cliente-servidor. Coasignación basada en historial: El esquema de coasignación basado en historial mantiene los tamaños de bloque por flujo proporcionales a las tasas de transferencia predichas. Balanceo de carga conservador: Uno de sus métodos de coasignación dinámica es el Balanceo de Carga Conservador. La estrategia de coasignación dinámica de equilibrio de carga conservadora divide los conjuntos de datos solicitados en k bloques disjuntos de tamaño igual. Los servidores disponibles se asignan bloques individuales para entregar en paralelo. Cuando un servidor termina de entregar un bloque, se solicita otro, y así sucesivamente, hasta que se descarga el archivo completo. Las cargas en los flujos coasignados se ajustan automáticamente porque los servidores más rápidos entregarán más rápidamente proporcionando porciones más grandes del archivo. Equilibrio de carga agresivo: Otra estrategia dinámica de colocación conjunta, presentada en [17], es el Equilibrio de carga agresivo. La estrategia de co-asignación dinámica de equilibrio de carga agresiva presentada en [17] añade funciones que modifican las entregas de tamaño de bloque al: (1) aumentar progresivamente las cantidades de datos solicitadas a servidores más rápidos, y (2) reducir las cantidades de datos solicitadas a servidores más lentos o dejar de solicitar datos de ellos por completo. Las estrategias de coasignación descritas anteriormente no solucionan la limitación de que los servidores más rápidos tengan que esperar a que el servidor más lento entregue su último bloque. En la mayoría de los casos, esto desperdicia mucho tiempo y disminuye el rendimiento general. Por lo tanto, proponemos un enfoque eficiente llamado Recursivo-Ajuste Co-Asignación y basado en una arquitectura de co-asignación. Mejora la co-asignación dinámica y reduce el tiempo de espera, mejorando así el rendimiento general de la transferencia. Un SERVICIO DE SELECCIÓN DE RÉPLICAS EFICIENTE Construimos un servicio de selección de réplicas para permitir a los clientes seleccionar los servidores de réplicas mejores en entornos de Data Grid. Consulte a continuación para obtener una descripción detallada. 4.1 Escenario de Selección de Réplicas Nuestro modelo propuesto de selección de réplicas se ilustra en [23], que muestra cómo un cliente identifica la mejor ubicación para una transferencia de réplica deseada. El cliente primero inicia sesión en un sitio local y ejecuta la aplicación de la plataforma Data Grid, la cual verifica si los archivos están disponibles en el sitio local. Si están presentes en el sitio local, la aplicación accede a ellos inmediatamente; de lo contrario, pasa los nombres de archivo lógicos al servidor del catálogo de réplicas, que devuelve una lista de ubicaciones físicas para todas las copias registradas. La aplicación envía esta lista de ubicaciones de réplicas a un servidor de selección de réplicas, que identifica las ubicaciones de destino del sistema de almacenamiento para todas las operaciones de transferencia de datos candidatas. El servidor de selección de réplicas envía las posibles ubicaciones de destino al servidor de información, el cual proporciona mediciones de rendimiento y predicciones de los tres factores del sistema descritos a continuación. El servidor de selección de réplicas elige mejores ubicaciones de réplicas según estas estimaciones y devuelve la información de ubicación a la aplicación de transferencia, la cual recibe la réplica a través de GridFTP. Cuando la aplicación finaliza, devuelve los resultados al usuario. 4.2 Factores del sistema Determinar la mejor base de datos entre muchas con las mismas réplicas es un problema significativo. En nuestro modelo, consideramos tres factores del sistema que afectan la selección de réplicas: Ancho de banda de red: Este es uno de los factores más significativos de Data Grid ya que los archivos de datos en entornos de Data Grid suelen ser muy grandes. En otras palabras, los tiempos de transferencia de archivos de datos dependen estrechamente de las situaciones de ancho de banda de la red. Debido a que el ancho de banda de la red es un factor dinámico inestable, debemos medirlo con frecuencia y predecirlo de la manera más precisa posible. El Servicio Meteorológico de Red (NWS) es una herramienta poderosa para este propósito. Carga de la CPU: Las plataformas de cuadrícula consisten en números de sistemas heterogéneos, construidos con diferentes arquitecturas de sistema, por ejemplo, plataformas de clúster, supercomputadoras, PC. La carga de la CPU es un factor del sistema dinámico, y una carga pesada en la CPU del sistema afectará sin duda el proceso de descarga de archivos de datos desde el sitio. La medición se realiza mediante el Toolkit Globus / MDS. Estado de E/S: Los nodos de la cuadrícula de datos consisten en diferentes sistemas de almacenamiento heterogéneos. Los archivos de datos en las redes de datos son enormes. Si el estado de E/S de un sitio del que deseamos descargar archivos está muy ocupado, afectará directamente el rendimiento de la transferencia de datos. Medimos los estados de E/S utilizando las utilidades sysstat [15]. Nuestro Modelo de Costo de Selección de Réplicas La función objetivo de un modelo de costos para el almacenamiento de datos distribuidos y replicados es la puntuación de información del servicio de información. Enumeramos algunos factores influyentes para nuestro modelo de costos en la sección anterior. Sin embargo, debemos expresar estos factores en notación matemática para un análisis más detallado. Suponemos que el nodo i es el sitio local en el que el usuario o la aplicación inicia sesión, y el nodo j posee la réplica que el usuario o la aplicación desea. Los siete parámetros del sistema que considera nuestro modelo de costos de selección de réplicas son: Scorei-j: el valor de puntuación representa qué tan eficientemente un usuario o aplicación en el nodo i puede adquirir una réplica del nodo j BW jiP: porcentaje de ancho de banda disponible del nodo i al nodo j; ancho de banda actual dividido por el ancho de banda teórico más alto BBW: peso del ancho de banda de red definido por el administrador de Data Grid CPU jP: porcentaje de estados de inactividad de la CPU del nodo j WCPU: peso de carga de la CPU definido por el administrador de Data Grid OI jP /: porcentaje de estados de inactividad de E/S del nodo j WI/O: peso del estado de E/S definido por el administrador de Data Grid Definimos la siguiente fórmula general utilizando estos factores del sistema. Los tres factores influyentes en esta fórmula: WBW, WCPU y WI/O describen los pesos de la CPU, E/S y ancho de banda de red, los cuales pueden ser determinados por los administradores de la organización de Data Grid según los diversos atributos de los sistemas de almacenamiento en los nodos de Data Grid, ya que algunos equipos de almacenamiento no afectan la carga de la CPU. Después de varias mediciones experimentales, determinamos que el ancho de banda de la red es el factor más significativo que influye directamente en los tiempos de transferencia de datos. Cuando realizamos transferencias de datos utilizando el protocolo GridFTP, descubrimos que los estados de la CPU y E/S afectan ligeramente el rendimiento de la transferencia de datos. Sus valores respectivos en nuestro entorno de Data Grid son 80%, 10% y 10%. 4.4 Análisis de Costo de Co-Asignación Cuando los clientes descargan conjuntos de datos utilizando la tecnología de co-asignación de GridFTP, se incurre en tres costos de tiempo: el tiempo requerido para la autenticación del cliente en el servidor de GridFTP, el tiempo real de transmisión de datos y el tiempo de reensamblaje de bloques de datos. Tiempo de autenticación: Antes de una transferencia, el cliente debe cargar un proxy de Globus y autenticarse en el servidor GridFTP con las credenciales de usuario especificadas. El cliente luego establece un canal de control, configura los parámetros de transferencia y solicita la creación de un canal de datos. Cuando se ha establecido el canal, los datos comienzan a fluir. Tiempo de transmisión: El tiempo de transmisión se mide desde el momento en que el cliente comienza a transferir hasta el momento en que se completan todos los trabajos de transmisión, e incluye el tiempo requerido para restablecer los canales de datos entre las solicitudes de transferencia. Las vías de datos solo necesitan abrirse una vez y pueden manejar muchas transferencias antes de cerrarse. Esto permite que las mismas vías de datos se utilicen para múltiples transferencias de archivos. Sin embargo, los canales de datos deben reiniciarse explícitamente entre las solicitudes de transferencia. Esto es menos costoso en tiempo. Tiempo de combinación: la arquitectura de coasignación explota la característica de copia parcial de la herramienta de movimiento de datos GridFTP para permitir transferencias de datos a través de múltiples conexiones. Con la transferencia parcial de archivos, se pueden recuperar secciones de archivos de servidores de datos especificando solo los desplazamientos de inicio y fin de la sección. Cuando se entregan estas secciones de archivo, es posible que necesiten ser reensambladas; la operación de reensamblaje conlleva un costo adicional de tiempo. 5. ESTRATEGIA DE COASIGNACIÓN DINÁMICA La coasignación dinámica, descrita anteriormente, es el enfoque más eficiente para reducir la influencia de las variaciones de red entre clientes y servidores. Sin embargo, el tiempo de inactividad de los servidores más rápidos esperando a que el servidor más lento entregue el último bloque sigue siendo un factor importante que afecta la eficiencia general, el cual el Balanceo de Carga Conservador y el Balanceo de Carga Agresivo [17] no pueden evitar de manera efectiva. El enfoque propuesto en el presente documento, un mecanismo de asignación dinámica llamado Coasignación Recursiva-Ajustable, puede superar esto y, por lo tanto, mejorar el rendimiento de transferencia de datos. 5.1 Coasignación Recursiva-Ajustable La Coasignación Recursiva-Ajustable funciona ajustando continuamente la carga de trabajo de cada servidor de réplicas para que corresponda a su ancho de banda en tiempo real durante las transferencias de archivos. El objetivo es hacer que el tiempo de finalización esperado de todos los servidores sea el mismo. Como muestra la Figura 2, cuando se selecciona primero una sección de archivo apropiada, se divide en tamaños de bloque adecuados según los anchos de banda del servidor respectivos. El coasignador luego asigna los bloques a los servidores para la transferencia. En este momento, se espera que el tiempo de finalización de la transferencia sea consistente en E(T1). Sin embargo, dado que los anchos de banda del servidor pueden fluctuar durante las entregas de segmentos, el tiempo real de finalización puede ser diferente (línea sólida, en la Figura 2). Una vez que el servidor más rápido termina su trabajo en el tiempo T1, la siguiente sección se asigna nuevamente a los servidores. Esto permite que cada servidor termine su carga de trabajo asignada para el tiempo esperado en E(T2). Estos ajustes se repiten hasta que se complete la transferencia de todo el archivo. Servidor 1 Servidor 2 Servidor 3 Ronda 1 Ronda 2 E(T1) E(T2)T1 Archivo A Sección 1 Sección 2 ... ... ... Figura 2. El proceso de ajuste del proceso de coasignación recursiva se ilustra en la Figura 3. Cuando un usuario solicita el archivo A, el servicio de selección de réplicas responde con el subconjunto de todos los servidores disponibles definidos por la matriz de rendimiento máximo. El servicio de co-asignación recibe esta lista de servidores réplica seleccionados. Suponiendo que se seleccionan n servidores réplica, Si denota el servidor i tal que 1 i n. Luego se establece una conexión para la descarga de archivos con cada servidor. El proceso de Co-Asignación de Ajuste Recursivo es el siguiente. Una nueva sección de un archivo a asignar es primero definida. El tamaño de la sección, SEj, es: SEj = TamañoArchivoNoAsignado , (0 < < 1) (2) donde SEj denota la sección j tal que 1 ≤ j ≤ k, asumiendo que asignamos k veces para el proceso de descarga. Y así, hay k secciones, mientras que Tj denota el tiempo asignado a la sección j. UnassignedFileSize es la porción del archivo A que aún no se ha distribuido para su descarga; inicialmente, UnassignedFileSize es igual al tamaño total del archivo A. es la tasa que determina cuánto de la sección queda por asignar. Figura 3. El proceso de Co-Asignación de Ajuste Recursivo. En el siguiente paso, SEj se divide en varios bloques y se asigna a n servidores. Cada servidor tiene una tasa de transferencia en tiempo real al cliente de Bi, la cual es medida por el Servicio Meteorológico de Red (NWS) [18]. El tamaño de bloque por flujo desde SEj para cada servidor i en el tiempo Tj es: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) donde UnFinishSizei denota el tamaño de bloques de transferencia no finalizados asignados en rondas anteriores en el servidor i. UnFinishSizei es igual a cero en la primera ronda. Idealmente, dependiendo del ancho de banda en tiempo real en el momento Tj, se espera que cada flujo termine su carga de trabajo en el futuro. Esto cumple con nuestro requisito de minimizar el tiempo que los servidores más rápidos deben esperar a que el servidor más lento termine. Si, en algunos casos, las variaciones en la red degradan considerablemente las tasas de transferencia, UnFinishSizei puede exceder n i ii n i ij BBzeUnFinishSiSE 11 *)(, que es el tamaño total del bloque que se espera transferir después de Tj. En tales casos, el coasignador elimina los servidores de antemano y asigna SEj a otros servidores. Después de la asignación, todos los canales continúan transfiriendo bloques de datos. Cuando un canal más rápido termina sus bloques de datos asignados, el coasignador comienza a asignar nuevamente una sección no asignada del archivo A. El proceso de asignar bloques de datos 801 para ajustar el tiempo de finalización del flujo esperado continúa hasta que se haya asignado todo el archivo. 5.2 Determinar cuándo detener el ajuste continuo Nuestro enfoque obtiene nuevas secciones de archivos completos dividiendo rangos de archivos no asignados en cada ronda de asignación. Estas porciones no asignadas de los rangos de archivo se vuelven más pequeñas después de cada asignación. Dado que el ajuste es continuo, funcionaría como un bucle infinito si no estuviera limitado por una condición de parada. Sin embargo, ¿cuándo es apropiado detener el ajuste continuo? Proporcionamos dos criterios de monitoreo, LeastSize y ExpectFinishedTime, para permitir a los usuarios definir umbrales de parada. Cuando se alcanza un umbral, el servidor de coasignación deja de dividir el resto del archivo y asigna ese resto como la sección final. El criterio LeastSize especifica el archivo más pequeño que queremos procesar, y cuando la porción no asignada de UnassignedFileSize cae por debajo de la especificación de LeastSize, la división se detiene. El criterio ExpectFinishedTime especifica el tiempo restante que se espera que dure la transferencia. Cuando el tiempo de transferencia esperado de la porción no asignada de un archivo cae por debajo del tiempo especificado por ExpectFinishedTime, la división del archivo se detiene. El valor esperado del tiempo de descanso se determina por: 1 n i iBFileSizeUnAssigned (4) Estos dos criterios determinan el tamaño final de la sección asignada. Valores de umbral más altos inducirán menos divisiones y generarán costos de co-asignación más bajos, que incluyen el establecimiento de conexiones, negociación, reensamblaje, etc. Sin embargo, aunque el tiempo total de ajuste de la coalocación puede ser menor, las variaciones de ancho de banda también pueden ejercer más influencia. Por el contrario, valores de umbral más bajos inducirán ajustes más frecuentes en la carga de trabajo del servidor dinámico y, en el caso de mayores fluctuaciones en la red, resultarán en menos diferencias en el tiempo de finalización de la transferencia del servidor. Sin embargo, valores más bajos también aumentarán los tiempos de coasignación, y por lo tanto, aumentarán los costos de coasignación. Por lo tanto, el entorno de internet, los tamaños de archivo transferidos y los costos de coasignación deben considerarse todos al determinar los umbrales óptimos. 5.3 Reducción de la Sobrecarga de Reensamblaje El proceso de reensamblar bloques después de transferencias de datos utilizando tecnología de coasignación resulta en una sobrecarga adicional y disminuye el rendimiento general. El sobrecosto de reensamblaje está relacionado con el tamaño total del bloque, y podría reducirse mediante la actualización de las capacidades del hardware o el uso de algoritmos de software mejores. Proponemos un mecanismo de reensamblaje alternativo eficiente para reducir la sobrecarga de combinación añadida una vez que se han completado todas las transmisiones de bloques. Se diferencia del método convencional en el que el software comienza el ensamblaje después de que todos los bloques hayan sido entregados, comenzando a ensamblar bloques una vez que finalizan las primeras entregas. Por supuesto, esto hace necesario mantener el orden original de división. Estrategias de coasignación como el Balanceo de Carga Conservador y la Coasignación de Ajuste Recursivo producen bloques adicionales durante las transferencias de archivos y pueden beneficiarse al habilitar el reensamblaje durante las transferencias de datos. Si algunos bloques se ensamblan de antemano, el costo de tiempo para ensamblar los bloques restantes después de que todas las transferencias finalicen puede reducirse. 6. RESULTADOS EXPERIMENTALES Y ANÁLISIS En esta sección, discutimos el rendimiento de nuestra estrategia de Co-Asignación Recursiva de Ajuste. Evaluamos cuatro esquemas de coalocación: (1) Fuerza Bruta (Brute), (2) Basado en Historial (History), (3) Balance de Carga Conservador (Conservative) y (4) Coalocación Co-Ajustada Recursiva (Recursive). Analizamos el rendimiento de cada esquema comparando su tiempo de finalización de transferencia y el tiempo total de inactividad que los servidores más rápidos pasaron esperando a que el servidor más lento terminara de entregar el último bloque. También analizamos el rendimiento general en los diferentes casos. Realizamos experimentos de transferencia de datos de gran área utilizando nuestra herramienta cliente GUI de GridFTP. Ejecutamos nuestra herramienta de cliente de co-asignación en nuestra plataforma de pruebas en la Universidad de Tunghai (THU), en la ciudad de Taichung, Taiwán, y obtuvimos archivos de cuatro servidores réplica seleccionados: uno en la Universidad de Providence (PU), uno en la Escuela Secundaria Li-Zen (LZ), uno en la Escuela de Tecnología Hsiuping (HIT) y uno en la Escuela Secundaria Da-Li (DL). Todas estas instituciones están en Taiwán, y cada una está al menos a 10 km de la THU. La Figura 4 muestra nuestro banco de pruebas de la cuadrícula de datos. Nuestros servidores tienen instalado Globus 3.0.2 o una versión superior. Escuela Secundaria THU Li-Zen (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD Escuela Secundaria Da-Li (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figura 4. En nuestro banco de pruebas de Data Grid, en los siguientes experimentos, establecimos = 0.5, el umbral de LeastSize en 10MB, y experimentamos con tamaños de archivo de 10 MB, 50 MB, 100 MB, 500 MB, 1000 MB, 2000 MB y 4000 MB. Para la comparación, medimos el rendimiento del Balanceo de Carga Conservador en cada tamaño utilizando los mismos números de bloques. La Figura 5 muestra una captura de pantalla de nuestra herramienta cliente GridFTP. Esta herramienta de cliente está desarrollada utilizando Java CoG. Permite un desarrollo de aplicaciones más fácil y rápido al fomentar la reutilización colaborativa de código y evitar la duplicación de esfuerzos entre entornos de resolución de problemas, portales científicos, middleware de Grid y pilotos colaborativos. La Tabla 1 muestra las tasas de transmisión promedio entre THU y cada servidor réplica. Estos números fueron obtenidos al transferir archivos de 500MB, 1000MB y 2000MB desde un único servidor réplica utilizando nuestra herramienta cliente GridFTP, y cada número es un promedio de varias ejecuciones. Tabla 1. Tasa de transmisión de extremo a extremo de GridFTP desde THU a varios servidores. Tasa de transmisión promedio del servidor: HIT 61.5 Mbps, LZ 59.5 Mbps, DL 32.1 Mbps, PU 26.7 Mbps. Figura 5. Nuestra herramienta cliente GridFTP analizó el efecto de servidores más rápidos esperando al servidor más lento para entregar el último bloque en cada esquema. La Figura 6(a) muestra el tiempo total de inactividad para diferentes tamaños de archivo. Tenga en cuenta que nuestro esquema de Co-Asignación Recursiva logró mejoras significativas en el rendimiento en comparación con otros esquemas para cada tamaño de archivo. Estos resultados demuestran que nuestro enfoque reduce eficientemente las diferencias en los tiempos de finalización de los servidores. Los resultados experimentales mostrados en la Figura 6(b) indican que nuestro esquema de comenzar la reensamblaje de bloques tan pronto como los primeros bloques han sido entregados completamente reduce el tiempo de combinación, ayudando así a estrategias de co-asignación como el Balance de Carga Conservador y la Co-Asignación de Ajuste Recursivo que producen más bloques durante las transferencias de datos. La Figura 7 muestra los resultados experimentales del tiempo total de finalización en una vista detallada de la estructura de costos. Los servidores estaban en PU, DL y HIT, con el cliente en THU. Las tres primeras barras para cada tamaño de archivo representan el tiempo para descargar el archivo completo desde un único servidor, mientras que las otras barras muestran descargas coasignadas utilizando los tres servidores. Nuestro esquema de coasignación terminó el trabajo más rápido que las otras estrategias de coasignación. Por lo tanto, podemos inferir que las principales ventajas que ofrece nuestra tecnología son tiempos de transmisión y combinación más bajos que otras estrategias de co-asignación. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de espera (seg) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de combinación (seg) Brute3 History3 Conservative3 Recursive3 Figura 6. (a) Tiempos de inactividad para varios métodos; los servidores están en PU, DL y HIT. (b) Tiempos de combinación para varios métodos; los servidores están en PU, DL y HIT. En el siguiente experimento, utilizamos la estrategia de Coasignación Recursiva-Ajustable con varios conjuntos de servidores réplica y medimos el rendimiento general, donde el rendimiento general es: Rendimiento Total = Tamaño del archivo / Tiempo Total de Finalización (5). La Tabla 2 enumera todos los experimentos que realizamos y los conjuntos de servidores réplica utilizados. Los resultados en la Figura 8(a) muestran que el uso de tecnologías de coallocation no produjo ninguna mejora para tamaños de archivo más pequeños como 10MB. También muestran que en la mayoría de los casos, el rendimiento general aumentó a medida que aumentaba el número de flujos coasignados. Observamos que para nuestro banco de pruebas y nuestra tecnología de coasignación, el rendimiento general alcanzó su valor más alto en el caso REC3_2. Sin embargo, en el caso REC4, cuando agregamos un flujo al conjunto de servidores réplica, el rendimiento no aumentó. Por el contrario, disminuyó. Podemos inferir que la eficiencia de coasignación alcanzó la saturación en el caso REC3_2, y que flujos adicionales causaron sobrecarga adicional y redujeron el rendimiento general. Esto significa que más flujos de descarga no necesariamente resultan en un rendimiento más alto. Debemos elegir un número adecuado de flujos para lograr un rendimiento óptimo. Mostramos la vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4 en la Figura 8(b). El costo detallado consiste en el tiempo de autenticación, tiempo de transferencia y tiempo de combinación. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de finalización (seg) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 7. Tiempos de finalización para varios métodos; los servidores están en PU, DL y HIT. Tabla 2. Los conjuntos de servidores réplica para todos los casos son: Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 8. (a) Rendimientos generales para varios conjuntos de servidores. (b) Vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4. 7. CONCLUSIONES La arquitectura de coasignación proporciona un agente coordinado para asignar bloques de datos. Un trabajo previo mostró que el esquema de co-asignación dinámica conduce a mejoras en el rendimiento. Sin embargo, no puede manejar el tiempo de inactividad de los servidores más rápidos, que deben esperar a que el servidor más lento entregue su bloque final. Propusimos el esquema de Co-Asignación Recursiva-Ajustable para mejorar el rendimiento de transferencia de datos utilizando la arquitectura de co-asignación en [17]. En este enfoque, las cargas de trabajo de los servidores de réplica seleccionados se ajustan continuamente durante las transferencias de datos, y proporcionamos una función que permite a los usuarios definir un umbral final de bloque 803, de acuerdo con su entorno de cuadrícula de datos. Los resultados experimentales muestran la efectividad de nuestra técnica propuesta en mejorar el tiempo de transferencia y reducir el tiempo total de inactividad esperando al servidor más lento. También discutimos el costo de recombinación y proporcionamos un esquema efectivo para reducirlo. 8. REFERENCIAS [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Gestión y Transferencia de Datos en Entornos de Redes Computacionales de Alto Rendimiento, Computación Paralela, 28(5):749-771, mayo de 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Transporte de Datos Seguro y Eficiente y Gestión de Réplicas para la Computación de Alto Rendimiento con Datos Intensivos, Actas del Decimoctavo Simposio IEEE sobre Sistemas y Tecnologías de Almacenamiento Masivo, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I. Foster, A. Chervenak y C. Kesselman. Protocolos y Servicios para la Ciencia de Datos Intensivos Distribuidos. Actas de ACAT2000, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I. Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt y M. Ripeanu, Giggle: Un marco para la construcción de servicios de ubicación de réplicas escalables, Actas de SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I. Foster, C. Kesselman, C. Salisbury y S. Tuecke, La Data Grid: Hacia una arquitectura para la gestión distribuida y análisis de grandes conjuntos de datos científicos, Revista de Aplicaciones de Redes y Computadoras, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I. Foster y C. Kesselman, Servicios de Información de Grid para Compartir Recursos Distribuidos, Actas del Décimo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-1001), 181-194, agosto de 2001. [7] K. Czajkowski, I. Foster y C. Kesselman. Coasignación de recursos en rejillas computacionales, Actas del Octavo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-899), agosto de 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz y M. Sgaravatto, Prototipo 1 de DataGrid, Conferencia de Redes de TERENA, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, junio de 2002, [9] I. Foster, C. Kesselman y S. Tuecke. La Anatomía de la Red: Permitiendo Organizaciones Virtuales Escalables. Int. Revista de Aplicaciones de Supercomputadoras y Computación de Alto Rendimiento, 15(3), pp. 200-222, 2001. [10] I. Foster y C. Kesselman, Globus: Un conjunto de herramientas de infraestructura de metacomputación, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger y K. Stockinger, Gestión de datos en un Proyecto Internacional de Grid de Datos, Proc. del Primer Taller Internacional de Grid Computing IEEE/ACM - Grid 2000, Bangalore, India, diciembre de 2000. [13] IBM Red Books, Introducción a la Computación en Grid con Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I. Foster, K. Holtman y B. Tierney, Replicación de archivos y objetos en rejillas de datos, Journal of Cluster Computing, 5(3):305-314, 2002. [15] Página de inicio de utilidades SYSSTAT, http://perso.wanadoo.fr/sebastien.godard/ [16] La Alianza Globus, http://www.globus.org/ [17] S. Vazhkudai, Facilitando la coasignación de transferencias de datos en rejillas, Proc. del Cuarto Taller Internacional sobre Computación en Rejilla, pp. 41-51, noviembre de 2003. [18] S. Vazhkudai y J. Schopf, Uso de técnicas de regresión para predecir grandes transferencias de datos, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, agosto de 2003. [19] S. Vazhkudai, S. Tuecke e I. Foster, Selección de réplicas en la malla de datos de Globus, Actas del 1er Simposio Internacional sobre Computación en Clúster y la Malla (CCGRID 2001), pp. 106-113, mayo de 2001. [20] S. Vazhkudai, J. Schopf, Predicción de transferencias de datos esporádicas en la malla, Actas del 11º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-11 02), pp. 188-196, julio de 2002. [21] S. Vazhkudai, J. Schopf e I. Foster, Prediciendo el rendimiento de transferencias de datos de amplia área, Actas del 16º Simposio Internacional de Procesamiento Paralelo y Distribuido (IPDPS 2002), pp. 34-43, abril de 2002, pp. 34-43. [22] R. Wolski, N. Spring y J. Hayes, El Servicio de Pronóstico del Tiempo de Red: Un Servicio de Pronóstico de Rendimiento de Recursos Distribuidos para Metacomputación, Sistemas Informáticos de Generación Futura, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li y Ching-Hsien Hsu, Análisis de rendimiento de la aplicación de tecnología de selección de réplicas para entornos de Grid de Datos, PaCT 2005, Notas de Conferencias en Ciencias de la Computación, vol. 3603, pp. 278-287, Springer-Verlag, septiembre de 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li y ChingHsien Hsu, Un Esquema de Co-Asignación Recursiva en Entornos de Grid de Datos, ICA3PP 2005 Algoritmo y Arquitectura para Procesamiento Paralelo, Notas de Conferencias en Ciencias de la Computación, vol. 3719, pp. 40-49, Springer-Verlag, octubre de 2005. [25] X. Zhang, J. Freschl y J. Schopf, Un Estudio de Rendimiento de Servicios de Monitoreo e Información para Sistemas Distribuidos, Actas del 12º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-12 03), pp. 270-282, agosto de 2003. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "replica": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient <br>replica</br> Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among <br>replica</br> servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several <br>replica</br> locations may result in varied performance rates, because the <br>replica</br> sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best <br>replica</br> locations using <br>replica</br> selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among <br>replica</br> servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient <br>replica</br> selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 <br>replica</br> Management <br>replica</br> management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a <br>replica</br> manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A <br>replica</br> manager typically maintains a <br>replica</br> catalog containing replica site addresses and the file instances.",
                "The <br>replica</br> management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The <br>replica</br> management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A <br>replica</br> or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of <br>replica</br> management. 2.1.2 <br>replica</br> Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The <br>replica</br> catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the <br>replica</br> catalog for each logical file in a collection.",
                "A Data Grid may contain multiple <br>replica</br> catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a <br>replica</br> catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of <br>replica</br> catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the <br>replica</br> manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 <br>replica</br> Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the <br>replica</br> selection problem.",
                "The common process of <br>replica</br> selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a <br>replica</br> according to its specific attributes.",
                "<br>replica</br> selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the <br>replica</br> to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and <br>replica</br> management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called <br>replica</br> catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The <br>replica</br> catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets <br>replica</br> locations from information services [6] and <br>replica</br> management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate <br>replica</br> locations are passed to a <br>replica</br> selection service [19], which was presented in a previous work [23].",
                "This <br>replica</br> selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A <br>replica</br> Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help <br>replica</br> selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a <br>replica</br> selection cost model and a <br>replica</br> selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT <br>replica</br> SELECTION SERVICE We constructed a <br>replica</br> selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 <br>replica</br> Selection Scenario Our proposed <br>replica</br> selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the <br>replica</br> catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of <br>replica</br> locations to a <br>replica</br> selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The <br>replica</br> selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The <br>replica</br> selection server chooses better <br>replica</br> locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect <br>replica</br> selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our <br>replica</br> Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the <br>replica</br> the user or application wants.",
                "The seven system parameters our <br>replica</br> selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a <br>replica</br> from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each <br>replica</br> servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the <br>replica</br> selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected <br>replica</br> servers.",
                "Assuming n <br>replica</br> servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected <br>replica</br> servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each <br>replica</br> server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single <br>replica</br> server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of <br>replica</br> servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of <br>replica</br> servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of <br>replica</br> servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of <br>replica</br> servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected <br>replica</br> servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and <br>replica</br> Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable <br>replica</br> Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, <br>replica</br> Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying <br>replica</br> Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient <br>replica</br> Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among <br>replica</br> servers.",
                "Downloading large datasets from several <br>replica</br> locations may result in varied performance rates, because the <br>replica</br> sites may have different architectures, system loadings, and network connectivity.",
                "One way to improve download speeds is to determine the best <br>replica</br> locations using <br>replica</br> selection techniques [19].",
                "Therefore, it is important to reduce the differences in finishing time among <br>replica</br> servers."
            ],
            "translated_annotated_samples": [
                "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C.",
                "Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los <br>servidores réplica</br>.",
                "Descargar grandes conjuntos de datos desde varias ubicaciones de <br>réplica</br> puede resultar en tasas de rendimiento variadas, ya que los sitios de <br>réplica</br> pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes.",
                "Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de <br>réplicas</br> utilizando técnicas de selección de <br>réplicas</br> [19].",
                "Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los <br>servidores réplica</br>."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los <br>servidores réplica</br>. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de <br>réplica</br> puede resultar en tasas de rendimiento variadas, ya que los sitios de <br>réplica</br> pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de <br>réplicas</br> utilizando técnicas de selección de <br>réplicas</br> [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque. Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los <br>servidores réplica</br>. ",
            "candidates": [],
            "error": [
                [
                    "servidores réplica",
                    "réplica",
                    "réplica",
                    "réplicas",
                    "réplicas",
                    "servidores réplica"
                ]
            ]
        },
        "co-allocation strategy": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic <br>co-allocation strategy</br> divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic <br>co-allocation strategy</br> presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC <br>co-allocation strategy</br> Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment <br>co-allocation strategy</br>.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "The Conservative Load Balancing dynamic <br>co-allocation strategy</br> divides requested datasets into k disjoint blocks of equal size.",
                "The Aggressive Load Balancing dynamic <br>co-allocation strategy</br> presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "DYNAMIC <br>co-allocation strategy</br> Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment <br>co-allocation strategy</br>."
            ],
            "translated_annotated_samples": [
                "La <br>estrategia de coasignación</br> dinámica de equilibrio de carga conservadora divide los conjuntos de datos solicitados en k bloques disjuntos de tamaño igual.",
                "La <br>estrategia de co-asignación</br> dinámica de equilibrio de carga agresiva presentada en [17] añade funciones que modifican las entregas de tamaño de bloque al: (1) aumentar progresivamente las cantidades de datos solicitadas a servidores más rápidos, y (2) reducir las cantidades de datos solicitadas a servidores más lentos o dejar de solicitar datos de ellos por completo.",
                "ESTRATEGIA DE COASIGNACIÓN DINÁMICA La coasignación dinámica, descrita anteriormente, es el enfoque más eficiente para reducir la influencia de las variaciones de red entre clientes y servidores.",
                "RESULTADOS EXPERIMENTALES Y ANÁLISIS En esta sección, discutimos el rendimiento de nuestra <br>estrategia de Co-Asignación</br> Recursiva de Ajuste."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque. Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de transferencia de datos de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la transferencia de datos [24]. Los resultados experimentales muestran que nuestro enfoque es superior a los métodos anteriores y logró el mejor rendimiento general. También discutimos el costo de combinación y proporcionamos un esquema efectivo para reducirlo. El resto de este documento está organizado de la siguiente manera. La revisión de antecedentes relacionados y estudios se presentan en la Sección 2 y la arquitectura de co-asignación y trabajos relacionados se introducen en la Sección 3. En la Sección 4, proponemos un servicio eficiente de selección de réplicas. Nuestros enfoques de investigación se describen en la Sección 5, y los resultados experimentales y una evaluación del rendimiento de nuestro esquema se presentan en la Sección 6. La sección 7 concluye este documento de investigación. ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico). El término Data Grid tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes. Las Rejillas de Datos [1, 2, 16] federan una gran cantidad de recursos de almacenamiento. Grandes colecciones de datos medidos o calculados están surgiendo como recursos importantes en muchas aplicaciones intensivas en datos. 2.1.1 Gestión de Réplicas La gestión de réplicas implica la creación o eliminación de réplicas en un sitio de cuadrícula de datos [19]. En otras palabras, el rol de un administrador de réplicas es crear o eliminar réplicas, dentro de sistemas de almacenamiento especificados. La mayoría de las veces, estas réplicas son copias exactas de los archivos originales, creadas solo para aprovechar ciertos beneficios de rendimiento. Un administrador de réplicas generalmente mantiene un catálogo de réplicas que contiene las direcciones de los sitios de réplica y las instancias de archivos. El servicio de gestión de réplicas es responsable de administrar la replicación de copias completas y parciales de conjuntos de datos, definidos como colecciones de archivos. El servicio de gestión de réplicas es solo un componente en un entorno de Data Grid que brinda soporte para aplicaciones de alto rendimiento y alta intensidad de datos. Una réplica o ubicación es un subconjunto de una colección que se almacena en un sistema de almacenamiento físico particular. Puede haber múltiples subconjuntos posiblemente superpuestos de una colección almacenados en múltiples sistemas de almacenamiento en una Rejilla de Datos. Estos sistemas de almacenamiento en red pueden utilizar una variedad de tecnologías de almacenamiento subyacentes y protocolos de movimiento de datos, que son independientes de la gestión de réplicas. 2.1.2 Catálogo de Réplicas Como se mencionó anteriormente, el propósito del catálogo de réplicas es proporcionar mapeos entre nombres lógicos de archivos o colecciones y una o más copias de los objetos en sistemas de almacenamiento físico. El catálogo de réplicas incluye entradas opcionales que describen archivos lógicos individuales. Los archivos lógicos son entidades con nombres globalmente únicos que pueden tener una o más instancias físicas. El catálogo puede contener opcionalmente una entrada de archivo lógico en el catálogo de réplicas para cada archivo lógico en una colección. Una cuadrícula de datos puede contener múltiples catálogos de réplicas. Por ejemplo, una comunidad de investigadores interesados en un tema de investigación particular podría mantener un catálogo de réplicas para una colección de conjuntos de datos de interés mutuo. Es posible crear jerarquías de catálogos de réplicas para imponer una estructura similar a la de un directorio en colecciones lógicas relacionadas. Además, el administrador de réplicas puede realizar control de acceso en catálogos completos, así como en archivos lógicos individuales. 2.1.3 Selección de Réplicas El propósito de la selección de réplicas [16] es seleccionar una réplica entre los sitios que constituyen una Data Grid [19]. Los criterios de selección dependen de las características de la aplicación. Al utilizar este mecanismo, los usuarios de la Data Grid pueden gestionar fácilmente réplicas de conjuntos de datos en sus sitios, con un mejor rendimiento. Se ha dedicado mucho esfuerzo previo al problema de selección de réplicas. El proceso común de selección de réplicas consta de tres pasos: preparación de datos, preprocesamiento y predicción. Entonces, las aplicaciones pueden seleccionar una réplica según sus atributos específicos. La selección de réplicas es importante para aplicaciones intensivas en datos, y puede proporcionar transparencia de ubicación. Cuando un usuario solicita acceso a un conjunto de datos, el sistema determina una forma apropiada de entregar la réplica al usuario. 2.2 Globus Toolkit y GridFTP El Proyecto Globus [9, 11, 16] proporciona herramientas de software colectivamente llamadas El Kit de Herramientas Globus que facilita la construcción de Grids computacionales y aplicaciones basadas en Grid. Muchas organizaciones utilizan la Herramienta Globus para construir Grillas computacionales que apoyen sus aplicaciones. La composición del Globus Toolkit se puede visualizar como tres pilares: Gestión de Recursos, Servicios de Información y Gestión de Datos. Cada pilar representa un componente principal del Globus Toolkit y hace uso de una base común de seguridad. GRAM implementa un protocolo de gestión de recursos, MDS implementa un protocolo de servicios de información y GridFTP implementa un protocolo de transferencia de datos. Todos utilizan el protocolo de seguridad GSI en la capa de conexión [10, 11, 16, 13]. La alianza Globus propuso un protocolo común de transferencia y acceso de datos llamado GridFTP que proporciona un movimiento seguro y eficiente de datos en entornos de Grid. Este protocolo, que extiende el protocolo estándar FTP, proporciona un superconjunto de las características ofrecidas por los diversos sistemas de almacenamiento en red actualmente en uso. Para resolver los problemas que surgen, la comunidad de Data Grid intenta desarrollar un mecanismo seguro y eficiente de transporte de datos y servicios de gestión de réplicas. GridFTP es un protocolo de transporte de datos confiable, seguro y eficiente que se desarrolló como parte del proyecto Globus. Hay otra tecnología clave del proyecto Globus, llamada catálogo de réplicas [16], que se utiliza para registrar y gestionar copias completas y parciales de conjuntos de datos. El catálogo de réplicas contiene la información de mapeo de un archivo lógico o colección a uno o más archivos físicos. 2.3 Servicio Meteorológico de Red El Servicio Meteorológico de Red (NWS) [22] es un sistema de monitoreo generalizado y distribuido para producir pronósticos de rendimiento a corto plazo basados en mediciones de rendimiento históricas. El objetivo del sistema es caracterizar y predecir dinámicamente el rendimiento entregable a nivel de aplicación a partir de un conjunto de recursos de red y computacionales. Una instalación típica implica un nws_nameserver, uno o más nws_memory (que pueden residir en máquinas diferentes) y un nws_sensor ejecutándose en cada máquina con los recursos que se van a monitorear. El sistema incluye sensores para el rendimiento TCP/IP de extremo a extremo (ancho de banda y latencia), porcentaje de CPU disponible y memoria no paginada disponible. 798 2.4 Utilidades Sysstat Las utilidades Sysstat [15] son un conjunto de herramientas de monitoreo de rendimiento para el sistema operativo Linux. El paquete Sysstat incorpora los comandos sar, mpstat e iostat. El comando sar recopila y reporta información de actividad del sistema, la cual también puede ser guardada en un archivo de actividad del sistema para inspección futura. El comando iostat informa estadísticas de la CPU y estadísticas de E/S para dispositivos tty y discos. Las estadísticas reportadas por SAR se refieren a tasas de transferencia de E/S, actividad de paginación, actividades relacionadas con procesos, interrupciones, actividad de red, utilización de memoria y espacio de intercambio, utilización de CPU, actividades del kernel y estadísticas de TTY, entre otros. Las máquinas Uniprocessor (UP) y Symmetric multiprocessor (SMP) son totalmente compatibles. 3. La arquitectura de co-asignación propuesta en [17] consta de tres componentes principales: un servicio de información, un intermediario/co-asignador y sistemas de almacenamiento locales. La Figura 1 muestra la co-asignación de transferencias de datos de la red, que es una extensión de la plantilla básica para la gestión de recursos [7] proporcionada por Globus Toolkit. Las aplicaciones especifican las características de los datos deseados y envían la descripción de los atributos a un intermediario. El corredor consulta los recursos disponibles y obtiene las ubicaciones de réplicas de los servicios de información [6] y los servicios de gestión de réplicas [19], y luego obtiene una lista de ubicaciones físicas para los archivos deseados. Figura 1. La arquitectura de coasignación de cuadrícula de datos [17] pasa las ubicaciones candidatas de réplicas a un servicio de selección de réplicas [19], que fue presentado en un trabajo previo [23]. Este servicio de selección de réplicas proporciona estimaciones del rendimiento de transferencia de candidatos basadas en un modelo de costos y elige las cantidades apropiadas para solicitar a las ubicaciones más adecuadas. El agente de coasignación luego descarga los datos en paralelo desde los servidores seleccionados. En estas investigaciones, se utilizó GridFTP [1, 11, 16] para habilitar transferencias de datos en paralelo. GridFTP es un protocolo de transferencia de datos de alto rendimiento, seguro y confiable, optimizado para redes de área amplia de alta velocidad de banda ancha. Entre sus muchas características se encuentran la seguridad, los flujos paralelos, las transferencias de archivos parciales, las transferencias de terceros y los canales de datos reutilizables. Su capacidad de transferencia parcial de archivos permite recuperar archivos de servidores de datos especificando los desplazamientos de inicio y fin de las secciones de archivos. Las rejillas de datos consisten en recursos informáticos y de almacenamiento dispersos ubicados en diferentes países/regiones pero accesibles para los usuarios [8]. En este estudio utilizamos el middleware de cuadrícula Globus Toolkit [16] como infraestructura de la cuadrícula de datos. El Globus Toolkit proporciona soluciones para consideraciones como seguridad, gestión de recursos, gestión de datos y servicios de información. Uno de sus componentes principales es MDS [6, 11, 16, 25], el cual está diseñado para proporcionar un mecanismo estándar para descubrir y publicar información sobre el estado y la configuración de recursos. Proporciona una interfaz uniforme y flexible para los datos recopilados por proveedores de información de nivel inferior en dos modos: estáticos (por ejemplo, sistemas operativos, tipos de CPU y arquitecturas de sistemas) y datos dinámicos (por ejemplo, disponibilidad de disco, disponibilidad de memoria y carga). Y utiliza GridFTP [1, 11, 16], un protocolo de transporte de datos confiable, seguro y eficiente para proporcionar una gestión eficiente y transferencia de terabytes o petabytes de datos en un entorno de recursos distribuidos de amplia área. A medida que los conjuntos de datos se replican dentro de entornos de Grid para fiabilidad y rendimiento, los clientes requieren la capacidad de descubrir réplicas de datos existentes, y crear y registrar nuevas réplicas. Un Servicio de Localización de Réplicas (RLS) proporciona un mecanismo para descubrir y registrar réplicas existentes. Se han desarrollado varios métricas de predicción para ayudar en la selección de réplicas. Por ejemplo, Vazhkudai y Schopf [18, 20, 21] utilizaron historiales de transferencia de datos pasados para estimar las velocidades actuales de transferencia de datos. En nuestro trabajo previo [23, 24], propusimos un modelo de costo de selección de réplicas y un servicio de selección de réplicas para llevar a cabo la selección de réplicas. En [17], el autor propone una arquitectura de coasignación para coasignar transferencias de datos de Grid a través de múltiples conexiones, aprovechando la función de copia parcial de GridFTP. También proporciona Balanceo de Carga por Fuerza Bruta, Basado en Historial y Dinámico para asignar bloques de datos. Coasignación por Fuerza Bruta: La coasignación por Fuerza Bruta funciona dividiendo el tamaño del archivo de manera equitativa entre los flujos disponibles. No aborda las diferencias de ancho de banda entre los distintos enlaces cliente-servidor. Coasignación basada en historial: El esquema de coasignación basado en historial mantiene los tamaños de bloque por flujo proporcionales a las tasas de transferencia predichas. Balanceo de carga conservador: Uno de sus métodos de coasignación dinámica es el Balanceo de Carga Conservador. La <br>estrategia de coasignación</br> dinámica de equilibrio de carga conservadora divide los conjuntos de datos solicitados en k bloques disjuntos de tamaño igual. Los servidores disponibles se asignan bloques individuales para entregar en paralelo. Cuando un servidor termina de entregar un bloque, se solicita otro, y así sucesivamente, hasta que se descarga el archivo completo. Las cargas en los flujos coasignados se ajustan automáticamente porque los servidores más rápidos entregarán más rápidamente proporcionando porciones más grandes del archivo. Equilibrio de carga agresivo: Otra estrategia dinámica de colocación conjunta, presentada en [17], es el Equilibrio de carga agresivo. La <br>estrategia de co-asignación</br> dinámica de equilibrio de carga agresiva presentada en [17] añade funciones que modifican las entregas de tamaño de bloque al: (1) aumentar progresivamente las cantidades de datos solicitadas a servidores más rápidos, y (2) reducir las cantidades de datos solicitadas a servidores más lentos o dejar de solicitar datos de ellos por completo. Las estrategias de coasignación descritas anteriormente no solucionan la limitación de que los servidores más rápidos tengan que esperar a que el servidor más lento entregue su último bloque. En la mayoría de los casos, esto desperdicia mucho tiempo y disminuye el rendimiento general. Por lo tanto, proponemos un enfoque eficiente llamado Recursivo-Ajuste Co-Asignación y basado en una arquitectura de co-asignación. Mejora la co-asignación dinámica y reduce el tiempo de espera, mejorando así el rendimiento general de la transferencia. Un SERVICIO DE SELECCIÓN DE RÉPLICAS EFICIENTE Construimos un servicio de selección de réplicas para permitir a los clientes seleccionar los servidores de réplicas mejores en entornos de Data Grid. Consulte a continuación para obtener una descripción detallada. 4.1 Escenario de Selección de Réplicas Nuestro modelo propuesto de selección de réplicas se ilustra en [23], que muestra cómo un cliente identifica la mejor ubicación para una transferencia de réplica deseada. El cliente primero inicia sesión en un sitio local y ejecuta la aplicación de la plataforma Data Grid, la cual verifica si los archivos están disponibles en el sitio local. Si están presentes en el sitio local, la aplicación accede a ellos inmediatamente; de lo contrario, pasa los nombres de archivo lógicos al servidor del catálogo de réplicas, que devuelve una lista de ubicaciones físicas para todas las copias registradas. La aplicación envía esta lista de ubicaciones de réplicas a un servidor de selección de réplicas, que identifica las ubicaciones de destino del sistema de almacenamiento para todas las operaciones de transferencia de datos candidatas. El servidor de selección de réplicas envía las posibles ubicaciones de destino al servidor de información, el cual proporciona mediciones de rendimiento y predicciones de los tres factores del sistema descritos a continuación. El servidor de selección de réplicas elige mejores ubicaciones de réplicas según estas estimaciones y devuelve la información de ubicación a la aplicación de transferencia, la cual recibe la réplica a través de GridFTP. Cuando la aplicación finaliza, devuelve los resultados al usuario. 4.2 Factores del sistema Determinar la mejor base de datos entre muchas con las mismas réplicas es un problema significativo. En nuestro modelo, consideramos tres factores del sistema que afectan la selección de réplicas: Ancho de banda de red: Este es uno de los factores más significativos de Data Grid ya que los archivos de datos en entornos de Data Grid suelen ser muy grandes. En otras palabras, los tiempos de transferencia de archivos de datos dependen estrechamente de las situaciones de ancho de banda de la red. Debido a que el ancho de banda de la red es un factor dinámico inestable, debemos medirlo con frecuencia y predecirlo de la manera más precisa posible. El Servicio Meteorológico de Red (NWS) es una herramienta poderosa para este propósito. Carga de la CPU: Las plataformas de cuadrícula consisten en números de sistemas heterogéneos, construidos con diferentes arquitecturas de sistema, por ejemplo, plataformas de clúster, supercomputadoras, PC. La carga de la CPU es un factor del sistema dinámico, y una carga pesada en la CPU del sistema afectará sin duda el proceso de descarga de archivos de datos desde el sitio. La medición se realiza mediante el Toolkit Globus / MDS. Estado de E/S: Los nodos de la cuadrícula de datos consisten en diferentes sistemas de almacenamiento heterogéneos. Los archivos de datos en las redes de datos son enormes. Si el estado de E/S de un sitio del que deseamos descargar archivos está muy ocupado, afectará directamente el rendimiento de la transferencia de datos. Medimos los estados de E/S utilizando las utilidades sysstat [15]. Nuestro Modelo de Costo de Selección de Réplicas La función objetivo de un modelo de costos para el almacenamiento de datos distribuidos y replicados es la puntuación de información del servicio de información. Enumeramos algunos factores influyentes para nuestro modelo de costos en la sección anterior. Sin embargo, debemos expresar estos factores en notación matemática para un análisis más detallado. Suponemos que el nodo i es el sitio local en el que el usuario o la aplicación inicia sesión, y el nodo j posee la réplica que el usuario o la aplicación desea. Los siete parámetros del sistema que considera nuestro modelo de costos de selección de réplicas son: Scorei-j: el valor de puntuación representa qué tan eficientemente un usuario o aplicación en el nodo i puede adquirir una réplica del nodo j BW jiP: porcentaje de ancho de banda disponible del nodo i al nodo j; ancho de banda actual dividido por el ancho de banda teórico más alto BBW: peso del ancho de banda de red definido por el administrador de Data Grid CPU jP: porcentaje de estados de inactividad de la CPU del nodo j WCPU: peso de carga de la CPU definido por el administrador de Data Grid OI jP /: porcentaje de estados de inactividad de E/S del nodo j WI/O: peso del estado de E/S definido por el administrador de Data Grid Definimos la siguiente fórmula general utilizando estos factores del sistema. Los tres factores influyentes en esta fórmula: WBW, WCPU y WI/O describen los pesos de la CPU, E/S y ancho de banda de red, los cuales pueden ser determinados por los administradores de la organización de Data Grid según los diversos atributos de los sistemas de almacenamiento en los nodos de Data Grid, ya que algunos equipos de almacenamiento no afectan la carga de la CPU. Después de varias mediciones experimentales, determinamos que el ancho de banda de la red es el factor más significativo que influye directamente en los tiempos de transferencia de datos. Cuando realizamos transferencias de datos utilizando el protocolo GridFTP, descubrimos que los estados de la CPU y E/S afectan ligeramente el rendimiento de la transferencia de datos. Sus valores respectivos en nuestro entorno de Data Grid son 80%, 10% y 10%. 4.4 Análisis de Costo de Co-Asignación Cuando los clientes descargan conjuntos de datos utilizando la tecnología de co-asignación de GridFTP, se incurre en tres costos de tiempo: el tiempo requerido para la autenticación del cliente en el servidor de GridFTP, el tiempo real de transmisión de datos y el tiempo de reensamblaje de bloques de datos. Tiempo de autenticación: Antes de una transferencia, el cliente debe cargar un proxy de Globus y autenticarse en el servidor GridFTP con las credenciales de usuario especificadas. El cliente luego establece un canal de control, configura los parámetros de transferencia y solicita la creación de un canal de datos. Cuando se ha establecido el canal, los datos comienzan a fluir. Tiempo de transmisión: El tiempo de transmisión se mide desde el momento en que el cliente comienza a transferir hasta el momento en que se completan todos los trabajos de transmisión, e incluye el tiempo requerido para restablecer los canales de datos entre las solicitudes de transferencia. Las vías de datos solo necesitan abrirse una vez y pueden manejar muchas transferencias antes de cerrarse. Esto permite que las mismas vías de datos se utilicen para múltiples transferencias de archivos. Sin embargo, los canales de datos deben reiniciarse explícitamente entre las solicitudes de transferencia. Esto es menos costoso en tiempo. Tiempo de combinación: la arquitectura de coasignación explota la característica de copia parcial de la herramienta de movimiento de datos GridFTP para permitir transferencias de datos a través de múltiples conexiones. Con la transferencia parcial de archivos, se pueden recuperar secciones de archivos de servidores de datos especificando solo los desplazamientos de inicio y fin de la sección. Cuando se entregan estas secciones de archivo, es posible que necesiten ser reensambladas; la operación de reensamblaje conlleva un costo adicional de tiempo. 5. ESTRATEGIA DE COASIGNACIÓN DINÁMICA La coasignación dinámica, descrita anteriormente, es el enfoque más eficiente para reducir la influencia de las variaciones de red entre clientes y servidores. Sin embargo, el tiempo de inactividad de los servidores más rápidos esperando a que el servidor más lento entregue el último bloque sigue siendo un factor importante que afecta la eficiencia general, el cual el Balanceo de Carga Conservador y el Balanceo de Carga Agresivo [17] no pueden evitar de manera efectiva. El enfoque propuesto en el presente documento, un mecanismo de asignación dinámica llamado Coasignación Recursiva-Ajustable, puede superar esto y, por lo tanto, mejorar el rendimiento de transferencia de datos. 5.1 Coasignación Recursiva-Ajustable La Coasignación Recursiva-Ajustable funciona ajustando continuamente la carga de trabajo de cada servidor de réplicas para que corresponda a su ancho de banda en tiempo real durante las transferencias de archivos. El objetivo es hacer que el tiempo de finalización esperado de todos los servidores sea el mismo. Como muestra la Figura 2, cuando se selecciona primero una sección de archivo apropiada, se divide en tamaños de bloque adecuados según los anchos de banda del servidor respectivos. El coasignador luego asigna los bloques a los servidores para la transferencia. En este momento, se espera que el tiempo de finalización de la transferencia sea consistente en E(T1). Sin embargo, dado que los anchos de banda del servidor pueden fluctuar durante las entregas de segmentos, el tiempo real de finalización puede ser diferente (línea sólida, en la Figura 2). Una vez que el servidor más rápido termina su trabajo en el tiempo T1, la siguiente sección se asigna nuevamente a los servidores. Esto permite que cada servidor termine su carga de trabajo asignada para el tiempo esperado en E(T2). Estos ajustes se repiten hasta que se complete la transferencia de todo el archivo. Servidor 1 Servidor 2 Servidor 3 Ronda 1 Ronda 2 E(T1) E(T2)T1 Archivo A Sección 1 Sección 2 ... ... ... Figura 2. El proceso de ajuste del proceso de coasignación recursiva se ilustra en la Figura 3. Cuando un usuario solicita el archivo A, el servicio de selección de réplicas responde con el subconjunto de todos los servidores disponibles definidos por la matriz de rendimiento máximo. El servicio de co-asignación recibe esta lista de servidores réplica seleccionados. Suponiendo que se seleccionan n servidores réplica, Si denota el servidor i tal que 1 i n. Luego se establece una conexión para la descarga de archivos con cada servidor. El proceso de Co-Asignación de Ajuste Recursivo es el siguiente. Una nueva sección de un archivo a asignar es primero definida. El tamaño de la sección, SEj, es: SEj = TamañoArchivoNoAsignado , (0 < < 1) (2) donde SEj denota la sección j tal que 1 ≤ j ≤ k, asumiendo que asignamos k veces para el proceso de descarga. Y así, hay k secciones, mientras que Tj denota el tiempo asignado a la sección j. UnassignedFileSize es la porción del archivo A que aún no se ha distribuido para su descarga; inicialmente, UnassignedFileSize es igual al tamaño total del archivo A. es la tasa que determina cuánto de la sección queda por asignar. Figura 3. El proceso de Co-Asignación de Ajuste Recursivo. En el siguiente paso, SEj se divide en varios bloques y se asigna a n servidores. Cada servidor tiene una tasa de transferencia en tiempo real al cliente de Bi, la cual es medida por el Servicio Meteorológico de Red (NWS) [18]. El tamaño de bloque por flujo desde SEj para cada servidor i en el tiempo Tj es: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) donde UnFinishSizei denota el tamaño de bloques de transferencia no finalizados asignados en rondas anteriores en el servidor i. UnFinishSizei es igual a cero en la primera ronda. Idealmente, dependiendo del ancho de banda en tiempo real en el momento Tj, se espera que cada flujo termine su carga de trabajo en el futuro. Esto cumple con nuestro requisito de minimizar el tiempo que los servidores más rápidos deben esperar a que el servidor más lento termine. Si, en algunos casos, las variaciones en la red degradan considerablemente las tasas de transferencia, UnFinishSizei puede exceder n i ii n i ij BBzeUnFinishSiSE 11 *)(, que es el tamaño total del bloque que se espera transferir después de Tj. En tales casos, el coasignador elimina los servidores de antemano y asigna SEj a otros servidores. Después de la asignación, todos los canales continúan transfiriendo bloques de datos. Cuando un canal más rápido termina sus bloques de datos asignados, el coasignador comienza a asignar nuevamente una sección no asignada del archivo A. El proceso de asignar bloques de datos 801 para ajustar el tiempo de finalización del flujo esperado continúa hasta que se haya asignado todo el archivo. 5.2 Determinar cuándo detener el ajuste continuo Nuestro enfoque obtiene nuevas secciones de archivos completos dividiendo rangos de archivos no asignados en cada ronda de asignación. Estas porciones no asignadas de los rangos de archivo se vuelven más pequeñas después de cada asignación. Dado que el ajuste es continuo, funcionaría como un bucle infinito si no estuviera limitado por una condición de parada. Sin embargo, ¿cuándo es apropiado detener el ajuste continuo? Proporcionamos dos criterios de monitoreo, LeastSize y ExpectFinishedTime, para permitir a los usuarios definir umbrales de parada. Cuando se alcanza un umbral, el servidor de coasignación deja de dividir el resto del archivo y asigna ese resto como la sección final. El criterio LeastSize especifica el archivo más pequeño que queremos procesar, y cuando la porción no asignada de UnassignedFileSize cae por debajo de la especificación de LeastSize, la división se detiene. El criterio ExpectFinishedTime especifica el tiempo restante que se espera que dure la transferencia. Cuando el tiempo de transferencia esperado de la porción no asignada de un archivo cae por debajo del tiempo especificado por ExpectFinishedTime, la división del archivo se detiene. El valor esperado del tiempo de descanso se determina por: 1 n i iBFileSizeUnAssigned (4) Estos dos criterios determinan el tamaño final de la sección asignada. Valores de umbral más altos inducirán menos divisiones y generarán costos de co-asignación más bajos, que incluyen el establecimiento de conexiones, negociación, reensamblaje, etc. Sin embargo, aunque el tiempo total de ajuste de la coalocación puede ser menor, las variaciones de ancho de banda también pueden ejercer más influencia. Por el contrario, valores de umbral más bajos inducirán ajustes más frecuentes en la carga de trabajo del servidor dinámico y, en el caso de mayores fluctuaciones en la red, resultarán en menos diferencias en el tiempo de finalización de la transferencia del servidor. Sin embargo, valores más bajos también aumentarán los tiempos de coasignación, y por lo tanto, aumentarán los costos de coasignación. Por lo tanto, el entorno de internet, los tamaños de archivo transferidos y los costos de coasignación deben considerarse todos al determinar los umbrales óptimos. 5.3 Reducción de la Sobrecarga de Reensamblaje El proceso de reensamblar bloques después de transferencias de datos utilizando tecnología de coasignación resulta en una sobrecarga adicional y disminuye el rendimiento general. El sobrecosto de reensamblaje está relacionado con el tamaño total del bloque, y podría reducirse mediante la actualización de las capacidades del hardware o el uso de algoritmos de software mejores. Proponemos un mecanismo de reensamblaje alternativo eficiente para reducir la sobrecarga de combinación añadida una vez que se han completado todas las transmisiones de bloques. Se diferencia del método convencional en el que el software comienza el ensamblaje después de que todos los bloques hayan sido entregados, comenzando a ensamblar bloques una vez que finalizan las primeras entregas. Por supuesto, esto hace necesario mantener el orden original de división. Estrategias de coasignación como el Balanceo de Carga Conservador y la Coasignación de Ajuste Recursivo producen bloques adicionales durante las transferencias de archivos y pueden beneficiarse al habilitar el reensamblaje durante las transferencias de datos. Si algunos bloques se ensamblan de antemano, el costo de tiempo para ensamblar los bloques restantes después de que todas las transferencias finalicen puede reducirse. 6. RESULTADOS EXPERIMENTALES Y ANÁLISIS En esta sección, discutimos el rendimiento de nuestra <br>estrategia de Co-Asignación</br> Recursiva de Ajuste. Evaluamos cuatro esquemas de coalocación: (1) Fuerza Bruta (Brute), (2) Basado en Historial (History), (3) Balance de Carga Conservador (Conservative) y (4) Coalocación Co-Ajustada Recursiva (Recursive). Analizamos el rendimiento de cada esquema comparando su tiempo de finalización de transferencia y el tiempo total de inactividad que los servidores más rápidos pasaron esperando a que el servidor más lento terminara de entregar el último bloque. También analizamos el rendimiento general en los diferentes casos. Realizamos experimentos de transferencia de datos de gran área utilizando nuestra herramienta cliente GUI de GridFTP. Ejecutamos nuestra herramienta de cliente de co-asignación en nuestra plataforma de pruebas en la Universidad de Tunghai (THU), en la ciudad de Taichung, Taiwán, y obtuvimos archivos de cuatro servidores réplica seleccionados: uno en la Universidad de Providence (PU), uno en la Escuela Secundaria Li-Zen (LZ), uno en la Escuela de Tecnología Hsiuping (HIT) y uno en la Escuela Secundaria Da-Li (DL). Todas estas instituciones están en Taiwán, y cada una está al menos a 10 km de la THU. La Figura 4 muestra nuestro banco de pruebas de la cuadrícula de datos. Nuestros servidores tienen instalado Globus 3.0.2 o una versión superior. Escuela Secundaria THU Li-Zen (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD Escuela Secundaria Da-Li (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figura 4. En nuestro banco de pruebas de Data Grid, en los siguientes experimentos, establecimos = 0.5, el umbral de LeastSize en 10MB, y experimentamos con tamaños de archivo de 10 MB, 50 MB, 100 MB, 500 MB, 1000 MB, 2000 MB y 4000 MB. Para la comparación, medimos el rendimiento del Balanceo de Carga Conservador en cada tamaño utilizando los mismos números de bloques. La Figura 5 muestra una captura de pantalla de nuestra herramienta cliente GridFTP. Esta herramienta de cliente está desarrollada utilizando Java CoG. Permite un desarrollo de aplicaciones más fácil y rápido al fomentar la reutilización colaborativa de código y evitar la duplicación de esfuerzos entre entornos de resolución de problemas, portales científicos, middleware de Grid y pilotos colaborativos. La Tabla 1 muestra las tasas de transmisión promedio entre THU y cada servidor réplica. Estos números fueron obtenidos al transferir archivos de 500MB, 1000MB y 2000MB desde un único servidor réplica utilizando nuestra herramienta cliente GridFTP, y cada número es un promedio de varias ejecuciones. Tabla 1. Tasa de transmisión de extremo a extremo de GridFTP desde THU a varios servidores. Tasa de transmisión promedio del servidor: HIT 61.5 Mbps, LZ 59.5 Mbps, DL 32.1 Mbps, PU 26.7 Mbps. Figura 5. Nuestra herramienta cliente GridFTP analizó el efecto de servidores más rápidos esperando al servidor más lento para entregar el último bloque en cada esquema. La Figura 6(a) muestra el tiempo total de inactividad para diferentes tamaños de archivo. Tenga en cuenta que nuestro esquema de Co-Asignación Recursiva logró mejoras significativas en el rendimiento en comparación con otros esquemas para cada tamaño de archivo. Estos resultados demuestran que nuestro enfoque reduce eficientemente las diferencias en los tiempos de finalización de los servidores. Los resultados experimentales mostrados en la Figura 6(b) indican que nuestro esquema de comenzar la reensamblaje de bloques tan pronto como los primeros bloques han sido entregados completamente reduce el tiempo de combinación, ayudando así a estrategias de co-asignación como el Balance de Carga Conservador y la Co-Asignación de Ajuste Recursivo que producen más bloques durante las transferencias de datos. La Figura 7 muestra los resultados experimentales del tiempo total de finalización en una vista detallada de la estructura de costos. Los servidores estaban en PU, DL y HIT, con el cliente en THU. Las tres primeras barras para cada tamaño de archivo representan el tiempo para descargar el archivo completo desde un único servidor, mientras que las otras barras muestran descargas coasignadas utilizando los tres servidores. Nuestro esquema de coasignación terminó el trabajo más rápido que las otras estrategias de coasignación. Por lo tanto, podemos inferir que las principales ventajas que ofrece nuestra tecnología son tiempos de transmisión y combinación más bajos que otras estrategias de co-asignación. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de espera (seg) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de combinación (seg) Brute3 History3 Conservative3 Recursive3 Figura 6. (a) Tiempos de inactividad para varios métodos; los servidores están en PU, DL y HIT. (b) Tiempos de combinación para varios métodos; los servidores están en PU, DL y HIT. En el siguiente experimento, utilizamos la estrategia de Coasignación Recursiva-Ajustable con varios conjuntos de servidores réplica y medimos el rendimiento general, donde el rendimiento general es: Rendimiento Total = Tamaño del archivo / Tiempo Total de Finalización (5). La Tabla 2 enumera todos los experimentos que realizamos y los conjuntos de servidores réplica utilizados. Los resultados en la Figura 8(a) muestran que el uso de tecnologías de coallocation no produjo ninguna mejora para tamaños de archivo más pequeños como 10MB. También muestran que en la mayoría de los casos, el rendimiento general aumentó a medida que aumentaba el número de flujos coasignados. Observamos que para nuestro banco de pruebas y nuestra tecnología de coasignación, el rendimiento general alcanzó su valor más alto en el caso REC3_2. Sin embargo, en el caso REC4, cuando agregamos un flujo al conjunto de servidores réplica, el rendimiento no aumentó. Por el contrario, disminuyó. Podemos inferir que la eficiencia de coasignación alcanzó la saturación en el caso REC3_2, y que flujos adicionales causaron sobrecarga adicional y redujeron el rendimiento general. Esto significa que más flujos de descarga no necesariamente resultan en un rendimiento más alto. Debemos elegir un número adecuado de flujos para lograr un rendimiento óptimo. Mostramos la vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4 en la Figura 8(b). El costo detallado consiste en el tiempo de autenticación, tiempo de transferencia y tiempo de combinación. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de finalización (seg) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 7. Tiempos de finalización para varios métodos; los servidores están en PU, DL y HIT. Tabla 2. Los conjuntos de servidores réplica para todos los casos son: Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 8. (a) Rendimientos generales para varios conjuntos de servidores. (b) Vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4. 7. CONCLUSIONES La arquitectura de coasignación proporciona un agente coordinado para asignar bloques de datos. Un trabajo previo mostró que el esquema de co-asignación dinámica conduce a mejoras en el rendimiento. Sin embargo, no puede manejar el tiempo de inactividad de los servidores más rápidos, que deben esperar a que el servidor más lento entregue su bloque final. Propusimos el esquema de Co-Asignación Recursiva-Ajustable para mejorar el rendimiento de transferencia de datos utilizando la arquitectura de co-asignación en [17]. En este enfoque, las cargas de trabajo de los servidores de réplica seleccionados se ajustan continuamente durante las transferencias de datos, y proporcionamos una función que permite a los usuarios definir un umbral final de bloque 803, de acuerdo con su entorno de cuadrícula de datos. Los resultados experimentales muestran la efectividad de nuestra técnica propuesta en mejorar el tiempo de transferencia y reducir el tiempo total de inactividad esperando al servidor más lento. También discutimos el costo de recombinación y proporcionamos un esquema efectivo para reducirlo. 8. REFERENCIAS [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Gestión y Transferencia de Datos en Entornos de Redes Computacionales de Alto Rendimiento, Computación Paralela, 28(5):749-771, mayo de 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Transporte de Datos Seguro y Eficiente y Gestión de Réplicas para la Computación de Alto Rendimiento con Datos Intensivos, Actas del Decimoctavo Simposio IEEE sobre Sistemas y Tecnologías de Almacenamiento Masivo, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I. Foster, A. Chervenak y C. Kesselman. Protocolos y Servicios para la Ciencia de Datos Intensivos Distribuidos. Actas de ACAT2000, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I. Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt y M. Ripeanu, Giggle: Un marco para la construcción de servicios de ubicación de réplicas escalables, Actas de SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I. Foster, C. Kesselman, C. Salisbury y S. Tuecke, La Data Grid: Hacia una arquitectura para la gestión distribuida y análisis de grandes conjuntos de datos científicos, Revista de Aplicaciones de Redes y Computadoras, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I. Foster y C. Kesselman, Servicios de Información de Grid para Compartir Recursos Distribuidos, Actas del Décimo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-1001), 181-194, agosto de 2001. [7] K. Czajkowski, I. Foster y C. Kesselman. Coasignación de recursos en rejillas computacionales, Actas del Octavo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-899), agosto de 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz y M. Sgaravatto, Prototipo 1 de DataGrid, Conferencia de Redes de TERENA, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, junio de 2002, [9] I. Foster, C. Kesselman y S. Tuecke. La Anatomía de la Red: Permitiendo Organizaciones Virtuales Escalables. Int. Revista de Aplicaciones de Supercomputadoras y Computación de Alto Rendimiento, 15(3), pp. 200-222, 2001. [10] I. Foster y C. Kesselman, Globus: Un conjunto de herramientas de infraestructura de metacomputación, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger y K. Stockinger, Gestión de datos en un Proyecto Internacional de Grid de Datos, Proc. del Primer Taller Internacional de Grid Computing IEEE/ACM - Grid 2000, Bangalore, India, diciembre de 2000. [13] IBM Red Books, Introducción a la Computación en Grid con Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I. Foster, K. Holtman y B. Tierney, Replicación de archivos y objetos en rejillas de datos, Journal of Cluster Computing, 5(3):305-314, 2002. [15] Página de inicio de utilidades SYSSTAT, http://perso.wanadoo.fr/sebastien.godard/ [16] La Alianza Globus, http://www.globus.org/ [17] S. Vazhkudai, Facilitando la coasignación de transferencias de datos en rejillas, Proc. del Cuarto Taller Internacional sobre Computación en Rejilla, pp. 41-51, noviembre de 2003. [18] S. Vazhkudai y J. Schopf, Uso de técnicas de regresión para predecir grandes transferencias de datos, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, agosto de 2003. [19] S. Vazhkudai, S. Tuecke e I. Foster, Selección de réplicas en la malla de datos de Globus, Actas del 1er Simposio Internacional sobre Computación en Clúster y la Malla (CCGRID 2001), pp. 106-113, mayo de 2001. [20] S. Vazhkudai, J. Schopf, Predicción de transferencias de datos esporádicas en la malla, Actas del 11º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-11 02), pp. 188-196, julio de 2002. [21] S. Vazhkudai, J. Schopf e I. Foster, Prediciendo el rendimiento de transferencias de datos de amplia área, Actas del 16º Simposio Internacional de Procesamiento Paralelo y Distribuido (IPDPS 2002), pp. 34-43, abril de 2002, pp. 34-43. [22] R. Wolski, N. Spring y J. Hayes, El Servicio de Pronóstico del Tiempo de Red: Un Servicio de Pronóstico de Rendimiento de Recursos Distribuidos para Metacomputación, Sistemas Informáticos de Generación Futura, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li y Ching-Hsien Hsu, Análisis de rendimiento de la aplicación de tecnología de selección de réplicas para entornos de Grid de Datos, PaCT 2005, Notas de Conferencias en Ciencias de la Computación, vol. 3603, pp. 278-287, Springer-Verlag, septiembre de 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li y ChingHsien Hsu, Un Esquema de Co-Asignación Recursiva en Entornos de Grid de Datos, ICA3PP 2005 Algoritmo y Arquitectura para Procesamiento Paralelo, Notas de Conferencias en Ciencias de la Computación, vol. 3719, pp. 40-49, Springer-Verlag, octubre de 2005. [25] X. Zhang, J. Freschl y J. Schopf, Un Estudio de Rendimiento de Servicios de Monitoreo e Información para Sistemas Distribuidos, Actas del 12º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-12 03), pp. 270-282, agosto de 2003. ",
            "candidates": [],
            "error": [
                [
                    "estrategia de coasignación",
                    "estrategia de co-asignación",
                    "estrategia de Co-Asignación"
                ]
            ]
        },
        "server": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-<br>server</br> links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest <br>server</br> to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest <br>server</br> and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-<br>server</br> cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest <br>server</br> to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest <br>server</br> and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-<br>server</br> links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a <br>server</br> finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest <br>server</br> to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog <br>server</br>, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection <br>server</br>, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The replica selection <br>server</br> sends the possible destination locations to the information <br>server</br>, which provides performance measurements and predictions of the three system factors described below.",
                "The replica selection <br>server</br> chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP <br>server</br>, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP <br>server</br> with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest <br>server</br> to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective <br>server</br> bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since <br>server</br> bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest <br>server</br> finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each <br>server</br> to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "<br>server</br> 1 <br>server</br> 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes <br>server</br> i such that 1 i n. A connection for file downloading is then built to each <br>server</br>.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each <br>server</br> has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each <br>server</br> i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at <br>server</br> i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest <br>server</br> to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation <br>server</br> stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic <br>server</br> workload adjustments and, in the case of greater network fluctuations, result in fewer differences in <br>server</br> transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest <br>server</br> to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica <br>server</br>.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica <br>server</br> using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers <br>server</br> Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest <br>server</br> to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single <br>server</br>, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest <br>server</br> to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest <br>server</br>.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-<br>server</br> links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest <br>server</br> to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "Our approach reduces the idle time spent waiting for the slowest <br>server</br> and decreases data transfer completion time.",
                "This can improve the performance compared to the single-<br>server</br> cases and alleviate the internet congestion problem [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest <br>server</br> to deliver its final block."
            ],
            "translated_annotated_samples": [
                "Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces <br>cliente-servidor</br> y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales.",
                "Sin embargo, un obstáculo importante, el tiempo de inactividad de los <br>servidor</br>es más rápidos que tienen que esperar al <br>servidor</br> más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica.",
                "Nuestro enfoque reduce el tiempo de inactividad esperando al <br>servidor</br> más lento y disminuye el tiempo de finalización de la transferencia de datos.",
                "Esto puede mejorar el rendimiento en comparación con los casos de un solo <br>servidor</br> y aliviar el problema de congestión en internet [17].",
                "Permanece una desventaja en el tiempo de inactividad ya que los <br>servidor</br>es más rápidos deben esperar a que el <br>servidor</br> más lento entregue su último bloque."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces <br>cliente-servidor</br> y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los <br>servidor</br>es más rápidos que tienen que esperar al <br>servidor</br> más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al <br>servidor</br> más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo <br>servidor</br> y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los <br>servidor</br>es más rápidos deben esperar a que el <br>servidor</br> más lento entregue su último bloque. ",
            "candidates": [],
            "error": [
                [
                    "cliente-servidor",
                    "servidor",
                    "servidor",
                    "servidor",
                    "servidor",
                    "servidor",
                    "servidor"
                ]
            ]
        },
        "performance": {
            "translated_key": "rendimiento",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-<br>performance</br> Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the <br>performance</br> of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, <br>performance</br>, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied <br>performance</br> rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the <br>performance</br> compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer <br>performance</br> [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall <br>performance</br>.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a <br>performance</br> evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain <br>performance</br> benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-<br>performance</br>, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better <br>performance</br>.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term <br>performance</br> forecasts based on historical <br>performance</br> measurements.",
                "The goal of the system is to dynamically characterize and forecast the <br>performance</br> deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP <br>performance</br> (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of <br>performance</br> monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer <br>performance</br> based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-<br>performance</br>, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and <br>performance</br>, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall <br>performance</br>.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer <br>performance</br>. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The replica selection server sends the possible destination locations to the information server, which provides <br>performance</br> measurements and predictions of the three system factors described below.",
                "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer <br>performance</br>.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer <br>performance</br>.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer <br>performance</br>. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum <br>performance</br> matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall <br>performance</br>.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the <br>performance</br> of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the <br>performance</br> of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the <br>performance</br> of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant <br>performance</br> improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall <br>performance</br> is: Total <br>performance</br> = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall <br>performance</br> increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall <br>performance</br> reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the <br>performance</br> did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall <br>performance</br>.",
                "This means that more download flows do not necessarily result in higher <br>performance</br>.",
                "We must choose appropriate numbers of flows to achieve optimum <br>performance</br>.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to <br>performance</br> improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-<br>performance</br> Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-<br>performance</br> Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High <br>performance</br> Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High <br>performance</br> Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High <br>performance</br> Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High <br>performance</br> Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the <br>performance</br> of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource <br>performance</br> Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-<br>performance</br> Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the <br>performance</br> of data transfer in Data Grids.",
                "General Terms Management, <br>performance</br>, Design, Experimentation. 1.",
                "Downloading large datasets from several replica locations may result in varied <br>performance</br> rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "This can improve the <br>performance</br> compared to the single-server cases and alleviate the internet congestion problem [17]."
            ],
            "translated_annotated_samples": [
                "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C.",
                "En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el <br>rendimiento</br> de la transferencia de datos en Rejillas de Datos.",
                "Gestión, <br>Rendimiento</br>, Diseño, Experimentación. 1.",
                "Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de <br>rendimiento</br> variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes.",
                "Esto puede mejorar el <br>rendimiento</br> en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el <br>rendimiento</br> de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, <br>Rendimiento</br>, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de <br>rendimiento</br> variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el <br>rendimiento</br> en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "grid computing": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on <br>grid computing</br> - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to <br>grid computing</br> with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on <br>grid computing</br>, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on <br>grid computing</br> - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to <br>grid computing</br> with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on <br>grid computing</br>, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I."
            ],
            "translated_annotated_samples": [
                "Foster y C. Kesselman, Globus: Un conjunto de herramientas de infraestructura de metacomputación, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger y K. Stockinger, Gestión de datos en un Proyecto Internacional de Grid de Datos, Proc. del Primer Taller Internacional de Grid Computing IEEE/ACM - Grid 2000, Bangalore, India, diciembre de 2000. [13] IBM Red Books, Introducción a la Computación en Grid con Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman y B. Tierney, Replicación de archivos y objetos en rejillas de datos, Journal of Cluster Computing, 5(3):305-314, 2002. [15] Página de inicio de utilidades SYSSTAT, http://perso.wanadoo.fr/sebastien.godard/ [16] La Alianza Globus, http://www.globus.org/ [17] S. Vazhkudai, Facilitando la coasignación de transferencias de datos en rejillas, Proc. del Cuarto Taller Internacional sobre Computación en Rejilla, pp. 41-51, noviembre de 2003. [18] S. Vazhkudai y J. Schopf, Uso de técnicas de regresión para predecir grandes transferencias de datos, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, agosto de 2003. [19] S. Vazhkudai, S. Tuecke e I."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque. Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de transferencia de datos de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la transferencia de datos [24]. Los resultados experimentales muestran que nuestro enfoque es superior a los métodos anteriores y logró el mejor rendimiento general. También discutimos el costo de combinación y proporcionamos un esquema efectivo para reducirlo. El resto de este documento está organizado de la siguiente manera. La revisión de antecedentes relacionados y estudios se presentan en la Sección 2 y la arquitectura de co-asignación y trabajos relacionados se introducen en la Sección 3. En la Sección 4, proponemos un servicio eficiente de selección de réplicas. Nuestros enfoques de investigación se describen en la Sección 5, y los resultados experimentales y una evaluación del rendimiento de nuestro esquema se presentan en la Sección 6. La sección 7 concluye este documento de investigación. ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico). El término Data Grid tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes. Las Rejillas de Datos [1, 2, 16] federan una gran cantidad de recursos de almacenamiento. Grandes colecciones de datos medidos o calculados están surgiendo como recursos importantes en muchas aplicaciones intensivas en datos. 2.1.1 Gestión de Réplicas La gestión de réplicas implica la creación o eliminación de réplicas en un sitio de cuadrícula de datos [19]. En otras palabras, el rol de un administrador de réplicas es crear o eliminar réplicas, dentro de sistemas de almacenamiento especificados. La mayoría de las veces, estas réplicas son copias exactas de los archivos originales, creadas solo para aprovechar ciertos beneficios de rendimiento. Un administrador de réplicas generalmente mantiene un catálogo de réplicas que contiene las direcciones de los sitios de réplica y las instancias de archivos. El servicio de gestión de réplicas es responsable de administrar la replicación de copias completas y parciales de conjuntos de datos, definidos como colecciones de archivos. El servicio de gestión de réplicas es solo un componente en un entorno de Data Grid que brinda soporte para aplicaciones de alto rendimiento y alta intensidad de datos. Una réplica o ubicación es un subconjunto de una colección que se almacena en un sistema de almacenamiento físico particular. Puede haber múltiples subconjuntos posiblemente superpuestos de una colección almacenados en múltiples sistemas de almacenamiento en una Rejilla de Datos. Estos sistemas de almacenamiento en red pueden utilizar una variedad de tecnologías de almacenamiento subyacentes y protocolos de movimiento de datos, que son independientes de la gestión de réplicas. 2.1.2 Catálogo de Réplicas Como se mencionó anteriormente, el propósito del catálogo de réplicas es proporcionar mapeos entre nombres lógicos de archivos o colecciones y una o más copias de los objetos en sistemas de almacenamiento físico. El catálogo de réplicas incluye entradas opcionales que describen archivos lógicos individuales. Los archivos lógicos son entidades con nombres globalmente únicos que pueden tener una o más instancias físicas. El catálogo puede contener opcionalmente una entrada de archivo lógico en el catálogo de réplicas para cada archivo lógico en una colección. Una cuadrícula de datos puede contener múltiples catálogos de réplicas. Por ejemplo, una comunidad de investigadores interesados en un tema de investigación particular podría mantener un catálogo de réplicas para una colección de conjuntos de datos de interés mutuo. Es posible crear jerarquías de catálogos de réplicas para imponer una estructura similar a la de un directorio en colecciones lógicas relacionadas. Además, el administrador de réplicas puede realizar control de acceso en catálogos completos, así como en archivos lógicos individuales. 2.1.3 Selección de Réplicas El propósito de la selección de réplicas [16] es seleccionar una réplica entre los sitios que constituyen una Data Grid [19]. Los criterios de selección dependen de las características de la aplicación. Al utilizar este mecanismo, los usuarios de la Data Grid pueden gestionar fácilmente réplicas de conjuntos de datos en sus sitios, con un mejor rendimiento. Se ha dedicado mucho esfuerzo previo al problema de selección de réplicas. El proceso común de selección de réplicas consta de tres pasos: preparación de datos, preprocesamiento y predicción. Entonces, las aplicaciones pueden seleccionar una réplica según sus atributos específicos. La selección de réplicas es importante para aplicaciones intensivas en datos, y puede proporcionar transparencia de ubicación. Cuando un usuario solicita acceso a un conjunto de datos, el sistema determina una forma apropiada de entregar la réplica al usuario. 2.2 Globus Toolkit y GridFTP El Proyecto Globus [9, 11, 16] proporciona herramientas de software colectivamente llamadas El Kit de Herramientas Globus que facilita la construcción de Grids computacionales y aplicaciones basadas en Grid. Muchas organizaciones utilizan la Herramienta Globus para construir Grillas computacionales que apoyen sus aplicaciones. La composición del Globus Toolkit se puede visualizar como tres pilares: Gestión de Recursos, Servicios de Información y Gestión de Datos. Cada pilar representa un componente principal del Globus Toolkit y hace uso de una base común de seguridad. GRAM implementa un protocolo de gestión de recursos, MDS implementa un protocolo de servicios de información y GridFTP implementa un protocolo de transferencia de datos. Todos utilizan el protocolo de seguridad GSI en la capa de conexión [10, 11, 16, 13]. La alianza Globus propuso un protocolo común de transferencia y acceso de datos llamado GridFTP que proporciona un movimiento seguro y eficiente de datos en entornos de Grid. Este protocolo, que extiende el protocolo estándar FTP, proporciona un superconjunto de las características ofrecidas por los diversos sistemas de almacenamiento en red actualmente en uso. Para resolver los problemas que surgen, la comunidad de Data Grid intenta desarrollar un mecanismo seguro y eficiente de transporte de datos y servicios de gestión de réplicas. GridFTP es un protocolo de transporte de datos confiable, seguro y eficiente que se desarrolló como parte del proyecto Globus. Hay otra tecnología clave del proyecto Globus, llamada catálogo de réplicas [16], que se utiliza para registrar y gestionar copias completas y parciales de conjuntos de datos. El catálogo de réplicas contiene la información de mapeo de un archivo lógico o colección a uno o más archivos físicos. 2.3 Servicio Meteorológico de Red El Servicio Meteorológico de Red (NWS) [22] es un sistema de monitoreo generalizado y distribuido para producir pronósticos de rendimiento a corto plazo basados en mediciones de rendimiento históricas. El objetivo del sistema es caracterizar y predecir dinámicamente el rendimiento entregable a nivel de aplicación a partir de un conjunto de recursos de red y computacionales. Una instalación típica implica un nws_nameserver, uno o más nws_memory (que pueden residir en máquinas diferentes) y un nws_sensor ejecutándose en cada máquina con los recursos que se van a monitorear. El sistema incluye sensores para el rendimiento TCP/IP de extremo a extremo (ancho de banda y latencia), porcentaje de CPU disponible y memoria no paginada disponible. 798 2.4 Utilidades Sysstat Las utilidades Sysstat [15] son un conjunto de herramientas de monitoreo de rendimiento para el sistema operativo Linux. El paquete Sysstat incorpora los comandos sar, mpstat e iostat. El comando sar recopila y reporta información de actividad del sistema, la cual también puede ser guardada en un archivo de actividad del sistema para inspección futura. El comando iostat informa estadísticas de la CPU y estadísticas de E/S para dispositivos tty y discos. Las estadísticas reportadas por SAR se refieren a tasas de transferencia de E/S, actividad de paginación, actividades relacionadas con procesos, interrupciones, actividad de red, utilización de memoria y espacio de intercambio, utilización de CPU, actividades del kernel y estadísticas de TTY, entre otros. Las máquinas Uniprocessor (UP) y Symmetric multiprocessor (SMP) son totalmente compatibles. 3. La arquitectura de co-asignación propuesta en [17] consta de tres componentes principales: un servicio de información, un intermediario/co-asignador y sistemas de almacenamiento locales. La Figura 1 muestra la co-asignación de transferencias de datos de la red, que es una extensión de la plantilla básica para la gestión de recursos [7] proporcionada por Globus Toolkit. Las aplicaciones especifican las características de los datos deseados y envían la descripción de los atributos a un intermediario. El corredor consulta los recursos disponibles y obtiene las ubicaciones de réplicas de los servicios de información [6] y los servicios de gestión de réplicas [19], y luego obtiene una lista de ubicaciones físicas para los archivos deseados. Figura 1. La arquitectura de coasignación de cuadrícula de datos [17] pasa las ubicaciones candidatas de réplicas a un servicio de selección de réplicas [19], que fue presentado en un trabajo previo [23]. Este servicio de selección de réplicas proporciona estimaciones del rendimiento de transferencia de candidatos basadas en un modelo de costos y elige las cantidades apropiadas para solicitar a las ubicaciones más adecuadas. El agente de coasignación luego descarga los datos en paralelo desde los servidores seleccionados. En estas investigaciones, se utilizó GridFTP [1, 11, 16] para habilitar transferencias de datos en paralelo. GridFTP es un protocolo de transferencia de datos de alto rendimiento, seguro y confiable, optimizado para redes de área amplia de alta velocidad de banda ancha. Entre sus muchas características se encuentran la seguridad, los flujos paralelos, las transferencias de archivos parciales, las transferencias de terceros y los canales de datos reutilizables. Su capacidad de transferencia parcial de archivos permite recuperar archivos de servidores de datos especificando los desplazamientos de inicio y fin de las secciones de archivos. Las rejillas de datos consisten en recursos informáticos y de almacenamiento dispersos ubicados en diferentes países/regiones pero accesibles para los usuarios [8]. En este estudio utilizamos el middleware de cuadrícula Globus Toolkit [16] como infraestructura de la cuadrícula de datos. El Globus Toolkit proporciona soluciones para consideraciones como seguridad, gestión de recursos, gestión de datos y servicios de información. Uno de sus componentes principales es MDS [6, 11, 16, 25], el cual está diseñado para proporcionar un mecanismo estándar para descubrir y publicar información sobre el estado y la configuración de recursos. Proporciona una interfaz uniforme y flexible para los datos recopilados por proveedores de información de nivel inferior en dos modos: estáticos (por ejemplo, sistemas operativos, tipos de CPU y arquitecturas de sistemas) y datos dinámicos (por ejemplo, disponibilidad de disco, disponibilidad de memoria y carga). Y utiliza GridFTP [1, 11, 16], un protocolo de transporte de datos confiable, seguro y eficiente para proporcionar una gestión eficiente y transferencia de terabytes o petabytes de datos en un entorno de recursos distribuidos de amplia área. A medida que los conjuntos de datos se replican dentro de entornos de Grid para fiabilidad y rendimiento, los clientes requieren la capacidad de descubrir réplicas de datos existentes, y crear y registrar nuevas réplicas. Un Servicio de Localización de Réplicas (RLS) proporciona un mecanismo para descubrir y registrar réplicas existentes. Se han desarrollado varios métricas de predicción para ayudar en la selección de réplicas. Por ejemplo, Vazhkudai y Schopf [18, 20, 21] utilizaron historiales de transferencia de datos pasados para estimar las velocidades actuales de transferencia de datos. En nuestro trabajo previo [23, 24], propusimos un modelo de costo de selección de réplicas y un servicio de selección de réplicas para llevar a cabo la selección de réplicas. En [17], el autor propone una arquitectura de coasignación para coasignar transferencias de datos de Grid a través de múltiples conexiones, aprovechando la función de copia parcial de GridFTP. También proporciona Balanceo de Carga por Fuerza Bruta, Basado en Historial y Dinámico para asignar bloques de datos. Coasignación por Fuerza Bruta: La coasignación por Fuerza Bruta funciona dividiendo el tamaño del archivo de manera equitativa entre los flujos disponibles. No aborda las diferencias de ancho de banda entre los distintos enlaces cliente-servidor. Coasignación basada en historial: El esquema de coasignación basado en historial mantiene los tamaños de bloque por flujo proporcionales a las tasas de transferencia predichas. Balanceo de carga conservador: Uno de sus métodos de coasignación dinámica es el Balanceo de Carga Conservador. La estrategia de coasignación dinámica de equilibrio de carga conservadora divide los conjuntos de datos solicitados en k bloques disjuntos de tamaño igual. Los servidores disponibles se asignan bloques individuales para entregar en paralelo. Cuando un servidor termina de entregar un bloque, se solicita otro, y así sucesivamente, hasta que se descarga el archivo completo. Las cargas en los flujos coasignados se ajustan automáticamente porque los servidores más rápidos entregarán más rápidamente proporcionando porciones más grandes del archivo. Equilibrio de carga agresivo: Otra estrategia dinámica de colocación conjunta, presentada en [17], es el Equilibrio de carga agresivo. La estrategia de co-asignación dinámica de equilibrio de carga agresiva presentada en [17] añade funciones que modifican las entregas de tamaño de bloque al: (1) aumentar progresivamente las cantidades de datos solicitadas a servidores más rápidos, y (2) reducir las cantidades de datos solicitadas a servidores más lentos o dejar de solicitar datos de ellos por completo. Las estrategias de coasignación descritas anteriormente no solucionan la limitación de que los servidores más rápidos tengan que esperar a que el servidor más lento entregue su último bloque. En la mayoría de los casos, esto desperdicia mucho tiempo y disminuye el rendimiento general. Por lo tanto, proponemos un enfoque eficiente llamado Recursivo-Ajuste Co-Asignación y basado en una arquitectura de co-asignación. Mejora la co-asignación dinámica y reduce el tiempo de espera, mejorando así el rendimiento general de la transferencia. Un SERVICIO DE SELECCIÓN DE RÉPLICAS EFICIENTE Construimos un servicio de selección de réplicas para permitir a los clientes seleccionar los servidores de réplicas mejores en entornos de Data Grid. Consulte a continuación para obtener una descripción detallada. 4.1 Escenario de Selección de Réplicas Nuestro modelo propuesto de selección de réplicas se ilustra en [23], que muestra cómo un cliente identifica la mejor ubicación para una transferencia de réplica deseada. El cliente primero inicia sesión en un sitio local y ejecuta la aplicación de la plataforma Data Grid, la cual verifica si los archivos están disponibles en el sitio local. Si están presentes en el sitio local, la aplicación accede a ellos inmediatamente; de lo contrario, pasa los nombres de archivo lógicos al servidor del catálogo de réplicas, que devuelve una lista de ubicaciones físicas para todas las copias registradas. La aplicación envía esta lista de ubicaciones de réplicas a un servidor de selección de réplicas, que identifica las ubicaciones de destino del sistema de almacenamiento para todas las operaciones de transferencia de datos candidatas. El servidor de selección de réplicas envía las posibles ubicaciones de destino al servidor de información, el cual proporciona mediciones de rendimiento y predicciones de los tres factores del sistema descritos a continuación. El servidor de selección de réplicas elige mejores ubicaciones de réplicas según estas estimaciones y devuelve la información de ubicación a la aplicación de transferencia, la cual recibe la réplica a través de GridFTP. Cuando la aplicación finaliza, devuelve los resultados al usuario. 4.2 Factores del sistema Determinar la mejor base de datos entre muchas con las mismas réplicas es un problema significativo. En nuestro modelo, consideramos tres factores del sistema que afectan la selección de réplicas: Ancho de banda de red: Este es uno de los factores más significativos de Data Grid ya que los archivos de datos en entornos de Data Grid suelen ser muy grandes. En otras palabras, los tiempos de transferencia de archivos de datos dependen estrechamente de las situaciones de ancho de banda de la red. Debido a que el ancho de banda de la red es un factor dinámico inestable, debemos medirlo con frecuencia y predecirlo de la manera más precisa posible. El Servicio Meteorológico de Red (NWS) es una herramienta poderosa para este propósito. Carga de la CPU: Las plataformas de cuadrícula consisten en números de sistemas heterogéneos, construidos con diferentes arquitecturas de sistema, por ejemplo, plataformas de clúster, supercomputadoras, PC. La carga de la CPU es un factor del sistema dinámico, y una carga pesada en la CPU del sistema afectará sin duda el proceso de descarga de archivos de datos desde el sitio. La medición se realiza mediante el Toolkit Globus / MDS. Estado de E/S: Los nodos de la cuadrícula de datos consisten en diferentes sistemas de almacenamiento heterogéneos. Los archivos de datos en las redes de datos son enormes. Si el estado de E/S de un sitio del que deseamos descargar archivos está muy ocupado, afectará directamente el rendimiento de la transferencia de datos. Medimos los estados de E/S utilizando las utilidades sysstat [15]. Nuestro Modelo de Costo de Selección de Réplicas La función objetivo de un modelo de costos para el almacenamiento de datos distribuidos y replicados es la puntuación de información del servicio de información. Enumeramos algunos factores influyentes para nuestro modelo de costos en la sección anterior. Sin embargo, debemos expresar estos factores en notación matemática para un análisis más detallado. Suponemos que el nodo i es el sitio local en el que el usuario o la aplicación inicia sesión, y el nodo j posee la réplica que el usuario o la aplicación desea. Los siete parámetros del sistema que considera nuestro modelo de costos de selección de réplicas son: Scorei-j: el valor de puntuación representa qué tan eficientemente un usuario o aplicación en el nodo i puede adquirir una réplica del nodo j BW jiP: porcentaje de ancho de banda disponible del nodo i al nodo j; ancho de banda actual dividido por el ancho de banda teórico más alto BBW: peso del ancho de banda de red definido por el administrador de Data Grid CPU jP: porcentaje de estados de inactividad de la CPU del nodo j WCPU: peso de carga de la CPU definido por el administrador de Data Grid OI jP /: porcentaje de estados de inactividad de E/S del nodo j WI/O: peso del estado de E/S definido por el administrador de Data Grid Definimos la siguiente fórmula general utilizando estos factores del sistema. Los tres factores influyentes en esta fórmula: WBW, WCPU y WI/O describen los pesos de la CPU, E/S y ancho de banda de red, los cuales pueden ser determinados por los administradores de la organización de Data Grid según los diversos atributos de los sistemas de almacenamiento en los nodos de Data Grid, ya que algunos equipos de almacenamiento no afectan la carga de la CPU. Después de varias mediciones experimentales, determinamos que el ancho de banda de la red es el factor más significativo que influye directamente en los tiempos de transferencia de datos. Cuando realizamos transferencias de datos utilizando el protocolo GridFTP, descubrimos que los estados de la CPU y E/S afectan ligeramente el rendimiento de la transferencia de datos. Sus valores respectivos en nuestro entorno de Data Grid son 80%, 10% y 10%. 4.4 Análisis de Costo de Co-Asignación Cuando los clientes descargan conjuntos de datos utilizando la tecnología de co-asignación de GridFTP, se incurre en tres costos de tiempo: el tiempo requerido para la autenticación del cliente en el servidor de GridFTP, el tiempo real de transmisión de datos y el tiempo de reensamblaje de bloques de datos. Tiempo de autenticación: Antes de una transferencia, el cliente debe cargar un proxy de Globus y autenticarse en el servidor GridFTP con las credenciales de usuario especificadas. El cliente luego establece un canal de control, configura los parámetros de transferencia y solicita la creación de un canal de datos. Cuando se ha establecido el canal, los datos comienzan a fluir. Tiempo de transmisión: El tiempo de transmisión se mide desde el momento en que el cliente comienza a transferir hasta el momento en que se completan todos los trabajos de transmisión, e incluye el tiempo requerido para restablecer los canales de datos entre las solicitudes de transferencia. Las vías de datos solo necesitan abrirse una vez y pueden manejar muchas transferencias antes de cerrarse. Esto permite que las mismas vías de datos se utilicen para múltiples transferencias de archivos. Sin embargo, los canales de datos deben reiniciarse explícitamente entre las solicitudes de transferencia. Esto es menos costoso en tiempo. Tiempo de combinación: la arquitectura de coasignación explota la característica de copia parcial de la herramienta de movimiento de datos GridFTP para permitir transferencias de datos a través de múltiples conexiones. Con la transferencia parcial de archivos, se pueden recuperar secciones de archivos de servidores de datos especificando solo los desplazamientos de inicio y fin de la sección. Cuando se entregan estas secciones de archivo, es posible que necesiten ser reensambladas; la operación de reensamblaje conlleva un costo adicional de tiempo. 5. ESTRATEGIA DE COASIGNACIÓN DINÁMICA La coasignación dinámica, descrita anteriormente, es el enfoque más eficiente para reducir la influencia de las variaciones de red entre clientes y servidores. Sin embargo, el tiempo de inactividad de los servidores más rápidos esperando a que el servidor más lento entregue el último bloque sigue siendo un factor importante que afecta la eficiencia general, el cual el Balanceo de Carga Conservador y el Balanceo de Carga Agresivo [17] no pueden evitar de manera efectiva. El enfoque propuesto en el presente documento, un mecanismo de asignación dinámica llamado Coasignación Recursiva-Ajustable, puede superar esto y, por lo tanto, mejorar el rendimiento de transferencia de datos. 5.1 Coasignación Recursiva-Ajustable La Coasignación Recursiva-Ajustable funciona ajustando continuamente la carga de trabajo de cada servidor de réplicas para que corresponda a su ancho de banda en tiempo real durante las transferencias de archivos. El objetivo es hacer que el tiempo de finalización esperado de todos los servidores sea el mismo. Como muestra la Figura 2, cuando se selecciona primero una sección de archivo apropiada, se divide en tamaños de bloque adecuados según los anchos de banda del servidor respectivos. El coasignador luego asigna los bloques a los servidores para la transferencia. En este momento, se espera que el tiempo de finalización de la transferencia sea consistente en E(T1). Sin embargo, dado que los anchos de banda del servidor pueden fluctuar durante las entregas de segmentos, el tiempo real de finalización puede ser diferente (línea sólida, en la Figura 2). Una vez que el servidor más rápido termina su trabajo en el tiempo T1, la siguiente sección se asigna nuevamente a los servidores. Esto permite que cada servidor termine su carga de trabajo asignada para el tiempo esperado en E(T2). Estos ajustes se repiten hasta que se complete la transferencia de todo el archivo. Servidor 1 Servidor 2 Servidor 3 Ronda 1 Ronda 2 E(T1) E(T2)T1 Archivo A Sección 1 Sección 2 ... ... ... Figura 2. El proceso de ajuste del proceso de coasignación recursiva se ilustra en la Figura 3. Cuando un usuario solicita el archivo A, el servicio de selección de réplicas responde con el subconjunto de todos los servidores disponibles definidos por la matriz de rendimiento máximo. El servicio de co-asignación recibe esta lista de servidores réplica seleccionados. Suponiendo que se seleccionan n servidores réplica, Si denota el servidor i tal que 1 i n. Luego se establece una conexión para la descarga de archivos con cada servidor. El proceso de Co-Asignación de Ajuste Recursivo es el siguiente. Una nueva sección de un archivo a asignar es primero definida. El tamaño de la sección, SEj, es: SEj = TamañoArchivoNoAsignado , (0 < < 1) (2) donde SEj denota la sección j tal que 1 ≤ j ≤ k, asumiendo que asignamos k veces para el proceso de descarga. Y así, hay k secciones, mientras que Tj denota el tiempo asignado a la sección j. UnassignedFileSize es la porción del archivo A que aún no se ha distribuido para su descarga; inicialmente, UnassignedFileSize es igual al tamaño total del archivo A. es la tasa que determina cuánto de la sección queda por asignar. Figura 3. El proceso de Co-Asignación de Ajuste Recursivo. En el siguiente paso, SEj se divide en varios bloques y se asigna a n servidores. Cada servidor tiene una tasa de transferencia en tiempo real al cliente de Bi, la cual es medida por el Servicio Meteorológico de Red (NWS) [18]. El tamaño de bloque por flujo desde SEj para cada servidor i en el tiempo Tj es: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) donde UnFinishSizei denota el tamaño de bloques de transferencia no finalizados asignados en rondas anteriores en el servidor i. UnFinishSizei es igual a cero en la primera ronda. Idealmente, dependiendo del ancho de banda en tiempo real en el momento Tj, se espera que cada flujo termine su carga de trabajo en el futuro. Esto cumple con nuestro requisito de minimizar el tiempo que los servidores más rápidos deben esperar a que el servidor más lento termine. Si, en algunos casos, las variaciones en la red degradan considerablemente las tasas de transferencia, UnFinishSizei puede exceder n i ii n i ij BBzeUnFinishSiSE 11 *)(, que es el tamaño total del bloque que se espera transferir después de Tj. En tales casos, el coasignador elimina los servidores de antemano y asigna SEj a otros servidores. Después de la asignación, todos los canales continúan transfiriendo bloques de datos. Cuando un canal más rápido termina sus bloques de datos asignados, el coasignador comienza a asignar nuevamente una sección no asignada del archivo A. El proceso de asignar bloques de datos 801 para ajustar el tiempo de finalización del flujo esperado continúa hasta que se haya asignado todo el archivo. 5.2 Determinar cuándo detener el ajuste continuo Nuestro enfoque obtiene nuevas secciones de archivos completos dividiendo rangos de archivos no asignados en cada ronda de asignación. Estas porciones no asignadas de los rangos de archivo se vuelven más pequeñas después de cada asignación. Dado que el ajuste es continuo, funcionaría como un bucle infinito si no estuviera limitado por una condición de parada. Sin embargo, ¿cuándo es apropiado detener el ajuste continuo? Proporcionamos dos criterios de monitoreo, LeastSize y ExpectFinishedTime, para permitir a los usuarios definir umbrales de parada. Cuando se alcanza un umbral, el servidor de coasignación deja de dividir el resto del archivo y asigna ese resto como la sección final. El criterio LeastSize especifica el archivo más pequeño que queremos procesar, y cuando la porción no asignada de UnassignedFileSize cae por debajo de la especificación de LeastSize, la división se detiene. El criterio ExpectFinishedTime especifica el tiempo restante que se espera que dure la transferencia. Cuando el tiempo de transferencia esperado de la porción no asignada de un archivo cae por debajo del tiempo especificado por ExpectFinishedTime, la división del archivo se detiene. El valor esperado del tiempo de descanso se determina por: 1 n i iBFileSizeUnAssigned (4) Estos dos criterios determinan el tamaño final de la sección asignada. Valores de umbral más altos inducirán menos divisiones y generarán costos de co-asignación más bajos, que incluyen el establecimiento de conexiones, negociación, reensamblaje, etc. Sin embargo, aunque el tiempo total de ajuste de la coalocación puede ser menor, las variaciones de ancho de banda también pueden ejercer más influencia. Por el contrario, valores de umbral más bajos inducirán ajustes más frecuentes en la carga de trabajo del servidor dinámico y, en el caso de mayores fluctuaciones en la red, resultarán en menos diferencias en el tiempo de finalización de la transferencia del servidor. Sin embargo, valores más bajos también aumentarán los tiempos de coasignación, y por lo tanto, aumentarán los costos de coasignación. Por lo tanto, el entorno de internet, los tamaños de archivo transferidos y los costos de coasignación deben considerarse todos al determinar los umbrales óptimos. 5.3 Reducción de la Sobrecarga de Reensamblaje El proceso de reensamblar bloques después de transferencias de datos utilizando tecnología de coasignación resulta en una sobrecarga adicional y disminuye el rendimiento general. El sobrecosto de reensamblaje está relacionado con el tamaño total del bloque, y podría reducirse mediante la actualización de las capacidades del hardware o el uso de algoritmos de software mejores. Proponemos un mecanismo de reensamblaje alternativo eficiente para reducir la sobrecarga de combinación añadida una vez que se han completado todas las transmisiones de bloques. Se diferencia del método convencional en el que el software comienza el ensamblaje después de que todos los bloques hayan sido entregados, comenzando a ensamblar bloques una vez que finalizan las primeras entregas. Por supuesto, esto hace necesario mantener el orden original de división. Estrategias de coasignación como el Balanceo de Carga Conservador y la Coasignación de Ajuste Recursivo producen bloques adicionales durante las transferencias de archivos y pueden beneficiarse al habilitar el reensamblaje durante las transferencias de datos. Si algunos bloques se ensamblan de antemano, el costo de tiempo para ensamblar los bloques restantes después de que todas las transferencias finalicen puede reducirse. 6. RESULTADOS EXPERIMENTALES Y ANÁLISIS En esta sección, discutimos el rendimiento de nuestra estrategia de Co-Asignación Recursiva de Ajuste. Evaluamos cuatro esquemas de coalocación: (1) Fuerza Bruta (Brute), (2) Basado en Historial (History), (3) Balance de Carga Conservador (Conservative) y (4) Coalocación Co-Ajustada Recursiva (Recursive). Analizamos el rendimiento de cada esquema comparando su tiempo de finalización de transferencia y el tiempo total de inactividad que los servidores más rápidos pasaron esperando a que el servidor más lento terminara de entregar el último bloque. También analizamos el rendimiento general en los diferentes casos. Realizamos experimentos de transferencia de datos de gran área utilizando nuestra herramienta cliente GUI de GridFTP. Ejecutamos nuestra herramienta de cliente de co-asignación en nuestra plataforma de pruebas en la Universidad de Tunghai (THU), en la ciudad de Taichung, Taiwán, y obtuvimos archivos de cuatro servidores réplica seleccionados: uno en la Universidad de Providence (PU), uno en la Escuela Secundaria Li-Zen (LZ), uno en la Escuela de Tecnología Hsiuping (HIT) y uno en la Escuela Secundaria Da-Li (DL). Todas estas instituciones están en Taiwán, y cada una está al menos a 10 km de la THU. La Figura 4 muestra nuestro banco de pruebas de la cuadrícula de datos. Nuestros servidores tienen instalado Globus 3.0.2 o una versión superior. Escuela Secundaria THU Li-Zen (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD Escuela Secundaria Da-Li (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figura 4. En nuestro banco de pruebas de Data Grid, en los siguientes experimentos, establecimos = 0.5, el umbral de LeastSize en 10MB, y experimentamos con tamaños de archivo de 10 MB, 50 MB, 100 MB, 500 MB, 1000 MB, 2000 MB y 4000 MB. Para la comparación, medimos el rendimiento del Balanceo de Carga Conservador en cada tamaño utilizando los mismos números de bloques. La Figura 5 muestra una captura de pantalla de nuestra herramienta cliente GridFTP. Esta herramienta de cliente está desarrollada utilizando Java CoG. Permite un desarrollo de aplicaciones más fácil y rápido al fomentar la reutilización colaborativa de código y evitar la duplicación de esfuerzos entre entornos de resolución de problemas, portales científicos, middleware de Grid y pilotos colaborativos. La Tabla 1 muestra las tasas de transmisión promedio entre THU y cada servidor réplica. Estos números fueron obtenidos al transferir archivos de 500MB, 1000MB y 2000MB desde un único servidor réplica utilizando nuestra herramienta cliente GridFTP, y cada número es un promedio de varias ejecuciones. Tabla 1. Tasa de transmisión de extremo a extremo de GridFTP desde THU a varios servidores. Tasa de transmisión promedio del servidor: HIT 61.5 Mbps, LZ 59.5 Mbps, DL 32.1 Mbps, PU 26.7 Mbps. Figura 5. Nuestra herramienta cliente GridFTP analizó el efecto de servidores más rápidos esperando al servidor más lento para entregar el último bloque en cada esquema. La Figura 6(a) muestra el tiempo total de inactividad para diferentes tamaños de archivo. Tenga en cuenta que nuestro esquema de Co-Asignación Recursiva logró mejoras significativas en el rendimiento en comparación con otros esquemas para cada tamaño de archivo. Estos resultados demuestran que nuestro enfoque reduce eficientemente las diferencias en los tiempos de finalización de los servidores. Los resultados experimentales mostrados en la Figura 6(b) indican que nuestro esquema de comenzar la reensamblaje de bloques tan pronto como los primeros bloques han sido entregados completamente reduce el tiempo de combinación, ayudando así a estrategias de co-asignación como el Balance de Carga Conservador y la Co-Asignación de Ajuste Recursivo que producen más bloques durante las transferencias de datos. La Figura 7 muestra los resultados experimentales del tiempo total de finalización en una vista detallada de la estructura de costos. Los servidores estaban en PU, DL y HIT, con el cliente en THU. Las tres primeras barras para cada tamaño de archivo representan el tiempo para descargar el archivo completo desde un único servidor, mientras que las otras barras muestran descargas coasignadas utilizando los tres servidores. Nuestro esquema de coasignación terminó el trabajo más rápido que las otras estrategias de coasignación. Por lo tanto, podemos inferir que las principales ventajas que ofrece nuestra tecnología son tiempos de transmisión y combinación más bajos que otras estrategias de co-asignación. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de espera (seg) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de combinación (seg) Brute3 History3 Conservative3 Recursive3 Figura 6. (a) Tiempos de inactividad para varios métodos; los servidores están en PU, DL y HIT. (b) Tiempos de combinación para varios métodos; los servidores están en PU, DL y HIT. En el siguiente experimento, utilizamos la estrategia de Coasignación Recursiva-Ajustable con varios conjuntos de servidores réplica y medimos el rendimiento general, donde el rendimiento general es: Rendimiento Total = Tamaño del archivo / Tiempo Total de Finalización (5). La Tabla 2 enumera todos los experimentos que realizamos y los conjuntos de servidores réplica utilizados. Los resultados en la Figura 8(a) muestran que el uso de tecnologías de coallocation no produjo ninguna mejora para tamaños de archivo más pequeños como 10MB. También muestran que en la mayoría de los casos, el rendimiento general aumentó a medida que aumentaba el número de flujos coasignados. Observamos que para nuestro banco de pruebas y nuestra tecnología de coasignación, el rendimiento general alcanzó su valor más alto en el caso REC3_2. Sin embargo, en el caso REC4, cuando agregamos un flujo al conjunto de servidores réplica, el rendimiento no aumentó. Por el contrario, disminuyó. Podemos inferir que la eficiencia de coasignación alcanzó la saturación en el caso REC3_2, y que flujos adicionales causaron sobrecarga adicional y redujeron el rendimiento general. Esto significa que más flujos de descarga no necesariamente resultan en un rendimiento más alto. Debemos elegir un número adecuado de flujos para lograr un rendimiento óptimo. Mostramos la vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4 en la Figura 8(b). El costo detallado consiste en el tiempo de autenticación, tiempo de transferencia y tiempo de combinación. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 Tamaño del archivo (MB) Tiempo de finalización (seg) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 7. Tiempos de finalización para varios métodos; los servidores están en PU, DL y HIT. Tabla 2. Los conjuntos de servidores réplica para todos los casos son: Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 Tamaño del archivo (MB) Rendimiento general (Mbits) Tiempo de autenticación Tiempo de transmisión Tiempo de combinación Figura 8. (a) Rendimientos generales para varios conjuntos de servidores. (b) Vista detallada de la estructura de costos para el caso de REC3_2 y el caso de REC4. 7. CONCLUSIONES La arquitectura de coasignación proporciona un agente coordinado para asignar bloques de datos. Un trabajo previo mostró que el esquema de co-asignación dinámica conduce a mejoras en el rendimiento. Sin embargo, no puede manejar el tiempo de inactividad de los servidores más rápidos, que deben esperar a que el servidor más lento entregue su bloque final. Propusimos el esquema de Co-Asignación Recursiva-Ajustable para mejorar el rendimiento de transferencia de datos utilizando la arquitectura de co-asignación en [17]. En este enfoque, las cargas de trabajo de los servidores de réplica seleccionados se ajustan continuamente durante las transferencias de datos, y proporcionamos una función que permite a los usuarios definir un umbral final de bloque 803, de acuerdo con su entorno de cuadrícula de datos. Los resultados experimentales muestran la efectividad de nuestra técnica propuesta en mejorar el tiempo de transferencia y reducir el tiempo total de inactividad esperando al servidor más lento. También discutimos el costo de recombinación y proporcionamos un esquema efectivo para reducirlo. 8. REFERENCIAS [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Gestión y Transferencia de Datos en Entornos de Redes Computacionales de Alto Rendimiento, Computación Paralela, 28(5):749-771, mayo de 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I. Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel y S. Tuecke, Transporte de Datos Seguro y Eficiente y Gestión de Réplicas para la Computación de Alto Rendimiento con Datos Intensivos, Actas del Decimoctavo Simposio IEEE sobre Sistemas y Tecnologías de Almacenamiento Masivo, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I. Foster, A. Chervenak y C. Kesselman. Protocolos y Servicios para la Ciencia de Datos Intensivos Distribuidos. Actas de ACAT2000, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I. Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt y M. Ripeanu, Giggle: Un marco para la construcción de servicios de ubicación de réplicas escalables, Actas de SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I. Foster, C. Kesselman, C. Salisbury y S. Tuecke, La Data Grid: Hacia una arquitectura para la gestión distribuida y análisis de grandes conjuntos de datos científicos, Revista de Aplicaciones de Redes y Computadoras, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I. Foster y C. Kesselman, Servicios de Información de Grid para Compartir Recursos Distribuidos, Actas del Décimo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-1001), 181-194, agosto de 2001. [7] K. Czajkowski, I. Foster y C. Kesselman. Coasignación de recursos en rejillas computacionales, Actas del Octavo Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-899), agosto de 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz y M. Sgaravatto, Prototipo 1 de DataGrid, Conferencia de Redes de TERENA, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, junio de 2002, [9] I. Foster, C. Kesselman y S. Tuecke. La Anatomía de la Red: Permitiendo Organizaciones Virtuales Escalables. Int. Revista de Aplicaciones de Supercomputadoras y Computación de Alto Rendimiento, 15(3), pp. 200-222, 2001. [10] I. Foster y C. Kesselman, Globus: Un conjunto de herramientas de infraestructura de metacomputación, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger y K. Stockinger, Gestión de datos en un Proyecto Internacional de Grid de Datos, Proc. del Primer Taller Internacional de Grid Computing IEEE/ACM - Grid 2000, Bangalore, India, diciembre de 2000. [13] IBM Red Books, Introducción a la Computación en Grid con Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I. Foster, K. Holtman y B. Tierney, Replicación de archivos y objetos en rejillas de datos, Journal of Cluster Computing, 5(3):305-314, 2002. [15] Página de inicio de utilidades SYSSTAT, http://perso.wanadoo.fr/sebastien.godard/ [16] La Alianza Globus, http://www.globus.org/ [17] S. Vazhkudai, Facilitando la coasignación de transferencias de datos en rejillas, Proc. del Cuarto Taller Internacional sobre Computación en Rejilla, pp. 41-51, noviembre de 2003. [18] S. Vazhkudai y J. Schopf, Uso de técnicas de regresión para predecir grandes transferencias de datos, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, agosto de 2003. [19] S. Vazhkudai, S. Tuecke e I. Foster, Selección de réplicas en la malla de datos de Globus, Actas del 1er Simposio Internacional sobre Computación en Clúster y la Malla (CCGRID 2001), pp. 106-113, mayo de 2001. [20] S. Vazhkudai, J. Schopf, Predicción de transferencias de datos esporádicas en la malla, Actas del 11º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-11 02), pp. 188-196, julio de 2002. [21] S. Vazhkudai, J. Schopf e I. Foster, Prediciendo el rendimiento de transferencias de datos de amplia área, Actas del 16º Simposio Internacional de Procesamiento Paralelo y Distribuido (IPDPS 2002), pp. 34-43, abril de 2002, pp. 34-43. [22] R. Wolski, N. Spring y J. Hayes, El Servicio de Pronóstico del Tiempo de Red: Un Servicio de Pronóstico de Rendimiento de Recursos Distribuidos para Metacomputación, Sistemas Informáticos de Generación Futura, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li y Ching-Hsien Hsu, Análisis de rendimiento de la aplicación de tecnología de selección de réplicas para entornos de Grid de Datos, PaCT 2005, Notas de Conferencias en Ciencias de la Computación, vol. 3603, pp. 278-287, Springer-Verlag, septiembre de 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li y ChingHsien Hsu, Un Esquema de Co-Asignación Recursiva en Entornos de Grid de Datos, ICA3PP 2005 Algoritmo y Arquitectura para Procesamiento Paralelo, Notas de Conferencias en Ciencias de la Computación, vol. 3719, pp. 40-49, Springer-Verlag, octubre de 2005. [25] X. Zhang, J. Freschl y J. Schopf, Un Estudio de Rendimiento de Servicios de Monitoreo e Información para Sistemas Distribuidos, Actas del 12º Simposio Internacional de Computación Distribuida de Alto Rendimiento de IEEE (HPDC-12 03), pp. 270-282, agosto de 2003. ",
            "candidates": [],
            "error": [
                []
            ]
        },
        "data grid": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in <br>data grid</br> Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most <br>data grid</br> applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The <br>data grid</br> infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 <br>data grid</br> The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term <br>data grid</br> traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a <br>data grid</br> site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a <br>data grid</br> environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a <br>data grid</br>.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A <br>data grid</br> may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a <br>data grid</br> [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the <br>data grid</br> can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the <br>data grid</br> community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "<br>data grid</br> Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the <br>data grid</br> infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in <br>data grid</br> environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the <br>data grid</br> platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant <br>data grid</br> factors since data files in <br>data grid</br> environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: <br>data grid</br> nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the <br>data grid</br> administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the <br>data grid</br> administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by <br>data grid</br> organization administrators according to the various attributes of the storage systems in <br>data grid</br> nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our <br>data grid</br> environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our <br>data grid</br> testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our <br>data grid</br> testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their <br>data grid</br> environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The <br>data grid</br>: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International <br>data grid</br> Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the Globus <br>data grid</br>, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for <br>data grid</br> Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in <br>data grid</br> Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in <br>data grid</br> Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "Most <br>data grid</br> applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "The <br>data grid</br> infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "BACKGROUND 2.1 <br>data grid</br> The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term <br>data grid</br> traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4]."
            ],
            "translated_annotated_samples": [
                "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C.",
                "La mayoría de las aplicaciones de <br>Data Grid</br> se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid.",
                "La infraestructura de la <br>cuadrícula de datos</br> integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12].",
                "ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico).",
                "El término <br>Data Grid</br> tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de <br>Data Grid</br> se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la <br>cuadrícula de datos</br> integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque. Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de transferencia de datos de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la transferencia de datos [24]. Los resultados experimentales muestran que nuestro enfoque es superior a los métodos anteriores y logró el mejor rendimiento general. También discutimos el costo de combinación y proporcionamos un esquema efectivo para reducirlo. El resto de este documento está organizado de la siguiente manera. La revisión de antecedentes relacionados y estudios se presentan en la Sección 2 y la arquitectura de co-asignación y trabajos relacionados se introducen en la Sección 3. En la Sección 4, proponemos un servicio eficiente de selección de réplicas. Nuestros enfoques de investigación se describen en la Sección 5, y los resultados experimentales y una evaluación del rendimiento de nuestro esquema se presentan en la Sección 6. La sección 7 concluye este documento de investigación. ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico). El término <br>Data Grid</br> tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes. ",
            "candidates": [],
            "error": [
                [
                    "Data Grid",
                    "cuadrícula de datos",
                    "Data Grid"
                ]
            ]
        },
        "replica selection": {
            "translated_key": "selección de réplicas",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient <br>replica selection</br> in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using <br>replica selection</br> techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient <br>replica selection</br> service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 <br>replica selection</br> The purpose of <br>replica selection</br> [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the <br>replica selection</br> problem.",
                "The common process of <br>replica selection</br> consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "<br>replica selection</br> is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a <br>replica selection</br> service [19], which was presented in a previous work [23].",
                "This <br>replica selection</br> service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help <br>replica selection</br>.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a <br>replica selection</br> cost model and a <br>replica selection</br> service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT <br>replica selection</br> SERVICE We constructed a <br>replica selection</br> service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 <br>replica selection</br> Scenario Our proposed <br>replica selection</br> model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a <br>replica selection</br> server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The <br>replica selection</br> server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The <br>replica selection</br> server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect <br>replica selection</br>: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our <br>replica selection</br> Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our <br>replica selection</br> cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the <br>replica selection</br> service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, <br>replica selection</br> in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying <br>replica selection</br> Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient <br>replica selection</br> in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "One way to improve download speeds is to determine the best replica locations using <br>replica selection</br> techniques [19].",
                "In Section 4, an efficient <br>replica selection</br> service is proposed by us.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 <br>replica selection</br> The purpose of <br>replica selection</br> [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "Much previous effort has been devoted to the <br>replica selection</br> problem."
            ],
            "translated_annotated_samples": [
                "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C.",
                "Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de <br>selección de réplicas</br> [19].",
                "En la Sección 4, proponemos un servicio eficiente de <br>selección de réplicas</br>.",
                "Además, el administrador de réplicas puede realizar control de acceso en catálogos completos, así como en archivos lógicos individuales. 2.1.3 Selección de Réplicas El propósito de la <br>selección de réplicas</br> [16] es seleccionar una réplica entre los sitios que constituyen una Data Grid [19].",
                "Se ha dedicado mucho esfuerzo previo al problema de <br>selección de réplicas</br>."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de <br>selección de réplicas</br> [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque. Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de transferencia de datos de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la transferencia de datos [24]. Los resultados experimentales muestran que nuestro enfoque es superior a los métodos anteriores y logró el mejor rendimiento general. También discutimos el costo de combinación y proporcionamos un esquema efectivo para reducirlo. El resto de este documento está organizado de la siguiente manera. La revisión de antecedentes relacionados y estudios se presentan en la Sección 2 y la arquitectura de co-asignación y trabajos relacionados se introducen en la Sección 3. En la Sección 4, proponemos un servicio eficiente de <br>selección de réplicas</br>. Nuestros enfoques de investigación se describen en la Sección 5, y los resultados experimentales y una evaluación del rendimiento de nuestro esquema se presentan en la Sección 6. La sección 7 concluye este documento de investigación. ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico). El término Data Grid tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes. Las Rejillas de Datos [1, 2, 16] federan una gran cantidad de recursos de almacenamiento. Grandes colecciones de datos medidos o calculados están surgiendo como recursos importantes en muchas aplicaciones intensivas en datos. 2.1.1 Gestión de Réplicas La gestión de réplicas implica la creación o eliminación de réplicas en un sitio de cuadrícula de datos [19]. En otras palabras, el rol de un administrador de réplicas es crear o eliminar réplicas, dentro de sistemas de almacenamiento especificados. La mayoría de las veces, estas réplicas son copias exactas de los archivos originales, creadas solo para aprovechar ciertos beneficios de rendimiento. Un administrador de réplicas generalmente mantiene un catálogo de réplicas que contiene las direcciones de los sitios de réplica y las instancias de archivos. El servicio de gestión de réplicas es responsable de administrar la replicación de copias completas y parciales de conjuntos de datos, definidos como colecciones de archivos. El servicio de gestión de réplicas es solo un componente en un entorno de Data Grid que brinda soporte para aplicaciones de alto rendimiento y alta intensidad de datos. Una réplica o ubicación es un subconjunto de una colección que se almacena en un sistema de almacenamiento físico particular. Puede haber múltiples subconjuntos posiblemente superpuestos de una colección almacenados en múltiples sistemas de almacenamiento en una Rejilla de Datos. Estos sistemas de almacenamiento en red pueden utilizar una variedad de tecnologías de almacenamiento subyacentes y protocolos de movimiento de datos, que son independientes de la gestión de réplicas. 2.1.2 Catálogo de Réplicas Como se mencionó anteriormente, el propósito del catálogo de réplicas es proporcionar mapeos entre nombres lógicos de archivos o colecciones y una o más copias de los objetos en sistemas de almacenamiento físico. El catálogo de réplicas incluye entradas opcionales que describen archivos lógicos individuales. Los archivos lógicos son entidades con nombres globalmente únicos que pueden tener una o más instancias físicas. El catálogo puede contener opcionalmente una entrada de archivo lógico en el catálogo de réplicas para cada archivo lógico en una colección. Una cuadrícula de datos puede contener múltiples catálogos de réplicas. Por ejemplo, una comunidad de investigadores interesados en un tema de investigación particular podría mantener un catálogo de réplicas para una colección de conjuntos de datos de interés mutuo. Es posible crear jerarquías de catálogos de réplicas para imponer una estructura similar a la de un directorio en colecciones lógicas relacionadas. Además, el administrador de réplicas puede realizar control de acceso en catálogos completos, así como en archivos lógicos individuales. 2.1.3 Selección de Réplicas El propósito de la <br>selección de réplicas</br> [16] es seleccionar una réplica entre los sitios que constituyen una Data Grid [19]. Los criterios de selección dependen de las características de la aplicación. Al utilizar este mecanismo, los usuarios de la Data Grid pueden gestionar fácilmente réplicas de conjuntos de datos en sus sitios, con un mejor rendimiento. Se ha dedicado mucho esfuerzo previo al problema de <br>selección de réplicas</br>. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "data transfer": {
            "translated_key": "transferencia de datos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of <br>data transfer</br> in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases <br>data transfer</br> completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid <br>data transfer</br> architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves <br>data transfer</br> performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and GridFTP The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a <br>data transfer</br> protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common <br>data transfer</br> and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable <br>data transfer</br> protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past <br>data transfer</br> histories to estimate current <br>data transfer</br> throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate <br>data transfer</br> operations.",
                "The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect <br>data transfer</br> performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing <br>data transfer</br> times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect <br>data transfer</br> performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve <br>data transfer</br> performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area <br>data transfer</br> experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve <br>data transfer</br> performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of <br>data transfer</br> in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases <br>data transfer</br> completion time.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid <br>data transfer</br> architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves <br>data transfer</br> performance [24].",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a <br>data transfer</br> protocol.",
                "The Globus alliance proposed a common <br>data transfer</br> and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3]."
            ],
            "translated_annotated_samples": [
                "En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la <br>transferencia de datos</br> en Rejillas de Datos.",
                "Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la <br>transferencia de datos</br>.",
                "En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de <br>transferencia de datos</br> de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la <br>transferencia de datos</br> [24].",
                "GRAM implementa un protocolo de gestión de recursos, MDS implementa un protocolo de servicios de información y GridFTP implementa un protocolo de <br>transferencia de datos</br>.",
                "La alianza Globus propuso un protocolo común de transferencia y acceso de datos llamado GridFTP que proporciona un movimiento seguro y eficiente de datos en entornos de Grid."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la <br>transferencia de datos</br> en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la <br>transferencia de datos</br>. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque. Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de <br>transferencia de datos</br> de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la <br>transferencia de datos</br> [24]. Los resultados experimentales muestran que nuestro enfoque es superior a los métodos anteriores y logró el mejor rendimiento general. También discutimos el costo de combinación y proporcionamos un esquema efectivo para reducirlo. El resto de este documento está organizado de la siguiente manera. La revisión de antecedentes relacionados y estudios se presentan en la Sección 2 y la arquitectura de co-asignación y trabajos relacionados se introducen en la Sección 3. En la Sección 4, proponemos un servicio eficiente de selección de réplicas. Nuestros enfoques de investigación se describen en la Sección 5, y los resultados experimentales y una evaluación del rendimiento de nuestro esquema se presentan en la Sección 6. La sección 7 concluye este documento de investigación. ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico). El término Data Grid tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes. Las Rejillas de Datos [1, 2, 16] federan una gran cantidad de recursos de almacenamiento. Grandes colecciones de datos medidos o calculados están surgiendo como recursos importantes en muchas aplicaciones intensivas en datos. 2.1.1 Gestión de Réplicas La gestión de réplicas implica la creación o eliminación de réplicas en un sitio de cuadrícula de datos [19]. En otras palabras, el rol de un administrador de réplicas es crear o eliminar réplicas, dentro de sistemas de almacenamiento especificados. La mayoría de las veces, estas réplicas son copias exactas de los archivos originales, creadas solo para aprovechar ciertos beneficios de rendimiento. Un administrador de réplicas generalmente mantiene un catálogo de réplicas que contiene las direcciones de los sitios de réplica y las instancias de archivos. El servicio de gestión de réplicas es responsable de administrar la replicación de copias completas y parciales de conjuntos de datos, definidos como colecciones de archivos. El servicio de gestión de réplicas es solo un componente en un entorno de Data Grid que brinda soporte para aplicaciones de alto rendimiento y alta intensidad de datos. Una réplica o ubicación es un subconjunto de una colección que se almacena en un sistema de almacenamiento físico particular. Puede haber múltiples subconjuntos posiblemente superpuestos de una colección almacenados en múltiples sistemas de almacenamiento en una Rejilla de Datos. Estos sistemas de almacenamiento en red pueden utilizar una variedad de tecnologías de almacenamiento subyacentes y protocolos de movimiento de datos, que son independientes de la gestión de réplicas. 2.1.2 Catálogo de Réplicas Como se mencionó anteriormente, el propósito del catálogo de réplicas es proporcionar mapeos entre nombres lógicos de archivos o colecciones y una o más copias de los objetos en sistemas de almacenamiento físico. El catálogo de réplicas incluye entradas opcionales que describen archivos lógicos individuales. Los archivos lógicos son entidades con nombres globalmente únicos que pueden tener una o más instancias físicas. El catálogo puede contener opcionalmente una entrada de archivo lógico en el catálogo de réplicas para cada archivo lógico en una colección. Una cuadrícula de datos puede contener múltiples catálogos de réplicas. Por ejemplo, una comunidad de investigadores interesados en un tema de investigación particular podría mantener un catálogo de réplicas para una colección de conjuntos de datos de interés mutuo. Es posible crear jerarquías de catálogos de réplicas para imponer una estructura similar a la de un directorio en colecciones lógicas relacionadas. Además, el administrador de réplicas puede realizar control de acceso en catálogos completos, así como en archivos lógicos individuales. 2.1.3 Selección de Réplicas El propósito de la selección de réplicas [16] es seleccionar una réplica entre los sitios que constituyen una Data Grid [19]. Los criterios de selección dependen de las características de la aplicación. Al utilizar este mecanismo, los usuarios de la Data Grid pueden gestionar fácilmente réplicas de conjuntos de datos en sus sitios, con un mejor rendimiento. Se ha dedicado mucho esfuerzo previo al problema de selección de réplicas. El proceso común de selección de réplicas consta de tres pasos: preparación de datos, preprocesamiento y predicción. Entonces, las aplicaciones pueden seleccionar una réplica según sus atributos específicos. La selección de réplicas es importante para aplicaciones intensivas en datos, y puede proporcionar transparencia de ubicación. Cuando un usuario solicita acceso a un conjunto de datos, el sistema determina una forma apropiada de entregar la réplica al usuario. 2.2 Globus Toolkit y GridFTP El Proyecto Globus [9, 11, 16] proporciona herramientas de software colectivamente llamadas El Kit de Herramientas Globus que facilita la construcción de Grids computacionales y aplicaciones basadas en Grid. Muchas organizaciones utilizan la Herramienta Globus para construir Grillas computacionales que apoyen sus aplicaciones. La composición del Globus Toolkit se puede visualizar como tres pilares: Gestión de Recursos, Servicios de Información y Gestión de Datos. Cada pilar representa un componente principal del Globus Toolkit y hace uso de una base común de seguridad. GRAM implementa un protocolo de gestión de recursos, MDS implementa un protocolo de servicios de información y GridFTP implementa un protocolo de <br>transferencia de datos</br>. Todos utilizan el protocolo de seguridad GSI en la capa de conexión [10, 11, 16, 13]. La alianza Globus propuso un protocolo común de transferencia y acceso de datos llamado GridFTP que proporciona un movimiento seguro y eficiente de datos en entornos de Grid. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        },
        "globus": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 <br>globus</br> Toolkit and GridFTP The <br>globus</br> Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the <br>globus</br> Toolkit to build computational Grids to support their applications.",
                "The composition of the <br>globus</br> Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the <br>globus</br> Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and GridFTP implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The <br>globus</br> alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "GridFTP is a reliable, secure and efficient data transport protocol which is developed as a part of the <br>globus</br> project.",
                "There is another key technology from <br>globus</br> project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by <br>globus</br> Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, GridFTP [1, 11, 16] was used to enable parallel data transfers.",
                "GridFTP is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware <br>globus</br> Toolkit [16] as the data grid infrastructure.",
                "The <br>globus</br> Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses GridFTP [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of GridFTP.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through GridFTP.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the <br>globus</br> Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the GridFTP protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using GridFTP co-allocation technology, three time costs are incurred: the time required for client authentication to the GridFTP server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a <br>globus</br> proxy and authenticate itself to the GridFTP server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the GridFTP data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our GridFTP GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have <br>globus</br> 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our GridFTP client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our GridFTP client tool, and each number is an average over several runs.",
                "Table 1.",
                "GridFTP end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our GridFTP client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, <br>globus</br>: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with <br>globus</br>, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The <br>globus</br> Alliance, http://www.<br>globus</br>org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the <br>globus</br> Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 <br>globus</br> Toolkit and GridFTP The <br>globus</br> Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the <br>globus</br> Toolkit to build computational Grids to support their applications.",
                "The composition of the <br>globus</br> Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the <br>globus</br> Toolkit and makes use of a common foundation of security.",
                "The <br>globus</br> alliance proposed a common data transfer and access protocol called GridFTP that provides secure, efficient data movement in Grid environments [3]."
            ],
            "translated_annotated_samples": [
                "Cuando un usuario solicita acceso a un conjunto de datos, el sistema determina una forma apropiada de entregar la réplica al usuario. 2.2 Globus Toolkit y GridFTP El Proyecto Globus [9, 11, 16] proporciona herramientas de software colectivamente llamadas El <br>Kit de Herramientas Globus</br> que facilita la construcción de Grids computacionales y aplicaciones basadas en Grid.",
                "Muchas organizaciones utilizan la <br>Herramienta Globus</br> para construir Grillas computacionales que apoyen sus aplicaciones.",
                "La composición del Globus Toolkit se puede visualizar como tres pilares: <br>Gestión de Recursos</br>, Servicios de Información y Gestión de Datos.",
                "Cada pilar representa un componente principal del <br>Globus</br> Toolkit y hace uso de una base común de seguridad.",
                "La alianza <br>Globus</br> propuso un protocolo común de transferencia y acceso de datos llamado GridFTP que proporciona un movimiento seguro y eficiente de datos en entornos de Grid."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque. Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de transferencia de datos de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la transferencia de datos [24]. Los resultados experimentales muestran que nuestro enfoque es superior a los métodos anteriores y logró el mejor rendimiento general. También discutimos el costo de combinación y proporcionamos un esquema efectivo para reducirlo. El resto de este documento está organizado de la siguiente manera. La revisión de antecedentes relacionados y estudios se presentan en la Sección 2 y la arquitectura de co-asignación y trabajos relacionados se introducen en la Sección 3. En la Sección 4, proponemos un servicio eficiente de selección de réplicas. Nuestros enfoques de investigación se describen en la Sección 5, y los resultados experimentales y una evaluación del rendimiento de nuestro esquema se presentan en la Sección 6. La sección 7 concluye este documento de investigación. ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico). El término Data Grid tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes. Las Rejillas de Datos [1, 2, 16] federan una gran cantidad de recursos de almacenamiento. Grandes colecciones de datos medidos o calculados están surgiendo como recursos importantes en muchas aplicaciones intensivas en datos. 2.1.1 Gestión de Réplicas La gestión de réplicas implica la creación o eliminación de réplicas en un sitio de cuadrícula de datos [19]. En otras palabras, el rol de un administrador de réplicas es crear o eliminar réplicas, dentro de sistemas de almacenamiento especificados. La mayoría de las veces, estas réplicas son copias exactas de los archivos originales, creadas solo para aprovechar ciertos beneficios de rendimiento. Un administrador de réplicas generalmente mantiene un catálogo de réplicas que contiene las direcciones de los sitios de réplica y las instancias de archivos. El servicio de gestión de réplicas es responsable de administrar la replicación de copias completas y parciales de conjuntos de datos, definidos como colecciones de archivos. El servicio de gestión de réplicas es solo un componente en un entorno de Data Grid que brinda soporte para aplicaciones de alto rendimiento y alta intensidad de datos. Una réplica o ubicación es un subconjunto de una colección que se almacena en un sistema de almacenamiento físico particular. Puede haber múltiples subconjuntos posiblemente superpuestos de una colección almacenados en múltiples sistemas de almacenamiento en una Rejilla de Datos. Estos sistemas de almacenamiento en red pueden utilizar una variedad de tecnologías de almacenamiento subyacentes y protocolos de movimiento de datos, que son independientes de la gestión de réplicas. 2.1.2 Catálogo de Réplicas Como se mencionó anteriormente, el propósito del catálogo de réplicas es proporcionar mapeos entre nombres lógicos de archivos o colecciones y una o más copias de los objetos en sistemas de almacenamiento físico. El catálogo de réplicas incluye entradas opcionales que describen archivos lógicos individuales. Los archivos lógicos son entidades con nombres globalmente únicos que pueden tener una o más instancias físicas. El catálogo puede contener opcionalmente una entrada de archivo lógico en el catálogo de réplicas para cada archivo lógico en una colección. Una cuadrícula de datos puede contener múltiples catálogos de réplicas. Por ejemplo, una comunidad de investigadores interesados en un tema de investigación particular podría mantener un catálogo de réplicas para una colección de conjuntos de datos de interés mutuo. Es posible crear jerarquías de catálogos de réplicas para imponer una estructura similar a la de un directorio en colecciones lógicas relacionadas. Además, el administrador de réplicas puede realizar control de acceso en catálogos completos, así como en archivos lógicos individuales. 2.1.3 Selección de Réplicas El propósito de la selección de réplicas [16] es seleccionar una réplica entre los sitios que constituyen una Data Grid [19]. Los criterios de selección dependen de las características de la aplicación. Al utilizar este mecanismo, los usuarios de la Data Grid pueden gestionar fácilmente réplicas de conjuntos de datos en sus sitios, con un mejor rendimiento. Se ha dedicado mucho esfuerzo previo al problema de selección de réplicas. El proceso común de selección de réplicas consta de tres pasos: preparación de datos, preprocesamiento y predicción. Entonces, las aplicaciones pueden seleccionar una réplica según sus atributos específicos. La selección de réplicas es importante para aplicaciones intensivas en datos, y puede proporcionar transparencia de ubicación. Cuando un usuario solicita acceso a un conjunto de datos, el sistema determina una forma apropiada de entregar la réplica al usuario. 2.2 Globus Toolkit y GridFTP El Proyecto Globus [9, 11, 16] proporciona herramientas de software colectivamente llamadas El <br>Kit de Herramientas Globus</br> que facilita la construcción de Grids computacionales y aplicaciones basadas en Grid. Muchas organizaciones utilizan la <br>Herramienta Globus</br> para construir Grillas computacionales que apoyen sus aplicaciones. La composición del Globus Toolkit se puede visualizar como tres pilares: <br>Gestión de Recursos</br>, Servicios de Información y Gestión de Datos. Cada pilar representa un componente principal del <br>Globus</br> Toolkit y hace uso de una base común de seguridad. GRAM implementa un protocolo de gestión de recursos, MDS implementa un protocolo de servicios de información y GridFTP implementa un protocolo de transferencia de datos. Todos utilizan el protocolo de seguridad GSI en la capa de conexión [10, 11, 16, 13]. La alianza <br>Globus</br> propuso un protocolo común de transferencia y acceso de datos llamado GridFTP que proporciona un movimiento seguro y eficiente de datos en entornos de Grid. ",
            "candidates": [],
            "error": [
                [
                    "Kit de Herramientas Globus",
                    "Herramienta Globus",
                    "Gestión de Recursos",
                    "Globus",
                    "Globus"
                ]
            ]
        },
        "gridftp": {
            "translated_key": "GridFTP",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Implementation of a Dynamic Adjustment Mechanism with Efficient Replica Selection in Data Grid Environments Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang High-Performance Computing Laboratory Department of Computer Science and Information Engineering Tunghai University Taichung City, 40704, Taiwan R.O.C.",
                "ctyang@thu.edu.tw g932813@thu.edu.tw ABSTRACT The co-allocation architecture was developed in order to enable parallel downloading of datasets from multiple servers.",
                "Several co-allocation strategies have been coupled and used to exploit rate differences among various client-server links and to address dynamic rate fluctuations by dividing files into multiple blocks of equal sizes.",
                "However, a major obstacle, the idle time of faster servers having to wait for the slowest server to deliver the final block, makes it important to reduce differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic coallocation scheme, namely Recursive-Adjustment Co-Allocation scheme, to improve the performance of data transfer in Data Grids.",
                "Our approach reduces the idle time spent waiting for the slowest server and decreases data transfer completion time.",
                "We also provide an effective scheme for reducing the cost of reassembling data blocks.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed applications.",
                "H.3.5 [Online Information Services]: Data sharing, Web-based services.",
                "General Terms Management, Performance, Design, Experimentation. 1.",
                "INTRODUCTION Data Grids aggregate distributed resources for solving large-size dataset management problems.",
                "Most Data Grid applications execute simultaneously and access large numbers of data files in the Grid environment.",
                "Certain data-intensive scientific applications, such as high-energy physics, bioinformatics applications and virtual astrophysical observatories, entail huge amounts of data that require data file management systems to replicate files and manage data transfers and distributed data access.",
                "The data grid infrastructure integrates data storage devices and data management services into the grid environment, which consists of scattered computing and storage resources, perhaps located in different countries/regions yet accessible to users [12].",
                "Replicating popular content in distributed servers is widely used in practice [14, 17, 19].",
                "Recently, large-scale, data-sharing scientific communities such as those described in [1, 5] used this technology to replicate their large datasets over several sites.",
                "Downloading large datasets from several replica locations may result in varied performance rates, because the replica sites may have different architectures, system loadings, and network connectivity.",
                "Bandwidth quality is the most important factor affecting transfers between clients and servers since download speeds are limited by the bandwidth traffic congestion in the links connecting the servers to the clients.",
                "One way to improve download speeds is to determine the best replica locations using replica selection techniques [19].",
                "This method selects the best servers to provide optimum transfer rates because bandwidth quality can vary unpredictably due to the sharing nature of the internet.",
                "Another way is to use co-allocation technology [17] to download data.",
                "Co-allocation of data transfers enables the clients to download data from multiple locations by establishing multiple connections in parallel.",
                "This can improve the performance compared to the single-server cases and alleviate the internet congestion problem [17].",
                "Several co-allocation strategies were provided in previous work [17].",
                "An idle-time drawback remains since faster servers must wait for the slowest server to deliver its final block.",
                "Therefore, it is important to reduce the differences in finishing time among replica servers.",
                "In this paper, we propose a dynamic co-allocation scheme based on co-allocation Grid data transfer architecture called RecursiveAdjustment Co-Allocation scheme that reduces the idle time spent waiting for the slowest server and improves data transfer performance [24].",
                "Experimental results show that our approach is superior to previous methods and achieved the best overall performance.",
                "We also discuss combination cost and provide an effective scheme for reducing it.",
                "The remainder of this paper is organized as follows.",
                "Related background review and studies are presented in Section 2 and the co-allocation architecture and related work are introduced in Section 3.",
                "In Section 4, an efficient replica selection service is proposed by us.",
                "Our research approaches are outlined in Section 5, and experimental results and a performance evaluation of our scheme are presented in Section 6.",
                "Section 7 concludes this research paper. 2.",
                "BACKGROUND 2.1 Data Grid The Data Grids enable the sharing, selection, and connection of a wide variety of geographically distributed computational and storage resources for solving large-scale data intensive scientific applications (e.g., high energy physics, bioinformatics applications, and astrophysical virtual observatory).",
                "The term Data Grid traditionally represents the network of distributed storage resources, from archival systems to caches and databases, which are linked using a logical name space to create global, persistent identifiers and provide uniform access mechanisms [4].",
                "Data Grids [1, 2, 16] federate a lot of storage resources.",
                "Large collections of measured or computed data are emerging as important resources in many data intensive applications. 2.1.1 Replica Management Replica management involves creating or removing replicas at a data grid site [19].",
                "In other words, the role of a replica manager is to create or delete replicas, within specified storage systems.",
                "Most often, these replicas are exact copies of the original files, created only to harness certain performance benefits.",
                "A replica manager typically maintains a replica catalog containing replica site addresses and the file instances.",
                "The replica management service is responsible for managing the replication of complete and partial copies of datasets, defined as collections of files.",
                "The replica management service is just one component in a Data Grid environment that provides support for high-performance, data-intensive applications.",
                "A replica or location is a subset of a collection that is stored on a particular physical storage system.",
                "There may be multiple possibly overlapping subsets of a collection stored on multiple storage systems in a Data Grid.",
                "These Grid storage systems may use a variety of underlying storage technologies and data movement protocols, which are independent of replica management. 2.1.2 Replica Catalog As mentioned above, the purpose of the replica catalog is to provide mappings between logical names for files or collections and one or more copies of the objects on physical storage systems.",
                "The replica catalog includes optional entries that describe individual logical files.",
                "Logical files are entities with globally unique names that may have one or more physical instances.",
                "The catalog may optionally contain one logical file entry in the replica catalog for each logical file in a collection.",
                "A Data Grid may contain multiple replica catalogs.",
                "For example, a community of researchers interested in a particular research topic might maintain a replica catalog for a collection of data sets of mutual interest.",
                "It is possible to create hierarchies of replica catalogs to impose a directory-like structure on related logical collections.",
                "In addition, the replica manager can perform access control on entire catalogs as well as on individual logical files. 2.1.3 Replica Selection The purpose of replica selection [16] is to select a replica from among the sites which constitute a Data Grid [19].",
                "The criteria of selection depend on characteristics of the application.",
                "By using this mechanism, users of the Data Grid can easily manage replicas of data sets at their sites, with better performance.",
                "Much previous effort has been devoted to the replica selection problem.",
                "The common process of replica selection consists of three steps: data preparation, preprocessing and prediction.",
                "Then, applications can select a replica according to its specific attributes.",
                "Replica selection is important to data-intensive applications, and it can provide location transparency.",
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and <br>gridftp</br> The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "Many organizations use the Globus Toolkit to build computational Grids to support their applications.",
                "The composition of the Globus Toolkit can be pictured as three pillars: Resource Management, Information Services, and Data Management.",
                "Each pillar represents a primary component of the Globus Toolkit and makes use of a common foundation of security.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and <br>gridftp</br> implements a data transfer protocol.",
                "They all use the GSI security protocol at the connection layer [10, 11, 16, 13].",
                "The Globus alliance proposed a common data transfer and access protocol called <br>gridftp</br> that provides secure, efficient data movement in Grid environments [3].",
                "This protocol, which extends the standard FTP protocol, provides a superset of the features offered by the various Grid storage systems currently in use.",
                "In order to solve the appearing problems, the Data Grid community tries to develop a secure, efficient data transport mechanism and replica management services.",
                "<br>gridftp</br> is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "There is another key technology from Globus project, called replica catalog [16] which is used to register and manage complete and partial copies of data sets.",
                "The replica catalog contains the mapping information from a logical file or collection to one or more physical files. 2.3 Network Weather Service The Network Weather Service (NWS) [22] is a generalized and distributed monitoring system for producing short-term performance forecasts based on historical performance measurements.",
                "The goal of the system is to dynamically characterize and forecast the performance deliverable at the application level from a set of network and computational resources.",
                "A typical installation involves one nws_nameserver, one or more nws_memory (which may reside on different machines), and an nws_sensor running on each machine with resources which are to be monitored.",
                "The system includes sensors for end-to-end TCP/IP performance (bandwidth and latency), available CPU percentage, and available non-paged memory. 798 2.4 Sysstat Utilities The Sysstat [15] utilities are a collection of performance monitoring tools for the Linux OS.",
                "The Sysstat package incorporates the sar, mpstat, and iostat commands.",
                "The sar command collects and reports system activity information, which can also be saved in a system activity file for future inspection.",
                "The iostat command reports CPU statistics and I/O statistics for tty devices and disks.",
                "The statistics reported by sar concern I/O transfer rates, paging activity, process-related activities, interrupts, network activity, memory and swap space utilization, CPU utilization, kernel activities, and tty statistics, among others.",
                "Uniprocessor (UP) and Symmetric multiprocessor (SMP) machines are fully supported. 3.",
                "CO-ALLOCATION ARCHITECTURE AND RELATED WORK The co-allocation architecture proposed in [17] consists of three main components: an information service, a broker/co-allocator, and local storage systems.",
                "Figure 1 shows the co-allocation of Grid Data transfers, which is an extension of the basic template for resource management [7] provided by Globus Toolkit.",
                "Applications specify the characteristics of desired data and pass the attribute description to a broker.",
                "The broker queries available resources and gets replica locations from information services [6] and replica management services [19], and then gets a list of physical locations for the desired files.",
                "Figure 1.",
                "Data Grid Co-Allocation Architecture [17] The candidate replica locations are passed to a replica selection service [19], which was presented in a previous work [23].",
                "This replica selection service provides estimates of candidate transfer performance based on a cost model and chooses appropriate amounts to request from the better locations.",
                "The co-allocation agent then downloads the data in parallel from the selected servers.",
                "In these researches, <br>gridftp</br> [1, 11, 16] was used to enable parallel data transfers.",
                "<br>gridftp</br> is a high-performance, secure, reliable data transfer protocol optimized for high-bandwidth widearea networks.",
                "Among its many features are security, parallel streams, partial file transfers, third-party transfers, and reusable data channels.",
                "Its partial file transfer ability allows files to be retrieved from data servers by specifying the start and end offsets of file sections.",
                "Data grids consist of scattered computing and storage resources located in different countries/regions yet accessible to users [8].",
                "In this study we used the grid middleware Globus Toolkit [16] as the data grid infrastructure.",
                "The Globus Toolkit provides solutions for such considerations as security, resource management, data management, and information services.",
                "One of its primary components is MDS [6, 11, 16, 25], which is designed to provide a standard mechanism for discovering and publishing resource status and configuration information.",
                "It provides a uniform and flexible interface for data collected by lower-level information providers in two modes: static (e.g., OS, CPU types, and system architectures) and dynamic data (e.g., disk availability, memory availability, and loading).",
                "And it uses <br>gridftp</br> [1, 11, 16], a reliable, secure, and efficient data transport protocol to provide efficient management and transfer of terabytes or petabytes of data in a wide-area, distributed-resource environment.",
                "As datasets are replicated within Grid environments for reliability and performance, clients require the abilities to discover existing data replicas, and create and register new replicas.",
                "A Replica Location Service (RLS) [4] provides a mechanism for discovering and registering existing replicas.",
                "Several prediction metrics have been developed to help replica selection.",
                "For instance, Vazhkudai and Schopf [18, 20, 21] used past data transfer histories to estimate current data transfer throughputs.",
                "In our previous work [23, 24], we proposed a replica selection cost model and a replica selection service to perform replica selection.",
                "In [17], the author proposes co-allocation architecture for co-allocating Grid data transfers across multiple connections by exploiting the partial copy feature of <br>gridftp</br>.",
                "It also provides Brute-Force, History-Base, and Dynamic Load Balancing for allocating data block.",
                "Brute-Force Co-Allocation: Brute-Force Co-Allocation works by dividing the file size equally among available flows.",
                "It does not address the bandwidth differences among the various client-server links.",
                "History-based Co-Allocation: The History-based CoAllocation scheme keeps block sizes per flow proportional to predicted transfer rates.",
                "Conservative Load Balancing: One of their dynamic coallocation is Conservative Load Balancing.",
                "The Conservative Load Balancing dynamic co-allocation strategy divides requested datasets into k disjoint blocks of equal size.",
                "Available servers are assigned single blocks to deliver in parallel.",
                "When a server finishes delivering a block, another is requested, and so on, till the entire file is downloaded.",
                "The loadings on the co-allocated flows are automatically adjusted because the faster servers will deliver more quickly providing larger portions of the file.",
                "Aggressive Load Balancing: Another dynamic coallocation strategy, presented in [17], is the Aggressive Load Balancing.",
                "The Aggressive Load Balancing dynamic co-allocation strategy presented in [17] adds functions that change block size de-liveries by: (1) progressively increasing the amounts of data requested from faster servers, and (2) reducing the amounts of data requested from slower servers or ceasing to request data from them altogether.",
                "The co-allocation strategies described above do not handle the shortcoming of faster servers having to wait for the slowest server to deliver its final block.",
                "In most cases, this wastes much time and decreases overall performance.",
                "Thus, we propose an efficient approach called Recursive-Adjustment Co-Allocation and based 799 on a co-allocation architecture.",
                "It improves dynamic co-allocation and reduces waiting time, thus improving overall transfer performance. 4.",
                "AN EFFICIENT REPLICA SELECTION SERVICE We constructed a replica selection service to enable clients to select the better replica servers in Data Grid environments.",
                "See below for a detailed description. 4.1 Replica Selection Scenario Our proposed replica selection model is illustrated in [23], which shows how a client identifies the best location for a desired replica transfer.",
                "The client first logins in at a local site and executes the Data Grid platform application, which checks to see if the files are available at the local site.",
                "If they are present at the local site, the application accesses them immediately; otherwise, it passes the logical file names to the replica catalog server, which returns a list of physical locations for all registered copies.",
                "The application passes this list of replica locations to a replica selection server, which identifies the storage system destination locations for all candidate data transfer operations.",
                "The replica selection server sends the possible destination locations to the information server, which provides performance measurements and predictions of the three system factors described below.",
                "The replica selection server chooses better replica locations according to these estimates and returns location information to the transfer application, which receives the replica through <br>gridftp</br>.",
                "When the application finishes, it returns the results to the user. 4.2 System Factors Determining the best database from many with the same replications is a significant problem.",
                "In our model, we consider three system factors that affect replica selection: Network bandwidth: This is one of the most significant Data Grid factors since data files in Data Grid environments are usually very large.",
                "In other words, data file transfer times are tightly dependent on network bandwidth situations.",
                "Because network bandwidth is an unstable dynamic factor, we must measure it frequently and predict it as accurately as possible.",
                "The Network Weather Service (NWS) is a powerful toolkit for this purpose.",
                "CPU load: Grid platforms consist of numbers of heterogeneous systems, built with different system architectures, e.g., cluster platforms, supercomputers, PCs.",
                "CPU loading is a dynamic system factor, and a heavy system CPU load will certainly affect data file downloads process from the site.",
                "The measurement of it is done by the Globus Toolkit / MDS.",
                "I/O state: Data Grid nodes consist of different heterogeneous storage systems.",
                "Data files in Data Grids are huge.",
                "If the I/O state of a site that we wish to download files from is very busy, it will directly affect data transfer performance.",
                "We measure I/O states using sysstat [15] utilities. 4.3 Our Replica Selection Cost Model The target function of a cost model for distributed and replicated data storage is the information score from the information service.",
                "We listed some influencing factors for our cost model in the preceding section.",
                "However, we must express these factors in mathematical notation for further analysis.",
                "We assume node i is the local site the user or application logs in on, and node j possesses the replica the user or application wants.",
                "The seven system parameters our replica selection cost model considers are: Scorei-j: the score value represents how efficiently a user or application at node i can acquire a replica from node j BW jiP : percentage of bandwidth available from node i to node j; current bandwidth divided by highest theoretical bandwidth BBW : network bandwidth weight defined by the Data Grid administrator CPU jP : percentage of node j CPU idle states WCPU : CPU load weight defined by the Data Grid administrator OI jP / : percentage of node j I/O idle states WI/O : I/O state weight defined by the Data Grid administrator We define the following general formula using these system factors.",
                "OIOI j CPUCPU j BWBW jiji WPWPWPScore // (1) The three influencing factors in this formula: WBW , WCPU , and WI/O describe CPU, I/O, and network bandwidth weights, which can be determined by Data Grid organization administrators according to the various attributes of the storage systems in Data Grid nodes since some storage equipment does not affect CPU loading.",
                "After several experimental measurements, we determined that network bandwidth is the most significant factor directly influencing data transfer times.",
                "When we performed data transfers using the <br>gridftp</br> protocol we discovered that CPU and I/O statuses slightly affect data transfer performance.",
                "Their respective values in our Data Grid environment are 80%, 10%, and 10%. 4.4 Co-Allocation Cost Analysis When clients download datasets using <br>gridftp</br> co-allocation technology, three time costs are incurred: the time required for client authentication to the <br>gridftp</br> server, actual data transmission time, and data block reassembly time.",
                "Authentication Time: Before a transfer, the client must load a Globus proxy and authenticate itself to the <br>gridftp</br> server with specified user credentials.",
                "The client then establishes a control channel, sets up transfer parameters, and requests data channel creation.",
                "When the channel has been established, the data begins flowing.",
                "Transmission Time: Transmission time is measured from the time when the client starts transferring to the time when all transmission jobs are finished, and it includes the time 800 required for resetting data channels between transfer requests.",
                "Data pathways need be opened only once and may handle many transfers before being closed.",
                "This allows the same data pathways to be used for multiple file transfers.",
                "However, data channels must be explicitly reset between transfer requests.",
                "This is less time-costly.",
                "Combination Time: Co-allocation architecture exploits the partial copy feature of the <br>gridftp</br> data movement tool to enable data transfers across multiple connections.",
                "With partial file transfer, file sections can be retrieved from data servers by specifying only the section start and end offsets.",
                "When these file sections are delivered, they may need to be reassembled; the reassembly operation incurs an additional time cost. 5.",
                "DYNAMIC CO-ALLOCATION STRATEGY Dynamic co-allocation, described above, is the most efficient approach to reducing the influence of network variations between clients and servers.",
                "However, the idle time of faster servers awaiting the slowest server to deliver the last block is still a major factor affecting overall efficiency, which Conservative Load Balancing and Aggressive Load Balancing [17] cannot effectively avoid.",
                "The approach proposed in the present paper, a dynamic allocation mechanism called Recursive-Adjustment CoAllocation can overcome this, and thus, improve data transfer performance. 5.1 Recursive-Adjustment Co-Allocation Recursive-Adjustment Co-Allocation works by continuously adjusting each replica servers workload to correspond to its realtime bandwidth during file transfers.",
                "The goal is to make the expected finish time of all servers the same.",
                "As Figure 2 shows, when an appropriate file section is first selected, it is divided into proper block sizes according to the respective server bandwidths.",
                "The co-allocator then assigns the blocks to servers for transfer.",
                "At this moment, it is expected that the transfer finish time will be consistent at E(T1).",
                "However, since server bandwidths may fluctuate during segment deliveries, actual completion time may be dissimilar (solid line, in Figure 2).",
                "Once the quickest server finishes its work at time T1, the next section is assigned to the servers again.",
                "This allows each server to finish its assigned workload by the expected time at E(T2).",
                "These adjustments are repeated until the entire file transfer is finished.",
                "Server 1 Server 2 Server 3 Round 1 Round 2 E(T1) E(T2)T1 File A Section 1 Section 2 ... ... ...",
                "Figure 2.",
                "The adjustment process The Recursive-Adjustment Co-Allocation process is illustrated in Figure 3.",
                "When a user requests file A, the replica selection service responds with the subset of all available servers defined by the maximum performance matrix.",
                "The co-allocation service gets this list of selected replica servers.",
                "Assuming n replica servers are selected, Si denotes server i such that 1 i n. A connection for file downloading is then built to each server.",
                "The RecursiveAdjustment Co-Allocation process is as follows.",
                "A new section of a file to be allocated is first defined.",
                "The section size, SEj, is: SEj = UnassignedFileSize , (0 < < 1) (2) where SEj denotes the section j such that 1 j k, assuming we allocate k times for the download process.",
                "And thus, there are k sections, while Tj denotes the time section j allocated.",
                "UnassignedFileSize is the portion of file A not yet distributed for downloading; initially, UnassignedFileSize is equal to the total size of file A. is the rate that determines how much of the section remains to be assigned.",
                "Figure 3.",
                "The Recursive-Adjustment Co-Allocation process.",
                "In the next step, SEj is divided into several blocks and assigned to n servers.",
                "Each server has a real-time transfer rate to the client of Bi, which is measured by the Network Weather Service (NWS) [18].",
                "The block size per flow from SEj for each server i at time Tj is: i n i ii n i iji zeUnFinishSiBBzeUnFinishSiSES -)( 11 (3) where UnFinishSizei denotes the size of unfinished transfer blocks that is assigned in previous rounds at server i. UnFinishSizei is equal to zero in first round.",
                "Ideally, depending to the real time bandwidth at time Tj, every flow is expected to finish its workload in future.",
                "This fulfills our requirement to minimize the time faster servers must wait for the slowest server to finish.",
                "If, in some cases, network variations greatly degrade transfer rates, UnFinishSizei may exceed n i ii n i ij BBzeUnFinishSiSE 11 *)( , which is the total block size expected to be transferred after Tj.",
                "In such cases, the co-allocator eliminates the servers in advance and assigns SEj to other servers.",
                "After allocation, all channels continue transferring data blocks.",
                "When a faster channel finishes its assigned data blocks, the co-allocator begins allocating an unassigned section of file A again.",
                "The process of allocating data 801 blocks to adjust expected flow finish time continues until the entire file has been allocated. 5.2 Determining When to Stop Continuous Adjustment Our approach gets new sections from whole files by dividing unassigned file ranges in each round of allocation.",
                "These unassigned portions of the file ranges become smaller after each allocation.",
                "Since adjustment is continuous, it would run as an endless loop if not limited by a stop condition.",
                "However, when is it appropriate to stop continuous adjustment?",
                "We provide two monitoring criteria, LeastSize and ExpectFinishedTime, to enable users to define stop thresholds.",
                "When a threshold is reached, the co-allocation server stopped dividing the remainder of the file and assigns that remainder as the final section.",
                "The LeastSize criterion specifies the smallest file we want to process, and when the unassigned portion of UnassignedFileSize drops below the LeastSize specification, division stops.",
                "ExpectFinishedTime criterion specifies the remaining time transfer is expected to take.",
                "When the expected transfer time of the unassigned portion of a file drops below the time specified by ExpectFinishedTime, file division stops.",
                "The expected rest time value is determined by: 1 n i iBFileSizeUnAssigned (4) These two criteria determine the final section size allocated.",
                "Higher threshold values will induce fewer divisions and yield lower co-allocation costs, which include establishing connections, negotiation, reassembly, etc.",
                "However, although the total coallocation adjustment time may be lower, bandwidth variations may also exert more influence.",
                "By contrast, lower threshold values will induce more frequent dynamic server workload adjustments and, in the case of greater network fluctuations, result in fewer differences in server transfer finish time.",
                "However, lower values will also increase co-allocation times, and hence, increase co-allocation costs.",
                "Therefore, the internet environment, transferred file sizes, and co-allocation costs should all be considered in determining optimum thresholds. 5.3 Reducing the Reassembly Overhead The process of reassembling blocks after data transfers using coallocation technology results in additional overhead and decreases overall performance.",
                "The reassembly overhead is related to total block size, and could be reduced by upgrading hardware capabilities or using better software algorithms.",
                "We propose an efficient alternative reassembly mechanism to reduce the added combination overhead after all block transmissions are finished.",
                "It differs from the conventional method in which the software starts assembly after all blocks have been delivered by starting to assemble blocks once the first deliveries finish.",
                "Of course, this makes it necessary to maintain the original splitting order.",
                "Co-allocation strategies such as Conservative Load Balancing and Recursive-Adjustment Co-Allocation produce additional blocks during file transfers and can benefit from enabling reassembly during data transfers.",
                "If some blocks are assembled in advance, the time cost for assembling the blocks remaining after all transfers finish can be reduced. 6.",
                "EXPERIMENTAL RESULTS AND ANALYSIS In this section, we discuss the performance of our RecursiveAdjustment Co-Allocation strategy.",
                "We evaluate four coallocation schemes: (1) Brute-Force (Brute), (2) History-based (History), (3) Conservative Load Balancing (Conservative) and (4) Recursive-Adjustment Co-Allocation (Recursive).",
                "We analyze the performance of each scheme by comparing their transfer finish time, and the total idle time faster servers spent waiting for the slowest server to finish delivering the last block.",
                "We also analyze the overall performances in the various cases.",
                "We performed wide-area data transfer experiments using our <br>gridftp</br> GUI client tool.",
                "We executed our co-allocation client tool on our testbed at Tunghai University (THU), Taichung City, Taiwan, and fetched files from four selected replica servers: one at Providence University (PU), one at Li-Zen High School (LZ), one at Hsiuping Institute of Technology School (HIT), and one at Da-Li High School (DL).",
                "All these institutions are in Taiwan, and each is at least 10 Km from THU.",
                "Figure 4 shows our Data Grid testbed.",
                "Our servers have Globus 3.0.2 or above installed.",
                "Internet THU Li-Zen High School (LZ) HITCeleron 900 MHz 256 MB RAM 60 GB HD AMD Athlon(tm) XP 2400+ 1024 MB RAM 120 GB HD Pentium 4 2.8 GHz 512 MB RAM 80 GB HD PU Da-Li High School (DL) Athlon MP 2000 MHz *2 1 GB RAM 60 GB HD Pentium 4 1.8 GHZ 128 MB RAM 40 GB HD Pentium 4 2.5 GHZ 512 MB RAM 80 GB HD Figure 4.",
                "Our Data Grid testbed In the following experiments, we set = 0.5, the LeastSize threshold to 10MB, and experimented with file sizes of 10 MB, 50MB, 100MB, 500MB, 1000MB, 2000MB, and 4000MB.",
                "For comparison, we measured the performance of Conservative Load Balancing on each size using the same block numbers.",
                "Figure 5 shows a snapshot of our <br>gridftp</br> client tool.",
                "This client tool is developed by using Java CoG.",
                "It allows easier and more rapid application development by encouraging collaborative code reuse and avoiding duplication of effort among problem-solving environments, science portals, Grid middleware, and collaborative pilots.",
                "Table 1 shows average transmission rates between THU and each replica server.",
                "These numbers were obtained by transferring files of 500MB, 1000MB, and 2000MB from a single replica server using our <br>gridftp</br> client tool, and each number is an average over several runs.",
                "Table 1.",
                "<br>gridftp</br> end-to-end transmission rate from THU to various servers Server Average transmission rate HIT 61.5 Mbps LZ 59.5 Mbps DL 32.1 Mbps PU 26.7 Mbps 802 Figure 5.",
                "Our <br>gridftp</br> client tool We analyzed the effect of faster servers waiting for the slowest server to deliver the last block for each scheme.",
                "Figure 6(a) shows total idle time for various file sizes.",
                "Note that our RecursiveAdjustment Co-Allocation scheme achieved significant performance improvements over other schemes for every file size.",
                "These results demonstrate that our approach efficiently reduces the differences in servers finish times.",
                "The experimental results shown in Figure 6(b) indicate that our scheme beginning block reassembly as soon as the first blocks have been completely delivered reduces combination time, thus aiding co-allocation strategies like Conservative Load Balancing and RecursiveAdjustment Co-Allocation that produce more blocks during data transfers.",
                "Figure 7 shows total completion time experimental results in a detailed cost structure view.",
                "Servers were at PU, DL, and HIT, with the client at THU.",
                "The first three bars for each file size denote the time to download the entire file from single server, while the other bars show co-allocated downloads using all three servers.",
                "Our co-allocation scheme finished the job faster than the other co-allocation strategies.",
                "Thus, we may infer that the main gains our technology offers are lower transmission and combination times than other co-allocation strategies. 0 20 40 60 80 100 120 140 160 180 200 100 500 1000 1500 2000 File Size (MB) WaitTime(Sec) Brute3 History3 Conservative3 Recursive3 0 10 20 30 40 50 60 70 80 90 100 500 1000 1500 2000 File Size (MB) CombinationTime(Sec) Brute3 History3 Conservative3 Recursive3 Figure 6. (a) Idle times for various methods; servers are at PU, DL, and HIT. (b) Combination times for various methods; servers are at PU, DL, and HIT.",
                "In the next experiment, we used the Recursive-Adjustment CoAllocation strategy with various sets of replica servers and measured overall performances, where overall performance is: Total Performance = File size/Total Completion Time (5) Table 2 lists all experiments we performed and the sets of replica servers used.",
                "The results in Figure 8(a) show that using coallocation technologies yielded no improvement for smaller file sizes such as 10MB.",
                "They also show that in most cases, overall performance increased as the number of co-allocated flows increased.",
                "We observed that for our testbed and our co-allocation technology, overall performance reached its highest value in the REC3_2 case.",
                "However, in the REC4 case, when we added one flow to the set of replica servers, the performance did not increase.",
                "On the contrary, it decreased.",
                "We can infer that the co-allocation efficiency reached saturation in the REC3_2 case, and that additional flows caused additional overhead and reduced overall performance.",
                "This means that more download flows do not necessarily result in higher performance.",
                "We must choose appropriate numbers of flows to achieve optimum performance.",
                "We show the detailed cost structure view for the case of REC3_2 and the case of REC4 in Figure 8(b).",
                "The detailed cost consists of authentication time, transfer time and combination time. 0 100 200 300 400 500 600 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 PU1 DL1 HIT1 BRU3 HIS3 CON3 REC3 500 1000 1500 2000 File Size (MB) CompletionTime(Sec) Authentication Time Transmission Time Combination Time Figure 7.",
                "Completion times for various methods; servers are at PU, DL, and HIT.",
                "Table 2.",
                "The sets of replica servers for all cases Case Servers PU1 PU DL1 DL REC2 PU, DL REC3_1 PU, DL, LZ REC3_2 PU, DL, HIT REC4 PU, DL, HIT, LZ 0 10 20 30 40 50 60 70 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) PU1 DL1 REC2 REC3_1 REC3_2 REC4 0 10 20 30 40 50 60 70 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 REC3_2 REC4 10 50 100 500 1000 1500 2000 File Size (MB) OverallPerformance(Mbits) Authentication Time Transmission Time Combination Time Figure 8. (a) Overall performances for various sets of servers. (b) Detailed cost structure view for the case of REC3_2 and the case of REC4. 7.",
                "CONCLUSIONS The co-allocation architecture provides a coordinated agent for assigning data blocks.",
                "A previous work showed that the dynamic co-allocation scheme leads to performance improvements.",
                "However, it cannot handle the idle time of faster servers, which must wait for the slowest server to deliver its final block.",
                "We proposed the Recursive-Adjustment Co-Allocation scheme to improve data transfer performances using the co-allocation architecture in [17].",
                "In this approach, the workloads of selected replica servers are continuously adjusted during data transfers, and we provide a function that enables users to define a final 803 block threshold, according to their data grid environment.",
                "Experimental results show the effectiveness of our proposed technique in improving transfer time and reducing overall idle time spent waiting for the slowest server.",
                "We also discussed the re-combination cost and provided an effective scheme for reducing it. 8.",
                "REFERENCES [1] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Data Management and Transfer in HighPerformance Computational Grid Environments, Parallel Computing, 28(5):749-771, May 2002. [2] B. Allcock, J. Bester, J. Bresnahan, A. Chervenak, I.",
                "Foster, C. Kesselman, S. Meder, V. Nefedova, D. Quesnel, and S. Tuecke, Secure, Efficient Data Transport and Replica Management for High-Performance Data-Intensive Computing, Proc. of the Eighteenth IEEE Symposium on Mass Storage Systems and Technologies, pp. 13-28, 2001. [3] B. Allcock, S. Tuecke, I.",
                "Foster, A. Chervenak, and C. Kesselman.",
                "Protocols and Services for Distributed DataIntensive Science.",
                "ACAT2000 Proceedings, pp. 161-163, 2000. [4] A. Chervenak, E. Deelman, I.",
                "Foster, L. Guy, W. Hoschek, A. Iamnitchi, C. Kesselman, P. Kunszt, and M. Ripeanu, Giggle: A Framework for Constructing Scalable Replica Location Services, Proc. of SC 2002, Baltimore, MD, 2002. [5] A. Chervenak, I.",
                "Foster, C. Kesselman, C. Salisbury, and S. Tuecke, The Data Grid: Towards an Architecture for the Distributed Management and Analysis of Large Scientific Datasets, Journal of Network and Computer Applications, 23:187-200, 2001. [6] K. Czajkowski, S. Fitzgerald, I.",
                "Foster, and C. Kesselman, Grid Information Services for Distributed Resource Sharing, Proc. of the Tenth IEEE International Symposium on High-Performance Distributed Computing (HPDC-1001), 181-194, August 2001. [7] K. Czajkowski, I.",
                "Foster, and C. Kesselman.",
                "Resource CoAllocation in Computational Grids, Proc. of the Eighth IEEE International Symposium on High Performance Distributed Computing (HPDC-899), August 1999. [8] F. Donno, L. Gaido, A. Ghiselli, F. Prelz, and M. Sgaravatto, DataGrid Prototype 1, TERENA Networking Conference, http://www.terena.nl/conferences/tnc2002/Papers/p5a2ghiselli.pdf, June 2002, [9] I.",
                "Foster, C. Kesselman, and S. Tuecke.",
                "The Anatomy of the Grid: Enabling Scalable Virtual Organizations.",
                "Int.",
                "J. of Supercomputer Applications and High Performance Computing, 15(3), pp. 200-222, 2001. [10] I.",
                "Foster and C. Kesselman, Globus: A Metacomputing Infrastructure Toolkit, Intl J. Supercomputer Applications, 11(2), pp. 115-128, 1997. [11] Global Grid Forum, http://www.ggf.org/ [12] W. Hoschek, J. Jaen-Martinez, A. Samar, H. Stockinger, and K. Stockinger, Data Management in an International Data Grid Project, Proc. of First IEEE/ACM International Workshop on Grid Computing - Grid 2000, Bangalore, India, December 2000. [13] IBM Red Books, Introduction to Grid Computing with Globus, IBM Press, www.redbooks.ibm.com/redbooks/pdfs/sg246895.pdf [14] H. Stockinger, A. Samar, B. Allcock, I.",
                "Foster, K. Holtman, and B. Tierney, File and Object Replication in Data Grids, Journal of Cluster Computing, 5(3):305-314, 2002. [15] SYSSTAT utilities home page, http://perso.wanadoo.fr/sebastien.godard/ [16] The Globus Alliance, http://www.globus.org/ [17] S. Vazhkudai, Enabling the Co-Allocation of Grid Data Transfers, Proc. of Fourth International Workshop on Grid Computing, pp. 41-51, November 2003. [18] S. Vazhkudai and J. Schopf, Using Regression Techniques to Predict Large Data Transfers, International Journal of High Performance Computing Applications (IJHPCA), 17:249-268, August 2003. [19] S. Vazhkudai, S. Tuecke, and I.",
                "Foster, Replica Selection in the Globus Data Grid, Proc. of the 1st International Symposium on Cluster Computing and the Grid (CCGRID 2001), pp. 106-113, May 2001. [20] S. Vazhkudai, J. Schopf, Predicting Sporadic Grid Data Transfers, Proc. of 11th IEEE International Symposium on High Performance Distributed Computing (HPDC-11 02), pp. 188-196, July 2002. [21] S. Vazhkudai, J. Schopf, and I.",
                "Foster, Predicting the Performance of Wide Area Data Transfers, Proc. of the 16th International Parallel and Distributed Processing Symposium (IPDPS 2002), pp.34-43, April 2002, pp. 34 - 43. [22] R. Wolski, N. Spring, and J. Hayes, The Network Weather Service: A Distributed Resource Performance Forecasting Service for Metacomputing, Future Generation Computer Systems, 15(5-6):757-768, 1999. [23] Chao-Tung Yang, Chun-Hsiang Chen, Kuan-Ching Li, and Ching-Hsien Hsu, Performance Analysis of Applying Replica Selection Technology for Data Grid Environments, PaCT 2005, Lecture Notes in Computer Science, vol. 3603, pp. 278-287, Springer-Verlag, September 2005. [24] Chao-Tung Yang, I-Hsien Yang, Kuan-Ching Li, and ChingHsien Hsu A Recursive-Adjustment Co-Allocation Scheme in Data Grid Environments, ICA3PP 2005 Algorithm and Architecture for Parallel Processing, Lecture Notes in Computer Science, vol. 3719, pp. 40-49, Springer-Verlag, October 2005. [25] X. Zhang, J. Freschl, and J. Schopf, A Performance Study of Monitoring and Information Services for Distributed Systems, Proc. of 12th IEEE International Symposium on High Performance Distributed Computing (HPDC-12 03), pp. 270-282, August 2003. 804"
            ],
            "original_annotated_samples": [
                "When a user requests for accessing a data set, the system determines an appropriate way to deliver the replica to the user. 2.2 Globus Toolkit and <br>gridftp</br> The Globus Project [9, 11, 16] provides software tools collectively called The Globus Toolkit that makes it easier to build computational Grids and Grid-based applications.",
                "GRAM implements a resource management protocol, MDS implements an information services protocol, and <br>gridftp</br> implements a data transfer protocol.",
                "The Globus alliance proposed a common data transfer and access protocol called <br>gridftp</br> that provides secure, efficient data movement in Grid environments [3].",
                "<br>gridftp</br> is a reliable, secure and efficient data transport protocol which is developed as a part of the Globus project.",
                "In these researches, <br>gridftp</br> [1, 11, 16] was used to enable parallel data transfers."
            ],
            "translated_annotated_samples": [
                "Cuando un usuario solicita acceso a un conjunto de datos, el sistema determina una forma apropiada de entregar la réplica al usuario. 2.2 Globus Toolkit y <br>GridFTP</br> El Proyecto Globus [9, 11, 16] proporciona herramientas de software colectivamente llamadas El Kit de Herramientas Globus que facilita la construcción de Grids computacionales y aplicaciones basadas en Grid.",
                "GRAM implementa un protocolo de gestión de recursos, MDS implementa un protocolo de servicios de información y <br>GridFTP</br> implementa un protocolo de transferencia de datos.",
                "La alianza Globus propuso un protocolo común de transferencia y acceso de datos llamado <br>GridFTP</br> que proporciona un movimiento seguro y eficiente de datos en entornos de Grid.",
                "<br>GridFTP</br> es un protocolo de transporte de datos confiable, seguro y eficiente que se desarrolló como parte del proyecto Globus.",
                "En estas investigaciones, se utilizó <br>GridFTP</br> [1, 11, 16] para habilitar transferencias de datos en paralelo."
            ],
            "translated_text": "Implementación de un Mecanismo de Ajuste Dinámico con Selección Eficiente de Réplicas en Entornos de Cuadrícula de Datos Chao-Tung Yang I-Hsien Yang Chun-Hsiang Chen Shih-Yu Wang Laboratorio de Computación de Alto Rendimiento Departamento de Ciencias de la Computación e Ingeniería de la Información Universidad de Tunghai Ciudad de Taichung, 40704, Taiwán R.O.C. La arquitectura de co-asignación se desarrolló para permitir la descarga paralela de conjuntos de datos desde múltiples servidores. Varias estrategias de coasignación han sido acopladas y utilizadas para explotar las diferencias de velocidad entre varios enlaces cliente-servidor y para abordar las fluctuaciones dinámicas de velocidad dividiendo los archivos en múltiples bloques de tamaños iguales. Sin embargo, un obstáculo importante, el tiempo de inactividad de los servidores más rápidos que tienen que esperar al servidor más lento para entregar el bloque final, hace importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coalocación dinámica, denominado esquema de Coalocación Co-Ajustada Recursiva, para mejorar el rendimiento de la transferencia de datos en Rejillas de Datos. Nuestro enfoque reduce el tiempo de inactividad esperando al servidor más lento y disminuye el tiempo de finalización de la transferencia de datos. También ofrecemos un esquema efectivo para reducir el costo de volver a ensamblar bloques de datos. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones distribuidas. H.3.5 [Servicios de Información en Línea]: Compartir datos, servicios basados en la web. Gestión, Rendimiento, Diseño, Experimentación. 1. INTRODUCCIÓN Las redes de datos agregan recursos distribuidos para resolver problemas de gestión de conjuntos de datos de gran tamaño. La mayoría de las aplicaciones de Data Grid se ejecutan simultáneamente y acceden a grandes cantidades de archivos de datos en el entorno de la Grid. Ciertas aplicaciones científicas intensivas en datos, como la física de altas energías, las aplicaciones de bioinformática y los observatorios astrofísicos virtuales, implican enormes cantidades de datos que requieren sistemas de gestión de archivos de datos para replicar archivos y gestionar transferencias de datos y acceso distribuido a los datos. La infraestructura de la cuadrícula de datos integra dispositivos de almacenamiento de datos y servicios de gestión de datos en el entorno de la cuadrícula, que consiste en recursos informáticos y de almacenamiento dispersos, quizás ubicados en diferentes países/regiones pero accesibles para los usuarios [12]. La replicación de contenido popular en servidores distribuidos es ampliamente utilizada en la práctica [14, 17, 19]. Recientemente, comunidades científicas de intercambio de datos a gran escala, como las descritas en [1, 5], utilizaron esta tecnología para replicar sus grandes conjuntos de datos en varios sitios. Descargar grandes conjuntos de datos desde varias ubicaciones de réplica puede resultar en tasas de rendimiento variadas, ya que los sitios de réplica pueden tener arquitecturas, cargas de sistema y conectividad de red diferentes. La calidad del ancho de banda es el factor más importante que afecta las transferencias entre clientes y servidores, ya que las velocidades de descarga están limitadas por la congestión del tráfico de ancho de banda en los enlaces que conectan los servidores con los clientes. Una forma de mejorar la velocidad de descarga es determinar las mejores ubicaciones de réplicas utilizando técnicas de selección de réplicas [19]. Este método selecciona los mejores servidores para proporcionar tasas de transferencia óptimas, ya que la calidad del ancho de banda puede variar de forma impredecible debido a la naturaleza compartida de internet. Otra forma es utilizar la tecnología de co-asignación [17] para descargar datos. La coasignación de transferencias de datos permite a los clientes descargar datos desde múltiples ubicaciones al establecer múltiples conexiones en paralelo. Esto puede mejorar el rendimiento en comparación con los casos de un solo servidor y aliviar el problema de congestión en internet [17]. Varios estrategias de coasignación fueron proporcionadas en trabajos anteriores [17]. Permanece una desventaja en el tiempo de inactividad ya que los servidores más rápidos deben esperar a que el servidor más lento entregue su último bloque. Por lo tanto, es importante reducir las diferencias en el tiempo de finalización entre los servidores réplica. En este artículo, proponemos un esquema de coasignación dinámica basado en la arquitectura de transferencia de datos de coasignación en la red llamado esquema de coasignación RecursiveAdjustment que reduce el tiempo de inactividad esperando al servidor más lento y mejora el rendimiento de la transferencia de datos [24]. Los resultados experimentales muestran que nuestro enfoque es superior a los métodos anteriores y logró el mejor rendimiento general. También discutimos el costo de combinación y proporcionamos un esquema efectivo para reducirlo. El resto de este documento está organizado de la siguiente manera. La revisión de antecedentes relacionados y estudios se presentan en la Sección 2 y la arquitectura de co-asignación y trabajos relacionados se introducen en la Sección 3. En la Sección 4, proponemos un servicio eficiente de selección de réplicas. Nuestros enfoques de investigación se describen en la Sección 5, y los resultados experimentales y una evaluación del rendimiento de nuestro esquema se presentan en la Sección 6. La sección 7 concluye este documento de investigación. ANTECEDENTES 2.1 Rejilla de Datos Las Rejillas de Datos permiten el intercambio, selección y conexión de una amplia variedad de recursos computacionales y de almacenamiento distribuidos geográficamente para resolver aplicaciones científicas intensivas en datos a gran escala (por ejemplo, física de altas energías, aplicaciones de bioinformática y observatorio virtual astrofísico). El término Data Grid tradicionalmente representa la red de recursos de almacenamiento distribuido, desde sistemas de archivo hasta cachés y bases de datos, que están vinculados utilizando un espacio de nombres lógico para crear identificadores globales y persistentes y proporcionar mecanismos de acceso uniformes. Las Rejillas de Datos [1, 2, 16] federan una gran cantidad de recursos de almacenamiento. Grandes colecciones de datos medidos o calculados están surgiendo como recursos importantes en muchas aplicaciones intensivas en datos. 2.1.1 Gestión de Réplicas La gestión de réplicas implica la creación o eliminación de réplicas en un sitio de cuadrícula de datos [19]. En otras palabras, el rol de un administrador de réplicas es crear o eliminar réplicas, dentro de sistemas de almacenamiento especificados. La mayoría de las veces, estas réplicas son copias exactas de los archivos originales, creadas solo para aprovechar ciertos beneficios de rendimiento. Un administrador de réplicas generalmente mantiene un catálogo de réplicas que contiene las direcciones de los sitios de réplica y las instancias de archivos. El servicio de gestión de réplicas es responsable de administrar la replicación de copias completas y parciales de conjuntos de datos, definidos como colecciones de archivos. El servicio de gestión de réplicas es solo un componente en un entorno de Data Grid que brinda soporte para aplicaciones de alto rendimiento y alta intensidad de datos. Una réplica o ubicación es un subconjunto de una colección que se almacena en un sistema de almacenamiento físico particular. Puede haber múltiples subconjuntos posiblemente superpuestos de una colección almacenados en múltiples sistemas de almacenamiento en una Rejilla de Datos. Estos sistemas de almacenamiento en red pueden utilizar una variedad de tecnologías de almacenamiento subyacentes y protocolos de movimiento de datos, que son independientes de la gestión de réplicas. 2.1.2 Catálogo de Réplicas Como se mencionó anteriormente, el propósito del catálogo de réplicas es proporcionar mapeos entre nombres lógicos de archivos o colecciones y una o más copias de los objetos en sistemas de almacenamiento físico. El catálogo de réplicas incluye entradas opcionales que describen archivos lógicos individuales. Los archivos lógicos son entidades con nombres globalmente únicos que pueden tener una o más instancias físicas. El catálogo puede contener opcionalmente una entrada de archivo lógico en el catálogo de réplicas para cada archivo lógico en una colección. Una cuadrícula de datos puede contener múltiples catálogos de réplicas. Por ejemplo, una comunidad de investigadores interesados en un tema de investigación particular podría mantener un catálogo de réplicas para una colección de conjuntos de datos de interés mutuo. Es posible crear jerarquías de catálogos de réplicas para imponer una estructura similar a la de un directorio en colecciones lógicas relacionadas. Además, el administrador de réplicas puede realizar control de acceso en catálogos completos, así como en archivos lógicos individuales. 2.1.3 Selección de Réplicas El propósito de la selección de réplicas [16] es seleccionar una réplica entre los sitios que constituyen una Data Grid [19]. Los criterios de selección dependen de las características de la aplicación. Al utilizar este mecanismo, los usuarios de la Data Grid pueden gestionar fácilmente réplicas de conjuntos de datos en sus sitios, con un mejor rendimiento. Se ha dedicado mucho esfuerzo previo al problema de selección de réplicas. El proceso común de selección de réplicas consta de tres pasos: preparación de datos, preprocesamiento y predicción. Entonces, las aplicaciones pueden seleccionar una réplica según sus atributos específicos. La selección de réplicas es importante para aplicaciones intensivas en datos, y puede proporcionar transparencia de ubicación. Cuando un usuario solicita acceso a un conjunto de datos, el sistema determina una forma apropiada de entregar la réplica al usuario. 2.2 Globus Toolkit y <br>GridFTP</br> El Proyecto Globus [9, 11, 16] proporciona herramientas de software colectivamente llamadas El Kit de Herramientas Globus que facilita la construcción de Grids computacionales y aplicaciones basadas en Grid. Muchas organizaciones utilizan la Herramienta Globus para construir Grillas computacionales que apoyen sus aplicaciones. La composición del Globus Toolkit se puede visualizar como tres pilares: Gestión de Recursos, Servicios de Información y Gestión de Datos. Cada pilar representa un componente principal del Globus Toolkit y hace uso de una base común de seguridad. GRAM implementa un protocolo de gestión de recursos, MDS implementa un protocolo de servicios de información y <br>GridFTP</br> implementa un protocolo de transferencia de datos. Todos utilizan el protocolo de seguridad GSI en la capa de conexión [10, 11, 16, 13]. La alianza Globus propuso un protocolo común de transferencia y acceso de datos llamado <br>GridFTP</br> que proporciona un movimiento seguro y eficiente de datos en entornos de Grid. Este protocolo, que extiende el protocolo estándar FTP, proporciona un superconjunto de las características ofrecidas por los diversos sistemas de almacenamiento en red actualmente en uso. Para resolver los problemas que surgen, la comunidad de Data Grid intenta desarrollar un mecanismo seguro y eficiente de transporte de datos y servicios de gestión de réplicas. <br>GridFTP</br> es un protocolo de transporte de datos confiable, seguro y eficiente que se desarrolló como parte del proyecto Globus. Hay otra tecnología clave del proyecto Globus, llamada catálogo de réplicas [16], que se utiliza para registrar y gestionar copias completas y parciales de conjuntos de datos. El catálogo de réplicas contiene la información de mapeo de un archivo lógico o colección a uno o más archivos físicos. 2.3 Servicio Meteorológico de Red El Servicio Meteorológico de Red (NWS) [22] es un sistema de monitoreo generalizado y distribuido para producir pronósticos de rendimiento a corto plazo basados en mediciones de rendimiento históricas. El objetivo del sistema es caracterizar y predecir dinámicamente el rendimiento entregable a nivel de aplicación a partir de un conjunto de recursos de red y computacionales. Una instalación típica implica un nws_nameserver, uno o más nws_memory (que pueden residir en máquinas diferentes) y un nws_sensor ejecutándose en cada máquina con los recursos que se van a monitorear. El sistema incluye sensores para el rendimiento TCP/IP de extremo a extremo (ancho de banda y latencia), porcentaje de CPU disponible y memoria no paginada disponible. 798 2.4 Utilidades Sysstat Las utilidades Sysstat [15] son un conjunto de herramientas de monitoreo de rendimiento para el sistema operativo Linux. El paquete Sysstat incorpora los comandos sar, mpstat e iostat. El comando sar recopila y reporta información de actividad del sistema, la cual también puede ser guardada en un archivo de actividad del sistema para inspección futura. El comando iostat informa estadísticas de la CPU y estadísticas de E/S para dispositivos tty y discos. Las estadísticas reportadas por SAR se refieren a tasas de transferencia de E/S, actividad de paginación, actividades relacionadas con procesos, interrupciones, actividad de red, utilización de memoria y espacio de intercambio, utilización de CPU, actividades del kernel y estadísticas de TTY, entre otros. Las máquinas Uniprocessor (UP) y Symmetric multiprocessor (SMP) son totalmente compatibles. 3. La arquitectura de co-asignación propuesta en [17] consta de tres componentes principales: un servicio de información, un intermediario/co-asignador y sistemas de almacenamiento locales. La Figura 1 muestra la co-asignación de transferencias de datos de la red, que es una extensión de la plantilla básica para la gestión de recursos [7] proporcionada por Globus Toolkit. Las aplicaciones especifican las características de los datos deseados y envían la descripción de los atributos a un intermediario. El corredor consulta los recursos disponibles y obtiene las ubicaciones de réplicas de los servicios de información [6] y los servicios de gestión de réplicas [19], y luego obtiene una lista de ubicaciones físicas para los archivos deseados. Figura 1. La arquitectura de coasignación de cuadrícula de datos [17] pasa las ubicaciones candidatas de réplicas a un servicio de selección de réplicas [19], que fue presentado en un trabajo previo [23]. Este servicio de selección de réplicas proporciona estimaciones del rendimiento de transferencia de candidatos basadas en un modelo de costos y elige las cantidades apropiadas para solicitar a las ubicaciones más adecuadas. El agente de coasignación luego descarga los datos en paralelo desde los servidores seleccionados. En estas investigaciones, se utilizó <br>GridFTP</br> [1, 11, 16] para habilitar transferencias de datos en paralelo. ",
            "candidates": [],
            "error": [
                [
                    ""
                ]
            ]
        }
    }
}