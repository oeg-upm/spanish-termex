{
    "id": "J-13",
    "original_text": "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices. While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs). Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph. Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness. In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem. In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3. Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions. We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here. Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width. Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph. Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1. INTRODUCTION Combinatorial auctions. Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items. This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items. This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18]. Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I. Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I. An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j. The winner determination problem. A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes. This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19]. Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]). In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions. Item graphs. Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph. Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16]. To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}. A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B . Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge. Example 1. The hypergraph H I0,B0 reported in Figure 1.(a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3. The primal graph for H I0,B0 is reported in Figure 1.(b), while two example item graphs are reported in Figure 1.(c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently. The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined. However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently. Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so. Weighted Set Packing. Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]). Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅. Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0. Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi). Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B . Example 2. Consider again the hypergraph H I0,B0 reported in Figure 1.(a). An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1. By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ). Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable. Towards this aim, we first study structured item graphs and solve the open problem in [3]. The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3. More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete. In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem. Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs). Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most. For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP. Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm. Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]). Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs. To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs. In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach. Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition. The proof of the above results give us some interesting insight into the notion of structured item graph. Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions. A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions. The rest of the paper is organized as follows. Section 2 discusses the intractability of structured item graphs. Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable. The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4. Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2. COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph. A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected. An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below. A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|. The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions. The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3]. Theorem 1 (cf. [3]). Assume a k-width tree decomposition T, χ of an item graph for H is given. Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ). Many item graphs can be associated with a hypergraph. As an example, observe that the item graph in Figure 1.(c) has treewidth 1, while Figure 1.(d) reports an item graph whose treewidth is 2. Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed. Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize. Theorem 2. Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard. The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E). To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 . The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution. First, we discuss the way HG is constructed. See Figure 2.(a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}. From G to HG. Let G = (N, E) be a directed graph. Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y. No other node is in N(HG). Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}. Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes. As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2.(a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind. In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below. Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}. Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v). Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG. Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2). Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4). The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4). In the following lemma, we positively answer this question and refer the reader to its proof for an example construction. Lemma 1. A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ). Key Ingredients. We are now in the position of presenting an overview of the key ingredients of the proof. Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least). There are three basic observations serving the purpose of proving the correctness of the reduction. Blocks of TD: First, we observe that TD must contain some special kinds of vertex. Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}. And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }. Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2). Each of these vertices plays a specific role in the reduction. Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y. Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x. As an example, Figure 2.(b) reports the skeleton of a tree decomposition TD. The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2.(a) - other blocks in it (of the form w(x,y)) are defined next. Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG. The arguments for the proof are as follows. First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}. Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))). Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}). Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty). When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG. In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x). To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path. In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y). As an example, in Figure 2.(b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path. Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD. E.g., Figure 2.(a) shows w(x,t), which is not used in TD, and Figure 2.(b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3. TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances. To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems. A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H). If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v). We denote the set of vertices N of T by vertices(T). Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1. A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p). The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|. The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions. A hypergraph H is acyclic if hw(H) = 1. P Example 3. The hypergraph H I0,B0 reported in Figure 1.(a) is an example acyclic hypergraph. Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3.(a) and Figure 3.(b), respectively, are not acyclic since their hypertree width is 2. A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c). In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H). As an example, the reader may want to check again the hypergraph H1 in Figure 3.(a) and notice that the hypergraph in Figure 3.(b) is in fact its dual. The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios. Theorem 3. On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4. The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H. For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v). In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv. Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H). Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next. Let hv and hc be two packings for Hv and Hc, respectively. We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv. Example 4. Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c). Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end. Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a). For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }. Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc. For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases. In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp. For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated. Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv). Indeed, if v is a leaf, then v hv = w(hv). Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily). The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c. In the second phase, the tree T is processed starting from the root. Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr. Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5. Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1. Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5.(b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c. Specifically, the choices made during the computation are such that the packing {h2, h3} is computed. In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0. For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1. Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree. Equivalently, the algorithm may have chosen {h5}. As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c). Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4. Let H be a hypergraph and w be a weighting function for it. Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H. Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ). Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅. Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation. By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2. In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2. Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v). Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase. Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv. Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition. Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw. This holds in particular for w = v1. Contradiction with the definition of v1. Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv). Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved. As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most. Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv . These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times. Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c. The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved. Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7]. Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem. As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable. Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation). Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9]. The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL. Theorem 5. Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it. Then, MaxWSP(H, w) is in LLOGCFL . 4. HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality). Surprisingly, we establish this is not the case. The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict. Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H). X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ). A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1]. A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y . A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ). For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}. Definition 2. A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t. Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions. P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem. Theorem 6. Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H). Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 . Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H). In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0. Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k). By definition, strict hypertree decompositions are special hypertree decompositions. In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power. Theorem 7. C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1). A Game Theoretic View. We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width. The game is played on a hypergraph H by a robber against k marshals which act in coordination. Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked. Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges. Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not. The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is. Otherwise, the robber wins. Theorem 8. Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H). Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5. CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario. The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3. Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width. For some special, yet relevant cases, a highly parallelizable algorithm is also discussed. Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality). In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]). In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature. As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k . Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem. For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold. Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award. In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford. In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6. REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe. Hypertree-Width and Related Hypergraph Invariants. In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier. Solving Concisely Expressed Combinatorial Auction Problems. In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm. Combinatorial auctions with structured item graphs. In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad. An o(n2 ) algorithm for circular-arc graph recognition. In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham. Taming the computational complexity of combinatorial auctions: Optimal and approximate. In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello. Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width. Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello. Hypertree decompositions and tractable queries. Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier. Solving combinatorial auctions using stochastic local search. In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson. A Catalog of Complexity Classes. In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring. An incremental linear-time algorithm for recognizing interval graphs. SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm. The Winner Determination Problem. In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions. MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham. Truth revelation in approximately efficient 160 combinatorial auctions. J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan. Analyzing the airwaves auction. Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan. Selling spectrum rights. Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan. Bidding and allocation in combinatorial auctions. In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour. Graph minors ii. algorithmic aspects of tree width. Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad. Computationally manageable combinatorial auctions. Management Science, 44:1131-1147, 1998. [18] T. Sandholm. An implementation of the contract net protocol based on marginal cost calculations. In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm. Algorithm for optimal winner determination in combinatorial auctions. Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm. Winner determination algorithms. In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions. MIT Press, 2006. [21] T. Sandholm and S. Suri. Bob: Improved winner determination in combinatorial auctions and generalizations. Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz. Some tractable combinatorial auctions. In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan. An efficient approximate allocation algorithm for combinatorial auctions. In Proc. of EC01, pages 125-136, 2001. 161",
    "original_translation": "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030Renda, Italia ggreco@mat.unical.it Resumen El problema de determinación del ganador en las subastas combinatorias es el problema de determinar la asignación de los artículos entre los licitadores que maximiza la suma de los precios de oferta aceptados. Si bien este problema es en general Nphard, se sabe que es factible en el tiempo polinomial en aquellos casos cuyos gráficos de elementos asociados han limitado el ancho de árboles (llamados gráficos de elementos estructurados). Formalmente, un gráfico de elementos es un gráfico cuyos nodos están en correspondencia uno a uno con los elementos, y los bordes son tales que para cualquier oferta, los elementos que ocurren en él inducen un subgrafio conectado. Tenga en cuenta que muchos gráficos de elementos pueden estar asociados con una subasta combinatoria dada, dependiendo de los bordes seleccionados para garantizar la conexión. De hecho, la capacidad de extracción de determinar si existe un gráfico de elementos estructurado de un ancho de árbol fijo (y de ser así, calcular uno) se dejó como un problema abierto crucial. En este artículo, resolvemos este problema demostrando que la existencia de un gráfico de elementos estructurados es computacionalmente intratable, incluso para el ancho de árboles 3. Motivado por esta mala noticia, investigamos diferentes tipos de requisitos estructurales que pueden usarse para aislar clases manejables de subastas combinatorias. Mostramos que la noción de descomposición de hipertree, una medida recientemente introducida de ciclicidad del hipergrafio, resulta ser más útil aquí. De hecho, mostramos que el problema de determinación del ganador se puede solucionar en el tiempo polinomial en instancias cuyas interacciones de postor pueden representarse con hipergrafos (duales) que han limitado el ancho de hipertree. Aún más sorprendente, mostramos que la clase de instancias manejables identificadas por medio de nuestro enfoque contiene adecuadamente la clase de instancias que tienen un gráfico de elementos estructurados. Categorías y descriptores de sujetos J.4 [Aplicaciones informáticas]: Ciencias Sociales y del Comportamiento-Economía;F.2 [Teoría de la computación]: Análisis de algoritmos y complejidad del problema 1. Introducción Subastas combinatorias. Las subastas combinatorias son mecanismos bien conocidos para la asignación de recursos y tareas donde los postores pueden ofertar simultáneamente por combinaciones de artículos. Esto es deseable cuando la valoración de los postores de un paquete de artículos no es igual a la suma de sus valoraciones de los artículos individuales. Este marco se utiliza actualmente para regular las interacciones de los agentes en varios dominios de aplicación (cf., por ejemplo, [21]) como los mercados de electricidad [13], las subastas de ancho de banda [14] e intercambios de transporte [18]. Formalmente, una subasta combinatoria es un par I, b, donde i = {i1, ..., im} es el conjunto de artículos que el subastador tiene que vender, y b = {b1, ..., bn} es el conjuntode ofertas de los compradores interesados en los artículos en I. Cada oferta BI tiene el formulario Artículo (BI), Pay (BI), donde el pago (BI) es un número racional que denota el precio que un comprador ofrece para los artículos en el artículo (BI) ⊆ I. Un resultado para I, B es un subconjunto B de B tal que el ítem (bi) ∩Item (bj) = ∅, para cada par bi y bj de ofertas en b con i = j. El problema de determinación del ganador. Un problema crucial para las subastas combinatorias es determinar el resultado B ∗ que maximiza la suma de los precios de oferta aceptados (es decir, bi∈B ∗ Pay (BI)) sobre todos los resultados posibles. Se sabe que este problema, llamado problema de determinación del ganador (por ejemplo, [11]), es intratable, en realidad np-hard [17], e incluso no es aproximado en el tiempo polinomial a menos que np = zpp [19]. Por lo tanto, no sorprende que se hayan gastado varios esfuerzos para diseñar algoritmos prácticamente eficientes para subastas generales (por ejemplo, [20, 5, 2, 8, 23]) e identificar clases de instancias en las que resolver el problema de determinación de ganadores es factibleen tiempo polinomial (por ejemplo, [15, 22, 12, 21]). De hecho, se demostró que restringir la interacción del postor es útil para identificar clases de subastas combinatorias manejables. Gráficos de elementos. Actualmente, la clase más general de subastas combinatorias manejables se ha señalado modelando interacciones entre los postores con la noción de gráfico de elementos, que es un gráfico cuyos nodos están en correspondencia individual con elementos, y los bordes son tales que para cualquiera de152 Figura 1: Ejemplo MAXWSP Problema: (a) Hypergraph H i0, B0 y un empaque H para ello;(b) gráfico primario para H i0, B0;y, (c, d) dos gráficos de elementos para H i0, b0.Bid, los artículos que ocurren en él inducen un subgrafio conectado. De hecho, se demostró que el problema de determinación del ganador se soluciona en el tiempo polinomial si las interacciones entre los postores pueden representarse mediante un gráfico de elementos estructurados, es decir, un árbol o, en general, un gráfico que tiene una estructura similar a un árbol [3]-formalmenteancho de árbol delimitado [16]. Para tener cierta intuición sobre cómo se pueden construir gráficos de elementos, notamos que la interacción del postor en una subasta combinatoria I, B se puede representar mediante un hipergrafo H I, b de tal manera que su conjunto de nodos n (h i, b) coincide con el conjuntode los artículos I, y donde sus bordes E (H I, B) son precisamente las ofertas de los compradores {ítem (bi) |Bi ∈ B}. Un gráfico de elemento especial para I, B es el gráfico primario de H I, B, denotado por G (H I, B), que contiene un borde entre cualquier par de nodos en algún hiperedge de H I, B. Luego, cualquier gráfico de elementos para H I, B se puede ver como una simplificación de G (H I, B) obtenida eliminando algunos bordes, pero preservando la condición de conectividad en los nodos incluidos en cada hiperedge. Ejemplo 1. El hipergrafo H i0, B0 informado en la Figura 1. (a) es una codificación para una subasta combinatoria i0, b0, donde i0 = {i1, ..., i5} y item (bi) = hi, cada 1 ≤i ≤ 3. El gráfico primario para H i0, B0 se informa en la Figura 1. (b), mientras que se informan dos gráficos de elementos de ejemplo en la Figura 1. (c) y (d), donde los bordes necesarios para mantener la conectividad para H1 se representan en negrita.¡Abra el problema: calcular los gráficos de elementos estructurados de manera eficiente. El resultado de la tractabilidad mencionado anteriormente en gráficos de elementos estructurados resulta ser útil en la práctica solo cuando un gráfico de elementos estructurados se da o puede determinarse de manera eficiente. Sin embargo, exponencialmente, muchos gráficos de elementos pueden estar asociados con una subasta combinatoria, y no está claro cómo determinar si existe un gráfico de elementos estructurado de un cierto ancho de árbol (constante), y de ser así, cómo calcular un gráfico de elementos tan estructurado de manera eficiente. Los algoritmos de tiempo polinomial para encontrar la mejor simplificación del gráfico primario hasta ahora solo se conocían por los casos en que el gráfico del elemento a construir es una línea [10], un ciclo [4] o un árbol [3], pero eraUn problema abierto importante (cf. [3]) si es manejable verificar si para una subasta combinatoria, un gráfico de elementos de ancho de árbol delimitado por un número natural fijo K existe y puede construirse en tiempo polinomial, si es así. Empacamiento de set ponderado. Observamos que la representación del hipergrafo H I, B de una subasta combinatoria I, B también es útil para hacer la analogía entre el problema de determinación del ganador y el problema máximo de empaquetado de set ponderado en hipergrafios claros (por ejemplo, [17]). Formalmente, un empaquetado H para un hipergrafo H es un conjunto de hiperedges de H tal que para cada par H, H ∈ H con H = H, sostiene que H ∩ H = ∅. Dejar que W sea una función de ponderación para h, es decir, una función computable de tiempo polinomialmente desde e (h) a números racionales, el peso de un empaque h es el número racional w (h) = h∈H w (h), donde w({}) = 0. Luego, el problema de embalaje del conjunto de ponderación máxima para H W.R.T.W, denotado por MaxWSP (H, W), es el problema de encontrar un embalaje para h que tiene el peso máximo sobre todos los empaques para H. para ver que MaxWSP es solo una formulación diferente para el problema de determinación del ganador, dada una subasta combinatoriaI, B, es suficiente definir la función de ponderación W I, B (ítem (BI)) = Pay (BI). Luego, el conjunto de soluciones para el problema de embalaje del conjunto ponderado para H I, B W.R.T.W I, B coincide con el conjunto de soluciones para el problema de determinación del ganador en I, b. Ejemplo 2. Considere nuevamente el HyperGraph H i0, B0 informado en la Figura 1. (a). Un ejemplo de empaque para H i0, B0 es H = {H1}, que intuitivamente corresponde a un resultado para i0, B0, donde el subastador aceptó la oferta B1. Suponiendo que las ofertas B1, B2 y B3 son tales que el pago (B1) = Pay (B2) = Pay (B3), el empaque H no es una solución para el problema MAXWSP (H i0, B0, W i0, B0). De hecho, el embalaje h ∗ = {h2, h3} es tal que w i0, b0 (h ∗)> w i0, b0 (h).¡Contribuciones, el objetivo principal de este documento es identificar grandes clases manejables para el problema de determinación del ganador, que son, además, reconocibles polinómicamente. Hacia este objetivo, primero estudiamos gráficos de elementos estructurados y resolvemos el problema abierto en [3]. El resultado es una muy mala noticia: está completa para verificar si una subasta combinatoria tiene un gráfico de elementos estructurados de ancho de árboles 3. Más formalmente, dejando que C (IG, K) denote la clase de todos los hipergrafos que tienen un árbol de elementos de ancho de árbol delimitado por K, demostramos que decidir si un hipergrafo (asociado con un problema de subasta combinatoria) pertenece a C (IG, 3)es NP-completado. A la luz de este resultado, fue crucial evaluar si existen otros tipos de requisitos estructurales que se pueden verificar en tiempo polinomial y que aún se pueden usar para aislar clases manejables del problema de embalaje máximo del conjunto de peso o, de manera equivalente, el ganadorproblema de determinación. Nuestras investigaciones, esta vez, condujeron a muy buenas noticias que se resumen a continuación: para un hipergrafo H, su doble ¯h = (V, E) es tal que los nodos en V están en correspondencia uno a uno con hiperviges en H,y para cada nodo x ∈ N (h), {h |x ∈ H ∧ H ∈ 153 E (H)} está en E. Mostramos que MaxWSP es manejable en la clase de aquellas instancias cuyas hipergrafías duales tienen un ancho de hipertree [7] limitado por K (corto: Clase C (HW, K)de hipergrafos). Tenga en cuenta que una cuestión clave de la tractibilidad es considerar el ancho de hipertree del hipergrafio dual ¯h en lugar del hipergrafio de subasta H. De hecho, podemos demostrar que MaxWSP permanece np-Hard incluso cuando H es acíclico (es decir, cuando lo ha hechoAncho de hipertree 1), incluso cuando cada nodo está contenido en 3 hiperedges como máximo. Para algunas clases especiales relevantes de hipergrafos en C (HW, K), diseñamos un algoritmo altamente paralelo para MAXWSP. Específicamente, si las funciones de ponderación se pueden calcular en el espacio logarítmico y los pesos son polinómicos (por ejemplo, cuando todas las hiperegudes tienen pesos unitarios y uno está interesado en encontrar el empaque con el número máximo de bordes), mostramos que MaxWSP se puede resolverUn algoritmo LogCFL. Recuerde, de hecho, que LOGCFL es la clase de problemas de decisión que son logspace reducibles a los idiomas libres de contexto, y que logcfl ⊆ nc2 ⊆ p (ver, por ejemplo, [9]). Sorprendentemente, mostramos que no se pierde nada en términos de generalidad al considerar la descomposición de la hipertree de los hipergrafios duales en lugar del ancho de árbol de los gráficos de los elementos. Por el contrario, el método de descomposición basado en hipertree propuesto es estrictamente más general que el método de los gráficos de elementos estructurados. De hecho, mostramos que las clases estrictamente más grandes de instancias son manejables de acuerdo con nuestro nuevo enfoque que según el enfoque de gráficos de elementos estructurados. Intuitivamente, la duración de NP de reconocer los gráficos de elementos estructurados del ancho limitado no se debe a su gran generalidad, sino a algunas peculiaridades en su definición. La prueba de los resultados anteriores nos da una idea interesante de la noción de gráfico de elementos estructurados. De hecho, mostramos que los gráficos de elementos estructurados están en correspondencia uno a uno con algunos tipos especiales de descomposición de hipertree del hipergrafo dual, que llamamos descomposiciones estrictas de hipertree. También se propone una caracterización del juego para la noción de ancho de hipertree estricto, que especializa el juego de ladrones y mariscales en [6] (propuesto para caracterizar el ancho de la hipertree), y lo que deja en claro los requisitos adicionales sobre las descomposiciones de hipertree. El resto del documento está organizado de la siguiente manera. La Sección 2 discute la intratabilidad de los gráficos de elementos estructurados. La Sección 3 presenta el algoritmo de tiempo polinomial para resolver MAXWSP en la clase de aquellos casos cuyos hipergrafos duales han limitado el ancho de hipertreos, y discute los casos en que el algoritmo también es muy paralelizado. La comparación entre las clases C (IG, K) y C (HW, K) se discute en la Sección 4. Finalmente, en la Sección 5 sacamos nuestras conclusiones al describir también instrucciones para futuras investigaciones.2. Complejidad de los gráficos de elementos estructurados que h sea un hipergrafo. Un gráfico g = (v, e) es un gráfico de elementos para h si v = n (h) y, para cada h ∈ E (h), el subgrafo de G inducido sobre los nodos en H está conectado. Una clase importante de gráficos de elementos es la de los gráficos de elementos estructurados, es decir, de aquellos gráficos de elementos que tienen el ancho de árbol delimitado como se formalizan a continuación. Una descomposición del árbol [16] de un gráfico G = (v, E) es un par t, χ, donde t = (n, f) es un árbol, y χ es una función de etiquetado que asigna a cada vértice p ∈ N un conjuntode vértices χ (P) ⊆ V, de modo que se cumplan las siguientes condiciones: (1) para cada vértice B de G, existe p ∈ N tal que b ∈ χ (P);(2) Para cada borde {b, d} ∈ E, existe p ∈ N tal que {b, d} ⊆ χ (p);(3) Para cada vértice B de G, el conjunto {p ∈ N |b ∈ χ (p)} induce un subárbol conectado de T. El ancho de t, χ es el número maxp∈N | χ (p) - 1 |. El ancho de árbol de G, denotado por TW (g), es el ancho mínimo sobre todas sus descomposiciones de árboles. El problema de determinación del ganador se puede resolver en el tiempo polinomial en los gráficos de elementos que tienen el ancho de árbol delimitado [3]. Teorema 1 (cf. [3]). Suponga que se da una descomposición del árbol de ancho K, χ de un gráfico de elementos para H. Entonces, MaxWSP (H, W) se puede resolver en el tiempo O (| T | 2 × (| E (H) | +1) K+1). Muchos gráficos de elementos se pueden asociar con un hipergrafo. Como ejemplo, observe que el gráfico del elemento en la Figura 1. (c) tiene el ancho de árbol 1, mientras que la Figura 1. (d) informa un gráfico de elementos cuyo ancho de árbol es 2. De hecho, era una pregunta abierta si para una constante K dada se puede verificar en el tiempo polinómico si existe un gráfico de elementos de ancho de árbol K, y si es así, si dicho gráfico de elementos se puede calcular de manera eficiente. Deje que C (IG, K) denote la clase de todos los hipergrafios que tienen un gráfico de elementos G de tal manera que tw (g) ≤ k.El resultado principal de esta sección es mostrar que la Clase C (IG, K) es difícil de reconocer. Teorema 2. Decidir si un hipergrafo H pertenece a C (IG, 3) es NP-Hard. La prueba de este resultado se basa en una reducción elaborada del problema de la ruta hamiltoniana HP (S, t) de decidir si hay una ruta hamiltoniana de un nodo a un nodo t en un gráfico dirigido g = (n, e). Para ayudar a la intuición, informamos aquí una descripción general de alto nivel de los ingredientes principales explotados en la prueba1. La idea general es construir un hipergrafo Hg de tal manera que haya un gráfico de elementos G para Hg con TW (g) ≤ 3 si y solo si HP (S, T) sobre G tiene una solución. Primero, discutimos la forma en que se construye HG. Ver Figura 2. (a) Para una ilustración, donde el gráfico G consiste en los nodos S, X, Y y T, y el conjunto de sus bordes es {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}. De G a Hg. Sea G = (N, E) un gráfico dirigido. Luego, el conjunto de nodos en Hg es tal que: para cada x ∈ N, N (Hg) contiene los nodos BSX, BTX, BX, BX, BDX;Para cada e = (x, y) ∈ E, N (Hg) contiene los nodos NSX, NSX, NTY, NTY, NSE X y NTE Y. Ningún otro nodo está en N (Hg). Las hiperedges en Hg son de tres tipos: 1) Para cada x ∈ N, E (Hg) contiene las hipedges: • Sx = {BSX} ∪ ∪ {nse x |e = (x, y) ∈ E};• tx = {btx} ∪ {nte x |e = (z, x) ∈ E};• a1 x = {bdx, bx}, a2 x = {bdx, bx} y a3 x = {bx, bx} -notice que estas hipermedges inducen una camarilla en los nodos {bx, bx, bdx};1 pruebas detalladas se pueden encontrar en el apéndice, disponible en www.mat.unical.it/∼ggreco/papers/ca.pdf.154 Figura 2: Prueba del teorema 2: (a) de g a Hg - hiperedges en 1) y 2) se informan solo;(b) Un esqueleto para una descomposición de árbol TD para Hg.• Sa1 x = {bsx, bx}, sa2 x = {bsx, bx}, sa3 x = {bsx, bdx} -notice que estos hipervedes más a1 x, a2 x y a3 x inducen una camarilla en los nodos {bsx, BX, BX, BDX};• ta1 x = {btx, bx}, ta2 x = {btx, bx}, y ta3 x = {btx, bdx} -notice que estos hiperedges más a1 x, a2 x y a3 x inducen una clique en los nodos {BTX, BX, BX, BDX};2) Para cada e = (x, y) ∈ E, E (Hg) contiene las hipedges: • shx = {nsx, nsx};• Thy = {nty, nty};• Ver = {nsx, nse x} y ver = {nsx, nse x} -notice que estas dos hipedges más shx inducen una camarilla en los nodos {nsx, nsx, nse x};• tee = {nty, nte y} y tee = {nty, nte y} -notice que estos dos hipedges más tuyos inducen una camarilla en los nodos {nty, nty, nte y}. Observe que cada una de las hiperedias anteriores, pero las de la forma SX y TX contienen exactamente dos nodos. Como ejemplo de las hiperedges de la especie 1) y 2), el lector puede referirse a la construcción de ejemplo informada en la Figura 2. (a), y notar, por ejemplo, que sx = {bsx, nse2 x, nse3 x} yque tt = {btt, nte4 t, nte3 t}.3) Finalmente, denotamos por DG el conjunto que contiene las hiperedges en E (Hg) del tercer tipo. En la reducción que estamos explotando, DG puede ser un conjunto arbitrario de hiperedges que satisfacen las cuatro condiciones que se analizan a continuación. Deje que PG sea el conjunto de los siguientes | PG |≤ | n |+ 3 × | E |pares: pg = {(bx, bx) |x ∈ N} ∪ {(nsx, nsx), (nty, nty), (nse x, nte y) |e = (x, y) ∈ E}. Además, que i (v) denote el conjunto {h ∈ E (h) |v ∈ H} de las hiperedges de H que son tocadas por V;y, para un conjunto v ⊆ n (h), que i (v) = v∈V i (v). Entonces, DG tiene que ser un conjunto tal que: (C1) ∀ (α, β) ∈ PG, I (α) ∩ I (β) ∩ DG = ∅;(c2) ∀ (α, β) ∈ Pg, I (α) ∪ I (β) ⊇ DG;(c3) ∀α ∈ N tal que ∃β ∈ N con (α, β) ∈ Pg o (β, α) ∈ Pg, es necesario: I (α) ∩ Dg = ∅;y, (c4) ∀s ⊆ n tal que | S |≤ 3 y donde ∃α, β ∈ S con (α, β) ∈ Pg, es el caso que: i (s) ⊇ dg. Intuitivamente, el conjunto DG es tal que cada una de sus hiperedges es tocada exactamente por uno de los dos nodos en cada par 155 de PG - cf.(C1) y (C2). Además, las hiperedges en DG Touch solo los vértices incluidos en al menos un par de PG - cf.(C3);Y, cualquier triple de nodos no es capaz de tocar todos los elementos de DG si ninguno de los pares que se puede construir a partir de él pertenece a PG - cf.(C4). El lector ahora puede preguntar si existe un DG establecido en absoluto satisfactorio (C1), (C2), (C3) y (C4). En el siguiente lema, respondemos positivamente esta pregunta y remitimos al lector a su prueba para una construcción de ejemplo. Lema 1. Un conjunto DG, con | DG |= 2 × | PG |+ 2, condiciones satisfactorias (C1), (C2), (C3) y (C4) se pueden construir en el tiempo O (| Pg | 2). Ingredientes principales. Ahora estamos en la posición de presentar una descripción general de los ingredientes clave de la prueba. Sea G un gráfico de elementos arbitrarios para Hg, y TD = T, χ sea una descomposición de un árbol de 3 anchos de G (tenga en cuenta que, debido a las camarillas, por ejemplo, en los nodos {BSX, BX, BX, BDX},Cualquier gráfico de elementos para HG tiene al menos el ancho de árbol 3). Hay tres observaciones básicas que cumplen el propósito de probar la corrección de la reducción. Bloques de TD: Primero, observamos que TD debe contener algunos tipos especiales de vértice. Específicamente, para cada nodo x ∈ N, TD contiene un vértice BS (x) tal que χ (BS (X)) ⊇ {BSX, BX, BX, BDX} y un vértice BT (x) tal que χ (BT (BT (BT (BT (x)) ⊇ {btx, bx, bx, bdx}. Y, para cada borde e = (x, y) ∈ E, td contiene un vértice ns (x, e) tal que χ (ns (x, e)) ⊇ {nse x, nsx, nsx} y un vértice nt(y, e) tal que χ (nt (y, e)) ⊇ {nte y, nty, nty}. Intuitivamente, estos vértices son necesarios para cubrir las camarillas de Hg asociadas con las hiperedges de la especie 1) y 2). Cada uno de estos vértices juega un papel específico en la reducción. De hecho, cada borde dirigido e = (x, y) ∈ E está codificado en TD por medio de los vértices: ns (x, e), que representa con precisión que E comienza desde x;y, nt (y, e), representando precisamente que E termina en y. Además, cada nodo x ∈ N está codificado en TD medias de los vértices: BS (x), que representa el punto de partida de los bordes originados desde x;y, bt (x), que representa el punto de terminación de los bordes que terminan en x. Como ejemplo, la Figura 2. (b) informa el esqueleto de un árbol de descomposición de árbol TD. El lector puede notar en él los bloques definidos anteriormente y cómo están relacionados con el hipergrafo Hg en la Figura 2. (a) - Otros bloques en él (de la forma w (x, y)) se definen a continuación. Conexión entre bloques y singularidad de las conexiones: la segunda observación crucial es que en la ruta que conecta un vértice de la forma BS (X) (resp., Bt (y)) con un vértice de la forma NS (X, E)(resp., nt (y, e)) Hay un vértice especial de la forma w (x, y) tal que: χ (w (x, y)) ⊇ ⊇ {nse x, nte y}, para algún borde e= (x, y) ∈ E. Garantizar la existencia de uno de esos vértices es precisamente el papel desempeñado por las hipedges en DG. Los argumentos para la prueba son los siguientes. Primero, observamos que i (χ (BS (x))) ∩ I (χ (NS (X, E))) ⊇ DG ∪ {SX} e I (χ (Bt (y))) ∩ I (χ (nt (y, e))) ⊇ dg ∪ {ty}. Luego, mostramos una propiedad que indica que para un par de vértices consecutivos P y Q en la ruta que conecta BS (X) y NS (X, E) (resp., Bt (y) y Nt (y, E)), I(χ (P) ∩ χ (Q)) ⊇ I (χ (BS (X))) ∩ I (χ (NS (X, E)) (resp., I (χ (P) ∩ χ χ (Q)) ⊇ I (χ (Bt (x))) ∩ I (χ (NT (y, E)))). Por lo tanto, tenemos: I (χ (P) ∩ χ (Q)) ⊇ DG ∪ {SX} (resp., I (χ (P) ∩χ (Q)) ⊇ Dg ∪ {Ty}). Según esta observación, y al explotar las propiedades de las hiperedges en DG, no es difícil demostrar que cualquier par de vértices consecutivos P y Q deben compartir dos nodos de Hg que formen un par en PG, y debe tocar SX (resp.., Ty). Cuando el ancho de árbol de G es 3, podemos concluir que un vértice, digamos w (x, y), en este camino es tal que χ (W (x, y)) ⊇ {nse x, nte y}, para algún bordee = (x, y) ∈ E - a este extremo, tenga en cuenta que nse x ∈ Sx, nte t ∈ Ty e i (χ (W (x, y))) ⊇ dg. En particular, w (x, y) es el único tipo de vértice que satisface estas condiciones, es decir, en el camino no hay más vértice de la forma w (x, z), para z = y (resp., W (z, y), para z = x). Para ayudar a la intuición, observamos que tener un vértice de la forma w (x, y) en TD corresponde a la selección de un borde desde el nodo x al nodo y en la ruta hamiltoniana. De hecho, dada la singularidad de estos vértices seleccionados para garantizar la conectividad, se puede establecer una correspondencia uno a uno entre la existencia de una ruta hamiltoniana para G y los vértices de la forma w (x, y). Como ejemplo, en la Figura 2. (b), los vértices de la forma w (s, x), w (x, y) y w (y, t) están en td, y gt d muestra el camino hamiltoniano correspondiente. Bloques no utilizados: Finalmente, el tercer ingrediente de la prueba es la observación de que si un vértice de la forma w (x, y), para un borde e = (x, y) ∈ E no está en TD (es decir, si el borde(x, y) no pertenece a la ruta hamiltoniana), entonces el bloque correspondiente ns (x, e) (resp., nt (y, e)) puede agregarse arbitrariamente en el subárbol enraizado en el bloque ns (x,e) (resp., nt (y, e)), donde e es el borde de la forma e = (x, z) (resp., e = (z, y)) tal que w (x, z) (resp., W (z, y)) está en td. Por ejemplo, la figura 2. (a) muestra W (x, t), que no se usa en TD, y la Figura 2. (b) muestra cómo se pueden organizar los bloques NS (X, E3) y NT (T, E3)en TD para garantizar la condición de conexión.3. Casos manejables a través de descomposiciones de hipertree Dado que la construcción de gráficos de elementos estructurados es intratable, es relevante evaluar si otras restricciones estructurales pueden usarse para soltar clases de instancias MAXWSP manejables. Con este fin, nos centramos en la noción de descomposición de hipertree [7], que es una generalización natural de la aciclicidad del hipergrafio y que se ha utilizado de manera rentable en otros dominios, por ejemplo, satisfacción de restricciones y evaluación de consultas de bases de datos, para identificar islas de tractabilidad para NP-problemas difíciles. Un hipertree para un hipergrafo H es un triple t, χ, λ, donde t = (n, e) es un árbol enraizado, y χ y λ son funciones de etiquetado que asocian cada vértice p ∈ N con dos conjuntos χ (p) ⊆N (h) y λ (p) ⊆ e (h). Si t = (n, e) es un subárbol de t, definimos χ (t) = v∈N χ (v). Denotamos el conjunto de vértices n de t por vértices (t). Además, para cualquier p ∈ N, TP denota el subárbol de t enraizado en p.Definición 1. Una descomposición de hipertree de un hipergrafo H es un hipertree HD = t, χ, λ para H que satisface todas las condiciones siguientes: 1. Para cada borde H ∈ E (H), existe p ∈ Vértices (t) tal que H ⊆χ (P) (decimos que P cubre h);156 Figura 3: Ejemplo MAXWSP Problema: (a) Hypergraph H1;(b) Hypergraph ¯h1;(b) Una descomposición hipertree de 2 anchas de ¯h1.2. Para cada nodo y ∈ N (h), el conjunto {p ∈ Vértices (t) |Y ∈ χ (P)} induce un subárbol (conectado) de t;3. Para cada p ∈ Vértices (t), χ (P) ⊆ N (λ (P));4. Para cada p ∈ Vértices (t), n (λ (p)) ∩ χ (TP) ⊆ χ (P). El ancho de una descomposición de hipertree t, χ, λ es maxp∈vertices (t) | λ (p) |. El ancho de hipertree HW (H) de H es el ancho mínimo sobre todas sus descomposiciones de hipertree. Un hipergrafo H es acíclico si HW (H) = 1. P Ejemplo 3. El hipergrafo H i0, B0 informado en la Figura 1. (a) es un ejemplo de hipergrafo acíclico. En cambio, tanto los hipergrafos H1 como ¯h1 que se muestran en la Figura 3. (a) y la Figura 3. (b), respectivamente, no son acíclicos ya que su ancho de hipertree es 2. En la Figura 3. (c) se informa una descomposición de hipertreas de 2 anchas para ¯h1. En particular, observe que H1 se ha obtenido agregando las dos hiperedges H4 y H5 a H i0, B0 para modelar, por ejemplo, que se han propuesto dos nuevas ofertas, B4 y B5, respectivamente, al subastador.¡A continuación, en lugar de trabajar en el hipergrafo H asociado con un problema MAXWSP, trataremos con su dual ¯h, es decir, con el hipergrafo de tal manera que sus nodos están en correspondencia uno a uno con las hiperedges de H,y donde para cada nodo x ∈ N (h), {h |x ∈ H ∧ H ∈ E (H)} está en E (¯h). Como ejemplo, el lector puede querer verificar nuevamente el hipergrafo H1 en la Figura 3. (a) y observe que el hipergrafo en la Figura 3. (b) es de hecho su doble. La justificación de esta elección es que emitir restricciones en el hipergrafio original es una garantía para la tractabilidad solo en escenarios muy simples. Teorema 3. En la clase de hipergrafos acíclicos, MaxWSP es (1) en P si cada nodo ocurre en dos hipedges como máximo;y, (2) NP-Hard, incluso si cada nodo está contenido en tres hiperedges como máximo.3.1 La descomposición de hipertree en los problemas de empaque de doble hipergrafo y manejo de una constante fija K, Sea C (HW, K) denota la clase de todos los hipergrafos cuyos hipergrafos duales tienen un ancho de hipertree limitado por K.El problema máximo de empaquetado de set ponderado se puede resolver en el tiempo polinomial en la Clase C (HW, K) por medio del algoritmo ComputesetPackingk, que se muestra en la Figura 4. El algoritmo recibe en la entrada A HyperGraph H, una función de ponderación W y una descomposición de hipertreos de ancho K HD = T = (N, E), χ, λ de ¯h. Para cada vértice v ∈ N, deje que HV sea el hipergrafo cuyo conjunto de nodos n (HV) ⊆ N (H) coincide con λ (V), y cuyo conjunto de bordes E (HV) ⊆ E (H) coincide con χ (v). En un paso de inicialización, el algoritmo equipa cada vértice V con todos los empaques posibles para HV, que se almacenan en el conjunto HV. Tenga en cuenta que el tamaño de HV está limitado por (| E (H) | + 1) K, ya que cada nodo en λ (v) se deja descubierto en un embalaje o está cubierto con precisamente uno de los hiperedges en χ (V)⊆ E (H). Luego, COTSESETPACKINGK está diseñado para filtrar estos empaques reteniendo solo aquellos que se ajustan con algún empaque para HC, para cada niños C de V en T, como se formalizó a continuación. Deje que HV y HC sean dos empaques para HV y HC, respectivamente. Decimos que HV se ajusta con HC, denotado por HV ≈ Hc If: para cada h ∈ Hc ∩ E (HV), H está en HV;y, para cada h ∈ (E (HC) - HC), H no está en HV. Ejemplo 4. Considere nuevamente la descomposición hipertree de ¯h1 informada en la Figura 3. (c). Luego, el conjunto de todos los empaques posibles (que se construyen en el paso de inicialización de COMPUTSETPackingk), para cada uno de sus vértices, es Refigurar 5: Aplicación de ejemplo de algoritmo ComputSetPackingk.157 Entrada: H, W, y una descomposición de hipertreos de ancho K hd = t = (n, e), χ, λ de ¯h;Salida: una solución a maxwsp (h, w);var hv: conjunto de paquetes para HV, para cada v ∈ N;H ∗: Embalaje para H;V HV: número racional, para cada empaquetado parcial HV para HV;HHV, C: Embalaje parcial para HC, para cada empaquetado parcial HV para HV, y para cada uno (V, C) ∈ E;---------------------------------------Comience realizado: = el conjunto de todas las hojas de t;mientras que ∃v ∈ T tal que (i) v ∈ Hecho, y (ii) {c |C es el niño de V} ⊆ Do Do para cada C tal que (V, C) ∈ E do HV: = HV - {HV |∃hc ∈ Hc S.T.HV ≈ HC};Para cada hv ∈ Hv do v Hv: = W (HV);para cada c tal que (v, c) ∈ E do ¯hc: = arg maxhc∈Hc | hv≈ hc c hc - w (hc ∩ hv);hhv, c: = ¯hc;( * Establecer el mejor empaque *) v Hv: = V HV + C ¯HC - W (¯HC ∩ HV);finalizar para finalizar para: = hecho ∪ {v};terminar mientras final;----------------------------------------------- Begin ( * principal *) paraCada vértice v in t do hv: = {hv empaque para hv};De abajo hacia arriba;Sea r la raíz de t;¯hr: = arg maxhr∈Hr r hr;h ∗: = ¯hr;( * incluye empacar *) t opdown (r, hr);return h ∗;fin. Procedimiento t opdown (v: vértice de n, ¯hv ∈ Hv);Comience para cada c ∈ N S.T.(v, c) ∈ E do ¯hc: = h¯hv, c;h ∗: = h ∗ ∪ ¯hc;( * incluye empacar *) t opdown (c, ¯hc);fin para fin;Figura 4: Algoritmo COMPUTSETPACKINGK.Portado en la Figura 5. (a). Por ejemplo, la raíz v1 es tal que hv1 = {{}, {h1}, {h3}, {h5}}. Además, una flecha de un empaque HC a HV denota que HV se ajusta con HC. Por ejemplo, el lector puede verificar que el embalaje {H3} ∈ HV1 se ajuste con el embalaje {H2, H3} ∈ Hv3, pero no se ajuste con {H1} ∈ Hv3.¡COMPLETSETPACKINGK crea una solución atravesando T en dos fases. En la primera fase, los vértices de T se procesan desde las hojas a la raíz R, mediante el procedimiento de abajo. Para cada nodo V procesado, el HV SET se actualiza preliminar al eliminar todos los empaques HV que no se ajustan a ningún embalaje para algunos de los niños de v. Después de realizar este filtrado, el peso HV se actualiza. Intuitivamente, V HV almacena el peso del mejor embalaje parcial para H calculado utilizando solo las hipermedias que ocurren en χ (TV). De hecho, si V es una hoja, entonces V HV = W (HV). De lo contrario, para cada niño C de V en T, V HV se actualiza con el máximo de C HC - W (HC ∩ HV) sobre todos los paquetes HC que se ajusta con HV (resueltos de articulación arbitrariamente). El embalaje ¯hc para el cual se logra este máximo se almacena en la variable HHV, c. En la segunda fase, el árbol T se procesa a partir de la raíz. En primer lugar, se selecciona el embalaje H ∗ que maximiza el peso equipado con los empaquetados en HR. Luego, el procedimiento Topdown se usa para extender H ∗ a todos los otros empaques parciales para los vértices de T. En particular, en cada vértice V, H ∗ se extiende con el empaquetado HHV, C, para cada hijo C de v. Ejemplo 5. Suponga que, en su ejemplo de ejecución, w (h1) = w (h2) = con (h3) = v (h4) = 1. Luego, una ejecución de ComputesEtpackingk se representa gráficamente en la Figura 5. (b), donde se usa una flecha de un HC de embalaje a un HV de embalaje para denotar que HC = HHV, c. Específicamente, las opciones realizadas durante el cálculo son tales que se calcula el embalaje {H2, H3}. En particular, durante la fase ascendente, tenemos que: (1) V4 se procesa, y establecemos v4 {h2} = v4 {h4} = 1 y v4 {} = 0;(2) V3 se procesa y establecemos v3 {h1} = v3 {h3} = 1 y v3 {} = 0;(3) V2 se procesa, y establecemos v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2, h3} = 2 y v3 {} = 0;(4) V1 se procesa y establecemos v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 y v1 {} = 0. Por ejemplo, tenga en cuenta que v1 {h5} = 2 ya que {h5} se ajusta con el empaque {h4} de HV2 tal que v2 {h4} = 1. Luego, al comienzo de la fase de arriba hacia abajo, COMPTESETPackingk selecciona {H3} como un embalaje para HV1 y propaga esta elección en el árbol. De manera equivalente, el algoritmo puede haber elegido {H5}. Como un ejemplo adicional, la forma en que la solución {H1} se obtiene por el algoritmo cuando W (H1) = 5 y W (H2) = W (H3) = W (H4) = 1 se informa en la Figura 5. (C). Observe que, esta vez, en la fase de arriba hacia abajo, COMPTESETPackingk comienza a seleccionar {H1} como el mejor empaque para HV1.¡Teorema 4. Sea h un hipergrafo y sea una función de ponderación para ello. Sea hd = t, χ, λ una descomposición completa de hipertreos de width k-width de ¯h. Luego, COMPTESETPackingk en la entrada H, W y HD emite correctamente una solución para MaxWSP (H, W) en el tiempo O (| T | × (| E (H) | + 1) 2K). Prueba.[Sketch] Observamos que H ∗ (calculado por ComputesetPackingk) es un embalaje para H. De hecho, considere un par de hipermedges H1 y H2 en H ∗, y suponga, en aras de la contradicción, que H1 ∩ H2 = ∅. Sea V1 (resp., V2) un vértice arbitrario de T, para el cual COMPTESETPackingk incluyó H1 (resp., H2) en H ∗ en el cálculo de abajo hacia abajo. Por construcción, tenemos H1 ∈ χ (V1) y H2 ∈ χ (V2).158 Sea un elemento en H1 ∩ H2. En el dual HyperGraph H, I es una hiperedge en E (¯h) que cubre los nodos H1 y H2. Por lo tanto, por condición (1) en la definición 1, hay un vértice V ∈ Vértices (t) tal que {H1, H2} ⊆ χ (V). Tenga en cuenta que, debido a la condición de conexión en la definición 1, también podemos suponer, w.l.o.g., que V está en la ruta que conecta V1 y V2 en T. deje que Hv ∈ Hv denote el elemento agregado por CompanSetPackingkkfase. Dado que los elementos en HV son empaques para HV, es el caso que H1 ∈ Hv o H2 ∈ HV. Suponga, w.l.o.g., que h1 ∈ Hv, y observe que cada vértice w en t en la ruta que conecta V a V1 es tal que H1 ∈ χ (W), debido a la condición de conexión. Por lo tanto, debido a la definición de conformidad, el empaquetado HW seleccionado por ComputesetPackingk para agregarse en el vértice W en h ∗ debe ser tal que h1 ∈ HW. Esto se mantiene en particular para W = V1. Contradicción con la definición de V1. Por lo tanto, H ∗ es un embalaje para H. Sigue para demostrar que tiene el peso máximo sobre todos los empaquetados para H. Para este objetivo, podemos usar la inducción estructural en t para demostrar que, en la fase ascendente,La variable V HV se actualiza para contener el peso del empaque en los bordes en χ (TV), que contiene HV y que tiene el peso máximo sobre todos estos empaquetados para los bordes en χ (TV). Luego, el resultado sigue, ya que en la fase de arriba hacia abajo, la FC de embalaje que da el peso máximo sobre χ (TR) = E (H) primero se incluye en H ∗, y luego se extiende en cada nodo C con el HHV de empaquetado,C conforme con HV y tal que se logra el valor máximo de V HV. En cuanto a la complejidad, observe que el paso de inicialización requiere la construcción del conjunto HV, para cada vértice V, y cada conjunto tiene tamaño (| E (H) | + 1) K como máximo. Luego, la función inferior verifica la conformidad entre estrategias en HV con estrategias en HC, para cada par (v, c) ∈ E, y actualiza el peso V HV. Estas tareas se pueden llevar a cabo en el tiempo o ((| e (h) | + 1) 2k) y deben repetirse para cada borde en t, es decir, o (| t |) tiempos. Finalmente, la función Topdown se puede implementar en tiempo lineal en el tamaño de t, ya que solo requiere actualizar H ∗ accediendo a la variable HHV, c. El resultado anterior muestra que si se da una descomposición de hipertree de ancho k, el problema MAXWSP se puede resolver de manera eficiente. Además, de manera diferente al caso de los gráficos de elementos estructurados, es bien sabido que decidir la existencia de una descomposición de hipertree con unida a K y calculando uno (si es que hay) son problemas que pueden resolverse eficientemente en el tiempo polinomial [7]. Por lo tanto, el Teorema 4 testigos de que la Clase C (HW, K) en realidad constituye una clase manejable para el problema de determinación del ganador. Como muestra el siguiente teorema, para subclases grandes (que dependen solo de cómo se especifica la función de peso), MaxWSP (H, W) es incluso altamente paralelable. Llamemos a una función de ponderación suave si es lo de logspace computable y si todos los pesos son polinomiales (y, por lo tanto, solo requieren bits o (log n) para su representación). Recuerde que LOGCFL es una clase de complejidad paralela contenida en NC2, cf.[9]. La versión funcional de LOGCFL es LLOGCFL, que se obtiene equipando un transductor logSpace con un Oracle en LOGCFL. Teorema 5. Sea H un hipergrafo en C (HW, K), y sea W una función de ponderación suave para ello. Luego, MaxWSP (H, W) está en Llogcfl.4. Descomposiciones de hipertree versus gráficos de elementos estructurados dado que la Clase C (HW, K) ha demostrado ser una isla de tractabilidad para el problema de determinación del ganador, y dado que la Clase C (IG, K) se ha demostrado que no es reconocible de manera eficiente, uno puede estar inclinado a pensar que hay casos que tienen un ancho de hipertrees ilimitado, pero admitiendo un gráfico de elementos del ancho del árbol limitado (de modo que la intratabilidad de los gráficos de elementos estructurados se encuentra en su generalidad). Sorprendentemente, establecemos que este no es el caso. La línea de la prueba es mostrar primero que los gráficos de elementos estructurados están en correspondencia uno a uno con un tipo especial de descomposiciones de hipertreas del hipergrafo dual, que llamaremos estricto. Luego, el resultado seguirá demostrando que las estrictas descomposiciones de hipertreas de Width Width son menos poderosas que las descomposiciones de Kwith Hypertree.4.1 Las estrictas descomposiciones de hipertreas sean h un hipergrafo, y que v ⊆ n (h) sea un conjunto de nodos y x, y ∈ N (h). X es [v]-adjacente a y si existe un borde h ∈ E (h) tal que {x, y} ⊆ (h-v). A [v] -path π de x a y es una secuencia x = x0 ,..., X = y de variables tal que: xi es [v] -adjacente a xi+1, para cada i ∈ [0 ... -1]. Un conjunto w ⊆ n (h) de nodos está conectado [v] si ∀x, y ∈ W hay una pata [v] de x a y. A [V] -Component es un conjunto máximo no vacío conectado [V] de nodos W ⊆ (N (H)-V). Para cualquier [V] -Componente C, Sea E (C) = {H ∈ E (H) |H ∩ C = ∅}. Definición 2. Una descomposición de hipertree HD = t, χ, λ de H es estricto si las siguientes condiciones se mantienen: 1. Para cada par de vértices R y S en vértices (t) de modo que S es un niño de R, y para cada uno [χ ((χ ((χ ((R)]-Componente CR S.T. Cr ∩ χ (TS) = ∅, Cr es un [χ (R) ∩ N (λ (R) ∩ λ (S))]-Componente;2. Para cada borde H ∈ E (H), hay un vértice P tal que h ∈ λ (P) y H ⊆ χ (P) (decimos que P cubre fuertemente h);3. Para cada borde h ∈ E (h), el conjunto {p ∈ Vértices (t) |H ∈ λ (p)} induce un subárbol (conectado) de T. El estricto ancho de hipertreos shw (h) de h es el ancho mínimo sobre todas sus estrictas descomposiciones de hipertree. P La relación básica entre las buenas descomposiciones de hipertreas y los gráficos de elementos estructurados se muestra en el siguiente teorema. Teorema 6. Sea h un hipergrafo tal que para cada nodo v ∈ N (h), {v} está en e (h). Luego, existe una descomposición del árbol de ancho k de un gráfico de elementos para h si y solo si ¯h tiene una descomposición de hipertree estricta de urbanización (k + 1 )2. Tenga en cuenta que, en lo que respecta al problema máximo de empaquetado de set ponderado, dado un hipergrafo H, siempre podemos suponer que para cada nodo v ∈ N (h), {v} está en e (h). De hecho, si esta hiperedge no está en el hipergrafo, entonces se puede agregar sin pérdida de generalidad, configurando w ({v}) = 0. Por lo tanto, dejar que C (Shw, K) denota la clase de todos los hipergrafos cuyos hipergrafos duales (asociados con el máximo 2, el término +1 solo juega el papel técnico de cuidar la definición diferente de ancho para las descomposiciones de los árboles y las descomposiciones de hipertree. 159. 159.Los problemas de embalaje del conjunto ponderado) tienen un estricto ancho de hipertreos limitado por K, tenemos esa c (shw, k + 1) = c (ig, k). Por definición, las estrictas descomposiciones de hipertreas son descomposiciones especiales de hipertree. De hecho, podemos demostrar que las condiciones adicionales en la definición 2 inducen una restricción real en el poder de descomposición. Teorema 7. C (IG, K) = C (Shw, K + 1) ⊂ C (HW, K + 1). Una vista teórica del juego. Arrojamos más luces sobre las estrictas descomposiciones de hipertree discutiendo una caracterización interesante basada en el estricto juego de ladrones y mariscales, definido adaptando el juego de ladrones y mariscales definidos en [6], que caracteriza el ancho de la hipertree. El juego es jugado en un hipergrafo H por un ladrón contra K Marshals que actúan en coordinación. Los alguaciles se mueven sobre las hipermedes de H, mientras que el ladrón se mueve en los nodos de H. El ladrón ve dónde los mariscales tienen la intención de moverse, y reacciona moviéndose a otro nodo que está conectado con su posición actual y a través de una ruta en G (H)que no usa ningún nodo contenido en una hiperedge que esté ocupada por los mariscales antes y después de su movimiento, digamos que estas hiperedias están bloqueadas. Tenga en cuenta que en el juego básico definido en [6], el ladrón no puede moverse en los vértices que están ocupados por los mariscales antes y después de su movimiento, incluso si no pertenecen a hiperedias bloqueadas. Es importante destacar que los mariscales deben jugar monotónicamente, es decir, no pueden ocupar una ventaja que anteriormente estaba ocupada en el juego, y que actualmente no. Los mariscales ganan el juego si capturan al ladrón, ocupando un borde que cubre un nodo donde está el ladrón. De lo contrario, el ladrón gana. Teorema 8. Sea h un hipergrafo tal que para cada nodo v ∈ N (h), {v} está en e (h). Entonces, ¯h tiene una estricta descomposición de hipertreas de Width si y solo si K Marshals puede ganar el estricto juego de ladrones y mariscales en ¯h, sin importar los movimientos de los ladrones.5. Conclusiones Hemos resuelto la cuestión abierta de determinar la complejidad de calcular un gráfico de elementos estructurado asociado con un escenario de subasta combinatoria. El resultado es una mala noticia, ya que resultó que es NP complete verificar si una subasta combinatoria tiene un gráfico de elementos estructurados, incluso para el ancho de árboles 3. Motivado por este resultado, investigamos el uso de la descomposición de la hipertree (en el hipergrafo dual asociado con el escenario) y demostramos que el problema es manejable en la clase de aquellos casos cuyos hipergrafos duales han limitado el ancho de hipertree. Para algunos casos especiales pero relevantes, también se discute un algoritmo altamente paralelizable. Curiosamente, también surgió que la clase de gráficos de elementos estructurados está correctamente contenida en la clase de instancias que ha limitado el ancho de hipertree (por lo tanto, la razón de su intratabilidad no es su generalidad). En particular, el último resultado se establece mostrando una relación precisa entre los gráficos de ítems estructurados y las formas restringidas de descomposiciones de hipertree (en el hipergrafo dual), llamadas descomposiciones de consulta (ver, por ejemplo, [7]). A la luz de esta observación, observamos que probar algunos resultados de aproximación para los gráficos de elementos estructurados requiere una comprensión profunda de la aproximación de las descomposiciones de consulta, que actualmente falta en la literatura. Como una vía de investigación adicional, sería relevante mejorar el algoritmo que COMPUTSETPackingk, por ejemplo, mediante el uso de estructuras de datos especializadas, para evitar la dependencia cuadrática de (| e (h) | + 1) k. Finalmente, otra pregunta interesante es evaluar si las técnicas de descomposición estructural discutidas en el documento pueden usarse para tratar eficientemente las generalizaciones del problema de determinación del ganador. Por ejemplo, podría ser relevante en varios escenarios de aplicaciones para diseñar algoritmos que pueden encontrar una estrategia de venta cuando hay varias copias del mismo artículo disponibles para la venta, y cuando el subastador se satisface cuando al menos un número dado de copias se vende realmente. Reconocimiento El trabajo de G. Gottlobs fue apoyado por el Centro de Competencia EC3 - E -Commerce (Viena) y por un Premio a la Royal Society Wolfson Research Merit. En particular, este premio permitió a Gottlob invitar a G. Greco a una visita de investigación a Oxford. Además, G. Greco es respaldado por ICAR-CNR y por M.I.U.R.bajo Project Tocai.it.6. Referencias [1] I. Adler, G. Gottlob y M. Grohe. Hipertree-ancho e invariantes de hipergrafio relacionados. En Proc.de EuroComb05, páginas 5-10, 2005. [2] C. Boutilier. Resolución de problemas de subasta combinatorios expresados de manera concisa. En Proc.de AAAI02, páginas 359-366, 2002. [3] V. Conitzer, J. Derryberry y T. Sandholm. Subastas combinatorias con gráficos de elementos estructurados. En Proc.de AAAAI04, páginas 212-218, 2004. [4] E. M. Eschen y J. P. Sinrad. Un algoritmo O (N2) para el reconocimiento de gráficos de arco circular. En Proc.de Soda93, páginas 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown e Y. Shoham. Domesticar la complejidad computacional de las subastas combinatorias: óptimo y aproximado. En Proc.de IJCAI99, páginas 548-553, 1999. [6] G. Gottlob, N. Leone y F. Scarcello. Ladrones, mariscales y guardias: caracterizaciones teóricas y lógicas del juego del ancho de hipertree. Journal of Computer and System Sciences, 66 (4): 775-808, 2003. [7] G. Gottlob, N. Leone y S. Scarcello. Descomposiciones de hipertree y consultas manejables. Journal of Computer and System Sciences, 63 (3): 579-627, 2002. [8] H. H. Hoos y C. Boutilier. Resolución de subastas combinatorias utilizando búsqueda local estocástica. En Proc.de AAAAI00, páginas 22-29, 2000. [9] D. Johnson. Un catálogo de clases de complejidad. En P. Cramton, Y. Shoham y R. Steinberg, editores, Manual de la informática teórica, Volumen A: algoritmos y complejidad, páginas 67-161.1990. [10] N. Korte y R. H. Mohring. Un algoritmo incremental de tiempo lineal para reconocer gráficos de intervalos. Siam Journal on Computing, 18 (1): 68-81, 1989. [11] D. Lehmann, R. M¨uller y T. Sandholm. El problema de determinación del ganador. En P. Cramton, Y. Shoham y R. Steinberg, editores, subastas combinatorias. MIT Press, 2006. [12] D. Lehmann, L. I. Ocallaghan e Y. Shoham. Revelación de la verdad en 160 subastas combinatorias aproximadamente eficientes. J. ACM, 49 (5): 577-602, 2002. [13] R. McAfee y J. McMillan. Análisis de la subasta de ondas aéreas. Journal of Economic Perspectives, 10 (1): 159175, 1996. [14] J. McMillan. Venta de derechos de espectro. Journal of Economic Perspectives, 8 (3): 145-62, 1994. [15] N. Nisan. Licitación y asignación en subastas combinatorias. En Proc.de EC00, páginas 1-12, 2000. [16] N. Robertson y P. Seymour. Graph Minors II.Aspectos algorítmicos del ancho del árbol. Journal of Algorithms, 7: 309-322, 1986. [17] M. H. Rothkopf, A. Pekec y R. M. Harstad. Subastas combinatorias computacionalmente manejables. Management Science, 44: 1131-1147, 1998. [18] T. Sandholm. Una implementación del protocolo NET del contrato basado en cálculos de costos marginales. En Proc.de AAAI93, páginas 256-262, 1993. [19] T. Sandholm. Algoritmo para una determinación óptima del ganador en subastas combinatorias. Inteligencia Artificial, 135 (1-2): 1-54, 2002. [20] T. Sandholm. Algoritmos de determinación del ganador. En P. Cramton, Y. Shoham y R. Steinberg, editores, subastas combinatorias. MIT Press, 2006. [21] T. Sandholm y S. Suri. BOB: Determinación mejorada del ganador en subastas y generalizaciones combinatorias. Inteligencia Artificial, 7: 33-58, 2003. [22] M. Tennenholtz. Algunas subastas combinatorias manejables. En Proc.de AAAAI00, páginas 98-103, 2000. [23] E. Zurel y N. Nisan. Un algoritmo de asignación aproximado eficiente para subastas combinatorias. En Proc.de EC01, páginas 125-136, 2001. 161",
    "original_sentences": [
        "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
        "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
        "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
        "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
        "In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
        "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
        "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
        "We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
        "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
        "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
        "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
        "INTRODUCTION Combinatorial auctions.",
        "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
        "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
        "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
        "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
        "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
        "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
        "The winner determination problem.",
        "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
        "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
        "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
        "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
        "Item graphs.",
        "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
        "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
        "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
        "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
        "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
        "Example 1.",
        "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
        "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
        "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
        "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
        "Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
        "Weighted Set Packing.",
        "Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
        "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
        "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
        "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
        "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
        "Example 2.",
        "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
        "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
        "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
        "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
        "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
        "The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3.",
        "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
        "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
        "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
        "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
        "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
        "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
        "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
        "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
        "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
        "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
        "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
        "The proof of the above results give us some interesting insight into the notion of structured item graph.",
        "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions.",
        "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
        "The rest of the paper is organized as follows.",
        "Section 2 discusses the intractability of structured item graphs.",
        "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
        "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
        "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
        "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
        "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
        "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
        "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
        "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
        "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
        "Theorem 1 (cf. [3]).",
        "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
        "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
        "Many item graphs can be associated with a hypergraph.",
        "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
        "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
        "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
        "Theorem 2.",
        "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
        "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
        "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
        "The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
        "First, we discuss the way HG is constructed.",
        "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
        "From G to HG.",
        "Let G = (N, E) be a directed graph.",
        "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
        "No other node is in N(HG).",
        "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
        "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
        "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
        "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
        "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
        "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
        "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
        "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
        "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
        "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
        "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
        "Lemma 1.",
        "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
        "Key Ingredients.",
        "We are now in the position of presenting an overview of the key ingredients of the proof.",
        "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
        "There are three basic observations serving the purpose of proving the correctness of the reduction.",
        "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
        "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
        "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
        "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
        "Each of these vertices plays a specific role in the reduction.",
        "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
        "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
        "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
        "The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
        "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
        "The arguments for the proof are as follows.",
        "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
        "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
        "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
        "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
        "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
        "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
        "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
        "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
        "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
        "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
        "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
        "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
        "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
        "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
        "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
        "We denote the set of vertices N of T by vertices(T).",
        "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
        "A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
        "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
        "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
        "A hypergraph H is acyclic if hw(H) = 1.",
        "P Example 3.",
        "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
        "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
        "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
        "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
        "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
        "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
        "Theorem 3.",
        "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
        "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
        "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
        "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
        "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
        "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
        "Let hv and hc be two packings for Hv and Hc, respectively.",
        "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
        "Example 4.",
        "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
        "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
        "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
        "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
        "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
        "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
        "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
        "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
        "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
        "Indeed, if v is a leaf, then v hv = w(hv).",
        "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
        "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
        "In the second phase, the tree T is processed starting from the root.",
        "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
        "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
        "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
        "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
        "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
        "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
        "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
        "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
        "Equivalently, the algorithm may have chosen {h5}.",
        "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
        "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
        "Let H be a hypergraph and w be a weighting function for it.",
        "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
        "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
        "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
        "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
        "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
        "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
        "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
        "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
        "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
        "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
        "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
        "This holds in particular for w = v1.",
        "Contradiction with the definition of v1.",
        "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
        "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
        "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
        "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
        "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
        "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
        "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
        "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
        "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
        "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
        "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
        "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
        "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
        "Theorem 5.",
        "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
        "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
        "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
        "Surprisingly, we establish this is not the case.",
        "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
        "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
        "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
        "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
        "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
        "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
        "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
        "Definition 2.",
        "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
        "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
        "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
        "Theorem 6.",
        "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
        "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
        "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
        "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
        "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
        "By definition, strict hypertree decompositions are special hypertree decompositions.",
        "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
        "Theorem 7.",
        "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
        "A Game Theoretic View.",
        "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
        "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
        "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
        "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
        "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
        "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
        "Otherwise, the robber wins.",
        "Theorem 8.",
        "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
        "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
        "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario.",
        "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3.",
        "Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
        "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
        "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
        "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
        "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
        "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
        "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
        "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
        "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
        "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
        "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
        "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
        "Hypertree-Width and Related Hypergraph Invariants.",
        "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
        "Solving Concisely Expressed Combinatorial Auction Problems.",
        "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
        "Combinatorial auctions with structured item graphs.",
        "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
        "An o(n2 ) algorithm for circular-arc graph recognition.",
        "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
        "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
        "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
        "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
        "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
        "Hypertree decompositions and tractable queries.",
        "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
        "Solving combinatorial auctions using stochastic local search.",
        "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
        "A Catalog of Complexity Classes.",
        "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
        "An incremental linear-time algorithm for recognizing interval graphs.",
        "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
        "The Winner Determination Problem.",
        "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
        "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
        "Truth revelation in approximately efficient 160 combinatorial auctions.",
        "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
        "Analyzing the airwaves auction.",
        "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
        "Selling spectrum rights.",
        "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
        "Bidding and allocation in combinatorial auctions.",
        "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
        "Graph minors ii. algorithmic aspects of tree width.",
        "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
        "Computationally manageable combinatorial auctions.",
        "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
        "An implementation of the contract net protocol based on marginal cost calculations.",
        "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
        "Algorithm for optimal winner determination in combinatorial auctions.",
        "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
        "Winner determination algorithms.",
        "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
        "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
        "Bob: Improved winner determination in combinatorial auctions and generalizations.",
        "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
        "Some tractable combinatorial auctions.",
        "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
        "An efficient approximate allocation algorithm for combinatorial auctions.",
        "In Proc. of EC01, pages 125-136, 2001. 161"
    ],
    "error_count": 0,
    "keys": {
        "hypergraph": {
            "translated_key": "hipergrafo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
                "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of hypertree decomposition, a recently introduced measure of <br>hypergraph</br> cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) <br>hypergraph</br> H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a <br>hypergraph</br> H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The <br>hypergraph</br> H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
                "Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
                "Weighted Set Packing.",
                "Let us note that the <br>hypergraph</br> representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a <br>hypergraph</br> H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the <br>hypergraph</br> H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a <br>hypergraph</br> (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a <br>hypergraph</br> H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual <br>hypergraph</br> ¯H instead of the auction <br>hypergraph</br> H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of structured item graph.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual <br>hypergraph</br>, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a <br>hypergraph</br>.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a <br>hypergraph</br>.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a <br>hypergraph</br> H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a <br>hypergraph</br> HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the <br>hypergraph</br> HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of <br>hypergraph</br> acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a <br>hypergraph</br> H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A hypertree decomposition of a <br>hypergraph</br> H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) <br>hypergraph</br> H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A <br>hypergraph</br> H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The <br>hypergraph</br> H I0,B0 reported in Figure 1. (a) is an example acyclic <br>hypergraph</br>.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the <br>hypergraph</br> H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the <br>hypergraph</br> such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the <br>hypergraph</br> H1 in Figure 3. (a) and notice that the <br>hypergraph</br> in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original <br>hypergraph</br> is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual <br>hypergraph</br> and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a <br>hypergraph</br> H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the <br>hypergraph</br> whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a <br>hypergraph</br> and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual <br>hypergraph</br> H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a <br>hypergraph</br> in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual <br>hypergraph</br>, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a <br>hypergraph</br>, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a <br>hypergraph</br> such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a <br>hypergraph</br> H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the <br>hypergraph</br>, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a <br>hypergraph</br> H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a <br>hypergraph</br> such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3.",
                "Motivated by this result, we investigated the use of hypertree decomposition (on the dual <br>hypergraph</br> associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual <br>hypergraph</br>), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related <br>hypergraph</br> Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed Combinatorial Auction Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Mostramos que la noción de descomposición de hipertree, una medida recientemente introducida de ciclicidad \"hipergrafio\", resulta ser más útil aquí.",
                "Actualmente, la clase más general de subastas combinatorias manejables se ha señalado modelando interacciones entre los postores con la noción de gráfico de elementos, que es un gráfico cuyos nodos están en correspondencia individual con elementos, y los bordes son tales que para cualquiera de152 Figura 1: Ejemplo MAXWSP Problema: (a) \"Hypergraph\" H i0, B0 y un empaque H para ello;(b) gráfico primario para H i0, B0;y, (c, d) dos gráficos de elementos para H i0, b0.Bid, los artículos que ocurren en él inducen un subgrafio conectado.",
                "Para tener cierta intuición sobre cómo se pueden construir gráficos de elementos, notamos que la interacción del postor en una subasta combinatoria I, B se puede representar mediante un \"hipergrafo\" H I, B de modo que su conjunto de nodos n (h i, b) coincidencon el conjunto de elementos I, y donde sus bordes E (H I, B) son precisamente las ofertas de los compradores {Artículo (BI) |Bi ∈ B}.",
                "El \"Hypergraph\" H i0, B0 informado en la Figura 1. (a) es una codificación para una subasta combinatoria i0, b0, donde i0 = {i1, ..., i5} y item (bi) = Hi, para cada uno1 ≤ I ≤ 3.",
                "Observemos que la representación de \"hipergrafo\" H I, B de una subasta combinatoria I, B también es útil para hacer la analogía entre el problema de determinación del ganador y el problema máximo de empaquetado de set ponderado en los hipergrafios claros (por ejemplo, [17]).",
                "Formalmente, un empaquetado H para un \"hipergrafo\" H es un conjunto de hiperedges de H tal que para cada par h, h ∈ H con H = H, sostiene que H ∩ H = ∅.",
                "Considere nuevamente el \"Hypergraph\" H i0, B0 informado en la Figura 1. (a).",
                "Más formalmente, dejar que C (IG, K) denote la clase de todos los hipergrafos que tienen un árbol de elementos de ancho de árbol delimitado por K, demostramos que decidir si un \"hipergrafo\" (asociado con un problema de subasta combinatoria) pertenece a C (IG,3) es NP-COMPLETO.",
                "Nuestras investigaciones, esta vez, condujeron a muy buenas noticias que se resumen a continuación: para un \"hipergrafo\" H, su doble ¯h = (V, E) es tal que los nodos en V están en correspondencia uno a uno con hipermedios enH, y para cada nodo x ∈ N (h), {h |x ∈ H ∧ H ∈ 153 E (H)} está en E. Mostramos que MaxWSP es manejable en la clase de aquellas instancias cuyas hipergrafías duales tienen un ancho de hipertree [7] limitado por K (corto: Clase C (HW, K)de hipergrafos).",
                "Tenga en cuenta que una cuestión clave de la tractabilidad es considerar el ancho de hipertree del doble \"hipergrafio\" ¯h en lugar de la subasta \"hipergrafio\" H. De hecho, podemos demostrar que MaxWSP permanece hardado incluso cuando H es acíclico (es decir,, cuando tiene ancho de hipertree 1), incluso cuando cada nodo está contenido en 3 hiperedias como máximo.",
                "De hecho, mostramos que los gráficos de elementos estructurados están en correspondencia uno a uno con algunos tipos especiales de descomposición de hipertree del \"hipergrafo\" dual, que llamamos descomposiciones de hipertrees estrictas.",
                "La complejidad de los gráficos de elementos estructurados se dejan ser un \"hipergrafo\".",
                "Muchos gráficos de elementos se pueden asociar con un \"hipergrafo\".",
                "Decidir si un \"hipergrafo\" H pertenece a C (IG, 3) es NP-Hard.",
                "La idea general es construir un Hg \"hipergrafo\" de tal manera que haya un gráfico de elementos G para Hg con TW (g) ≤ 3 si y solo si HP (S, T) sobre G tiene una solución.",
                "El lector puede notar en él los bloques definidos anteriormente y cómo están relacionados con el \"hipergrafo\" Hg en la Figura 2. (a) - Otros bloques en él (de la forma w (x, y)) se definen a continuación.",
                "Con este fin, nos centramos en la noción de descomposición de hipertree [7], que es una generalización natural de la aciclicidad de \"hipergrafo\" y que se ha utilizado de manera rentable en otros dominios, por ejemplo, satisfacción de restricciones y evaluación de consultas de bases de datos, para identificar las islas de manatabilidad paraProblemas np-duros.",
                "Un hipertree para un \"hipergrafo\" H es un triple t, χ, λ, donde t = (n, e) es un árbol enraizado, y χ y λ son funciones de etiquetado que asocian cada vértice p ∈ N con dos conjuntos χ (P (P) ⊆ n (h) y λ (p) ⊆ e (h).",
                "Una descomposición de hipertree de un \"hipergrafo\" H es un hipertree HD = t, χ, λ para H que satisface las siguientes condiciones: 1. Para cada borde H ∈ E (H), existe p ∈ Vértices (t) de modo queH ⊆ χ (P) (decimos que P cubre H);156 Figura 3: Ejemplo MAXWSP Problema: (a) \"Hypergraph\" H1;(b) Hypergraph ¯h1;(b) Una descomposición hipertree de 2 anchas de ¯h1.2. Para cada nodo y ∈ N (h), el conjunto {p ∈ Vértices (t) |Y ∈ χ (P)} induce un subárbol (conectado) de t;3. Para cada p ∈ Vértices (t), χ (P) ⊆ N (λ (P));4. Para cada p ∈ Vértices (t), n (λ (p)) ∩ χ (TP) ⊆ χ (P).",
                "Un \"hipergrafo\" H es acíclico si HW (H) = 1.",
                "El \"Hypergraph\" H i0, B0 informado en la Figura 1. (a) es un ejemplo de \"hipergrafo\" acíclico.",
                "En particular, observe que H1 se ha obtenido agregando las dos hiperedges H4 y H5 a H i0, B0 para modelar, por ejemplo, que se han propuesto dos nuevas ofertas, B4 y B5, respectivamente, al subastador.¡Al siguiente, en lugar de trabajar en el \"hipergrafo\" H asociado con un problema de maxwsp, trataremos con su dual ¯h, es decir, con el \"hipergrafo\" de modo que sus nodos están en correspondencia uno a uno con elHyperedges de H, y donde para cada nodo x ∈ N (H), {H |x ∈ H ∧ H ∈ E (H)} está en E (¯h).",
                "Como ejemplo, el lector puede querer verificar nuevamente el \"Hypergraph\" H1 en la Figura 3. (a) y observe que el \"Hypergraph\" en la Figura 3. (b) es de hecho su doble.",
                "La justificación de esta elección es que emitir restricciones en el \"hipergrafio\" original es una garantía para la tractabilidad solo en escenarios muy simples.",
                "En la clase de hipergrafos acíclicos, MaxWSP es (1) en P si cada nodo ocurre en dos hipedges como máximo;y, (2) NP-Hard, incluso si cada nodo está contenido en tres hiperedges como máximo.3.1 La descomposición de hipertree en los problemas de empaque duales de \"hipergrafo\" y manejo para una constante fija K, que C (HW, K) denota la clase de todos los hipergrafos cuyos hipergrafios duales tienen un ancho de hipertree limitado por K.El problema de embalaje de set ponderado máximo se puede resolver en el tiempo polinomial en la Clase C (HW, K) por medio del algoritmo ComputesetPackingk, que se muestra en la Figura 4.",
                "El algoritmo recibe en la entrada A \"Hypergraph\" H, una función de ponderación W y una descomposición de hipertreos de ancho K HD = T = (N, E), χ, λ de ¯h.",
                "Para cada vértice v ∈ N, deje que HV sea el \"hipergrafo\" cuyo conjunto de nodos N (HV) ⊆ N (H) coincide con λ (V), y cuyo conjunto de bordes E (HV) ⊆ E (H) coincide conχ (V).",
                "Sea h un \"hipergrafo\" y sea una función de ponderación para ello.",
                "En el doble \"hipergrafio\" H, I es una hiperedge en E (¯h) que cubre los nodos H1 y H2.",
                "Sea H un \"hipergrafo\" en C (HW, K), y sea W una función de ponderación suave para ello.",
                "La línea de la prueba es mostrar primero que los gráficos de elementos estructurados están en correspondencia uno a uno con un tipo especial de descomposiciones de hipertree del \"hipergrafo\" dual, que llamaremos estricto.",
                "Luego, el resultado seguirá demostrando que las estrictas descomposiciones de hipertreas de Width Width son menos poderosas que las descomposiciones de Kwith Hypertree.4.1 Stricty Hypree Desegises Sea H un \"hipergrafo\", y deje que V ⊆ n (h) sea un conjunto de nodos y x, y ∈ N (H).",
                "Sea h un \"hipergrafo\" tal que para cada nodo v ∈ N (h), {v} está en e (h).",
                "Tenga en cuenta que, en lo que respecta al problema máximo de empaquetado ponderado, dado un \"hipergrafo\" H, siempre podemos suponer que para cada nodo v ∈ N (h), {V} está en E (H).",
                "De hecho, si esta hiperedge no está en el \"hipergrafo\", entonces se puede agregar sin pérdida de generalidad, configurando w ({v}) = 0.",
                "El juego se juega con un \"hipergrafo\" H por un ladrón contra K Marshals que actúan en coordinación.",
                "Sea h un \"hipergrafo\" tal que para cada nodo v ∈ N (h), {v} está en e (h).",
                "Motivado por este resultado, investigamos el uso de la descomposición de la hipertree (en el doble \"hipergrafo\" asociado con el escenario) y demostramos que el problema es manejable en la clase de aquellos casos cuyos hipergrafos duales han limitado el ancho de hipertree.",
                "En particular, el último resultado se establece mostrando una relación precisa entre los gráficos de ítems estructurados y las formas restringidas de descomposiciones de hipertree (en el \"hipergrafo\" dual), llamadas descomposiciones de consulta (ver, por ejemplo, [7]).",
                "Hipertree-width e invariantes relacionados con \"hipergrafio\"."
            ],
            "translated_text": "",
            "candidates": [
                "hipergrafo",
                "hipergrafio",
                "hipergrafo",
                "Hypergraph",
                "hipergrafo",
                "hipergrafo",
                "Hypergraph",
                "Hypergraph",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "Hypergraph",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafio",
                "hipergrafio",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "Hypergraph",
                "Hypergraph",
                "hipergrafo",
                "hipergrafo",
                "Hypergraph",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "Hypergraph",
                "Hypergraph",
                "hipergrafo",
                "hipergrafio",
                "Hypergraph",
                "hipergrafo",
                "hipergrafo",
                "Hypergraph",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafio",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafio",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafo",
                "hipergrafio"
            ],
            "error": []
        },
        "combinatorial auction": {
            "translated_key": "subasta combinatoria",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
                "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given <br>combinatorial auction</br>, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a <br>combinatorial auction</br> is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a <br>combinatorial auction</br> I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a <br>combinatorial auction</br> I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a <br>combinatorial auction</br>, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
                "Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a <br>combinatorial auction</br>, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
                "Weighted Set Packing.",
                "Let us note that the hypergraph representation H I,B of a <br>combinatorial auction</br> I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a <br>combinatorial auction</br> I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a <br>combinatorial auction</br> has a structured item graph of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a <br>combinatorial auction</br> problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of structured item graph.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a hypergraph.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A hypergraph H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a hypergraph and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a <br>combinatorial auction</br> scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a <br>combinatorial auction</br> has a structured item graph, even for treewidth 3.",
                "Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related Hypergraph Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed <br>combinatorial auction</br> Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Tenga en cuenta que muchos gráficos de elementos pueden estar asociados con una \"subasta combinatoria\" dada, dependiendo de los bordes seleccionados para garantizar la conexión.",
                "Formalmente, una \"subasta combinatoria\" es un par I, b, donde i = {i1, ..., im} es el conjunto de artículos que el subastador tiene que vender, y b = {b1, ..., bn} esEl conjunto de ofertas de los compradores interesados en los artículos en I.",
                "Para tener cierta intuición sobre cómo se pueden construir gráficos de elementos, notamos que la interacción del postor en una \"subasta combinatoria\" I, B se puede representar mediante un hipergrafo H I, B tal que su conjunto de nodos n (H i, b) coincidecon el conjunto de elementos I, y donde sus bordes E (H I, B) son precisamente las ofertas de los compradores {Artículo (BI) |Bi ∈ B}.",
                "El hipergrafo H i0, B0 informado en la Figura 1. (a) es una codificación para una \"subasta combinatoria\" i0, b0, donde i0 = {i1, ..., i5} y item (bi) = Hi, para cada uno1 ≤ I ≤ 3.",
                "Sin embargo, exponencialmente, muchos gráficos de elementos podrían estar asociados con una \"subasta combinatoria\", y no está claro cómo determinar si existe un gráfico de elementos estructurado de un cierto ancho de árbol (constante), y de ser así, cómo calcular un gráfico de elementos tan estructuradoeficientemente.",
                "Los algoritmos de tiempo polinomial para encontrar la mejor simplificación del gráfico primario hasta ahora solo se conocían por los casos en que el gráfico del elemento a construir es una línea [10], un ciclo [4] o un árbol [3], pero eraUn problema abierto importante (cf. [3]) si es manejable verificar si para una \"subasta combinatoria\", un gráfico de elementos de ancho de árbol delimitado por un número natural fijo K existe y puede construirse en tiempo polinomial, si es así.",
                "Observamos que la representación del hipergrafo H I, B de una \"subasta combinatoria\" I, B también es útil para hacer la analogía entre el problema de determinación del ganador y el problema máximo de empaquetado de set ponderado en hipergrafos claros (por ejemplo, [17]).",
                "Luego, el problema de embalaje del conjunto de ponderación máxima para H W.R.T.W, denotado por MaxWSP (H, W), es el problema de encontrar un empaque para H que tiene el peso máximo sobre todos los empaquetados para H.",
                "El resultado es una muy mala noticia: está completo para verificar si una \"subasta combinatoria\" tiene un gráfico de elementos estructurados de ancho de árbol 3.",
                "Más formalmente, dejando que C (IG, K) denote la clase de todos los hipérgicos que tienen un árbol de elementos de ancho de árbol delimitado por K, demostramos que decidir si un hipergrafo (asociado con un problema de \"subasta combinatoria\") pertenece a C (IG,3) es NP-COMPLETO.",
                "Conclusiones Hemos resuelto la cuestión abierta de determinar la complejidad de calcular un gráfico de elementos estructurado asociado con un escenario de \"subasta combinatoria\".",
                "El resultado es una mala noticia, ya que resultó que es NP complete verificar si una \"subasta combinatoria\" tiene un gráfico de elementos estructurados, incluso para el ancho de árbol 3.",
                "Resolución de problemas expresados de \"subasta combinatoria\" expresamente expresada."
            ],
            "translated_text": "",
            "candidates": [
                "subasta combinatoria",
                "subasta combinatoria",
                "Subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria",
                "Subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria",
                "para ver que MaxWSP es solo una formulación diferente para el problema de determinación del ganador, dada una \"combinatorial\"Subsubasta combinatoria",
                "combinatorial",
                "Subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria",
                "Subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria",
                "subasta combinatoria"
            ],
            "error": []
        },
        "hypertree decomposition": {
            "translated_key": "descomposición del hiperárbol",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
                "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of <br>hypertree decomposition</br>, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
                "Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
                "Weighted Set Packing.",
                "Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the <br>hypertree decomposition</br> of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of structured item graph.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of <br>hypertree decomposition</br> of the dual hypergraph, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a hypergraph.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of <br>hypertree decomposition</br> [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A <br>hypertree decomposition</br> of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width <br>hypertree decomposition</br> of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a <br>hypertree decomposition</br> T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A hypergraph H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width <br>hypertree decomposition</br> for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 <br>hypertree decomposition</br> on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width <br>hypertree decomposition</br> HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the <br>hypertree decomposition</br> of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width <br>hypertree decomposition</br> HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a hypergraph and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width <br>hypertree decomposition</br> of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a <br>hypertree decomposition</br> of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded <br>hypertree decomposition</br> and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A <br>hypertree decomposition</br> HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict <br>hypertree decomposition</br> if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3.",
                "Motivated by this result, we investigated the use of <br>hypertree decomposition</br> (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related Hypergraph Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed Combinatorial Auction Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Mostramos que la noción de \"descomposición de hipertree\", una medida recientemente introducida de ciclicidad del hipergrafio, resulta ser más útil aquí.",
                "Sorprendentemente, mostramos que no se pierde nada en términos de generalidad cuando se considera la \"descomposición de hipertreas\" de los hipergrafios duales en lugar del ancho de árbol de los gráficos de elementos.",
                "De hecho, mostramos que los gráficos de elementos estructurados están en correspondencia uno a uno con algunos tipos especiales de \"descomposición de hipertreos\" del hipergrafo dual, que llamamos descomposiciones de hipertrees estrictas.",
                "Con este fin, nos centramos en la noción de \"descomposición de hipertree\" [7], que es una generalización natural de la aciclicidad del hipergrafio y que se ha utilizado de manera rentable en otros dominios, por ejemplo, satisfacción de restricciones y evaluación de consultas de bases de datos, para identificar islas de tractabilidad paraProblemas np-duros.",
                "Una \"descomposición de hipertree\" de un hipergrafo H es un hipertree HD = t, χ, λ para H que satisface las siguientes condiciones: 1. Para cada borde H ∈ E (H), existe p ∈ Vértices (t) de tal manera queH ⊆ χ (P) (decimos que P cubre H);156 Figura 3: Ejemplo MAXWSP Problema: (a) Hypergraph H1;(b) Hypergraph ¯h1;(b) Una \"descomposición de hipertreos\" de 2 anchas de ¯h1.2. Para cada nodo y ∈ N (h), el conjunto {p ∈ Vértices (t) |Y ∈ χ (P)} induce un subárbol (conectado) de t;3. Para cada p ∈ Vértices (t), χ (P) ⊆ N (λ (P));4. Para cada p ∈ Vértices (t), n (λ (p)) ∩ χ (TP) ⊆ χ (P).",
                "El ancho de una \"descomposición de hipertreas\" t, χ, λ es maxple desezas (t) | λ (p) |.",
                "En la Figura 3. (C) se informa una \"descomposición de hipertreos\" de 2 de ancho para ¯h1.",
                "En la clase de hipergrafos acíclicos, MaxWSP es (1) en P si cada nodo ocurre en dos hipedges como máximo;y, (2) NP-Hard, incluso si cada nodo está contenido en tres hiperedges como máximo.3.1 \"descomposición de hipertree\" en el dual hipergrafo y problemas de embalaje manejables para una constante fija K, que C (HW, K) denota la clase de todos los hipergrafos cuyos hipergrafios duales tienen un ancho de hipertree limitado por K.El problema de embalaje de conjunto de ponderado máximo se puede resolver en el tiempo polinomial en la Clase C (HW, K) por medio del algoritmo ComputesetPackingk, que se muestra en la Figura 4.",
                "El algoritmo recibe en la entrada A HyperGraph H, una función de ponderación W y una \"descomposición de hipertreas\" K de K K hd = t = (n, e), χ, λ de ¯h.",
                "Considere nuevamente la \"descomposición hipertree\" de ¯h1 informada en la Figura 3. (c).",
                "Luego, el conjunto de todos los empaques posibles (que se construyen en el paso de inicialización de COMPUTSETPackingk), para cada uno de sus vértices, es Refigurar 5: Aplicación de ejemplo de algoritmo ComputSetPackingk.157 Entrada: H, W, y una \"descomposición de hipertreas\" de K-width hd = t = (n, e), χ, λ de ¯h;Salida: una solución a maxwsp (h, w);var hv: conjunto de paquetes para HV, para cada v ∈ N;H ∗: Embalaje para H;V HV: número racional, para cada empaquetado parcial HV para HV;HHV, C: Embalaje parcial para HC, para cada empaquetado parcial HV para HV, y para cada uno (V, C) ∈ E;---------------------------------------Comience realizado: = el conjunto de todas las hojas de t;mientras que ∃v ∈ T tal que (i) v ∈ Hecho, y (ii) {c |C es el niño de V} ⊆ Do Do para cada C tal que (V, C) ∈ E do HV: = HV - {HV |∃hc ∈ Hc S.T.HV ≈ HC};Para cada hv ∈ Hv do v Hv: = W (HV);para cada c tal que (v, c) ∈ E do ¯hc: = arg maxhc∈Hc | hv≈ hc c hc - w (hc ∩ hv);hhv, c: = ¯hc;( * Establecer el mejor empaque *) v Hv: = V HV + C ¯HC - W (¯HC ∩ HV);finalizar para finalizar para: = hecho ∪ {v};terminar mientras final;----------------------------------------------- Begin ( * principal *) paraCada vértice v in t do hv: = {hv empaque para hv};De abajo hacia arriba;Sea r la raíz de t;¯hr: = arg maxhr∈Hr r hr;h ∗: = ¯hr;( * incluye empacar *) t opdown (r, hr);return h ∗;fin.",
                "Sea hd = t, χ, λ una \"descomposición de hipertreos\" completa de ¯h.",
                "El resultado anterior muestra que si se da una \"descomposición de hipertree\" del ancho K, el problema MAXWSP se puede resolver de manera eficiente.",
                "Además, de manera diferente al caso de los gráficos de elementos estructurados, es bien sabido que decidir la existencia de una \"descomposición de hipertree\" unida a K y calcular uno (si los hay) son problemas que pueden resolverse eficientemente en el tiempo polinomial [7].",
                "Una \"descomposición de hipertree\" hd = t, χ, λ de H es estricto si las siguientes condiciones se mantienen: 1. Para cada par de vértices R y S en los vértices (t) de tal manera que S es un hijo de R, y para cada uno [[χ (R)]-Componente CR S.T.",
                "Entonces, ¯h tiene una estricta \"descomposición de hipertreas\" de Width si y solo si K Marshals puede ganar el estricto juego de ladrones y mariscales en ¯h, sin importar los movimientos de los ladrones.5.",
                "Motivado por este resultado, investigamos el uso de \"descomposición de hipertrees\" (en el hipergrafo dual asociado con el escenario) y demostramos que el problema es manejable en la clase de aquellos casos cuyos hipergrafos duales han limitado el ancho de hipertree."
            ],
            "translated_text": "",
            "candidates": [
                "descomposición de hipertree",
                "descomposición de hipertree",
                "descomposición de hipertree",
                "descomposición de hipertreas",
                "descomposición de hipertree",
                "descomposición de hipertreos",
                "descomposición de hipertree",
                "descomposición de hipertree",
                "descomposición de hipertree",
                "descomposición de hipertree",
                "descomposición de hipertreos",
                "descomposición de hipertree",
                "descomposición de hipertreas",
                "descomposición de hipertree",
                "descomposición de hipertreos",
                "Descomposición de hipertree",
                "descomposición de hipertree",
                "descomposición de hipertree",
                "descomposición de hipertreas",
                "descomposición de hipertree",
                "descomposición hipertree",
                "descomposición de hipertree",
                "descomposición de hipertreas",
                "descomposición de hipertree",
                "descomposición de hipertreos",
                "descomposición de hipertree",
                "descomposición de hipertree",
                "descomposición de hipertree",
                "descomposición de hipertree",
                "descomposición de hipertree",
                "descomposición de hipertree",
                "descomposición de hipertree",
                "descomposición de hipertreas",
                "descomposición de hipertree",
                "descomposición de hipertrees"
            ],
            "error": []
        },
        "well-known mechanisms for resource and task allocation": {
            "translated_key": "Mecanismos bien conocidos para la asignación de recursos y tareas",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
                "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are <br>well-known mechanisms for resource and task allocation</br> where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
                "Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
                "Weighted Set Packing.",
                "Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of structured item graph.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a hypergraph.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A hypergraph H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a hypergraph and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3.",
                "Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related Hypergraph Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed Combinatorial Auction Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Las subastas combinatorias son \"mecanismos bien conocidos para la asignación de recursos y tareas\", donde los postores pueden ofertar simultáneamente por combinaciones de artículos."
            ],
            "translated_text": "",
            "candidates": [
                "Mecanismos bien conocidos para la asignación de recursos y tareas",
                "mecanismos bien conocidos para la asignación de recursos y tareas"
            ],
            "error": []
        },
        "hypertree-based decomposition method": {
            "translated_key": "método de descomposición basado en hiperárboles",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
                "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
                "Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
                "Weighted Set Packing.",
                "Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed <br>hypertree-based decomposition method</br> is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of structured item graph.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a hypergraph.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A hypergraph H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a hypergraph and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3.",
                "Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related Hypergraph Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed Combinatorial Auction Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Por el contrario, el \"método de descomposición basado en hipertree propuesto\" es estrictamente más general que el método de los gráficos de elementos estructurados."
            ],
            "translated_text": "",
            "candidates": [
                "Método de descomposición basado en hipertrees",
                "método de descomposición basado en hipertree propuesto"
            ],
            "error": []
        },
        "hypergraph hg": {
            "translated_key": "hipergrafo Hg",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
                "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
                "Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
                "Weighted Set Packing.",
                "Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of structured item graph.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a hypergraph.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a <br>hypergraph hg</br> such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the <br>hypergraph hg</br> in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A hypergraph H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a hypergraph and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3.",
                "Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related Hypergraph Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed Combinatorial Auction Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "La idea general es construir un \"hipergrafo Hg\" de modo que haya un gráfico de elementos G para Hg con TW (G) ≤ 3 si y solo si HP (S, T) sobre G tiene una solución.",
                "El lector puede notar en él los bloques definidos anteriormente y cómo están relacionados con el \"Hypergraph Hg\" en la Figura 2. (a) - Otros bloques en él (de la forma w (x, y)) se definen a continuación."
            ],
            "translated_text": "",
            "candidates": [
                "Hypergraph Hg",
                "hipergrafo Hg",
                "Hypergraph Hg",
                "Hypergraph Hg"
            ],
            "error": []
        },
        "complexity of structured item graph": {
            "translated_key": "Complejidad del gráfico de elementos estructurados",
            "is_in_text": false,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
                "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
                "Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
                "Weighted Set Packing.",
                "Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of structured item graph.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a hypergraph.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A hypergraph H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a hypergraph and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3.",
                "Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related Hypergraph Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed Combinatorial Auction Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "structured item graph complexity": {
            "translated_key": "complejidad del gráfico de elementos estructurados",
            "is_in_text": false,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
                "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
                "Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
                "Weighted Set Packing.",
                "Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of structured item graph.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a hypergraph.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A hypergraph H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a hypergraph and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3.",
                "Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related Hypergraph Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed Combinatorial Auction Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "simplification of the primal graph": {
            "translated_key": "Simplificación del gráfico primario",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
                "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
                "Polynomial time algorithms to find the best <br>simplification of the primal graph</br> were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
                "Weighted Set Packing.",
                "Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of structured item graph.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a hypergraph.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A hypergraph H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a hypergraph and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3.",
                "Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related Hypergraph Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed Combinatorial Auction Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Los algoritmos de tiempo polinomial para encontrar la mejor \"simplificación del gráfico primario\" hasta ahora solo se conocen por los casos en que el gráfico del elemento a construir es una línea [10], un ciclo [4] o un árbol [3], peroEra un problema abierto importante (cf. [3]) si es manejable verificar si para una subasta combinatoria, un gráfico de elementos de ancho de árbol delimitado por un número natural fijo K existe y puede construirse en tiempo polinómico, si es así."
            ],
            "translated_text": "",
            "candidates": [
                "Simplificación del gráfico primario",
                "simplificación del gráfico primario"
            ],
            "error": []
        },
        "the primal graph simplification": {
            "translated_key": "la simplificación del gráfico primario",
            "is_in_text": false,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
                "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
                "Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
                "Weighted Set Packing.",
                "Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of structured item graph.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a hypergraph.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A hypergraph H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a hypergraph and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3.",
                "Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related Hypergraph Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed Combinatorial Auction Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "structured item graph": {
            "translated_key": "gráfico de elementos estructurado",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
                "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a <br>structured item graph</br> of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a <br>structured item graph</br> is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a <br>structured item graph</br>.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a <br>structured item graph</br>, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a <br>structured item graph</br> either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a <br>structured item graph</br> of a certain (constant) treewidth exists, and if so, how to compute such a <br>structured item graph</br> efficiently.",
                "Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
                "Weighted Set Packing.",
                "Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a combinatorial auction has a <br>structured item graph</br> of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of <br>structured item graph</br>.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a hypergraph.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A hypergraph H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a hypergraph and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a <br>structured item graph</br> associated with a combinatorial auction scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a <br>structured item graph</br>, even for treewidth 3.",
                "Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related Hypergraph Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed Combinatorial Auction Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "De hecho, la capacidad de ajuste de determinar si existe un \"gráfico de elementos estructurado\" de un ancho de árbol fijo (y de ser así, calcular uno) se dejó como un problema abierto crucial.",
                "En este artículo, resolvemos este problema demostrando que la existencia de un \"gráfico de elementos estructurados\" es computacionalmente intratable, incluso para el ancho de árbol 3.",
                "Aún más sorprendente, mostramos que la clase de instancias manejables identificadas por medio de nuestro enfoque contiene adecuadamente la clase de instancias que tienen un \"gráfico de elementos estructurados\".",
                "De hecho, se demostró que el problema de determinación del ganador se soluciona en el tiempo polinómico si las interacciones entre los postores pueden representarse mediante un \"gráfico de elementos estructurados\", es decir, un árbol o, en general, un gráfico que tiene una estructura similar a un árbol [3]-Width de árbol delimitado formalmente [16].",
                "El resultado de la tractabilidad mencionado anteriormente en gráficos de elementos estructurados resulta ser útil en la práctica solo cuando un \"gráfico de elementos estructurados\" se da o puede determinarse de manera eficiente.",
                "Sin embargo, exponencialmente, muchos gráficos de elementos pueden estar asociados con una subasta combinatoria, y no está claro cómo determinar si existe un \"gráfico de elementos estructurado\" de un cierto ancho de árbol (constante), y de ser así, cómo calcular un elemento tan \"estructuradoGráfico \"eficientemente.",
                "El resultado es una muy mala noticia: está completo para verificar si una subasta combinatoria tiene un \"gráfico de elementos estructurados\" de ancho de árbol 3.",
                "La prueba de los resultados anteriores nos da una idea interesante de la noción de \"gráfico de elementos estructurados\".",
                "Conclusiones Hemos resuelto la cuestión abierta de determinar la complejidad de calcular un \"gráfico de elementos estructurados\" asociado con un escenario de subasta combinatoria.",
                "El resultado es una mala noticia, ya que resultó que es NP-complete verificar si una subasta combinatoria tiene un \"gráfico de elementos estructurados\", incluso para el ancho de árbol 3."
            ],
            "translated_text": "",
            "candidates": [
                "Gráfico de elementos estructurados",
                "gráfico de elementos estructurado",
                "Gráfico de elementos estructurados",
                "gráfico de elementos estructurados",
                "Gráfico de elementos estructurados",
                "gráfico de elementos estructurados",
                "Gráfico de elementos estructurados",
                "gráfico de elementos estructurados",
                "Gráfico de elementos estructurados",
                "gráfico de elementos estructurados",
                "Gráfico de elementos estructurados",
                "gráfico de elementos estructurado",
                "estructuradoGráfico ",
                "Gráfico de elementos estructurados",
                "gráfico de elementos estructurados",
                "Gráfico de elementos estructurados",
                "gráfico de elementos estructurados",
                "Gráfico de elementos estructurados",
                "gráfico de elementos estructurados",
                "Gráfico de elementos estructurados",
                "gráfico de elementos estructurados"
            ],
            "error": []
        },
        "fixed treewidth": {
            "translated_key": "ancho de árbol fijo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
                "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a structured item graph of a <br>fixed treewidth</br> exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
                "Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
                "Weighted Set Packing.",
                "Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of structured item graph.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a hypergraph.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A hypergraph H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a hypergraph and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3.",
                "Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related Hypergraph Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed Combinatorial Auction Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "De hecho, la manifabilidad de determinar si existe un gráfico de elementos estructurado de un \"ancho de árbol fijo\" (y si es así, calcular uno) se dejó como un problema abierto crucial."
            ],
            "translated_text": "",
            "candidates": [
                "ancho de árbol fijo",
                "ancho de árbol fijo"
            ],
            "error": []
        },
        "accepted bid price": {
            "translated_key": "Precio de oferta aceptado",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the <br>accepted bid price</br>s.",
                "While this problem is in general NPhard, it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the <br>accepted bid price</br>s (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in polynomial time unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in polynomial time (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
                "Polynomial time algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time, if so.",
                "Weighted Set Packing.",
                "Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of structured item graph.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a hypergraph.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A hypergraph H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in polynomial time on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a hypergraph and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in polynomial time [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3.",
                "Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related Hypergraph Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed Combinatorial Auction Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030Renda, Italia ggreco@mat.unical.it Resumen El problema de determinación del ganador en las subastas combinatorias es el problema de determinar la asignación de los artículos entre los licitadores que maximiza la suma del \"precio de oferta aceptado\" s.",
                "Un problema crucial para las subastas combinatorias es determinar el resultado b ∗ que maximiza la suma del \"precio de oferta aceptado\" s (es decir, bi∈B ∗ pay (bi)) sobre todos los resultados posibles."
            ],
            "translated_text": "",
            "candidates": [
                "Precio de oferta aceptado",
                "precio de oferta aceptado",
                "Precio de oferta aceptado",
                "precio de oferta aceptado"
            ],
            "error": []
        },
        "polynomial time": {
            "translated_key": "tiempo polinomial",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On The Complexity of Combinatorial Auctions: Structured Item Graphs and Hypertree Decompositions [Extended Abstract] Georg Gottlob Computing Laboratory Oxford University OX1 3QD Oxford, UK georg.gottlob@comlab.ox.ac.uk Gianluigi Greco Dipartimento di Matematica University of Calabria I-87030 Rende, Italy ggreco@mat.unical.it ABSTRACT The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices.",
                "While this problem is in general NPhard, it is known to be feasible in <br>polynomial time</br> on those instances whose associated item graphs have bounded treewidth (called structured item graphs).",
                "Formally, an item graph is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any bid, the items occurring in it induce a connected subgraph.",
                "Note that many item graphs might be associated with a given combinatorial auction, depending on the edges selected for guaranteeing the connectedness.",
                "In fact, the tractability of determining whether a structured item graph of a fixed treewidth exists (and if so, computing one) was left as a crucial open problem.",
                "In this paper, we solve this problem by proving that the existence of a structured item graph is computationally intractable, even for treewidth 3.",
                "Motivated by this bad news, we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions.",
                "We show that the notion of hypertree decomposition, a recently introduced measure of hypergraph cyclicity, turns out to be most useful here.",
                "Indeed, we show that the winner determination problem is solvable in <br>polynomial time</br> on instances whose bidder interactions can be represented with (dual) hypergraphs having bounded hypertree width.",
                "Even more surprisingly, we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics; F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity 1.",
                "INTRODUCTION Combinatorial auctions.",
                "Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items.",
                "This is desirable when a bidders valuation of a bundle of items is not equal to the sum of her valuations of the individual items.",
                "This framework is currently used to regulate agents interactions in several application domains (cf., e.g., [21]) such as, electricity markets [13], bandwidth auctions [14], and transportation exchanges [18].",
                "Formally, a combinatorial auction is a pair I, B , where I = {I1, ..., Im} is the set of items the auctioneer has to sell, and B = {B1, ..., Bn} is the set of bids from the buyers interested in the items in I.",
                "Each bid Bi has the form item(Bi), pay(Bi) , where pay(Bi) is a rational number denoting the price a buyer offers for the items in item(Bi) ⊆ I.",
                "An outcome for I, B is a subset b of B such that item(Bi)∩item(Bj) = ∅, for each pair Bi and Bj of bids in b with i = j.",
                "The winner determination problem.",
                "A crucial problem for combinatorial auctions is to determine the outcome b∗ that maximizes the sum of the accepted bid prices (i.e., Bi∈b∗ pay(Bi)) over all the possible outcomes.",
                "This problem, called winner determination problem (e.g., [11]), is known to be intractable, actually NP-hard [17], and even not approximable in <br>polynomial time</br> unless NP = ZPP [19].",
                "Hence, it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions (e.g., [20, 5, 2, 8, 23]) and to identify classes of instances where solving the winner determination problem is feasible in <br>polynomial time</br> (e.g., [15, 22, 12, 21]).",
                "In fact, constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions.",
                "Item graphs.",
                "Currently, the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph, which is a graph whose nodes are in one-to-one correspondence with items, and edges are such that for any 152 Figure 1: Example MaxWSP problem: (a) Hypergraph H I0,B0 , and a packing h for it; (b) Primal graph for H I0,B0 ; and, (c,d) Two item graphs for H I0,B0 . bid, the items occurring in it induce a connected subgraph.",
                "Indeed, the winner determination problem was proven to be solvable in <br>polynomial time</br> if interactions among bidders can be represented by means of a structured item graph, i.e., a tree or, more generally, a graph having tree-like structure [3]-formally bounded treewidth [16].",
                "To have some intuition on how item graphs can be built, we notice that bidder interaction in a combinatorial auction I, B can be represented by means of a hypergraph H I,B such that its set of nodes N(H I,B ) coincides with set of items I, and where its edges E(H I,B ) are precisely the bids of the buyers {item(Bi) | Bi ∈ B}.",
                "A special item graph for I, B is the primal graph of H I,B , denoted by G(H I,B ), which contains an edge between any pair of nodes in some hyperedge of H I,B .",
                "Then, any item graph for H I,B can be viewed as a simplification of G(H I,B ) obtained by deleting some edges, yet preserving the connectivity condition on the nodes included in each hyperedge.",
                "Example 1.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an encoding for a combinatorial auction I0, B0 , where I0 = {I1, ..., I5}, and item(Bi) = hi, for each 1 ≤ i ≤ 3.",
                "The primal graph for H I0,B0 is reported in Figure 1. (b), while two example item graphs are reported in Figure 1. (c) and (d), where edges required for maintaining the connectivity for h1 are depicted in bold. ¡ Open Problem: Computing structured item graphs efficiently.",
                "The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined.",
                "However, exponentially many item graphs might be associated with a combinatorial auction, and it is not clear how to determine whether a structured item graph of a certain (constant) treewidth exists, and if so, how to compute such a structured item graph efficiently.",
                "<br>polynomial time</br> algorithms to find the best simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line [10], a cycle [4], or a tree [3], but it was an important open problem (cf. [3]) whether it is tractable to check if for a combinatorial auction, an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in <br>polynomial time</br>, if so.",
                "Weighted Set Packing.",
                "Let us note that the hypergraph representation H I,B of a combinatorial auction I, B is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear (e.g., [17]).",
                "Formally, a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h, h ∈ h with h = h , it holds that h ∩ h = ∅.",
                "Letting w be a weighting function for H, i.e., a polynomially-time computable function from E(H) to rational numbers, the weight of a packing h is the rational number w(h) = h∈h w(h), where w({}) = 0.",
                "Then, the maximum-weighted set packing problem for H w.r.t. w, denoted by MaxWSP(H, w), is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem, given a combinatorial auction I, B , it is sufficient to define the weighting function w I,B (item(Bi)) = pay(Bi).",
                "Then, the set of the solutions for the weighted set packing problem for H I,B w.r.t. w I,B coincides with the set of the solutions for the winner determination problem on I, B .",
                "Example 2.",
                "Consider again the hypergraph H I0,B0 reported in Figure 1.(a).",
                "An example packing for H I0,B0 is h = {h1}, which intuitively corresponds to an outcome for I0, B0 , where the auctioneer accepted the bid B1.",
                "By assuming that bids B1, B2, and B3 are such that pay(B1) = pay(B2) = pay(B3), the packing h is not a solution for the problem MaxWSP(H I0,B0 , w I0,B0 ).",
                "Indeed, the packing h∗ = {h2, h3} is such that w I0,B0 (h∗ ) > w I0,B0 (h). ¡ Contributions The primary aim of this paper is to identify large tractable classes for the winner determination problem, that are, moreover polynomially recognizable.",
                "Towards this aim, we first study structured item graphs and solve the open problem in [3].",
                "The result is very bad news: It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3.",
                "More formally, letting C(ig, k) denote the class of all the hypergraphs having an item tree of treewidth bounded by k, we prove that deciding whether a hypergraph (associated with a combinatorial auction problem) belongs to C(ig, 3) is NP-complete.",
                "In the light of this result, it was crucial to assess whether there are some other kinds of structural requirement that can be checked in <br>polynomial time</br> and that can still be used to isolate tractable classes of the maximum weightedset packing problem or, equivalently, the winner determination problem.",
                "Our investigations, this time, led to very good news which are summarized below: For a hypergraph H, its dual ¯H = (V, E) is such that nodes in V are in one-to-one correspondence with hyperedges in H, and for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} is in E. We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width[7] bounded by k (short: class C(hw, k) of hypergraphs).",
                "Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph ¯H instead of the auction hypergraph H. In fact, we can show that MaxWSP remains NP-hard even when H is acyclic (i.e., when it has hypertree width 1), even when each node is contained in 3 hyperedges at most.",
                "For some relevant special classes of hypergraphs in C(hw, k), we design a higly-parallelizeable algorithm for MaxWSP.",
                "Specifically, if the weighting functions can be computed in logarithmic space and weights are polynomial (e.g., when all the hyperegdes have unitary weights and one is interested in finding the packing with the maximum number of edges), we show that MaxWSP can be solved by a LOGCFL algorithm.",
                "Recall, in fact, that LOGCFL is the class of decision problems that are logspace reducible to context free languages, and that LOGCFL ⊆ NC2 ⊆ P (see, e.g., [9]).",
                "Surprisingly, we show that nothing is lost in terms of generality when considering the hypertree decomposition of dual hypergraphs instead of the treewidth of item graphs.",
                "To the contrary, the proposed hypertree-based decomposition method is strictly more general than the method of structured item graphs.",
                "In fact, we show that strictly larger classes of instances are tractable according to our new approach than according to the structured item graphs approach.",
                "Intuitively, the NP-hardness of recognizing bounded-width structured item graphs is thus not due to its great generality, but rather to some peculiarities in its definition.",
                "The proof of the above results give us some interesting insight into the notion of structured item graph.",
                "Indeed, we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph, which we call strict hypertree decompositions.",
                "A game-characterization for the notion of strict hypertree width is also proposed, which specializes the Robber and Marshals game in [6] (proposed to characterize the hypertree width), and which makes it clear the further requirements on hypertree decompositions.",
                "The rest of the paper is organized as follows.",
                "Section 2 discusses the intractability of structured item graphs.",
                "Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width, and discusses the cases where the algorithm is also highly parallelizable.",
                "The comparison between the classes C(ig, k) and C(hw, k) is discussed in Section 4.",
                "Finally, in Section 5 we draw our conclusions by also outlining directions for further research. 2.",
                "COMPLEXITY OF STRUCTURED ITEM GRAPHS Let H be a hypergraph.",
                "A graph G = (V, E) is an item graph for H if V = N(H) and, for each h ∈ E(H), the subgraph of G induced over the nodes in h is connected.",
                "An important class of item graphs is that of structured item graphs, i.e., of those item graphs having bounded treewidth as formalized below.",
                "A tree decomposition [16] of a graph G = (V, E) is a pair T, χ , where T = (N, F) is a tree, and χ is a labelling function assigning to each vertex p ∈ N a set of vertices χ(p) ⊆ V , such that the following conditions are satisfied: (1) for each vertex b of G, there exists p ∈ N such that b ∈ χ(p); (2) for each edge {b, d} ∈ E, there exists p ∈ N such that {b, d} ⊆ χ(p); (3) for each vertex b of G, the set {p ∈ N | b ∈ χ(p)} induces a connected subtree of T. The width of T, χ is the number maxp∈N |χ(p) − 1|.",
                "The treewidth of G, denoted by tw(G), is the minimum width over all its tree decompositions.",
                "The winner determination problem can be solved in <br>polynomial time</br> on item graphs having bounded treewidth [3].",
                "Theorem 1 (cf. [3]).",
                "Assume a k-width tree decomposition T, χ of an item graph for H is given.",
                "Then, MaxWSP(H, w) can be solved in time O(|T|2 ×(|E(H)|+1)k+1 ).",
                "Many item graphs can be associated with a hypergraph.",
                "As an example, observe that the item graph in Figure 1. (c) has treewidth 1, while Figure 1. (d) reports an item graph whose treewidth is 2.",
                "Indeed, it was an open question whether for a given constant k it can be checked in <br>polynomial time</br> if an item graph of treewidth k exists, and if so, whether such an item graph can be efficiently computed.",
                "Let C(ig, k) denote the class of all the hypergraphs having an item graph G such that tw(G) ≤ k. The main result of this section is to show that the class C(ig, k) is hard to recognize.",
                "Theorem 2.",
                "Deciding whether a hypergraph H belongs to C(ig, 3) is NP-hard.",
                "The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP(s, t) of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = (N, E).",
                "To help the intuition, we report here a high-level overview of the main ingredients exploited in the proof1 .",
                "The general idea it to build a hypergraph HG such that there is an item graph G for HG with tw(G ) ≤ 3 if and only if HP(s, t) over G has a solution.",
                "First, we discuss the way HG is constructed.",
                "See Figure 2. (a) for an illustration, where the graph G consists of the nodes s, x, y, and t, and the set of its edges is {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}.",
                "From G to HG.",
                "Let G = (N, E) be a directed graph.",
                "Then, the set of the nodes in HG is such that: for each x ∈ N, N(HG) contains the nodes bsx, btx, bx, bx, bdx; for each e = (x, y) ∈ E, N(HG) contains the nodes nsx, nsx, nty, nty , nse x and nte y.",
                "No other node is in N(HG).",
                "Hyperedges in HG are of three kinds: 1) for each x ∈ N, E(HG) contains the hyperedges: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, and A3 x = {bx, bx} -notice that these hyperedges induce a clique on the nodes {bx, bx, bdx}; 1 Detailed proofs can be found in the Appendix, available at www.mat.unical.it/∼ggreco/papers/ca.pdf. 154 Figure 2: Proof of Theorem 2: (a) from G to HG - hyperedges in 1) and 2) are reported only; (b) a skeleton for a tree decomposition TD for HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, and TA3 x = {btx, bdx} -notice that these hyperedges plus A1 x, A2 x, and A3 x induce a clique on the nodes {btx, bx, bx, bdx}; 2) for each e = (x, y) ∈ E, E(HG) contains the hyperedges: • SHx = {nsx, nsx}; • THy = {nty, nty }; • SEe = {nsx, nse x} and SEe = {nsx, nse x} -notice that these two hyperedges plus SHx induce a clique on the nodes {nsx, nsx, nse x}; • TEe = {nty, nte y} and TEe = {nty , nte y} -notice that these two hyperedges plus THy induce a clique on the nodes {nty, nty , nte y}.",
                "Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes.",
                "As an example of the hyperedges of kind 1) and 2), the reader may refer to the example construction reported in Figure 2. (a), and notice, for instance, that Sx = {bsx, nse2 x , nse3 x } and that Tt = {btt, nte4 t , nte3 t }. 3) finally, we denote by DG the set containing the hyperedges in E(HG) of the third kind.",
                "In the reduction we are exploiting, DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below.",
                "Let PG be the set of the following |PG| ≤ |N| + 3 × |E| pairs: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}.",
                "Also, let I(v) denote the set {h ∈ E(H) | v ∈ h} of the hyperedges of H that are touched by v; and, for a set V ⊆ N(H), let I(V ) = v∈V I(v).",
                "Then, DG has to be a set such that: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N such that ∃β ∈ N with (α, β) ∈ PG or (β, α) ∈ PG, it holds: I(α) ∩ DG = ∅; and, (c4) ∀S ⊆ N such that |S| ≤ 3 and where ∃α, β ∈ S with (α, β) ∈ PG, it is the case that: I(S) ⊇ DG.",
                "Intuitively, the set DG is such that each of its hyperedges is touched by exactly one of the two nodes in every pair 155 of PG - cf. (c1) and (c2).",
                "Moreover, hyperedges in DG touch only vertices included in at least a pair of PG - cf. (c3); and, any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG - cf. (c4).",
                "The reader may now ask whether a set DG exists at all satisfying (c1), (c2), (c3) and (c4).",
                "In the following lemma, we positively answer this question and refer the reader to its proof for an example construction.",
                "Lemma 1.",
                "A set DG, with |DG| = 2 × |PG| + 2, satisfying conditions (c1), (c2), (c3), and (c4) can be built in time O(|PG|2 ).",
                "Key Ingredients.",
                "We are now in the position of presenting an overview of the key ingredients of the proof.",
                "Let G be an arbitrary item graph for HG, and let TD = T, χ be a 3-width tree decomposition of G (note that, because of the cliques, e.g., on the nodes {bsx, bx, bx, bdx}, any item graph for HG has treewidth 3 at least).",
                "There are three basic observations serving the purpose of proving the correctness of the reduction.",
                "Blocks of TD: First, we observe that TD must contain some special kinds of vertex.",
                "Specifically, for each node x ∈ N, TD contains a vertex bs(x) such that χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, and a vertex bt(x) such that χ(bt(x)) ⊇ {btx, bx, bx, bdx}.",
                "And, for each edge e = (x, y) ∈ E, TD contains a vertex ns(x,e) such that χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, and a vertex nt(y,e) such that χ(nt(y,e)) ⊇ {nte y, nty, nty }.",
                "Intuitively, these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1) and 2).",
                "Each of these vertices plays a specific role in the reduction.",
                "Indeed, each directed edge e = (x, y) ∈ E is encoded in TD by means of the vertices: ns(x,e), representing precisely that e starts from x; and, nt(y,e), representing precisely that e terminates into y.",
                "Also, each node x ∈ N is encoded in TD be means of the vertices: bs(x), representing the starting point of edges originating from x; and, bt(x), representing the terminating point of edges ending into x.",
                "As an example, Figure 2. (b) reports the skeleton of a tree decomposition TD.",
                "The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2. (a) - other blocks in it (of the form w(x,y)) are defined next.",
                "Connectedness between blocks, and uniqueness of the connections: The second crucial observation is that in the path connecting a vertex of the form bs(x) (resp., bt(y)) with a vertex of the form ns(x,e) (resp., nt(y,e)) there is one special vertex of the form w(x,y) such that: χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG.",
                "The arguments for the proof are as follows.",
                "First, we observe that I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} and I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}.",
                "Then, we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs(x) and ns(x,e) (resp., bt(y) and nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))).",
                "Thus, we have: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (resp., I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}).",
                "Based on this observation, and by exploiting the properties of the hyperedges in DG, it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG, and must both touch Sx (resp., Ty).",
                "When the treewidth of G is 3, we can conclude that a vertex, say w(x,y), in this path is such that χ(w(x,y)) ⊇ {nse x , nte y }, for some edge e = (x, y) ∈ E - to this end, note that nse x ∈ Sx, nte t ∈ Ty, and I(χ(w(x,y))) ⊇ DG.",
                "In particular, w(x,y) is the only kind of vertex satisfying these conditions, i.e., in the path there is no further vertex of the form w(x,z), for z = y (resp., w(z,y), for z = x).",
                "To help the intuition, we observe that having a vertex of the form w(x,y) in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path.",
                "In fact, given the uniqueness of these vertices selected for ensuring the connectivity, a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w(x,y).",
                "As an example, in Figure 2. (b), the vertices of the form w(s,x), w(x,y), and w(y,t) are in TD, and GT D shows the corresponding Hamiltonian path.",
                "Unused blocks: Finally, the third ingredient of the proof is the observation that if a vertex of the form w(x,y), for an edge e = (x, y) ∈ E is not in TD (i.e., if the edge (x, y) does not belong to the Hamiltonian path), then the corresponding block ns(x,e ) (resp., nt(y,e )) can be arbitrarily appended in the subtree rooted at the block ns(x,e) (resp., nt(y,e)), where e is the edge of the form e = (x, z) (resp., e = (z, y)) such that w(x,z) (resp., w(z,y)) is in TD.",
                "E.g., Figure 2. (a) shows w(x,t), which is not used in TD, and Figure 2. (b) shows how the blocks ns(x,e3) and nt(t,e3) can be arranged in TD for ensuring the connectedness condition. 3.",
                "TRACTABLE CASES VIA HYPERTREE DECOMPOSITIONS Since constructing structured item graphs is intractable, it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances.",
                "To this end, we focus on the notion of hypertree decomposition [7], which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains, e.g, constraint satisfaction and database query evaluation, to identify tractability islands for NP-hard problems.",
                "A hypertree for a hypergraph H is a triple T, χ, λ , where T = (N, E) is a rooted tree, and χ and λ are labelling functions which associate each vertex p ∈ N with two sets χ(p) ⊆ N(H) and λ(p) ⊆ E(H).",
                "If T = (N , E ) is a subtree of T, we define χ(T ) = v∈N χ(v).",
                "We denote the set of vertices N of T by vertices(T).",
                "Moreover, for any p ∈ N, Tp denotes the subtree of T rooted at p. Definition 1.",
                "A hypertree decomposition of a hypergraph H is a hypertree HD = T, χ, λ for H which satisfies all the following conditions: 1. for each edge h ∈ E(H), there exists p ∈ vertices(T) such that h ⊆ χ(p) (we say that p covers h); 156 Figure 3: Example MaxWSP problem: (a) Hypergraph H1; (b) Hypergraph ¯H1; (b) A 2-width hypertree decomposition of ¯H1. 2. for each node Y ∈ N(H), the set {p ∈ vertices(T) | Y ∈ χ(p)} induces a (connected) subtree of T; 3. for each p ∈ vertices(T), χ(p) ⊆ N(λ(p)); 4. for each p ∈ vertices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p).",
                "The width of a hypertree decomposition T, χ, λ is maxp∈vertices(T )|λ(p)|.",
                "The HYPERTREE width hw(H) of H is the minimum width over all its hypertree decompositions.",
                "A hypergraph H is acyclic if hw(H) = 1.",
                "P Example 3.",
                "The hypergraph H I0,B0 reported in Figure 1. (a) is an example acyclic hypergraph.",
                "Instead, both the hypergraphs H1 and ¯H1 shown in Figure 3. (a) and Figure 3. (b), respectively, are not acyclic since their hypertree width is 2.",
                "A 2-width hypertree decomposition for ¯H1 is reported in Figure 3.(c).",
                "In particular, observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H I0,B0 to model, for instance, that two new bids, B4 and B5, respectively, have been proposed to the auctioneer. ¡ In the following, rather than working on the hypergraph H associated with a MaxWSP problem, we shall deal with its dual ¯H, i.e., with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H, and where for each node x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} is in E( ¯H).",
                "As an example, the reader may want to check again the hypergraph H1 in Figure 3. (a) and notice that the hypergraph in Figure 3. (b) is in fact its dual.",
                "The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios.",
                "Theorem 3.",
                "On the class of acyclic hypergraphs, MaxWSP is (1) in P if each node occurs into two hyperedges at most; and, (2) NP-hard, even if each node is contained into three hyperedges at most. 3.1 Hypertree Decomposition on the Dual Hypergraph and Tractable Packing Problems For a fixed constant k, let C(hw, k) denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k. The maximum weighted-set packing problem can be solved in <br>polynomial time</br> on the class C(hw, k) by means of the algorithm ComputeSetPackingk, shown in Figure 4.",
                "The algorithm receives in input a hypergraph H, a weighting function w, and a k-width hypertree decomposition HD = T=(N, E), χ, λ of ¯H.",
                "For each vertex v ∈ N, let Hv be the hypergraph whose set of nodes N(Hv) ⊆ N(H) coincides with λ(v), and whose set of edges E(Hv) ⊆ E(H) coincides with χ(v).",
                "In an initialization step, the algorithm equips each vertex v with all the possible packings for Hv, which are stored in the set Hv.",
                "Note that the size of Hv is bounded by (|E(H)| + 1)k , since each node in λ(v) is either left uncovered in a packing or is covered with precisely one of the hyperedges in χ(v) ⊆ E(H).",
                "Then, ComputeSetPackingk is designed to filter these packings by retaining only those that conform with some packing for Hc, for each children c of v in T, as formalized next.",
                "Let hv and hc be two packings for Hv and Hc, respectively.",
                "We say that hv conforms with hc, denoted by hv ≈ hc if: for each h ∈ hc ∩ E(Hv), h is in hv; and, for each h ∈ (E(Hc) − hc), h is not in hv.",
                "Example 4.",
                "Consider again the hypertree decomposition of ¯H1 reported in Figure 3.(c).",
                "Then, the set of all the possible packings (which are build in the initialization step of ComputeSetPackingk), for each of its vertices, is reFigure 5: Example application of Algorithm ComputeSetPackingk. 157 Input: H, w, and a k-width hypertree decomposition HD = T =(N, E), χ, λ of ¯H; Output: A solution to MaxWSP(H, w); var Hv : set of packings for Hv, for each v ∈ N; h∗ : packing for H; v hv : rational number, for each partial packing hv for Hv; hhv,c : partial packing for Hc, for each partial packing hv for Hv, and for each (v, c) ∈ E; -------------------------------------------Procedure BottomUp; begin Done := the set of all the leaves of T ; while ∃v ∈ T such that (i) v ∈ Done, and (ii) {c | c is child of v} ⊆ Done do for each c such that (v, c) ∈ E do Hv := Hv − {hv | ∃hc ∈ Hc s.t. hv ≈ hc}; for each hv ∈ Hv do v hv := w(hv); for each c such that (v, c) ∈ E do ¯hc := arg maxhc∈Hc|hv≈ hc c hc − w(hc ∩ hv) ; hhv,c := ¯hc; (* set best packing *) v hv := v hv + c ¯hc − w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end while end; -------------------------------------------begin (* MAIN *) for each vertex v in T do Hv := {hv packing for Hv}; BottomUp; let r be the root of T ; ¯hr := arg maxhr∈Hr r hr ; h∗ := ¯hr; (* include packing *) T opDown(r, hr); return h∗ ; end.",
                "Procedure T opDown(v : vertex of N, ¯hv ∈ Hv); begin for each c ∈ N s.t. (v, c) ∈ E do ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* include packing *) T opDown(c, ¯hc); end for end; Figure 4: Algorithm ComputeSetPackingk. ported in Figure 5.(a).",
                "For instance, the root v1 is such that Hv1 = { {}, {h1}, {h3}, {h5} }.",
                "Moreover, an arrow from a packing hc to hv denotes that hv conforms with hc.",
                "For instance, the reader may check that the packing {h3} ∈ Hv1 conforms with the packing {h2, h3} ∈ Hv3 , but do not conform with {h1} ∈ Hv3 . ¡ ComputeSetPackingk builds a solution by traversing T in two phases.",
                "In the first phase, vertices of T are processed from the leaves to the root r, by means of the procedure BottomUp.",
                "For each node v being processed, the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v. After this filtering is performed, the weight hv is updated.",
                "Intuitively, v hv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in χ(Tv).",
                "Indeed, if v is a leaf, then v hv = w(hv).",
                "Otherwise, for each child c of v in T, v hv is updated with the maximum of c hc − w(hc ∩ hv) over all the packings hc that conforms with hv (resolving ties arbitrarily).",
                "The packing ¯hc for which this maximum is achieved is stored in the variable hhv,c.",
                "In the second phase, the tree T is processed starting from the root.",
                "Firstly, the packing h∗ is selected that maximizes the weight equipped with the packings in Hr.",
                "Then, procedure TopDown is used to extend h∗ to all the other partial packings for vertices of T. In particular, at each vertex v, h∗ is extended with the packing hhv,c, for each child c of v. Example 5.",
                "Assume that, in our running example, w(h1) = w(h2) = w(h3) = w(h4) = 1.",
                "Then, an execution of ComputeSetPackingk is graphically depicted in Figure 5. (b), where an arrow from a packing hc to a packing hv is used to denote that hc = hhv,c.",
                "Specifically, the choices made during the computation are such that the packing {h2, h3} is computed.",
                "In particular, during the bottom-up phase, we have that: (1) v4 is processed, and we set v4 {h2} = v4 {h4} = 1 and v4 {} = 0; (2) v3 is processed, and we set v3 {h1} = v3 {h3} = 1 and v3 {} = 0; (3) v2 is processed, and we set v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 and v3 {} = 0; (4) v1 is processed and we set v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 and v1 {} = 0.",
                "For instance, note that v1 {h5} = 2 since {h5} conforms with the packing {h4} of Hv2 such that v2 {h4} = 1.",
                "Then, at the beginning of the top-down phase, ComputeSetPackingk selects {h3} as a packing for Hv1 and propagates this choice in the tree.",
                "Equivalently, the algorithm may have chosen {h5}.",
                "As a further example, the way the solution {h1} is obtained by the algorithm when w(h1) = 5 and w(h2) = w(h3) = w(h4) = 1 is reported in Figure 5.(c).",
                "Notice that, this time, in the top-down phase, ComputeSetPackingk starts selecting {h1} as the best packing for Hv1 . ¡ Theorem 4.",
                "Let H be a hypergraph and w be a weighting function for it.",
                "Let HD = T, χ, λ be a complete k-width hypertree decomposition of ¯H.",
                "Then, ComputeSetPackingk on input H, w, and HD correctly outputs a solution for MaxWSP(H, w) in time O(|T| × (|E(H)| + 1)2k ).",
                "Proof. [Sketch] We observe that h∗ (computed by ComputeSetPackingk) is a packing for H. Indeed, consider a pair of hyperedges h1 and h2 in h∗ , and assume, for the sake of contradiction, that h1 ∩ h2 = ∅.",
                "Let v1 (resp., v2) be an arbitrary vertex of T, for which ComputeSetPackingk included h1 (resp., h2) in h∗ in the bottom-down computation.",
                "By construction, we have h1 ∈ χ(v1) and h2 ∈ χ(v2). 158 Let I be an element in h1 ∩ h2.",
                "In the dual hypergraph H, I is a hyperedge in E( ¯H) which covers both the nodes h1 and h2.",
                "Hence, by condition (1) in Definition 1, there is a vertex v ∈ vertices(T) such that {h1, h2} ⊆ χ(v).",
                "Note that, because of the connectedness condition in Definition 1, we can also assume, w.l.o.g., that v is in the path connecting v1 and v2 in T. Let hv ∈ Hv denote the element added by ComputeSetPackingk into h∗ during the bottom-down phase.",
                "Since the elements in Hv are packings for Hv, it is the case that either h1 ∈ hv or h2 ∈ hv.",
                "Assume, w.l.o.g., that h1 ∈ hv, and notice that each vertex w in T in the path connecting v to v1 is such that h1 ∈ χ(w), because of the connectedness condition.",
                "Hence, because of definition of conformance, the packing hw selected by ComputeSetPackingk to be added at vertex w in h∗ must be such that h1 ∈ hw.",
                "This holds in particular for w = v1.",
                "Contradiction with the definition of v1.",
                "Therefore, h∗ is a packing for H. It remains then to show that it has the maximum weight over all the packings for H. To this aim, we can use structural induction on T to prove that, in the bottom-up phase, the variable v hv is updated to contain the weight of the packing on the edges in χ(Tv), which contains hv and which has the maximum weight over all such packings for the edges in χ(Tv).",
                "Then, the result follows, since in the top-down phase, the packing hr giving the maximum weight over χ(Tr) = E(H) is first included in h∗ , and then extended at each node c with the packing hhv,c conformingly with hv and such that the maximum value of v hv is achieved.",
                "As for the complexity, observe that the initialization step requires the construction of the set Hv, for each vertex v, and each set has size (|E(H)| + 1)k at most.",
                "Then, the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc, for each pair (v, c) ∈ E, and updates the weight v hv .",
                "These tasks can be carried out in time O((|E(H)| + 1)2k ) and must be repeated for each edge in T, i.e., O(|T|) times.",
                "Finally, the function TopDown can be implemented in linear time in the size of T, since it just requires updating h∗ by accessing the variable hhv,c.",
                "The above result shows that if a hypertree decomposition of width k is given, the MaxWSP problem can be efficiently solved.",
                "Moreover, differently from the case of structured item graphs, it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one (if any) are problems which can be efficiently solved in <br>polynomial time</br> [7].",
                "Therefore, Theorem 4 witnesses that the class C(hw, k) actually constitutes a tractable class for the winner determination problem.",
                "As the following theorem shows, for large subclasses (that depend only on how the weight function is specified), MaxWSP(H, w) is even highly parallelizeable.",
                "Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial (and thus just require O(log n) bits for their representation).",
                "Recall that LOGCFL is a parallel complexity class contained in NC2, cf. [9].",
                "The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL.",
                "Theorem 5.",
                "Let H be a hypergraph in C(hw, k), and let w be a smooth weighting function for it.",
                "Then, MaxWSP(H, w) is in LLOGCFL . 4.",
                "HYPERTREE DECOMPOSITIONS VS STRUCTURED ITEM GRAPHS Given that the class C(hw, k) has been shown to be an island of tractability for the winner determination problem, and given that the class C(ig, k) has been shown not to be efficiently recognizable, one may be inclined to think that there are instances having unbounded hypertree width, but admitting an item graph of bounded tree width (so that the intractability of structured item graphs would lie in their generality).",
                "Surprisingly, we establish this is not the case.",
                "The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph, which we shall call strict.",
                "Then, the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions. 4.1 Strict Hypertree Decompositions Let H be a hypergraph, and let V ⊆ N(H) be a set of nodes and X, Y ∈ N(H).",
                "X is [V ]-adjacent to Y if there exists an edge h ∈ E(H) such that {X, Y } ⊆ (h − V ).",
                "A [V ]-path π from X to Y is a sequence X = X0, . . . , X = Y of variables such that: Xi is [V ]-adjacent to Xi+1, for each i ∈ [0... -1].",
                "A set W ⊆ N(H) of nodes is [V ]-connected if ∀X, Y ∈ W there is a [V ]-path from X to Y .",
                "A [V ]-component is a maximal [V ]-connected non-empty set of nodes W ⊆ (N(H) − V ).",
                "For any [V ]-component C, let E(C) = {h ∈ E(H) | h ∩ C = ∅}.",
                "Definition 2.",
                "A hypertree decomposition HD = T, χ, λ of H is strict if the following conditions hold: 1. for each pair of vertices r and s in vertices(T) such that s is a child of r, and for each [χ(r)]-component Cr s.t.",
                "Cr ∩ χ(Ts) = ∅, Cr is a [χ(r) ∩ N(λ(r) ∩ λ(s))]-component; 2. for each edge h ∈ E(H), there is a vertex p such that h ∈ λ(p) and h ⊆ χ(p) (we say p strongly covers h); 3. for each edge h ∈ E(H), the set {p ∈ vertices(T) | h ∈ λ(p)} induces a (connected) subtree of T. The strict hypertree width shw(H) of H is the minimum width over all its strict hypertree decompositions.",
                "P The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem.",
                "Theorem 6.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, a k-width tree decomposition of an item graph for H exists if and only if ¯H has a (k + 1)-width strict hypertree decomposition2 .",
                "Note that, as far as the maximum weighted-set packing problem is concerned, given a hypergraph H, we can always assume that for each node v ∈ N(H), {v} is in E(H).",
                "In fact, if this hyperedge is not in the hypergraph, then it can be added without loss of generality, by setting w({v}) = 0.",
                "Therefore, letting C(shw, k) denote the class of all the hypergraphs whose dual hypergraphs (associated with maximum 2 The term +1 only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions. 159 weighted-set packing problems) have strict hypertree width bounded by k, we have that C(shw, k + 1) = C(ig, k).",
                "By definition, strict hypertree decompositions are special hypertree decompositions.",
                "In fact, we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power.",
                "Theorem 7.",
                "C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1).",
                "A Game Theoretic View.",
                "We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game, defined by adapting the Robber and Marshals game defined in [6], which characterizes hypertree width.",
                "The game is played on a hypergraph H by a robber against k marshals which act in coordination.",
                "Marshals move on the hyperedges of H, while the robber moves on nodes of H. The robber sees where the marshals intend to move, and reacts by moving to another node which is connected with its current position and through a path in G(H) which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move-we say that these hyperedges are blocked.",
                "Note that in the basic game defined in [6], the robber is not allowed to move on vertices that are occupied by the marshals before and after their move, even if they do not belong to blocked hyperedges.",
                "Importantly, marshals are required to play monotonically, i.e., they cannot occupy an edge that was previously occupied in the game, and which is currently not.",
                "The marshals win the game if they capture the robber, by occupying an edge covering a node where the robber is.",
                "Otherwise, the robber wins.",
                "Theorem 8.",
                "Let H be a hypergraph such that for each node v ∈ N(H), {v} is in E(H).",
                "Then, ¯H has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on ¯H, no matter of the robbers moves. 5.",
                "CONCLUSIONS We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario.",
                "The result is bad news, since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph, even for treewidth 3.",
                "Motivated by this result, we investigated the use of hypertree decomposition (on the dual hypergraph associated with the scenario) and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width.",
                "For some special, yet relevant cases, a highly parallelizable algorithm is also discussed.",
                "Interestingly, it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width (hence, the reason of their intractability is not their generality).",
                "In particular, the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions (on the dual hypergraph), called query decompositions (see, e.g., [7]).",
                "In the light of this observation, we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions, which is currently missing in the literature.",
                "As a further avenue of research, it would be relevant to enhance the algorithm ComputeSetPackingk, e.g., by using specialized data structures, in order to avoid the quadratic dependency from (|E(H)| + 1)k .",
                "Finally, an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem.",
                "For instance, it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling, and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold.",
                "Acknowledgement G. Gottlobs work was supported by the EC3 - E-Commerce Competence Center (Vienna) and by a Royal Society Wolfson Research Merit Award.",
                "In particular, this Award allowed Gottlob to invite G. Greco for a research visit to Oxford.",
                "In addition, G. Greco is supported by ICAR-CNR, and by M.I.U.R. under project TOCAI.IT. 6.",
                "REFERENCES [1] I. Adler, G. Gottlob, and M. Grohe.",
                "Hypertree-Width and Related Hypergraph Invariants.",
                "In Proc. of EUROCOMB05, pages 5-10, 2005. [2] C. Boutilier.",
                "Solving Concisely Expressed Combinatorial Auction Problems.",
                "In Proc. of AAAI02, pages 359-366, 2002. [3] V. Conitzer, J. Derryberry, and T. Sandholm.",
                "Combinatorial auctions with structured item graphs.",
                "In Proc. of AAAI04, pages 212-218, 2004. [4] E. M. Eschen and J. P. Sinrad.",
                "An o(n2 ) algorithm for circular-arc graph recognition.",
                "In Proc. of SODA93, pages 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown, and Y. Shoham.",
                "Taming the computational complexity of combinatorial auctions: Optimal and approximate.",
                "In Proc. of IJCAI99, pages 548-553, 1999. [6] G. Gottlob, N. Leone, and F. Scarcello.",
                "Robbers, marshals, and guards: game theoretic and logical characterizations of hypertree width.",
                "Journal of Computer and System Sciences, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone, and S. Scarcello.",
                "Hypertree decompositions and tractable queries.",
                "Journal of Computer and System Sciences, 63(3):579-627, 2002. [8] H. H. Hoos and C. Boutilier.",
                "Solving combinatorial auctions using stochastic local search.",
                "In Proc. of AAAI00, pages 22-29, 2000. [9] D. Johnson.",
                "A Catalog of Complexity Classes.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, pages 67-161. 1990. [10] N. Korte and R. H. Mohring.",
                "An incremental linear-time algorithm for recognizing interval graphs.",
                "SIAM Journal on Computing, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller, and T. Sandholm.",
                "The Winner Determination Problem.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, and Y. Shoham.",
                "Truth revelation in approximately efficient 160 combinatorial auctions.",
                "J. ACM, 49(5):577-602, 2002. [13] R. McAfee and J. McMillan.",
                "Analyzing the airwaves auction.",
                "Journal of Economic Perspectives, 10(1):159175, 1996. [14] J. McMillan.",
                "Selling spectrum rights.",
                "Journal of Economic Perspectives, 8(3):145-62, 1994. [15] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proc. of EC00, pages 1-12, 2000. [16] N. Robertson and P. Seymour.",
                "Graph minors ii. algorithmic aspects of tree width.",
                "Journal of Algorithms, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec, and R. M. Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44:1131-1147, 1998. [18] T. Sandholm.",
                "An implementation of the contract net protocol based on marginal cost calculations.",
                "In Proc. of AAAI93, pages 256-262, 1993. [19] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135(1-2):1-54, 2002. [20] T. Sandholm.",
                "Winner determination algorithms.",
                "In P. Cramton, Y. Shoham, and R. Steinberg, editors, Combinatorial Auctions.",
                "MIT Press, 2006. [21] T. Sandholm and S. Suri.",
                "Bob: Improved winner determination in combinatorial auctions and generalizations.",
                "Artificial Intelligence, 7:33-58, 2003. [22] M. Tennenholtz.",
                "Some tractable combinatorial auctions.",
                "In Proc. of AAAI00, pages 98-103, 2000. [23] E. Zurel and N. Nisan.",
                "An efficient approximate allocation algorithm for combinatorial auctions.",
                "In Proc. of EC01, pages 125-136, 2001. 161"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Si bien este problema es en general Nphard, se sabe que es factible en \"tiempo polinómico\" en aquellos casos cuyos gráficos de elementos asociados han limitado el ancho de árboles (llamado gráficos de elementos estructurados).",
                "De hecho, mostramos que el problema de determinación del ganador se puede resolver en el \"tiempo polinomial\" en las instancias cuyas interacciones del postor pueden representarse con hipergrafos (duales) que han limitado el ancho de la hipertree.",
                "Se sabe que este problema, llamado problema de determinación del ganador (por ejemplo, [11]) es intratable, en realidad np-hard [17], e incluso no es aproximado en el \"tiempo polinomial\" a menos que np = zpp [19].",
                "Por lo tanto, no sorprende que se hayan gastado varios esfuerzos para diseñar algoritmos prácticamente eficientes para subastas generales (por ejemplo, [20, 5, 2, 8, 23]) e identificar clases de instancias en las que resolver el problema de determinación de ganadores es factibleen \"tiempo polinomial\" (por ejemplo, [15, 22, 12, 21]).",
                "De hecho, se demostró que el problema de determinación del ganador estaba solucionable en el \"tiempo polinómico\" si las interacciones entre los postores pueden representarse mediante un gráfico de elementos estructurados, es decir, un árbol o, en general, un gráfico que tiene una estructura similar a un árbol [3]-Width de árbol delimitado formalmente [16].",
                "Los algoritmos de \"tiempo polinómico\" para encontrar la mejor simplificación del gráfico primario hasta ahora solo se conocen solo por los casos en que el gráfico del elemento a construir es una línea [10], un ciclo [4] o un árbol [3], peroEra un problema abierto importante (cf. [3]) si es manejable verificar si para una subasta combinatoria, un gráfico de elementos de ancho de árboles limitado por un número natural fijo K existe y puede construirse en \"tiempo polinomial\", si es así.",
                "A la luz de este resultado, fue crucial evaluar si existen otros tipos de requisitos estructurales que se pueden verificar en \"tiempo polinómico\" y que aún se pueden usar para aislar clases manejables del problema máximo de empaquetado de obras de peso o, de manera equivalente,El problema de determinación del ganador.",
                "El problema de determinación del ganador se puede resolver en \"tiempo polinomial\" en los gráficos de elementos que tienen ancho de árbol delimitado [3].",
                "De hecho, era una pregunta abierta si para una constante K dada se puede verificar en \"tiempo polinómico\" si existe un gráfico de elementos de ancho de árbol K, y de ser así, si dicho gráfico de elementos se puede calcular de manera eficiente.",
                "En la clase de hipergrafos acíclicos, MaxWSP es (1) en P si cada nodo ocurre en dos hipedges como máximo;y, (2) NP-Hard, incluso si cada nodo está contenido en tres hiperedges como máximo.3.1 La descomposición de hipertree en los problemas de empaque de doble hipergrafo y manejo de una constante fija K, Sea C (HW, K) denota la clase de todos los hipergrafos cuyos hipergrafos duales tienen un ancho de hipertree limitado por K.El problema de empaque de set ponderado máximo se puede resolver en \"tiempo polinomial\" en la Clase C (HW, K) por medio del algoritmo ComputesetPackingk, que se muestra en la Figura 4.",
                "Además, de manera diferente al caso de los gráficos de elementos estructurados, es bien sabido que decidir la existencia de una descomposición de hipertree con unidas a K y calculadora de uno (si los hay) son problemas que pueden resolverse eficientemente en \"tiempo polinomial\" [7]."
            ],
            "translated_text": "",
            "candidates": [
                "tiempo polinomial",
                "tiempo polinómico",
                "tiempo polinomial",
                "tiempo polinomial",
                "tiempo polinomial",
                "tiempo polinomial",
                "tiempo polinomial",
                "tiempo polinomial",
                "tiempo polinomial",
                "tiempo polinómico",
                "tiempo polinomial",
                "tiempo polinómico",
                "tiempo polinomial",
                "tiempo polinomial",
                "tiempo polinómico",
                "tiempo polinomial",
                "tiempo polinomial",
                "tiempo polinomial",
                "tiempo polinómico",
                "Tiempo polinómico",
                "tiempo polinomial",
                "tiempo polinomial",
                "tiempo polinomial"
            ],
            "error": []
        }
    }
}