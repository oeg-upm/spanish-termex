{
    "id": "J-28",
    "original_text": "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem. The bidding language in our auctions allows marginal-decreasing piecewise constant curves. First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces. Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n). The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome. Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics. General Terms Algorithms, Economics. 1. INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good multi-unit auction problem. Our scheme is both approximately efficient and approximately strategyproof. The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing. We consider both a reverse auction variation and a forward auction variation, and propose a compact and expressive bidding language that allows marginal-decreasing piecewise constant curves. In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function. In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply. The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots. In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function. A buyer can also express a lower bound, or minimum lot size, on the number of units she demands. The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots. We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem. The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system. However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer. Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate. This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17]. The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable. For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces. Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT). We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption. Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i. Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i. This upper-bound tends to 1 as the number of sellers increases. The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation. This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation. As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation. Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms. We also prove our claims about ε-strategyproofness. Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme. Section 4 defines the approximation scheme for the payments in the VCG mechanism. Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items. The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]). Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases. We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve. The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention. For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem. Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies. Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome. VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design. Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges. Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model. This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data. Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good. The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design. Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2. APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions. Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes. We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language. This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities. See Figure 1 for an example. In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount. Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids. In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25]. Her valuation is zero for quantities outside the range [10, 25]. In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25]. In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity. The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit. Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i . This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞). We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1. In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i . A sellers bid is similarly defined in the reverse auction. The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit. Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i . Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity. We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism. We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13]. We will use the term payoff interchangeably for utility. In the forward auction, there is a seller with M units to sell. We assume that this seller has no intrinsic value for the items. Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold. Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i. Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i. The VCG mechanism is defined as follows: 1. Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2. Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3. Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller. In this forward auction, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers. In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system. In the reverse auction, there is a buyer with M units to buy, and n suppliers. We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise. To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V . Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i. We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I). Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments. The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller. The total payment is collected from the buyer. Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I). Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value. Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers. This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed. This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them. This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers. Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V . In words, there would be no efficient trade without the seller. Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller. Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i. In other words, there must be no pivotal sellers. Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units. The payments to the sellers would never exceed the buyers value in this case. Conversely, to make the forward auction symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost. The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50. Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100. In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20). In the second case, the payoffs are π = (−10, 30, 50, 30). One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem. We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy. We describe the result for the forward auction direction, but it is quite a general observation. As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i. Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0. We provide such an approximation scheme for our setting later in the paper. Let ˆx denote the allocation implemented by the approximation scheme. The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis. However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism. In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj). If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest. However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium. Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]). We can now analyze the best possible gain from manipulation to an agent in our setting. We first assume that the other agents are truthful, and then relax this. In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case. With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε). Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I). Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution. The analysis is very similar when the other agents are not truthful. In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents. Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1. A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy. Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term. However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3. THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions. We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction. In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution. We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack. In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS). One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions. We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings. The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces. The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers. The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers. Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized. This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack. In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent. Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected. Choosing interval [uj i , uj+1 i ) has cost pj i per unit. The goal is to procure at least M units of the good at minimum possible cost. The problem has some flavor of the continuous knapsack problem. However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition. Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor. Recall that these tuples represent the breakpoints in the piecewise constant curve bids. We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset. PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset). However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i . The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i . In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i . Otherwise, we say that xi is midrange. We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange. If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor. See Figure 2 for an example. LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element. All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored. We use the anchor property to first obtain a polynomial-time 2-approximation scheme. We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval. Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero. This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost. Element x is assumed to have already contributed uj units. The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units. We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack. The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj . This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed. In any other group, we can choose at most one anchor. The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem. U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ). R is the number of units that remain to be acquired. S is the set of tuples accepted in the current tentative 170 solution. Best is the best solution found so far. Variable Skip is only used in the proof of correctness. Algorithm Greedy( , j) 1. Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2. Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3. Scan the tuples in U in the sorted order. Suppose the next tuple is tk i , i.e. the kth anchor from agent i. If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack. Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost. If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i . If size(tk i ) is greater than R, then S along with tk i forms a feasible solution. However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best. One exception to this rule is the tuple t . Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement. The algorithm terminates in either of the first two cases, or when all tuples are scanned. In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution. LEMMA 2. Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution. Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF. Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j). Consider the set Skip at the termination of Greedy( , j). There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j). In the first case, let St be the tentative solution S at the time t was added to Skip. Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t). Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t). On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t). These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j). In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip. Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original. Suppose our approximation algorithm returns the value V ( , j) for this modified instance. Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step. Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ). We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions. Therefore, dropping the tuples in the set Skip can only make the solution worse. The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j). We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem. Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange. Let x− to be set of the remaining elements, either zero or anchors, in this solution. Furthermore, define x = xj − uj . Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j). Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2. It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time. We have our first polynomial approximation algorithm. THEOREM 2. A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length). PROOF. We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange. There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ). By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed. The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem. The high level idea is fairly standard, but the details require technical care. We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table. Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ). In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack. Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack. Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i. As convention, agent i will index the row, and cost r will index the column. This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost. However, we can convert it into a FPTAS by scaling the cost dimension. Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A). Let ε denote the desired approximation factor. We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost. However, the computed solution might not be an optimal solution for the original problem. We show that the error introduced is within a factor of ε of the optimal solution. As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A). LEMMA 3. Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements. If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A). PROOF. Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0. Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples. Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r]. These entries correspond to optimal solutions with all agents except l, for different levels of cost. In particular, we consider the entries that provide at least M − uj+1 units. Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r]. It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation. LEMMA 4. Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution. Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF. Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj . Let r = scost(x− ) be the scaled cost associated with the vector x− . Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r]. Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm. Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists. Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A). Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution. Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units. Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj . Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ). Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions. For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list. Thus, we have the following result. THEOREM 3. We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε). The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4. COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents. A naive approach requires solving the allocation problem n times, removing each agent in turn. In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once. This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction. Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i. Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once. The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order. The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents. As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table. Similarly, (n− i)th row of the backward table will contain an approximation for the second part. We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm. Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently. In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed. This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i. We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1. We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl. The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme. In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε. Therefore, the cost dimension of our dynamic programs table will be nα/ε. FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j). Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors. These first i agents are a different subset of agents in the forward and the backward tables. By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j). We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries. To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations. Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry. We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5. Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution. Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i . PROOF. From earlier, we define cost(A−i ) = C(I \\ i). We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i). We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i). Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively. From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation. Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units. Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x. Now, define yj l = max(uj l , M −size(yi)−size(y−i)). From the preceding inequalities, we have yj l ≤ xj l . Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof. A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i. In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right. As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively. To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets. For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l . Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively. We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left. Let (g, h) be the current pair. If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer. The feasible pairs found during the walk are used to compute Eq. 6. The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost. However, the elements are still sorted in quantity and we use this property to compute Eq. 7. Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l . Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60. Begin and End represent the start and end pointers to the feasible set. Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively. We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set. We maintain the feasible set as a min heap, where the key is modified cost. To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements. For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap. So, the main complexity of the computation lies in heap updates. Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows. First, using the 2 approximation algorithm, we compute an upper bound on C(I). We use this bound to scale down the tuple costs. Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j). The forward tables are used to compute C(I). To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme. Among all the locally optimal solutions we choose one with the minimum total cost. The most expensive step in the algorithm is computation of C(I \\ i). The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5. In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ). THEOREM 4. We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ). It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents. Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant. Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem. The speed up comes from the way we solve iKnapsack−i ( , j). Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ). We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently. Currently, the algorithm uses heap, which has logarithmic update time. In worst case, we can have two heap update operations for each element, which makes the time complexity super linear. If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5. CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good multi-unit auction problem, using marginal decreasing piecewise constant bidding language. Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0. As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem. It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6. REFERENCES [1] L M Ausubel and P R Milgrom. Ascending auctions with package bidding. Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra. Linear programming and Vickrey auctions. Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy. The package assignment model. Journal of Economic Theory, 2002. Forthcoming. [4] K Chatterjee and W Samuelson. Bargaining under incomplete information. Operations Research, 31:835-851, 1983. [5] E H Clarke. Multipart pricing of public goods. Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra. Combinatorial auctions: A survey. Informs Journal on Computing, 2002. Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi. Bid evaluation in procurement auctions with piece-wise linear supply curves. Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker. Distributed Algorithmic Mechanism Design: Recent Results and Future Directions. In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson. Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner. Computational complexity of approximation algorithms for combinatorial problems. In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves. Incentives in teams. Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee. Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand. Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna. Auction Theory. Academic Press, 2002. [14] V Krishna and M Perry. Efficient mechanism design. Technical report, Pennsylvania State University, 1998. Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham. Truth revelation in approximately efficient combinatorial auctions. JACM, 49(5):577-602, September 2002. [16] R B Myerson. Optimal auction design. Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite. Efficient mechanisms for bilateral trading. Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen. Computationally feasible VCG mechanisms. In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso. Achieving budget-balance with Vickrey-based payment schemes in exchanges. In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad. Computationally manageable combinatorial auctions. Management Science, 44(8):1131-1147, 1998. [21] J Schummer. Almost dominant strategy implementation. Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey. Counterspeculation, auctions, and competitive sealed tenders. Journal of Finance, 16:8-37, 1961. 175",
    "original_translation": "Subastas de unidades múltiples a prueba de estrategia y manejo de estrategias Anshul Kothari ∗ David C. Parkes † Subhash Suri ∗ Abstract presentamos un mecanismo de subasta de aproximadamente eficiente y aproximadamente estreno para un problema de asignación múltiple de unidades múltiples. El lenguaje de licitación en nuestras subastas permite que las curvas constantes por partes de la toma de ley marginal. Primero, desarrollamos un esquema de aproximación en tiempo polinómico para el problema de asignación de unidades múltiples, que calcula una aproximación (1 +) en el peor tiempo de casos t = o (n3 /), dada n ofertas cada una con un número constante de piezas. En segundo lugar, incrusimos este esquema de aproximación dentro de un mecanismo de Vickrey-Clarke-Groves (VCG) y calculamos los pagos a los agentes de N para un costo asintótico de O (T log n). La ganancia máxima posible de la manipulación a un postor en el esquema combinado está limitado por /(1+) V, donde V es el excedente total en el resultado eficiente. Categorías y descriptores de sujetos F.2 [Teoría de la computación]: Análisis de algoritmos y complejidad del problema;J.4 [Aplicaciones informáticas]: ciencias sociales y conductuales-economía. Algoritmos de Términos Generales, Economía.1. Introducción En este documento presentamos un esquema de aproximación en tiempo polinómico para el problema de subasta de unidades múltiples para una sola buena. Nuestro esquema es aproximadamente eficiente y aproximadamente a prueba de estrategias. La configuración de subasta considerada en nuestro artículo está motivada por tendencias recientes en el comercio electrónico;Por ejemplo, las corporaciones están utilizando cada vez más subastas para su abastecimiento estratégico. Consideramos tanto una variación de subasta inversa como una variación de subasta directa, y proponemos un lenguaje de licitación compacto y expresivo que permita curvas constantes por partes de recurso marginal. En la subasta inversa, consideramos un solo comprador con una demanda de unidades M de un bien y a los proveedores de N, cada uno con una función de costo por partes por partes de la toma de partes marginal. Además, cada proveedor también puede expresar un límite superior o una restricción de capacidad en la cantidad de unidades que puede suministrar. Los modelos de variación inversa, por ejemplo, una subasta de adquisiciones para obtener materias primas u otros servicios (por ejemplo, placas de circuito, proveedores de alimentación, cartuchos de tóner), con lotes de tamaño flexible. En la subasta hacia adelante, consideramos un solo vendedor con unidades M de un bien y compradores N, cada uno con una función de valoración de pie-dependiente de las partes marginales. Un comprador también puede expresar un tamaño de lote límite o mínimo, en la cantidad de unidades que exige. Los modelos de variación hacia adelante, por ejemplo, una subasta para vender un exceso de inventario en lotes de tamaño flexible. Consideramos la complejidad computacional de implementar el mecanismo de Vickrey-Clarke-Groves [22, 5, 11] para el problema de la subasta múltiple. El mecanismo Vickrey-Clarke-Groves (VCG) tiene una serie de propiedades económicas interesantes en este entorno, incluida la a prueba de estrategias, de modo que la oferta veraz es una estrategia dominante para los compradores en la subasta a plazo y los vendedores en la subasta inversa y la eficiencia de asignación, talque el resultado maximiza el excedente total en el sistema. Sin embargo, como discutimos en la Sección 2, la aplicación del enfoque basado en VCG es limitada en la dirección inversa a los casos en que los pagos totales a los vendedores son menores que el valor del resultado para el comprador. De lo contrario, la subasta debe funcionar con una pérdida en estos casos, o no se puede esperar que el comprador elija voluntariamente participar. Este es un ejemplo del problema de déficit presupuestario que a menudo ocurre en un diseño de mecanismo eficiente [17]. El problema computacional es interesante, porque incluso con las curvas de oferta marginales, el problema de asignación subyacente resulta intratable (débilmente). Por ejemplo, la mochila clásica 0/1 es un caso especial de este problema.1 Modelamos el 1 Sin embargo, el problema puede resolverse fácilmente mediante un esquema codicioso si eliminamos todas las limitaciones de capacidad del vendedor y todos los 166 problemas de asignación como unGeneralización novedosa e interesante del problema clásico de la mochila, y desarrolle un esquema de aproximación totalmente polinómico, calculando una (1 +)-abroximación en el peor de los casos T = O (N3 /ε), donde cada oferta tiene un número fijo de constante por partes constantepiezas. Dado este esquema, un cálculo directo de los pagos de VCG a todos los agentes N requiere tiempo O (NT). Calculamos los pagos de VCG aproximados en el peor de los casos O (αT log (αN/ε)), donde α es una constante que cuantifica una suposición razonable de no monopolio. Específicamente, en la subasta inversa, suponga que C (i) es el costo mínimo para adquirir unidades M con todos los vendedores I, y C (i \\ i) es el costo mínimo sin el vendedor i. Luego, la constante α se define como un límite superior para la relación c (i \\ i)/c (i), sobre todos los vendedores i. Este límite superior tiende a 1 a medida que aumenta el número de vendedores. El mecanismo de VCG aproximado es (ε 1 + ε) -Strategy-Probar para una aproximación dentro (1 +) de la asignación óptima. Esto significa que un postor puede ganar como máximo (ε 1+ε) V de una oferta no triphal, donde V es el excedente total de la asignación eficiente. Como tal, este es un ejemplo de un resultado de dominancia ε computacionalmente tractable.2 En la práctica, podemos tener buena confianza en que los postores sin buena información sobre las estrategias de licitación de otros participantes tendrán poco que ganar de los intentos de manipulación. La Sección 2 define formalmente las subastas hacia adelante e inversa, y define los mecanismos de VCG. También probamos nuestras afirmaciones sobre la prueba de estrategia ε. La Sección 3 proporciona la formulación de mochila generalizada para los problemas de asignación de unidades múltiples e introduce el esquema de aproximación de tiempo totalmente polinómico. La Sección 4 define el esquema de aproximación para los pagos en el mecanismo VCG. La Sección 5 concluye.1.1 Trabajo relacionado Ha habido un interés considerable en los últimos años en la caracterización de casos especiales de tiempo polinomial o aproximada del problema de asignación combinatoria general, en los que hay múltiples elementos diferentes. El problema de asignación combinatoria (CAP) es compatible con NP e inapropiado (por ejemplo, [6]). Aunque se han identificado algunos casos de tiempo polinómico para el CAP [6, 20], la introducción de un lenguaje expresivo exclusivo de o licitación rompe rápidamente estos casos especiales. Identificamos un problema de asignación no trivial pero aproximado con un lenguaje de licitación de exclusivo expresivo: el tomador de ofertas en nuestro entorno puede aceptar como máximo un momento en la curva de oferta. La idea de usar aproximaciones dentro de los mecanismos, al tiempo que conserva la resistencia a la estrategia completa o la dominancia ε ha recibido alguna atención previa. Por ejemplo, Lehmann et al.[15] propone una aproximación codiciosa y a prueba de estrategias a un problema de subasta combinatorial resuelta. Nisan y Ronen [18] discutieron los mecanismos aproximados basados en VCG, pero apelaron a aproximaciones particulares de máximo en rango para retener la prueba completa de la estrategia, o a agentes limitados por recursos con información o limitaciones computacionales sobre la capacidad de calcular estrategias. Feigenminimum-lot restricciones de tamaño de los compradores.2 Sin embargo, este puede no ser un ejemplo de lo que Feigenbaum y Shenker se refieren como un mecanismo tolerablemente manipulable [8] porque no hemos tratado de vincular el efecto de tal manipulación en la eficiencia del resultado. Sin embargo, el mecanismo de VCG tiene una propiedad de autocorrección natural, porque una manipulación útil para un agente es un valor reportado que mejora el valor total de la asignación en función de los informes de otros agentes y el valor de los agentes.Baum y Shenker [8] han definido el concepto de aproximaciones estratégicamente fieles y han propuesto el estudio de aproximaciones como una dirección importante para el diseño del mecanismo algorítmico. Schummer [21] y Parkes et al [19] han considerado previamente la dominancia ε, en el contexto de los resultados de imposibilidad económica, por ejemplo, en los intercambios combinatorios. Eso et al.[7] han estudiado un problema de adquisición similar, pero para un modelo de descuento de volumen diferente. Este trabajo anterior formula el problema como un programa lineal entero mixto general y ofrece algunos resultados empíricos sobre los datos simulados. Kalagnanam et al.[12] abordan subastas dobles, donde múltiples compradores y vendedores intercambian un bien divisible. El enfoque de este documento también es diferente: investiga los precios de equilibrio utilizando las curvas de demanda y oferta, mientras que nuestro enfoque está en el diseño eficiente del mecanismo. Ausubel [1] ha propuesto una subasta de unidades múltiples de precio ascendente para compradores con valores de decreciente marginal [1], con una interpretación como un algoritmo primal-dual [2].2. Aproximadamente las subastas de VCG a prueba de estrategias En esta sección, primero describimos el lenguaje de licitación por partes de la toma marginal que se usa en nuestras subastas hacia adelante e inversa. Continuando, presentamos el mecanismo VCG para el problema y los resultados de dominancia ε para aproximaciones a los resultados de VCG. También discutimos las propiedades económicas de los mecanismos de VCG en estos entornos de unidades múltiples de subasta hacia adelante e inversa.2.1 Ofertas por partes de decisión marginal Proporcionamos un lenguaje de licitación por partes constantes y marginales. Este lenguaje de licitación es expresivo para una clase natural de valoración y funciones de costos: precios unitarios fijos durante intervalos de cantidades. Ver Figura 1 para un ejemplo. Además, relajamos ligeramente el requisito de decisión marginal para permitir: un postor en la subasta directa para establecer una cantidad mínima de compra, de modo que tiene un valor cero para cantidades menores que esa cantidad;Un vendedor en la subasta inversa para establecer una restricción de capacidad, de modo que tiene un costo efectivamente infinito para suministrar cantidades superiores a una cantidad particular. Oferta de subasta inversa 7 5 10 20 25 10 8 Precio de la cantidad 7 5 10 20 25 10 8 PRECIO DE CANTIDAD SUBASTA ATTRANJA BID Figura 1: Ofertas constantes de decisión marginal, por partes. En la oferta de subasta hacia adelante, el postor ofrece $ 10 por unidad por cantidad en el rango [5, 10), $ 8 por unidad en el rango [10, 20) y $ 7 en el rango [20, 25]. Su valoración es cero para cantidades fuera del rango [10, 25]. En la oferta de subasta inversa, el costo del vendedor es ∞ fuera del rango [10, 25]. En detalle, en una subasta directa, una oferta del comprador puedo ser escrita como una lista de tuplas (de rango de cantidad, precio de unidades), ((U1 I, P1 I), (U2 I, P2 I), .. .. ..., (umi - 1 i, pmi - 1 i)), con un umi i umi i superior en la cantidad. La interpretación es que la valoración de los licitantes en el rango de cantidad 167 (semi-abre) [UJ I, UJ+1 I) es PJ I para cada unidad. Además, se supone que la valoración es 0 para cantidades inferiores a U1 I, así como para cantidades más que um i. Esto se implementa agregando dos tuplas de oferta ficticia, con cero precios en el rango [0, U1 I) y (Umi I, ∞). Interpretamos la lista de ofertas como definir una función de precio, pbid, i (q) = qpj i, si uj i ≤ q <uj+1 i, donde j = 1, 2 ,..., mi −1. Para resolver la condición de límite, suponemos que el precio de oferta para la cantidad límite superior umi i es pbid, i (umi i) = umi i pmi - 1 i. Una oferta de vendedores se define de manera similar en la subasta inversa. La interpretación es que los postores cuestan en el rango de cantidad (semi-abierta) [UJ I, UJ+1 I) es PJ I para cada unidad. Además, se supone que el costo es ∞ para cantidades inferiores a U1 I, así como para cantidades más que um i. De manera equivalente, los precios unitarios en los rangos [0, u1 i) y (um i, ∞) son infinitos. Interpretamos la lista de ofertas como definir una función de precio, Pask, I (Q) = Qpj I, si UJ I ≤ Q <UJ+1 i.2.2 Subastas de unidades múltiples basadas en VCG Construimos las subastas múltiples manejables y aproximadamente estrategias en torno a un mecanismo VCG. Suponemos que todos los agentes tienen funciones cuasilíneas de utilidad;es decir, ui (q, p) = vi (q) - p, para un comprador i con valoración vi (q) para unidades Q al precio p, y ui (q, p) = p - ci (q) para unVendedor I con Costo CI (Q) al precio p.Esta es una suposición estándar en la literatura de subastas, equivalente a asumir agentes neutrales por riesgo [13]. Usaremos el término recompensa indistintamente para la utilidad. En la subasta hacia adelante, hay un vendedor con unidades M para vender. Suponemos que este vendedor no tiene valor intrínseco para los artículos. Dado un conjunto de ofertas de los agentes I, vaya V (i) denotar los ingresos máximos al vendedor, dado que, como máximo, se puede seleccionar un punto de la curva de ofertas de cada agente y no se pueden vender más de las unidades M del artículo. Sea x ∗ = (x ∗ 1, ..., x ∗ n) denota la solución a este problema de determinación de ganador, donde x ∗ i es el número de unidades vendidas al agente i. Del mismo modo, deje que V (i \\ i) denote los ingresos máximos al vendedor sin ofertas del agente i. El mecanismo VCG se define de la siguiente manera: 1. Reciba curvas de oferta y limitaciones de capacidad de todos los compradores.2. Implemente el resultado x ∗ que resuelva el problema de determinación del ganador con todos los compradores.3. Recolecte el pago pvcg, i = pbid, i (x ∗ i) - [v (i) - v (i \\ i)] de cada comprador y pase los pagos al vendedor. En esta subasta hacia adelante, el mecanismo VCG es a prueba de estrategias para los compradores, lo que significa que la licitación veraz es una estrategia dominante, es decir, la utilidad maximizando las ofertas de otros compradores. Además, el mecanismo VCG es asignalmente eficiente, y los pagos de cada comprador siempre son positivos.3 Además, cada comprador paga menos de su valor y recibe el pago V (i) −v (i \\ i) en equilibrio;Este es precisamente el valor marginal que el comprador I contribuye a la eficiencia económica del sistema. En la subasta inversa, hay un comprador con unidades M para comprar, y N proveedores. Suponemos que el Comprador tiene valor V> 0 para comprar todas las unidades M, pero de lo contrario el valor cero. Para simplificar el problema de diseño del mecanismo, suponemos que el comprador anunciará con sinceramente este valor al mecanismo.4 El ganador3 De hecho, el mecanismo de VCG maximiza el pago esperado al vendedor en todos los mecanismos eficientes, incluso permitiendo implementaciones bayesianas [14 14]4 Sin esta suposición, el resultado de imposibilidad de Myerson-Satterthwaite [17] ya implicaría que no deberíamos esperar un mecanismo comercial eficiente en este entorno.El problema de determinación en la subasta inversa es determinar la asignación, x ∗, que minimiza el costo para el comprador o pierde el comercio si el costo mínimo es mayor que el valor, v. Deje que C (i) denote el costo mínimo dado las ofertas de todos los vendedores, y Ca (i \\ i) denote el costo mínimo sin ofertas del vendedor i. Podemos suponer, sin pérdida de generalidad, que hay un comercio eficiente y v ≥ c (i). De lo contrario, entonces el resultado eficiente no es comercio, y el resultado del mecanismo VCG no es comercio ni pagos. El mecanismo VCG implementa el resultado x ∗ que minimiza el costo según las ofertas de todos los vendedores, y luego proporciona pagos de PVCG, i = Pask, I (x ∗ i)+[v −c (i) −max (0, V −C(I \\ i))] a cada vendedor. El pago total se recauda del comprador. Una vez más, en equilibrio cada pago de los vendedores es exactamente el valor marginal que el vendedor contribuye a la eficiencia económica del sistema;En el caso simple de que v ≥ c (i \\ i) para todos los vendedores I, esto es precisamente c (i \\ i) - c (i). Aunque el mecanismo VCG sigue siendo a prueba de estrategias para los vendedores en la dirección inversa, su aplicabilidad se limita a los casos en los que los pagos totales a los vendedores son menores que el valor de los compradores. De lo contrario, habrá casos en los que el comprador no elegirá participar voluntariamente en el mecanismo, en función de su propio valor y sus creencias sobre los costos de los vendedores. Esto lleva a una pérdida de eficiencia cuando el comprador elige no participar, porque se pierden operaciones eficientes. Este problema con el tamaño de los pagos no ocurre en subastas inversas simples de un solo elemento, o incluso en subastas inversas de múltiples unidades con un comprador que tiene una valuación marginal constante para cada artículo adicional que adquiere.5 intuitivamente, elEl problema ocurre en la configuración inversa de unidades múltiples porque el comprador exige un número fijo de artículos y tiene un valor cero sin ellos. Esto lleva a la posibilidad de que el comercio sea dependiendo de la presencia de vendedores fundamentales particulares. Defina un vendedor I como fundamental, si c (i) ≤ v pero c (i \\ i)> v. En palabras, no habría comercio eficiente sin el vendedor. Cada vez que hay un vendedor fundamental, los pagos de VCG a ese vendedor le permiten extraer todo el excedente, y los pagos son demasiado grandes para mantener el valor de los compradores a menos que este sea el único vendedor ganador. Concretamente, tenemos este problema de participación en la subasta inversa cuando la recompensa total a los vendedores, en equilibrio, excede el pago total de la asignación eficiente: V - C (i) ≥ I [V - C (I) - Máx (0, V - c (i \\ i))] Como se indicó anteriormente, primero nota que requerimos v> c (i \\ i) para todos los vendedores i. En otras palabras, no debe haber vendedores fundamentales. Dado esto, es necesario y suficiente que: v - c (i) ≥ I (c (i \\ i) - c (i)) (1) 5 Para hacer que la subasta inversa simétrica con la dirección hacia adelante, necesitaríamosUn comprador con un valor marginal constante para comprar las primeras unidades M y un valor cero para unidades adicionales. Los pagos a los vendedores nunca excederían el valor de los compradores en este caso. Por el contrario, para hacer que la subasta de avance sea simétrica con la subasta inversa, necesitaríamos un vendedor con un costo marginal constante (y alto) para vender cualquier cosa menos que las primeras unidades M, y luego un costo marginal bajo (o cero). Los pagos totales recibidos por el vendedor pueden ser menores que el costo de los vendedores por el resultado en este caso.168 En palabras, el excedente de la asignación eficiente debe ser mayor que el total marginal de marginal proporcionado por cada vendedor.6 Considere un ejemplo con 3 agentes {1, 2, 3} y V = 150 y C (123) = 50. La condición (1) se mantiene cuando C (12) = C (23) = 70 y C (13) = 100, pero no cuando C (12) = C (23) = 80 y C (13) = 100. En el primer caso, los pagos del agente π = (π0, π1, π2, π3), donde 0 es el vendedor, es (10, 20, 50, 20). En el segundo caso, los pagos son π = (−10, 30, 50, 30). Una cosa que sí sabemos, porque el mecanismo VCG maximizará la recompensa al comprador en todos los mecanismos eficientes [14], es que cada vez que la ecuación.1 no está satisfecho, no puede haber un mecanismo de subasta eficiente.7 2.3 ε-resistencia-resistencia ahora consideramos el mismo mecanismo VCG, pero con un esquema de aproximación para el problema de asignación subyacente. Derivamos un resultado de resistencia a la estrategia ε, que limita la ganancia máxima en el pago que un agente puede esperar lograr a través de una desviación unilateral de seguir una estrategia simple de revelación de la verdad. Describimos el resultado para la dirección de la subasta hacia adelante, pero es una observación bastante general. Como antes, deje que V (i) denote el valor de la solución óptima al problema de asignación con ofertas veraz de todos los agentes, y v (i \\ i) denota el valor de la solución óptima calculada sin ofertas del agente i. Deje ˆv (i) y ˆv (i \\ i) denotan el valor de la asignación calculado con un esquema de aproximación, y suponga que la aproximación satisface: (1 +) ˆv (i) ≥ V (i) para algunos> 0. Proporcionamos dicho esquema de aproximación para nuestra configuración más adelante en el documento. Sea ˆx denota la asignación implementada por el esquema de aproximación. La recompensa al Agente I, para anunciar la valoración ˆVi, es: VI (ˆXi) + J = I ˆVJ (ˆXJ) - ˆV (i \\ i) El término final es independiente del valor anunciado de los agentes y puede ignorarse en un incentivo-análisis. Sin embargo, el agente I puede tratar de mejorar su recompensa a través del efecto de su valor anunciado en la asignación ˆx implementada por el mecanismo. En particular, el agente I quiere que el mecanismo seleccione ˆx para maximizar la suma de su valor verdadero, vi (ˆxi), y el valor informado de los otros agentes, èj = i ˆvj (ˆxj). Si el algoritmo de asignación de mecanismos es óptimo, entonces todo lo que el agente debe hacer es establecer sinceramente su valor y el mecanismo hará el resto. Sin embargo, frente a un algoritmo de asignación aproximada, el agente puede tratar de mejorar su recompensa al anunciar un valor que corrige la aproximación, y hace que el algoritmo de aproximación implementa la asignación que maximiza exactamente el valor total informado de los otros agentes junto con suValor real propio [18].6 Esta condición es implícita por los agentes son requisitos de sustitutos [3], que ha recibido cierta atención en la literatura de subastas combinatorias porque caracteriza el caso en el que los pagos de VCG pueden ser respaldados en un equilibrio competitivo. Las caracterizaciones útiles de las condiciones que satisfacen los agentes son sustitutos, en términos de las valoraciones subyacentes de los agentes han demostrado ser bastante difíciles de alcanzar.7 Además, aunque existe una pequeña literatura sobre mecanismos de máxima eficiente sujeto a requisitos de participación voluntaria y equilibrio presupuestario (es decir, con el mecanismo que no introduce ni elimina dinero), los resultados analíticos solo se conocen por problemas simples (por ejemplo, [16, 4]). Ahora podemos analizar la mejor ganancia posible de la manipulación a un agente en nuestro entorno. Primero asumimos que los otros agentes son sinceros y luego relajan esto. En ambos casos, el beneficio máximo para el agente I ocurre cuando la aproximación inicial es el peor de los casos. Con informes veraces de otros agentes, esto ocurre cuando el valor de elección ˆx es V (i)/(1 + ε). Entonces, un agente podría esperar recibir una recompensa mejorada de: V (i) - V (i) 1 + ε = ε 1 + ε V (i) Esto es posible si el agente puede seleccionar un tipo informado para corregir elAlgoritmo de aproximación y hacer que el algoritmo implementa la asignación con el valor V (i). Por lo tanto, si otros agentes son sinceros, y con un esquema (1 + ε) -alprolación al problema de asignación, entonces ningún agente puede mejorar su recompensa en más de un factor ε/(1 + ε) del valor de la solución óptima. El análisis es muy similar cuando los otros agentes no son veraz. En este caso, un agente individual puede mejorar su recompensa por no más de un factor /(1 +) del valor de la solución óptima dados los valores reportados por los otros agentes. Deje que V en el siguiente teorema define el valor total de la asignación eficiente, dados los valores informados de los agentes J = I, y el verdadero valor del agente i.Teorema 1. Un mecanismo basado en VCG con un algoritmo de asignación (1 + ε) es (1+ −V) a prueba de estrategias para el agente I, y el agente que puedo obtener a lo sumo esta recompensa a través de alguna estrategia no húmeda. Observe que no necesitamos limitar el error de los problemas de asignación sin cada agente, porque el resultado de la resistencia a la extracción se deriva de la precisión del primer período en el pago de VCG y es independiente de la precisión del segundo período. Sin embargo, la precisión de la solución al problema sin cada agente es importante para implementar una buena aproximación a las propiedades de ingresos del mecanismo VCG.3. El problema de la mochila generalizada En esta sección, diseñamos un esquema de aproximación totalmente polinomial para la mochila generalizada, que modela el problema de Determinación ganadora para las subastas múltiples basadas en VCG. Describimos nuestros resultados para la variación de la subasta inversa, pero la formulación es completamente simétrica para la subasta a la oración. Al describir nuestro esquema de aproximación, comenzamos con una propiedad simple (la propiedad de anclaje) de una solución óptima de mochila. Utilizamos esta propiedad para desarrollar una O (N2) Tiempo 2-Apromentación para la mochila generalizada. A su vez, utilizamos esta aproximación básica para desarrollar nuestro esquema de aproximación de tiempo polinómico (FPTA). Una de las principales apelaciones de nuestro lenguaje de licitación por partes es su representación compacta de las funciones de valoración de los licitantes. Nos esforzamos por preservar esto, y presentar un esquema de aproximación que dependerá solo del número de postores, y no de la cantidad máxima, M, que puede ser muy grande en la configuración realista de la adquisición. El FPTAS implementa una aproximación (1 + ε) a la solución óptima x ∗, en el peor tiempo de casos t = o (n3 /ε), donde n es el número de licitadores, y donde asumimos que la oferta por partes para cada postortiene o (1) piezas. La dependencia del número de piezas también es polinomio: si cada oferta tiene un máximo de 169 de piezas C, entonces el tiempo de ejecución se puede derivar sustituyendo NC por cada aparición de n.3.1 Preliminares Antes de comenzar, recordemos el problema clásico de mochila 0/1: se nos da un conjunto de N elementos, donde el elemento I tiene valor VI y tamaño SI, y una mochila de capacidad M;Todos los tamaños son enteros. El objetivo es determinar un subconjunto de elementos de valor máximo con el tamaño total en la mayoría de M. Dado que queremos centrarnos en una subasta inversa, el problema de mochila equivalente será elegir un conjunto de elementos con un valor mínimo (es decir, costo) cuyo tamañoexcede M. El problema de interés generalizado de la mochila para nosotros se puede definir de la siguiente manera: mochila generalizada: instancia: un objetivo m y un conjunto de n listas, donde la lista de i -ésimo tiene la forma bi = (u1 i, p1 i),..., (umi - 1 i, pmi - 1 i), (umi i (i), ∞), donde uj i están aumentando con j y pj i están disminuyendo con j, y uj i, pj i, m son enteros positivos. Problema: Determine un conjunto de enteros xj i tal que 1. (uno por lista) como máximo uno XJ I no es cero para cualquiera i, 2. (membresía) xj i = 0 implica xj i ∈ [UJ I, UJ+1 i), 3. (objetivo) èi èj xj i ≥ m, y 4. (objetivo) èi èj pj i xj i está minimizado. Esta formulación de mochila generalizada es una generalización clara de la clásica mochila 0/1. En este último, cada lista consiste en un solo punto (Si, VI) .8 La conexión entre la mochila generalizada y nuestro problema de subasta es transparente. Cada lista codifica una oferta, que representa múltiples intervalos de cantidad mutuamente excluyentes, y uno puede elegir cualquier cantidad en un intervalo, pero a lo sumo se puede seleccionar un intervalo. Elegir el intervalo [UJ I, UJ+1 I) ha costado PJ I por unidad. El objetivo es adquirir al menos las unidades M del bien a un costo mínimo posible. El problema tiene algún sabor del problema continuo de la mochila. Sin embargo, hay dos diferencias principales que hacen que nuestro problema sea significativamente más difícil: (1) los intervalos tienen límites, y así elegir el intervalo [UJ I, UJ+1 I) requiere que al menos UJ I y en la mayoría de las unidades UJ+1 Idebe ser tomada;(2) A diferencia de la mochila clásica, no podemos ordenar los elementos (ofertas) por valor/tamaño, ya que diferentes intervalos en una lista tienen diferentes costos unitarios.3.2 Un esquema de 2-accesorios comenzamos con una definición. Dada una instancia de la mochila generalizada, llamamos a cada tuple tj i = (uj i, pj i) un ancla. Recuerde que estas tuplas representan los puntos de interrupción en las ofertas de curva constante por partes. Decimos que el tamaño de un ancla TJ I es UJ I, 8 de hecho, debido a la única restricción por lista, el problema generalizado es más cercano en espíritu al problema de mochila de opción múltiple [9], donde el conjunto subyacente de elementos estádividido en subconjuntos disjuntos u1, u2 ,..., Reino Unido, y uno puede elegir como máximo un elemento de cada subconjunto. Los PTA existen para este problema [10], y de hecho, uno puede convertir nuestro problema en una gran instancia del problema de mochila múltiple, creando un grupo para cada lista;Ponga una tupla de punto (de precio, precio) (x, p) para cada posible cantidad para un postor en su grupo (subconjunto). Sin embargo, esta conversión explota el tamaño del problema, por lo que no es posible para todas las instancias, excepto las más triviales.El número mínimo de unidades disponibles a este precio de anclaje PJ i. El costo del ancla tj I se define como el precio total mínimo asociado con esta tupla, a saber, costo (tj i) = pj i uj i si j <mi y costo (tmi i) = pmi - 1 i umi i i i. En una solución factible {x1, x2 ,..., xn} de la mochila generalizada, decimos que un elemento xi = 0 es un ancla si xi = uJ I, para algún ancla uj i. De lo contrario, decimos que Xi es de rango medio. Observamos que siempre se puede construir una solución óptima de mochila para que, como máximo, un elemento de solución sea de rango medio. Si hay dos elementos de rango medio x y x, para ofertas de dos agentes diferentes, con x ≤ x, entonces podemos incrementar x y disminución x, hasta que uno de ellos se convierta en un ancla. Ver Figura 2 para un ejemplo. Lema 1. [Propiedad de anclaje] Existe una solución óptima del problema de la mochila generalizada con como máximo un elemento de rango medio. Todos los demás elementos son anclajes.1 oferta de rango medio 5 20 15 10 25 5 25 30201510 35 3 2 1 Cantidad de precio 5 20 15 10 15 5 25 30201510 35 3 2 1 Cantidad de precio (i) Solución óptima con 2 ofertas de rango medio (ii) Soltución óptima con la Figura 2: ((((i) una solución óptima con más de una oferta no anclada (2,3);(ii) Una solución óptima con solo una oferta (3) no anclada. Utilizamos la propiedad de anclaje para obtener primero un esquema de enfoques de 2 veces en tiempo polinomial. Hacemos esto resolviendo varias instancias de un problema restringido de la cola generalizada, que llamamos Iknapsack, donde un elemento se ve obligado a ser de rango medio para un intervalo particular. Específicamente, suponga que el elemento X para el agente L se ve obligado a mentir en su rango JTH, [UJ, UJ+1), mientras que todos los demás elementos, x1 ,..., xl - 1, xl+1, xn, deben ser anclajes o cero. Esto corresponde al problema restringido iknapsack (, j), en el que el objetivo es obtener al menos unidades M - UJ con un costo mínimo. Se supone que el elemento x ya ha contribuido con unidades UJ. El valor de una solución a iKnapsack (, j) representa el costo adicional mínimo para comprar el resto de las unidades. Creamos N - 1 grupos de anclajes potenciales, donde el grupo I -Ith contiene todos los anclajes de la lista I en la mochila generalizada. El grupo para el Agente L contiene un elemento único que representa el intervalo [0, UJ+1 −UJ) y el PJ de precio de la unidad asociado. Este intervalo representa el número excesivo de unidades que se pueden tomar del Agente L en Iknapsack (, J), además de UJ, que ya se ha cometido. En cualquier otro grupo, podemos elegir como máximo un ancla. El siguiente pseudo-código describe nuestro algoritmo para esta restricción del problema de mochila generalizada. U es la unión de todas las tuplas en n grupos, incluida una tuple t para el agente l.El tamaño de esta tupla especial se define como UJ+1 - UJ, y el costo se define como PJ L (UJ+1 −UJ). R es el número de unidades que quedan por adquirir. S es el conjunto de tuplas aceptadas en la solución tentativa 170 actual. Lo mejor es la mejor solución que se encuentra hasta ahora. Skip variable solo se usa en la prueba de corrección. Algoritmo codicioso (, j) 1. Ordena todas las tuplas de u en el orden ascendente del precio unitario;En caso de lazos, ordene en orden ascendente de cantidades unitarias.2. Establecer Mark (i) = 0, para todas las listas i = 1, 2 ,..., n.Inicializar r = m - UJ, s = best = skip = ∅.3. Escanee las tuplas en U en el orden ordenado. Supongamos que la siguiente tupla es TK I, es decir, el ancla de KTH del agente i. Si Mark (i) = 1, ignora esta tupla;de lo contrario, haga los siguientes pasos: • Si tamaño (tk i)> r e i = return min {cost (s) + rpj, costo (mejor)};• Si el tamaño (tk i)> r y costo (tk i) ≤ costos (s) retorno min {costo (s) + costo (tk i), costo (mejor)};• Si el tamaño (tk i)> r y el costo (tk i)> costos (s) agregue tk i para omitir;Establecer mejor a S ∪ {tk i} si el costo mejora;• Si el tamaño (tk i) ≤ r, entonces agregue tk i a s;marca (i) = 1;Tamaño de resta (TK I) de R. El algoritmo de aproximación es muy similar al algoritmo de aproximación para la mochila. Como deseamos minimizar el costo total, consideramos las tuplas en orden de aumento por costo unitario. Si el tamaño de Tuple Tk I es más pequeño que R, entonces lo agregamos a S, actualizamos R y eliminamos de U todas las tuplas que pertenecen al mismo grupo que TK I. Si el tamaño (TK I) es mayor que R, entonces S junto con TK I forma una solución factible. Sin embargo, esta solución puede estar lejos de ser óptima si el tamaño de TK I es mucho mayor que R. Si el costo total de S y TK I es más pequeño que la mejor solución actual, actualizamos mejor. Una excepción a esta regla es la tupla t. Dado que esta tupla se puede tomar fraccionalmente, actualizamos mejor si la suma del costo de SS y el costo fraccional de T es una mejora. El algoritmo termina en cualquiera de los dos primeros casos, o cuando se escanean todas las tuplas. En particular, termina cada vez que encontramos un TK I tal que el tamaño (TK I) es mayor que R, pero el costo (TK I) es menor que el costo (s), o cuando llegamos al Tuple Representing Agent L y da un Faciblesolución. Lema 2. Suponga que A ∗ es una solución óptima de la mochila generalizada, y suponga que el elemento (L, J) es de rango medio en la solución óptima. Luego, el costo V (L, J), devuelto por Greedy (, J), satisface: V (, J) + Costo (TJ) ≤ 2cost (A ∗) prueba. Sea V (, j) el valor devuelto por Greedy (, j) y vamos v ∗ (, j) una solución óptima para iKnapsack (, j). Considere el set omitir al final de la codicia (, j). Hay dos casos a considerar: o Skip tuple t ∈ también está en V ∗ (, j), o ninguna tupla en Skip está en V ∗ (, J). En el primer caso, ST sea la solución tentativa en el momento en que se agrega T para omitir. Porque t ∈ Skip entonces tamaño (t)> r, y st junto con t forma una solución factible, y tenemos: v (, j) ≤ costo (mejor) ≤ costo (st) + costo (t). Nuevamente, porque t ∈ Skip luego costo (t)> costo (st), y tenemos v (, j) <2cost (t). Por otro lado, dado que T se incluye en V ∗ (, j), tenemos V ∗ (, j) ≥ costo (t). Estas dos desigualdades implican el límite deseado: V ∗ (, J) ≤ V (, J) <2V ∗ (, J). En el segundo caso, imagine una instancia modificada de iKnapsack (, j), que excluye todas las tuplas del set Skip. Dado que ninguna de estas tuplas se incluyó en V ∗ (, j), la solución óptima para el problema modificado debe ser la misma que para el original. Supongamos que nuestro algoritmo de aproximación devuelve el valor V (, j) para esta instancia modificada. Sea T la última tupla considerada por el algoritmo de aproximación antes de la terminación en la instancia modificada, y sea la solución tentativa correspondiente establecida en ese paso. Dado que consideramos las tuplas en orden de aumento por precio unitario, y ninguna de las tuplas se colocará en el set Skip, debemos haber costado (ST) <v ∗ (, j) porque ST es la forma óptima de obtener tamaño(Calle ). También tenemos costo (t) ≤ costo (st), y las siguientes desigualdades: v (, j) ≤ v (, j) ≤ costo (st) + costo (t) <2v ∗ (, j) la desigualdad v (, j) ≤ V (, j) se deduce del hecho de que una tupla en la lista de omisión solo puede afectar las mejores pero no las soluciones tentativas. Por lo tanto, dejar caer las tuplas en el set Skip solo puede empeorar la solución. El argumento anterior ha demostrado que el valor devuelto por Greedy (, j) está dentro de un factor 2 de la solución óptima para iKnapsack (, j). Ahora mostramos que el valor v (, j) más costo (TJ) es una acroximación de 2 del problema original de la mochila generalizada. Deje que A ∗ sea una solución óptima de la mochila generalizada, y suponga que el elemento XJ es de rango medio. Deje que X- se establezca de los elementos restantes, cero o anclajes, en esta solución. Además, defina x = xj - uj. Por lo tanto, costo (a ∗) = costo (xl) + costo (tj l) + costo (x - l) Es fácil ver que (x−, x) es una solución óptima para iknapsack (, j). Dado que V (, j) es una aplicación de 2 para esta solución óptima, tenemos las siguientes desigualdades: V (, J) + Costo (TJ) ≤ Costo (TJ) + 2 (costo (x) + costo (x−)) ≤ 2 (costo (x) + costo (tj) + costo (x−)) ≤ 2cost (a ∗) Esto completa la prueba de lema 2. Es fácil ver que, después de una clasificación inicial de las tuplas en u, el algoritmo codicioso (, j) toma o (n) tiempo. Tenemos nuestro primer algoritmo de aproximación polinomial. Teorema 2. Se puede encontrar una característica de 2 de la mochila generalizada en el tiempo O (N2), donde n es el número de listas de elementos (cada una de longitud constante). PRUEBA. Dirigimos el algoritmo codicioso (, j) una vez para cada tupla (L, j) como candidato para el rango medio. Hay O (N) tuplas, y es suficiente ordenarlas una vez, el costo total del algoritmo es O (N2). Por Lemma 1, existe una solución óptima con como máximo un elemento de rango medio, por lo que nuestro algoritmo encontrará una acerca de 2, como se afirma. La dependencia del número de piezas también es polinomio: si cada oferta tiene un máximo de piezas C, entonces el tiempo de ejecución es O ((NC) 2).171 3.3 Un esquema de aproximación ahora usamos el algoritmo de 2 de acujos presentado en la sección anterior para desarrollar una aproximación totalmente polinomial (FPTA) para el problema de la colcha generalizada. La idea de alto nivel es bastante estándar, pero los detalles requieren atención técnica. Utilizamos un algoritmo de programación dinámica para resolver iKnapsack (, j) para cada elemento de rango medio posible, con el algoritmo de 2 de acoplamiento que proporciona un límite superior en el valor de la solución y permite el uso de la escala en la dimensión de costo de la programación dinámica (Dp) tabla. Considere, por ejemplo, el caso de que el elemento de rango medio es x, que cae en el rango [UJ, UJ+1). En nuestros FPTA, en lugar de usar un algoritmo de aproximación codicioso para resolver iKnapsack (, j), construimos una tabla de programación dinámica para calcular el costo mínimo al que se pueden obtener al menos m - Uj+1 unidades utilizando las listas de N - 1 restantesEn la mochila generalizada. Supongamos que G [i, R] denota el número máximo de unidades que se pueden obtener a costo como máximo R usando solo las primeras listas I en la mochila generalizada. Luego, la siguiente relación de recurrencia describe cómo construir la tabla de programación dinámica: g [0, r] = 0 g [i, r] = max ´ g [i - 1, r] max j∈β (i, r) {G [i - 1, r - costo (tj i)] + uj i} µ donde β (i, r) = {j: 1 ≤ j ≤ mi, costo (tj i) ≤ r}, es el conjunto de anclajespara el agente i. Como convención, agente, indexaré la fila, y el costo r indexará la columna. Este algoritmo de programación dinámica es solo pseudopolinomio, ya que el número de columna en la tabla de programación dinámica depende del costo total. Sin embargo, podemos convertirlo en un FPTAS escalando la dimensión de costos. Deje que den la denota la 2-ACOMAXIMACIÓN al problema generalizado de la mochila, con costo total, costo (a). Deje que ε denote el factor de aproximación deseado. Calculamos el costo escalado de una tupla tj I, denotó scost (tj i), como scost (tj i) = n costo (tj i) εcost (a) (2) Esta escala mejora el tiempo de ejecución del algoritmo porque el númerode columnas en la tabla modificada es como máximo n ε e independiente del costo total. Sin embargo, la solución calculada podría no ser una solución óptima para el problema original. Mostramos que el error introducido está dentro de un factor de ε de la solución óptima. Como preludio de nuestra garantía de aproximación, primero mostramos que si dos soluciones diferentes al problema de Iknapsack tienen el mismo costo escalado, entonces sus costos originales (sin calificar) no pueden diferir en más de εcost (a). Lema 3. Sea X e Y dos soluciones factibles distintas de Iknapsack (, J), excluyendo sus elementos de rango medio. Si X e Y tienen costos escalados iguales, entonces sus costos no calificados no pueden diferir en más de εcost (a). PRUEBA. Deje que IX e iy, respectivamente, denoten las funciones indicadoras asociadas con los vectores de anclaje x e y-hay 1 en la posición IX [i, k] si el xk i> 0. Dado que x e y tienen un costo a escala igual, i = k scost (tk i) ix [i, k] = i = k scost (tk i) iy [i, k] (3) Sin embargo, por (2), el escaladoLos costos satisfacen las siguientes desigualdades: (Scost (Tk I)-1) εcost (a) n ≤ costo (tk i) ≤ scost (tk i) εcost (a) n (4) que sustituye el costo escalado superior (4) Para el costo (x), el límite inferior en el costo escalado de (4) para el costo (y), y usando la igualdad (3) para simplificar, tenemos: costo (x)-costo (y) ≤ εcost (a) n i = k iy [i, k] ≤ εcost (a), la última desigualdad usa el hecho de que, a la mayoría de los componentes de un vector indicador, no son cero;Es decir, cualquier solución factible contiene como máximo n tuplas. Finalmente, dada la tabla de programación dinámica para iKnapsack (, j), consideramos todas las entradas en la última fila de esta tabla, G [n - 1, r]. Estas entradas corresponden a soluciones óptimas con todos los agentes, excepto L, para diferentes niveles de costo. En particular, consideramos las entradas que proporcionan al menos m - Uj+1 unidades. Junto con una contribución del Agente L, elegimos la entrada en este conjunto que minimiza el costo total, definido de la siguiente manera: Costo (G [N - 1, R]) + Max {UJ, M - G [N - 1, R]} Pj, donde costo () es el costo original y sin calificar asociado con la entrada G [N - 1, R]. Vale la pena señalar que, a diferencia del esquema de 2 de acumulación para iKnapsack (, j), el valor calculado con este FPTAS incluye el costo de adquirir unidades UJ L de l.El siguiente lema muestra que logramos una acroximación (1+ε). Lema 4. Supongamos que A ∗ es una solución óptima del problema generalizado de la mochila, y suponga que ese elemento (L, j) es de rango medio en la solución óptima. Luego, la solución A (L, J) de ejecutar el algoritmo de programación dinámica escalada en iKnapsack (, J) satisface el costo (A (L, J)) ≤ (1 + 2ε) Costo (A ∗) Prueba. Deje que X- denote el vector de los elementos en solución a ∗ sin elemento l.Entonces, por definición, costo (a ∗) = costo (x−) + pj xj. Sea r = scost (x−) el costo escalado asociado con el vector x-. Ahora considere la tabla de programación dinámica construida para iKnapsack (, j), y considere su entrada g [n - 1, r]. Deje que A denote la agrupación de 2 al problema generalizado de la mochila, y A (L, j) denota la solución del algoritmo de programación dinámica. Supongamos que Y- es la solución asociada con esta entrada en nuestro programa dinámico;Los componentes del vector Y- son las cantidades de diferentes listas. Dado que tanto X- e Y tienen los costos escalados iguales, por Lemma 3, sus costos no calificados están dentro de εcost (a) entre sí;es decir, costo (y−) - costo (x−) ≤ εcost (a). Ahora, defina yj = max {UJ, m - èi = èj yj i};Esta es la contribución necesaria de hacer (y-, yj) una solución factible. Entre todas las soluciones de igual costo, nuestras tablas de programación dinámica eligen la que con unidades máximas. Por lo tanto, i = j yj i ≥ i = j xj i 172 Por lo tanto, debe ser el caso que yj ≤ xj. Porque (YJ, Y-) también es una solución factible, si nuestro algoritmo devuelve una solución con costo de costo (A (L, J)), entonces debemos tener un costo (A (L, J)) ≤ Costo (Y-)+ pj yj ≤ costo (x−) + εcost (a) + pj xj ≤ (1 + 2ε) costo (a ∗), donde usamos el hecho de que el costo (a) ≤ 2cost (a ∗). Al armar esto, nuestro esquema de aproximación para el problema de la mochila generalizada iterará el esquema descrito anteriormente para cada opción del elemento de rango medio (L, J), y elegirá la mejor solución entre estas soluciones O (N). Para un rango medio dado, el paso más costoso en el algoritmo es la construcción de la tabla de programación dinámica, que se puede hacer en el tiempo O (N2 /ε) suponiendo intervalos constantes por lista. Por lo tanto, tenemos el siguiente resultado. Teorema 3. Podemos calcular una aproximación (1 + ε) a la solución de un problema de mochila generalizada en el peor de los casos O (N3 /ε). La dependencia del número de piezas también es polinomio: si cada oferta tiene un máximo de piezas C, entonces el tiempo de ejecución se puede derivar sustituyendo CN por cada aparición de n.4. Computación de pagos de VCG Ahora consideramos el problema relacionado de calcular los pagos de VCG para todos los agentes. Un enfoque ingenuo requiere resolver el problema de asignación n veces, eliminando a cada agente a su vez. En esta sección, mostramos que nuestro esquema de aproximación para la mochila generalizada puede extenderse para determinar todos los pagos de N en el tiempo total O (αT log (αN/ε)), donde 1 ≤ c (i \\ i)/c (i)≤ α, para un límite superior constante, α, y t es la complejidad de resolver el problema de asignación una vez. Este límite de α puede justificarse como una condición de no monopolio, porque limita el valor marginal que un solo comprador aporta a la subasta. Del mismo modo, en la variación inversa podemos calcular los pagos de VCG a cada vendedor en el tiempo O (αT log (αN/ε)), donde α limita la relación c (i \\ i)/c (i) para todo i. Nuestra estrategia general será construir dos tablas de programación dinámica, hacia adelante y hacia atrás, para cada elemento de rango medio (L, j) una vez. La tabla delantera se construye considerando a los agentes en el orden de sus índices, donde se construye la tabla hacia atrás considerándolos en el orden inverso. La solución óptima correspondiente a C (i \\ i) se puede dividir en dos partes: una correspondiente a los agentes primero (i - 1) y el otro correspondiente a los últimos agentes (N - I). Como la (i - 1) en la fila de la tabla delantera corresponde a los vendedores con los primeros índices (I - 1), se contenerá una aproximación a la primera parte en (i - 1) en la fila de la tabla delantera. Del mismo modo, (n− i) la fila de la tabla hacia atrás contendrá una aproximación para la segunda parte. Primero presentamos una forma simple pero ineficiente de calcular el valor aproximado de C (i \\ i), que ilustra la idea principal de nuestro algoritmo. Luego presentamos un esquema mejorado, que utiliza el hecho de que los elementos en las filas están ordenados, para calcular el valor aproximado de manera más eficiente. A continuación, nos concentramos en calcular una asignación con XJ de rango medio, y algún agente I = L eliminado. Este será un componente para calcular una aproximación a C (i \\ i), el valor de la solución a la mochila generalizada sin ofertas del agente i. Comenzamos con el esquema simple.4.1 Un esquema de aproximación simple implementamos el algoritmo de programación dinámica a escala para iknapsack (, j) con dos pedidos alternativos sobre los otros vendedores, k = l, uno con vendedores ordenados 1, 2 ,..., n, y uno con vendedores ordenados n, n - 1 ,..., 1. Llamamos a la primera tabla la tabla delantera y la denotamos F, y la segunda tabla de la tabla hacia atrás, y la denotamos Bl. El subíndice nos recuerda que el agente es de rango medio.9 En la construcción de estas tablas, usamos el mismo factor de escala que antes;a saber, el costo de una tupla TJ I se escala de la siguiente manera: Scost (TJ I) = NCOST (TJ I) εcost (a) donde el costo (a) es el límite superior en C (i), dado por nuestro esquema de 2 apropiaciones. En este caso, debido a que C (i \\ i) puede ser α veces C (i), el valor escalado de C (i \\ i) puede ser como máximo Nα/ε. Por lo tanto, la dimensión de costo de nuestra tabla de programas dinámicos será Nα/ε. Fltable F (I - 1) L 2 3 1 2 I - 1 1 M - 1 M N - 1 G 2 31 M - 1 M B (N - I) N - 1 N - 2 N - I 1 LH Tabla BL Figura 3: Computación de pagos VCG.M = Nα ε Ahora, supongamos que queremos calcular una acroximación (1 +) al problema generalizado de la mochila restringida al elemento (L, j) medio, y restringidos aún más a eliminar las ofertas de algunos vendedores i = l.Llame a este problema iknapsack - i (, j). Recuerde que la fila ésica de nuestra tabla DP almacena la mejor solución posible utilizando solo los primeros agentes I excluyendo el Agente L, todos despejados en cero o en anclajes. Estos primeros agentes I son un subconjunto diferente de agentes en las tablas delantera y hacia atrás. Al combinar cuidadosamente una fila de FL con una fila de BL podemos calcular una aproximación a IKNAPSACK - I (, J). Consideramos la fila de FL que corresponde a soluciones construidas a partir de agentes {1, 2 ,..., i - 1}, saltando agente l.Consideramos la fila de BL que corresponde a soluciones construidas a partir de agentes {i+1, i+2 ,..., n}, nuevamente omitiendo agente l.Las filas están etiquetadas FL (I - 1) y BL (N - I) respectivamente.10 Los costos escalados para adquirir estas unidades son los índices de columna para estas entradas. Para resolver iknapsack - i (, j) elegimos una entrada de la fila F (i - 1) y otra de la fila B (n - i) de modo que su cantidad total excede m - Uj+1 y su costo combinado es mínimo en todotales combinaciones. Formalmente, deje g ∈ Fl (i - 1), y h ∈ Bl (n - 1) denotan entradas en cada fila, con tamaño (g), tamaño (h), denotando el número de unidades y el costo (g) y el costo(h) Denotar el costo no calificado asociado con la entrada. Calculamos lo siguiente, sujeto 9 podríamos etiquetar las tablas con ambos y j, para indicar que la tupla Jth se ve obligada a ser de rango medio, pero omitir J para evitar el desorden.10 Para ser precisos, el índice de las filas es (i - 2) y (n - i) para fl y bl cuando l <i, y (i - 1) y (n - i - 1), respectivamente, cuando l> i.173 a la condición de que G y H satisfagan el tamaño (g) + tamaño (h)> m - Uj + 1: min g∈F (i - 1), h∈B (n - i) òcost (g) + costo (H) + PJ · Max {UJ, M - Tamaño (G) - Tamaño (H)} Ó (5) Lemma 5. Supongamos que A - I es una solución óptima del problema de mochila generalizada sin ofertas del Agente I, y suponga que el elemento (L, J) es el elemento de rango medio en la solución óptima. Entonces, la expresión en la ecuación.5, para el problema restringido iknapsack-i (, j), calcula una acroximación de una (1 + ε) a A-I. PRUEBA. Desde anteriormente, definimos el costo (a - i) = c (i \\ i). Podemos dividir la solución óptima, A - I, en tres partes disjuntas: XL corresponde al vendedor de rango medio, Xi corresponde a los primeros vendedores I - 1 (salteando el agente L if l <i) y X - I corresponde al último n − -I Sellers (omitiendo agente l if l> i). Tenemos: costo (a - i) = costo (xi) + costo (x - i) + pj xj dejar ri = scost (xi) y r - i = scost (x - i). Deje que Yi e Y - i sean los vectores de solución correspondientes al costo escalado RI y R - I en F (i - 1) y B (N - I), respectivamente. De Lemma 3 concluimos que, costo (yi) + costo (y-i)-costo (xi)-costo (x-i) ≤ εcost (a) donde el costo (a) es el límite superior en c (i)calculado con la acroximación de 2. Entre todas las soluciones de costos de igual escalada, nuestro programa dinámico elige el que tiene unidades máximas. Por lo tanto, también tenemos, (tamaño (yi) ≥ tamaño (xi)) y (tamaño (y - i) ≥ tamaño (x - i)) donde usamos el tamaño de la taquigrafía (x) para denotar el número total de unidades en todas las tuplas enX. Ahora, defina yj l = max (uj l, m −size (yi) −size (y - i)). De las desigualdades anteriores, tenemos yj l ≤ xj l. Dado que (yj l, yi, y - i) también es una solución factible para el problema generalizado de la mochila sin el agente I, el valor devuelto por la ecuación.5 es como máximo costo (yi) + costo (y - i) + pj l yj l ≤ c (i \\ i) + εcost (a) ≤ c (i \\ i) + 2cost (a ∗) ε ≤ c (i\\ i) + 2c (i \\ i) ε Esto completa la prueba. Una implementación ingenua de este esquema será ineficiente porque podría verificar (Nα/ε) 2 pares de elementos, para cualquier opción particular de (L, J) y la elección del agente caído i. En la siguiente sección, presentamos una forma eficiente de calcular la ecuación.5, y eventualmente para calcular los pagos de VCG.4.2 Esquema de aproximación mejorado Nuestro esquema de aproximación mejorada para el problema de determinación del ganador sin el agente i utiliza el hecho de que los elementos en F (i-1) y B (n-i) están ordenados;Específicamente, tanto el costo y la cantidad sin escala (es decir, el tamaño) aumenta de izquierda a derecha. Como antes, deje que G y H denoten entradas genéricas en F (I - 1) y B (N - I) respectivamente. Para calcular la ecuación.5, consideramos todos los pares de tupla, y primero dividimos las tuplas que satisfacen el tamaño de la condición (g) + tamaño (h)> m - uj + 1 L en dos conjuntos de disjunto. Para cada conjunto, calculamos la mejor solución y luego tomamos lo mejor entre los dos conjuntos.[Caso I: tamaño (g) + tamaño (h) ≥ m - uj l] El problema se reduce a min g∈F (i - 1), h∈B (n - i) òcost (g) + costo (h)+ Pj L UJ Ó (6) Definimos un par (G, H) para que sea factible si el tamaño (G) + tamaño (H) ≥ M - Uj l. Ahora para calcular la ecuación.6, hacemos una caminata hacia adelante y hacia atrás en F (I - 1) y B (N - I) respectivamente. Comenzamos desde el índice más pequeño de F (i - 1) y nos movemos a la derecha, y desde el índice más alto de B (N - I) y movemos a la izquierda. Sea (G, H) el par actual. Si (G, H) es factible, disminuimos el puntero de BS (es decir, avanzar hacia atrás) De lo contrario, incrementamos el puntero FS. Los pares factibles que se encuentran durante la caminata se utilizan para calcular la ecuación.6. La complejidad de este paso es de tamaño lineal de F (I - 1), que es O (Nα/ε).[Caso II: M - UJ + 1 L ≤ Tamaño (G) + Tamaño (H) ≤ M - Uj L] El problema se reduce a Min G∈F (I - 1), H∈B (N - I) òcost (g) + costo (h) + pj l (m - tamaño (g) - tamaño (h)) ó Para calcular la ecuación anterior, transformamos el problema anterior en otro problema usando el costo modificado, que se define como: mcost (g) = costo (g) - pj l · tamaño (g) mcost (h) = costo (h) - pj l · tamaño (h) El nuevo problema es calcular min g∈F (i - 1), h∈B(n - i) òmcost (g) + mcost (h) + pj l m ó (7) El costo modificado simplifica el problema, pero desafortunadamente los elementos en f (i - 1) y b (n - i) ya no sonordenado con respecto a Mcost. Sin embargo, los elementos aún se clasifican en cantidad y usamos esta propiedad para calcular la ecuación.7. Llame a un par (G, H) factible si M - UJ + 1 L ≤ Tamaño (G) + Tamaño (H) ≤ M - Uj l. Defina el conjunto factible de G como los elementos h ∈ B (n - i) que son factibles dados g.Como los elementos se clasifican por cantidad, el conjunto factible de G es un subconjunto contiguo de B (N - I) y cambia a la izquierda a medida que aumenta G.2 3 4 5 10 20 30 30 40 50 60 Comienzo B (N - I) 15 20 25 30 35 40 65421 3 1 6 F (I - 1) L L Figura 4: El conjunto factible de G = 3, definido en B (n - i), es {2, 3, 4} cuando m - UJ+1 L = 50 y M - UJ L = 60. El comienzo y el final representan los punteros de inicio y finalización del conjunto factible. Por lo tanto, podemos calcular la ecuación.7 haciendo una caminata hacia adelante y hacia atrás en F (I - 1) y B (N - I) respectivamente. Caminamos sobre B (N - I), comenzando desde el índice más alto, usando dos punteros, comenzamos y terminan, para indicar el inicio y el final del conjunto factible actual. Mantenemos el conjunto factible como un montón mínimo, donde la clave es el costo modificado. Para actualizar el conjunto factible, cuando incrementamos el puntero FS (avanzamos), caminamos a la izquierda en B, primero usando el extremo para eliminar elementos del conjunto factible que ya no son factibles y luego usando comenzar a agregar nuevos elementos factibles. Para una G dada, el único elemento que debemos considerar en el conjunto factible de GS es el que tiene un costo mínimo modificado que se puede calcular en un tiempo constante con el montón min. Entonces, la principal complejidad del cálculo se encuentra en las actualizaciones de montón. Dado que cualquier elemento se agrega o elimina como máximo una vez, hay actualizaciones de montón O (Nα ε) y la complejidad del tiempo de este paso es O (Nα ε log Nα ε).4.3 Recogiendo las piezas El algoritmo funciona de la siguiente manera. Primero, utilizando el algoritmo de aproximación 2, calculamos un límite superior en C (I). Utilizamos esto ligado a escalar los costos de la tupla. Usando los costos escalados, construimos las tablas hacia adelante y hacia atrás correspondientes a cada tupla (L, J). Las tablas delanteras se utilizan para calcular C (i). Para calcular C (i \\ i), itreamos sobre todas las tuplas de rango medio posibles y usamos las tablas de avance y hacia atrás correspondientes para calcular la solución localmente óptima utilizando el esquema anterior. Entre todas las soluciones localmente óptimas, elegimos una con el costo total mínimo. El paso más caro en el algoritmo es el cálculo de C (i \\ i). La complejidad del tiempo de este paso es O (N2 α ε log Nα ε) como tenemos que iterar sobre todas las opciones O (n) de TJ L, para todos L = I, y cada vez que use el esquema anterior para calcular la ecuación.5. En el peor de los casos, es posible que necesitemos calcular C (i \\ i) para todos los n vendedores, en cuyo caso la complejidad final del algoritmo será O (N3 α ε log nα ε). Teorema 4. Podemos calcular una aproximación a prueba de estrategia /(1+) al mecanismo VCG en las subastas de unidades múltiples de avance e inversa en el peor tiempo O (N3 α ε log Nα ε). Es interesante recordar que T = O (N3 ε) es la complejidad del tiempo de los FPTA al problema generalizado de la mochila con todos los agentes. Nuestro esquema combinado calcula una aproximación al mecanismo VCG completo, incluidos los pagos a los agentes O (N), en la complejidad del tiempo O (T log (N/ε)), tomando el parámetro no monopolio, α, como constante. Por lo tanto, nuestro algoritmo funciona mucho mejor que el esquema ingenuo, que calcula el pago de VCG para cada agente resolviendo una nueva instancia de problema generalizado de mochila. La velocidad proviene de la forma en que resolvemos iknapsack - i (, j). La complejidad del tiempo de la calculación IKNAPSACK - I (, J) Al crear una nueva tabla de programación dinámica será O (N2 ε) pero al usar las tablas hacia adelante y hacia atrás, la complejidad se reduce a O (N ε log n ε). Podemos mejorar aún más la complejidad del tiempo de nuestro algoritmo calculando la ecuación.5 más eficientemente. Actualmente, el algoritmo usa Heap, que tiene tiempo de actualización logarítmica. En el peor de los casos, podemos tener dos operaciones de actualización de Heap para cada elemento, lo que hace que la complejidad del tiempo sea súper lineal. Si podemos calcular la ecuación.5 En tiempo lineal, entonces la complejidad de calcular el pago de VCG será la misma que la complejidad de resolver un solo problema de mochila generalizada.5. Conclusiones Presentamos un esquema de aproximación en tiempo polinómico para el problema de subasta de una sola unidad de bienvenida, utilizando un lenguaje de licitación constante de partes por partes decrecientes marginales. Nuestro esquema es aproximadamente eficiente y aproximadamente a prueba de estrategias dentro de cualquier factor especificado ε> 0. Como tal, es un ejemplo de resultado de dominancia ε computacionalmente manejable, así como un ejemplo de un problema de asignación no trivial pero aproximable. Es particularmente interesante que podamos calcular los pagos a los agentes de N en un mecanismo basado en VCG en el peor tiempo de casos o (T log n), donde T es la complejidad del tiempo para calcular la solución a un solo problema de asignación.6. Referencias [1] L M Ausubel y P R Milgrom. Subastas ascendentes con ofertas de paquetes. Fronteras de la economía teórica, 1: 1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer y R V Vohra. Programación lineal y subastas de Vickrey. Informe técnico, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani y J M Ostroy. El modelo de asignación de paquetes. Journal of Economic Theory, 2002. Próximo.[4] K Chatterjee y W Samuelson. Negociación bajo información incompleta. Operations Research, 31: 835-851, 1983. [5] E H Clarke. Precio multiparte de bienes públicos. Public Choice, 11: 17-33, 1971. [6] S de Vries y R v Vohra. Subastas combinatorias: una encuesta. Informa Journal on Computing, 2002. Próximo.[7] M Eso, S Ghosh, J R Kalagnanam y L Ladanyi. Evaluación de ofertas en subastas de adquisiciones con curvas de suministro lineal por pieza. Informe técnico, IBM TJ Watson Research Center, 2001. En preparación.[8] J Feigenbaum y S Shenker. Diseño de mecanismo algorítmico distribuido: resultados recientes y direcciones futuras. En Actas del 6to Taller Internacional sobre Algoritmos Discretos y Métodos para la Computación y Comunicaciones Móviles, Páginas 1-13, 2002. [9] M R Garey y D S Johnson. Computadoras e intratabilidad: una guía de la teoría de la completitud de NP. W.H.Freeman and Company, Nueva York, 1979. [10] G V Gens y E V Levner. Complejidad computacional de algoritmos de aproximación para problemas combinatorios. En Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves. Incentivos en equipos. Econometrica, 41: 617-631, 1973. [12] J R Kalagnanam, A J Davenport, y H S Lee. Aspectos computacionales de la compensación de subastas dobles de llamadas continuas con restricciones de asignación y demanda indivisible. Electronic Commerce Journal, 1 (3): 221-238, 2001. [13] V Krishna. Teoría de la subasta. Academic Press, 2002. [14] v Krishna y M Perry. Diseño de mecanismo eficiente. Informe técnico, Universidad Estatal de Pensilvania, 1998. Disponible en: http://econ.la.psu.edu/˜vkrishna/vcg18.ps.[15] D Lehmann, L I Ocallaghan e Y Shoham. Revelación de la verdad en subastas combinatorias aproximadamente eficientes. JACM, 49 (5): 577-602, septiembre de 2002. [16] R B Myerson. Diseño de subasta óptimo. Matemáticas de Operation Research, 6: 58-73, 1981. [17] R B Myerson y M A Satterthwaite. Mecanismos eficientes para el comercio bilateral. Journal of Economic Theory, 28: 265-281, 1983. [18] N Nisan y A Ronen. Mecanismos VCG computacionalmente factibles. En ACM-EC, páginas 242-252, 2000. [19] D C Parkes, J R Kalagnanam y M Eso. Lograr el equilibrio presupuestario con los esquemas de pago con sede en Vickrey en los intercambios. En Ijcai, 2001. [20] M H Rothkopf, A Pekeˇc y R M Harstad. Subastas combinatorias computacionalmente manejables. Management Science, 44 (8): 1131-1147, 1998. [21] J Schummer. Implementación de la estrategia casi dominante. Informe técnico, Departamento de Meds, Kellogg Graduate School of Management, 2001. [22] W Vickrey. Contrapeculación, subastas y licitaciones selladas competitivas. Journal of Finance, 16: 8-37, 1961. 175",
    "original_sentences": [
        "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem.",
        "The bidding language in our auctions allows marginal-decreasing piecewise constant curves.",
        "First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
        "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
        "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
        "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
        "General Terms Algorithms, Economics. 1.",
        "INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good multi-unit auction problem.",
        "Our scheme is both approximately efficient and approximately strategyproof.",
        "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
        "We consider both a reverse auction variation and a forward auction variation, and propose a compact and expressive bidding language that allows marginal-decreasing piecewise constant curves.",
        "In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
        "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
        "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
        "In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
        "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
        "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
        "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
        "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
        "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
        "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
        "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
        "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
        "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
        "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
        "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
        "Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
        "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
        "This upper-bound tends to 1 as the number of sellers increases.",
        "The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation.",
        "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
        "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
        "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
        "We also prove our claims about ε-strategyproofness.",
        "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
        "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
        "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
        "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
        "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases.",
        "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
        "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
        "For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem.",
        "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
        "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
        "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
        "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
        "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
        "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
        "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
        "The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
        "Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
        "APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions.",
        "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
        "We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language.",
        "This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
        "See Figure 1 for an example.",
        "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
        "Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
        "In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
        "Her valuation is zero for quantities outside the range [10, 25].",
        "In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25].",
        "In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
        "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
        "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
        "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
        "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
        "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
        "A sellers bid is similarly defined in the reverse auction.",
        "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
        "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
        "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
        "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism.",
        "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
        "We will use the term payoff interchangeably for utility.",
        "In the forward auction, there is a seller with M units to sell.",
        "We assume that this seller has no intrinsic value for the items.",
        "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
        "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
        "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
        "The VCG mechanism is defined as follows: 1.",
        "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
        "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
        "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
        "In this forward auction, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
        "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
        "In the reverse auction, there is a buyer with M units to buy, and n suppliers.",
        "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
        "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
        "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
        "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
        "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
        "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
        "The total payment is collected from the buyer.",
        "Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
        "Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
        "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
        "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
        "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
        "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
        "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
        "In words, there would be no efficient trade without the seller.",
        "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
        "Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
        "In other words, there must be no pivotal sellers.",
        "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
        "The payments to the sellers would never exceed the buyers value in this case.",
        "Conversely, to make the forward auction symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
        "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
        "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
        "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
        "In the second case, the payoffs are π = (−10, 30, 50, 30).",
        "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
        "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
        "We describe the result for the forward auction direction, but it is quite a general observation.",
        "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
        "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
        "We provide such an approximation scheme for our setting later in the paper.",
        "Let ˆx denote the allocation implemented by the approximation scheme.",
        "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
        "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
        "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
        "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
        "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium.",
        "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
        "We can now analyze the best possible gain from manipulation to an agent in our setting.",
        "We first assume that the other agents are truthful, and then relax this.",
        "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
        "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
        "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I).",
        "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
        "The analysis is very similar when the other agents are not truthful.",
        "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
        "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
        "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
        "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
        "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
        "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
        "We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction.",
        "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
        "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
        "In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS).",
        "One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions.",
        "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
        "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
        "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
        "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
        "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
        "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
        "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
        "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
        "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
        "The goal is to procure at least M units of the good at minimum possible cost.",
        "The problem has some flavor of the continuous knapsack problem.",
        "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
        "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
        "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
        "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
        "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
        "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
        "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
        "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
        "Otherwise, we say that xi is midrange.",
        "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
        "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
        "See Figure 2 for an example.",
        "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
        "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
        "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
        "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
        "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
        "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
        "Element x is assumed to have already contributed uj units.",
        "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
        "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
        "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
        "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
        "In any other group, we can choose at most one anchor.",
        "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
        "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
        "R is the number of units that remain to be acquired.",
        "S is the set of tuples accepted in the current tentative 170 solution.",
        "Best is the best solution found so far.",
        "Variable Skip is only used in the proof of correctness.",
        "Algorithm Greedy( , j) 1.",
        "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
        "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
        "Scan the tuples in U in the sorted order.",
        "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
        "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack.",
        "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
        "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
        "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
        "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
        "One exception to this rule is the tuple t .",
        "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
        "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
        "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
        "LEMMA 2.",
        "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
        "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
        "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
        "Consider the set Skip at the termination of Greedy( , j).",
        "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
        "In the first case, let St be the tentative solution S at the time t was added to Skip.",
        "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
        "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
        "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
        "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
        "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
        "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
        "Suppose our approximation algorithm returns the value V ( , j) for this modified instance.",
        "Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
        "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
        "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
        "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
        "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
        "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
        "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
        "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
        "Furthermore, define x = xj − uj .",
        "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
        "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
        "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
        "We have our first polynomial approximation algorithm.",
        "THEOREM 2.",
        "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
        "PROOF.",
        "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
        "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
        "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
        "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
        "The high level idea is fairly standard, but the details require technical care.",
        "We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table.",
        "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
        "In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
        "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
        "Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
        "As convention, agent i will index the row, and cost r will index the column.",
        "This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost.",
        "However, we can convert it into a FPTAS by scaling the cost dimension.",
        "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
        "Let ε denote the desired approximation factor.",
        "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
        "However, the computed solution might not be an optimal solution for the original problem.",
        "We show that the error introduced is within a factor of ε of the optimal solution.",
        "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
        "LEMMA 3.",
        "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
        "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
        "PROOF.",
        "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
        "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
        "Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
        "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
        "In particular, we consider the entries that provide at least M − uj+1 units.",
        "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
        "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
        "LEMMA 4.",
        "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
        "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
        "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
        "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
        "Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
        "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
        "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
        "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
        "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
        "Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units.",
        "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
        "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
        "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
        "For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
        "Thus, we have the following result.",
        "THEOREM 3.",
        "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
        "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
        "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
        "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
        "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
        "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
        "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
        "Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once.",
        "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
        "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
        "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
        "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
        "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
        "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
        "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
        "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
        "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
        "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
        "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
        "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
        "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
        "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
        "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
        "These first i agents are a different subset of agents in the forward and the backward tables.",
        "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
        "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
        "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
        "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
        "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
        "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
        "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
        "PROOF.",
        "From earlier, we define cost(A−i ) = C(I \\ i).",
        "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
        "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
        "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
        "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
        "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
        "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
        "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
        "From the preceding inequalities, we have yj l ≤ xj l .",
        "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
        "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
        "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
        "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
        "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
        "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
        "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
        "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
        "Let (g, h) be the current pair.",
        "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
        "The feasible pairs found during the walk are used to compute Eq. 6.",
        "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
        "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
        "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
        "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
        "Begin and End represent the start and end pointers to the feasible set.",
        "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
        "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
        "We maintain the feasible set as a min heap, where the key is modified cost.",
        "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
        "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
        "So, the main complexity of the computation lies in heap updates.",
        "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
        "First, using the 2 approximation algorithm, we compute an upper bound on C(I).",
        "We use this bound to scale down the tuple costs.",
        "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
        "The forward tables are used to compute C(I).",
        "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
        "Among all the locally optimal solutions we choose one with the minimum total cost.",
        "The most expensive step in the algorithm is computation of C(I \\ i).",
        "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
        "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
        "THEOREM 4.",
        "We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
        "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
        "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
        "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
        "The speed up comes from the way we solve iKnapsack−i ( , j).",
        "Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
        "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
        "Currently, the algorithm uses heap, which has logarithmic update time.",
        "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
        "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
        "CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good multi-unit auction problem, using marginal decreasing piecewise constant bidding language.",
        "Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0.",
        "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
        "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
        "REFERENCES [1] L M Ausubel and P R Milgrom.",
        "Ascending auctions with package bidding.",
        "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
        "Linear programming and Vickrey auctions.",
        "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
        "The package assignment model.",
        "Journal of Economic Theory, 2002.",
        "Forthcoming. [4] K Chatterjee and W Samuelson.",
        "Bargaining under incomplete information.",
        "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
        "Multipart pricing of public goods.",
        "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
        "Combinatorial auctions: A survey.",
        "Informs Journal on Computing, 2002.",
        "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
        "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
        "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
        "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
        "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
        "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
        "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
        "Computational complexity of approximation algorithms for combinatorial problems.",
        "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
        "Incentives in teams.",
        "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
        "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
        "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
        "Auction Theory.",
        "Academic Press, 2002. [14] V Krishna and M Perry.",
        "Efficient mechanism design.",
        "Technical report, Pennsylvania State University, 1998.",
        "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
        "Truth revelation in approximately efficient combinatorial auctions.",
        "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
        "Optimal auction design.",
        "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
        "Efficient mechanisms for bilateral trading.",
        "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
        "Computationally feasible VCG mechanisms.",
        "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
        "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
        "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
        "Computationally manageable combinatorial auctions.",
        "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
        "Almost dominant strategy implementation.",
        "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
        "Counterspeculation, auctions, and competitive sealed tenders.",
        "Journal of Finance, 16:8-37, 1961. 175"
    ],
    "error_count": 0,
    "keys": {
        "approximately-efficient and approximately strategyproof auction mechanism": {
            "translated_key": "aproximadamente un mecanismo de subasta a prueba de estrategias y aproximadamente eficiente",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem.",
                "The bidding language in our auctions allows marginal-decreasing piecewise constant curves.",
                "First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
                "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
                "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
                "General Terms Algorithms, Economics. 1.",
                "INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good multi-unit auction problem.",
                "Our scheme is both approximately efficient and approximately strategyproof.",
                "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
                "We consider both a reverse auction variation and a forward auction variation, and propose a compact and expressive bidding language that allows marginal-decreasing piecewise constant curves.",
                "In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
                "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
                "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
                "In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
                "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
                "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
                "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
                "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
                "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
                "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
                "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
                "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
                "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
                "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
                "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
                "Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
                "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
                "This upper-bound tends to 1 as the number of sellers increases.",
                "The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation.",
                "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
                "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
                "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
                "We also prove our claims about ε-strategyproofness.",
                "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
                "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
                "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
                "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
                "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases.",
                "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
                "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
                "For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem.",
                "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
                "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
                "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
                "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
                "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
                "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
                "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
                "The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
                "Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
                "APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions.",
                "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
                "We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language.",
                "This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
                "See Figure 1 for an example.",
                "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
                "Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
                "In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
                "Her valuation is zero for quantities outside the range [10, 25].",
                "In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25].",
                "In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
                "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
                "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
                "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
                "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
                "A sellers bid is similarly defined in the reverse auction.",
                "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
                "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
                "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism.",
                "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
                "We will use the term payoff interchangeably for utility.",
                "In the forward auction, there is a seller with M units to sell.",
                "We assume that this seller has no intrinsic value for the items.",
                "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
                "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
                "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
                "The VCG mechanism is defined as follows: 1.",
                "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
                "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
                "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
                "In this forward auction, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
                "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
                "In the reverse auction, there is a buyer with M units to buy, and n suppliers.",
                "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
                "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
                "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
                "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
                "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
                "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
                "The total payment is collected from the buyer.",
                "Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
                "Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
                "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
                "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
                "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
                "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
                "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
                "In words, there would be no efficient trade without the seller.",
                "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
                "Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
                "In other words, there must be no pivotal sellers.",
                "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
                "The payments to the sellers would never exceed the buyers value in this case.",
                "Conversely, to make the forward auction symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
                "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
                "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
                "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
                "In the second case, the payoffs are π = (−10, 30, 50, 30).",
                "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
                "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
                "We describe the result for the forward auction direction, but it is quite a general observation.",
                "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
                "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
                "We provide such an approximation scheme for our setting later in the paper.",
                "Let ˆx denote the allocation implemented by the approximation scheme.",
                "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
                "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
                "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
                "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
                "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium.",
                "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
                "We can now analyze the best possible gain from manipulation to an agent in our setting.",
                "We first assume that the other agents are truthful, and then relax this.",
                "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
                "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
                "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I).",
                "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
                "The analysis is very similar when the other agents are not truthful.",
                "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
                "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
                "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
                "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
                "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
                "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
                "We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction.",
                "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
                "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
                "In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS).",
                "One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions.",
                "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
                "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
                "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
                "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
                "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
                "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
                "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
                "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
                "The goal is to procure at least M units of the good at minimum possible cost.",
                "The problem has some flavor of the continuous knapsack problem.",
                "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
                "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
                "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
                "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
                "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
                "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
                "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
                "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
                "Otherwise, we say that xi is midrange.",
                "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
                "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
                "See Figure 2 for an example.",
                "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
                "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
                "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
                "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
                "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
                "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
                "Element x is assumed to have already contributed uj units.",
                "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
                "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
                "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
                "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
                "In any other group, we can choose at most one anchor.",
                "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
                "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
                "R is the number of units that remain to be acquired.",
                "S is the set of tuples accepted in the current tentative 170 solution.",
                "Best is the best solution found so far.",
                "Variable Skip is only used in the proof of correctness.",
                "Algorithm Greedy( , j) 1.",
                "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
                "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
                "Scan the tuples in U in the sorted order.",
                "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
                "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack.",
                "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
                "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
                "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
                "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
                "One exception to this rule is the tuple t .",
                "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
                "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
                "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
                "LEMMA 2.",
                "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
                "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
                "Consider the set Skip at the termination of Greedy( , j).",
                "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
                "In the first case, let St be the tentative solution S at the time t was added to Skip.",
                "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
                "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
                "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
                "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
                "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
                "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
                "Suppose our approximation algorithm returns the value V ( , j) for this modified instance.",
                "Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
                "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
                "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
                "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
                "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
                "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
                "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
                "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
                "Furthermore, define x = xj − uj .",
                "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
                "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
                "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
                "We have our first polynomial approximation algorithm.",
                "THEOREM 2.",
                "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
                "PROOF.",
                "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
                "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
                "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
                "The high level idea is fairly standard, but the details require technical care.",
                "We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table.",
                "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
                "In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
                "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
                "Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
                "As convention, agent i will index the row, and cost r will index the column.",
                "This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost.",
                "However, we can convert it into a FPTAS by scaling the cost dimension.",
                "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
                "Let ε denote the desired approximation factor.",
                "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
                "However, the computed solution might not be an optimal solution for the original problem.",
                "We show that the error introduced is within a factor of ε of the optimal solution.",
                "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
                "LEMMA 3.",
                "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
                "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
                "PROOF.",
                "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
                "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
                "Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
                "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
                "In particular, we consider the entries that provide at least M − uj+1 units.",
                "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
                "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
                "LEMMA 4.",
                "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
                "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
                "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
                "Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
                "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
                "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
                "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
                "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
                "Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units.",
                "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
                "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
                "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
                "For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
                "Thus, we have the following result.",
                "THEOREM 3.",
                "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
                "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
                "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
                "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
                "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
                "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
                "Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once.",
                "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
                "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
                "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
                "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
                "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
                "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
                "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
                "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
                "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
                "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
                "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
                "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
                "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
                "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
                "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
                "These first i agents are a different subset of agents in the forward and the backward tables.",
                "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
                "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
                "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
                "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
                "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
                "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
                "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
                "PROOF.",
                "From earlier, we define cost(A−i ) = C(I \\ i).",
                "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
                "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
                "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
                "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
                "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
                "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
                "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
                "From the preceding inequalities, we have yj l ≤ xj l .",
                "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
                "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
                "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
                "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
                "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
                "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
                "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
                "Let (g, h) be the current pair.",
                "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
                "The feasible pairs found during the walk are used to compute Eq. 6.",
                "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
                "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
                "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
                "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
                "Begin and End represent the start and end pointers to the feasible set.",
                "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
                "We maintain the feasible set as a min heap, where the key is modified cost.",
                "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
                "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
                "So, the main complexity of the computation lies in heap updates.",
                "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
                "First, using the 2 approximation algorithm, we compute an upper bound on C(I).",
                "We use this bound to scale down the tuple costs.",
                "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
                "The forward tables are used to compute C(I).",
                "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
                "Among all the locally optimal solutions we choose one with the minimum total cost.",
                "The most expensive step in the algorithm is computation of C(I \\ i).",
                "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
                "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
                "THEOREM 4.",
                "We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
                "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
                "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
                "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
                "The speed up comes from the way we solve iKnapsack−i ( , j).",
                "Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
                "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
                "Currently, the algorithm uses heap, which has logarithmic update time.",
                "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
                "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
                "CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good multi-unit auction problem, using marginal decreasing piecewise constant bidding language.",
                "Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0.",
                "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
                "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
                "REFERENCES [1] L M Ausubel and P R Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
                "Linear programming and Vickrey auctions.",
                "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 2002.",
                "Forthcoming. [4] K Chatterjee and W Samuelson.",
                "Bargaining under incomplete information.",
                "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
                "Multipart pricing of public goods.",
                "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 2002.",
                "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
                "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
                "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
                "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
                "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
                "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
                "Computational complexity of approximation algorithms for combinatorial problems.",
                "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
                "Incentives in teams.",
                "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
                "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
                "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [14] V Krishna and M Perry.",
                "Efficient mechanism design.",
                "Technical report, Pennsylvania State University, 1998.",
                "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
                "Truth revelation in approximately efficient combinatorial auctions.",
                "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
                "Optimal auction design.",
                "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
                "Computationally feasible VCG mechanisms.",
                "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
                "Almost dominant strategy implementation.",
                "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
                "Counterspeculation, auctions, and competitive sealed tenders.",
                "Journal of Finance, 16:8-37, 1961. 175"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "single-good multi-unit allocation problem": {
            "translated_key": "Problema de asignación múltiple de una sola unidad",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a <br>single-good multi-unit allocation problem</br>.",
                "The bidding language in our auctions allows marginal-decreasing piecewise constant curves.",
                "First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
                "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
                "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
                "General Terms Algorithms, Economics. 1.",
                "INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good multi-unit auction problem.",
                "Our scheme is both approximately efficient and approximately strategyproof.",
                "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
                "We consider both a reverse auction variation and a forward auction variation, and propose a compact and expressive bidding language that allows marginal-decreasing piecewise constant curves.",
                "In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
                "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
                "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
                "In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
                "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
                "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
                "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
                "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
                "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
                "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
                "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
                "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
                "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
                "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
                "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
                "Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
                "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
                "This upper-bound tends to 1 as the number of sellers increases.",
                "The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation.",
                "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
                "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
                "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
                "We also prove our claims about ε-strategyproofness.",
                "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
                "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
                "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
                "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
                "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases.",
                "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
                "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
                "For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem.",
                "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
                "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
                "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
                "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
                "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
                "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
                "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
                "The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
                "Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
                "APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions.",
                "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
                "We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language.",
                "This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
                "See Figure 1 for an example.",
                "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
                "Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
                "In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
                "Her valuation is zero for quantities outside the range [10, 25].",
                "In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25].",
                "In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
                "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
                "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
                "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
                "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
                "A sellers bid is similarly defined in the reverse auction.",
                "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
                "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
                "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism.",
                "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
                "We will use the term payoff interchangeably for utility.",
                "In the forward auction, there is a seller with M units to sell.",
                "We assume that this seller has no intrinsic value for the items.",
                "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
                "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
                "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
                "The VCG mechanism is defined as follows: 1.",
                "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
                "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
                "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
                "In this forward auction, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
                "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
                "In the reverse auction, there is a buyer with M units to buy, and n suppliers.",
                "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
                "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
                "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
                "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
                "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
                "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
                "The total payment is collected from the buyer.",
                "Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
                "Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
                "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
                "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
                "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
                "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
                "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
                "In words, there would be no efficient trade without the seller.",
                "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
                "Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
                "In other words, there must be no pivotal sellers.",
                "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
                "The payments to the sellers would never exceed the buyers value in this case.",
                "Conversely, to make the forward auction symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
                "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
                "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
                "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
                "In the second case, the payoffs are π = (−10, 30, 50, 30).",
                "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
                "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
                "We describe the result for the forward auction direction, but it is quite a general observation.",
                "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
                "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
                "We provide such an approximation scheme for our setting later in the paper.",
                "Let ˆx denote the allocation implemented by the approximation scheme.",
                "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
                "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
                "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
                "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
                "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium.",
                "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
                "We can now analyze the best possible gain from manipulation to an agent in our setting.",
                "We first assume that the other agents are truthful, and then relax this.",
                "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
                "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
                "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I).",
                "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
                "The analysis is very similar when the other agents are not truthful.",
                "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
                "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
                "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
                "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
                "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
                "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
                "We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction.",
                "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
                "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
                "In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS).",
                "One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions.",
                "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
                "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
                "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
                "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
                "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
                "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
                "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
                "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
                "The goal is to procure at least M units of the good at minimum possible cost.",
                "The problem has some flavor of the continuous knapsack problem.",
                "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
                "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
                "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
                "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
                "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
                "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
                "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
                "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
                "Otherwise, we say that xi is midrange.",
                "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
                "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
                "See Figure 2 for an example.",
                "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
                "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
                "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
                "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
                "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
                "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
                "Element x is assumed to have already contributed uj units.",
                "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
                "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
                "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
                "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
                "In any other group, we can choose at most one anchor.",
                "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
                "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
                "R is the number of units that remain to be acquired.",
                "S is the set of tuples accepted in the current tentative 170 solution.",
                "Best is the best solution found so far.",
                "Variable Skip is only used in the proof of correctness.",
                "Algorithm Greedy( , j) 1.",
                "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
                "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
                "Scan the tuples in U in the sorted order.",
                "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
                "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack.",
                "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
                "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
                "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
                "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
                "One exception to this rule is the tuple t .",
                "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
                "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
                "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
                "LEMMA 2.",
                "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
                "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
                "Consider the set Skip at the termination of Greedy( , j).",
                "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
                "In the first case, let St be the tentative solution S at the time t was added to Skip.",
                "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
                "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
                "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
                "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
                "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
                "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
                "Suppose our approximation algorithm returns the value V ( , j) for this modified instance.",
                "Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
                "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
                "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
                "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
                "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
                "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
                "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
                "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
                "Furthermore, define x = xj − uj .",
                "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
                "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
                "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
                "We have our first polynomial approximation algorithm.",
                "THEOREM 2.",
                "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
                "PROOF.",
                "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
                "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
                "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
                "The high level idea is fairly standard, but the details require technical care.",
                "We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table.",
                "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
                "In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
                "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
                "Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
                "As convention, agent i will index the row, and cost r will index the column.",
                "This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost.",
                "However, we can convert it into a FPTAS by scaling the cost dimension.",
                "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
                "Let ε denote the desired approximation factor.",
                "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
                "However, the computed solution might not be an optimal solution for the original problem.",
                "We show that the error introduced is within a factor of ε of the optimal solution.",
                "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
                "LEMMA 3.",
                "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
                "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
                "PROOF.",
                "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
                "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
                "Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
                "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
                "In particular, we consider the entries that provide at least M − uj+1 units.",
                "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
                "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
                "LEMMA 4.",
                "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
                "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
                "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
                "Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
                "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
                "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
                "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
                "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
                "Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units.",
                "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
                "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
                "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
                "For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
                "Thus, we have the following result.",
                "THEOREM 3.",
                "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
                "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
                "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
                "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
                "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
                "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
                "Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once.",
                "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
                "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
                "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
                "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
                "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
                "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
                "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
                "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
                "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
                "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
                "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
                "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
                "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
                "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
                "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
                "These first i agents are a different subset of agents in the forward and the backward tables.",
                "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
                "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
                "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
                "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
                "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
                "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
                "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
                "PROOF.",
                "From earlier, we define cost(A−i ) = C(I \\ i).",
                "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
                "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
                "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
                "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
                "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
                "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
                "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
                "From the preceding inequalities, we have yj l ≤ xj l .",
                "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
                "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
                "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
                "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
                "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
                "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
                "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
                "Let (g, h) be the current pair.",
                "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
                "The feasible pairs found during the walk are used to compute Eq. 6.",
                "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
                "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
                "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
                "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
                "Begin and End represent the start and end pointers to the feasible set.",
                "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
                "We maintain the feasible set as a min heap, where the key is modified cost.",
                "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
                "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
                "So, the main complexity of the computation lies in heap updates.",
                "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
                "First, using the 2 approximation algorithm, we compute an upper bound on C(I).",
                "We use this bound to scale down the tuple costs.",
                "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
                "The forward tables are used to compute C(I).",
                "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
                "Among all the locally optimal solutions we choose one with the minimum total cost.",
                "The most expensive step in the algorithm is computation of C(I \\ i).",
                "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
                "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
                "THEOREM 4.",
                "We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
                "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
                "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
                "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
                "The speed up comes from the way we solve iKnapsack−i ( , j).",
                "Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
                "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
                "Currently, the algorithm uses heap, which has logarithmic update time.",
                "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
                "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
                "CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good multi-unit auction problem, using marginal decreasing piecewise constant bidding language.",
                "Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0.",
                "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
                "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
                "REFERENCES [1] L M Ausubel and P R Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
                "Linear programming and Vickrey auctions.",
                "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 2002.",
                "Forthcoming. [4] K Chatterjee and W Samuelson.",
                "Bargaining under incomplete information.",
                "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
                "Multipart pricing of public goods.",
                "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 2002.",
                "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
                "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
                "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
                "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
                "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
                "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
                "Computational complexity of approximation algorithms for combinatorial problems.",
                "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
                "Incentives in teams.",
                "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
                "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
                "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [14] V Krishna and M Perry.",
                "Efficient mechanism design.",
                "Technical report, Pennsylvania State University, 1998.",
                "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
                "Truth revelation in approximately efficient combinatorial auctions.",
                "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
                "Optimal auction design.",
                "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
                "Computationally feasible VCG mechanisms.",
                "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
                "Almost dominant strategy implementation.",
                "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
                "Counterspeculation, auctions, and competitive sealed tenders.",
                "Journal of Finance, 16:8-37, 1961. 175"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Subastas de una unidad múltiple a prueba de estrategias y manejables Anshul Kothari ∗ David C. Parkes † Subhash Suri ∗ Resumen presentamos un mecanismo de subasta aproximadamente eficiente y aproximadamente a prueba de estreno para un \"problema de asignación de unidades múltiples de una sola buena\"."
            ],
            "translated_text": "",
            "candidates": [
                "Problema de asignación múltiple de una sola unidad",
                "problema de asignación de unidades múltiples de una sola buena"
            ],
            "error": []
        },
        "fully polynomial-time approximation scheme": {
            "translated_key": "esquema de aproximación totalmente polinómico",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem.",
                "The bidding language in our auctions allows marginal-decreasing piecewise constant curves.",
                "First, we develop a <br>fully polynomial-time approximation scheme</br> for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
                "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
                "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
                "General Terms Algorithms, Economics. 1.",
                "INTRODUCTION In this paper we present a <br>fully polynomial-time approximation scheme</br> for the single-good multi-unit auction problem.",
                "Our scheme is both approximately efficient and approximately strategyproof.",
                "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
                "We consider both a reverse auction variation and a forward auction variation, and propose a compact and expressive bidding language that allows marginal-decreasing piecewise constant curves.",
                "In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
                "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
                "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
                "In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
                "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
                "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
                "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
                "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
                "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
                "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
                "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
                "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
                "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
                "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
                "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
                "Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
                "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
                "This upper-bound tends to 1 as the number of sellers increases.",
                "The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation.",
                "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
                "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
                "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
                "We also prove our claims about ε-strategyproofness.",
                "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
                "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
                "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
                "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
                "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases.",
                "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
                "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
                "For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem.",
                "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
                "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
                "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
                "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
                "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
                "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
                "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
                "The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
                "Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
                "APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions.",
                "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
                "We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language.",
                "This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
                "See Figure 1 for an example.",
                "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
                "Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
                "In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
                "Her valuation is zero for quantities outside the range [10, 25].",
                "In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25].",
                "In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
                "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
                "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
                "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
                "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
                "A sellers bid is similarly defined in the reverse auction.",
                "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
                "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
                "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism.",
                "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
                "We will use the term payoff interchangeably for utility.",
                "In the forward auction, there is a seller with M units to sell.",
                "We assume that this seller has no intrinsic value for the items.",
                "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
                "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
                "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
                "The VCG mechanism is defined as follows: 1.",
                "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
                "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
                "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
                "In this forward auction, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
                "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
                "In the reverse auction, there is a buyer with M units to buy, and n suppliers.",
                "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
                "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
                "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
                "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
                "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
                "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
                "The total payment is collected from the buyer.",
                "Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
                "Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
                "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
                "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
                "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
                "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
                "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
                "In words, there would be no efficient trade without the seller.",
                "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
                "Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
                "In other words, there must be no pivotal sellers.",
                "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
                "The payments to the sellers would never exceed the buyers value in this case.",
                "Conversely, to make the forward auction symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
                "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
                "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
                "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
                "In the second case, the payoffs are π = (−10, 30, 50, 30).",
                "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
                "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
                "We describe the result for the forward auction direction, but it is quite a general observation.",
                "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
                "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
                "We provide such an approximation scheme for our setting later in the paper.",
                "Let ˆx denote the allocation implemented by the approximation scheme.",
                "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
                "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
                "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
                "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
                "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium.",
                "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
                "We can now analyze the best possible gain from manipulation to an agent in our setting.",
                "We first assume that the other agents are truthful, and then relax this.",
                "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
                "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
                "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I).",
                "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
                "The analysis is very similar when the other agents are not truthful.",
                "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
                "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
                "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
                "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
                "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
                "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
                "We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction.",
                "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
                "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
                "In turn, we use this basic approximation to develop our <br>fully polynomial-time approximation scheme</br> (FPTAS).",
                "One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions.",
                "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
                "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
                "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
                "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
                "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
                "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
                "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
                "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
                "The goal is to procure at least M units of the good at minimum possible cost.",
                "The problem has some flavor of the continuous knapsack problem.",
                "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
                "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
                "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
                "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
                "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
                "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
                "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
                "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
                "Otherwise, we say that xi is midrange.",
                "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
                "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
                "See Figure 2 for an example.",
                "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
                "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
                "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
                "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
                "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
                "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
                "Element x is assumed to have already contributed uj units.",
                "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
                "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
                "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
                "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
                "In any other group, we can choose at most one anchor.",
                "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
                "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
                "R is the number of units that remain to be acquired.",
                "S is the set of tuples accepted in the current tentative 170 solution.",
                "Best is the best solution found so far.",
                "Variable Skip is only used in the proof of correctness.",
                "Algorithm Greedy( , j) 1.",
                "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
                "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
                "Scan the tuples in U in the sorted order.",
                "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
                "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack.",
                "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
                "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
                "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
                "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
                "One exception to this rule is the tuple t .",
                "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
                "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
                "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
                "LEMMA 2.",
                "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
                "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
                "Consider the set Skip at the termination of Greedy( , j).",
                "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
                "In the first case, let St be the tentative solution S at the time t was added to Skip.",
                "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
                "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
                "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
                "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
                "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
                "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
                "Suppose our approximation algorithm returns the value V ( , j) for this modified instance.",
                "Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
                "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
                "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
                "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
                "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
                "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
                "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
                "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
                "Furthermore, define x = xj − uj .",
                "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
                "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
                "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
                "We have our first polynomial approximation algorithm.",
                "THEOREM 2.",
                "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
                "PROOF.",
                "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
                "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
                "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
                "The high level idea is fairly standard, but the details require technical care.",
                "We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table.",
                "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
                "In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
                "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
                "Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
                "As convention, agent i will index the row, and cost r will index the column.",
                "This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost.",
                "However, we can convert it into a FPTAS by scaling the cost dimension.",
                "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
                "Let ε denote the desired approximation factor.",
                "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
                "However, the computed solution might not be an optimal solution for the original problem.",
                "We show that the error introduced is within a factor of ε of the optimal solution.",
                "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
                "LEMMA 3.",
                "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
                "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
                "PROOF.",
                "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
                "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
                "Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
                "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
                "In particular, we consider the entries that provide at least M − uj+1 units.",
                "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
                "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
                "LEMMA 4.",
                "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
                "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
                "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
                "Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
                "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
                "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
                "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
                "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
                "Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units.",
                "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
                "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
                "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
                "For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
                "Thus, we have the following result.",
                "THEOREM 3.",
                "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
                "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
                "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
                "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
                "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
                "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
                "Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once.",
                "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
                "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
                "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
                "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
                "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
                "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
                "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
                "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
                "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
                "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
                "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
                "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
                "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
                "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
                "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
                "These first i agents are a different subset of agents in the forward and the backward tables.",
                "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
                "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
                "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
                "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
                "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
                "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
                "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
                "PROOF.",
                "From earlier, we define cost(A−i ) = C(I \\ i).",
                "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
                "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
                "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
                "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
                "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
                "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
                "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
                "From the preceding inequalities, we have yj l ≤ xj l .",
                "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
                "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
                "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
                "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
                "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
                "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
                "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
                "Let (g, h) be the current pair.",
                "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
                "The feasible pairs found during the walk are used to compute Eq. 6.",
                "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
                "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
                "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
                "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
                "Begin and End represent the start and end pointers to the feasible set.",
                "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
                "We maintain the feasible set as a min heap, where the key is modified cost.",
                "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
                "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
                "So, the main complexity of the computation lies in heap updates.",
                "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
                "First, using the 2 approximation algorithm, we compute an upper bound on C(I).",
                "We use this bound to scale down the tuple costs.",
                "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
                "The forward tables are used to compute C(I).",
                "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
                "Among all the locally optimal solutions we choose one with the minimum total cost.",
                "The most expensive step in the algorithm is computation of C(I \\ i).",
                "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
                "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
                "THEOREM 4.",
                "We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
                "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
                "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
                "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
                "The speed up comes from the way we solve iKnapsack−i ( , j).",
                "Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
                "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
                "Currently, the algorithm uses heap, which has logarithmic update time.",
                "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
                "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
                "CONCLUSIONS We presented a <br>fully polynomial-time approximation scheme</br> for the single-good multi-unit auction problem, using marginal decreasing piecewise constant bidding language.",
                "Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0.",
                "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
                "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
                "REFERENCES [1] L M Ausubel and P R Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
                "Linear programming and Vickrey auctions.",
                "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 2002.",
                "Forthcoming. [4] K Chatterjee and W Samuelson.",
                "Bargaining under incomplete information.",
                "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
                "Multipart pricing of public goods.",
                "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 2002.",
                "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
                "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
                "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
                "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
                "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
                "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
                "Computational complexity of approximation algorithms for combinatorial problems.",
                "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
                "Incentives in teams.",
                "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
                "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
                "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [14] V Krishna and M Perry.",
                "Efficient mechanism design.",
                "Technical report, Pennsylvania State University, 1998.",
                "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
                "Truth revelation in approximately efficient combinatorial auctions.",
                "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
                "Optimal auction design.",
                "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
                "Computationally feasible VCG mechanisms.",
                "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
                "Almost dominant strategy implementation.",
                "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
                "Counterspeculation, auctions, and competitive sealed tenders.",
                "Journal of Finance, 16:8-37, 1961. 175"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Primero, desarrollamos un \"esquema de aproximación en tiempo polinómico\" para el problema de asignación de unidades múltiples, que calcula una aproximación (1 +) en el peor tiempo de casos t = o (n3 /), dada n ofertas cada una con un número constantede piezas.",
                "Introducción En este documento presentamos un \"esquema de aproximación totalmente polinomial\" para el problema de subasta de unidades múltiples para una sola buena.",
                "A su vez, utilizamos esta aproximación básica para desarrollar nuestro \"esquema de aproximación de tiempo polinómico\" (FPTA).",
                "Conclusiones presentamos un \"esquema de aproximación totalmente polinómico\" para el problema de subasta de unidades múltiples para una sola buena, utilizando un lenguaje de licitación constante por partes decreciente marginal."
            ],
            "translated_text": "",
            "candidates": [
                "esquema de aproximación totalmente polinómico",
                "esquema de aproximación en tiempo polinómico",
                "esquema de aproximación totalmente polinómico",
                "esquema de aproximación totalmente polinomial",
                "esquema de aproximación totalmente polinómico",
                "esquema de aproximación de tiempo polinómico",
                "esquema de aproximación totalmente polinómico",
                "esquema de aproximación totalmente polinómico"
            ],
            "error": []
        },
        "vickrey-clarke-grove": {
            "translated_key": "Vickrey-Clarke-Grove",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem.",
                "The bidding language in our auctions allows marginal-decreasing piecewise constant curves.",
                "First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
                "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
                "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
                "General Terms Algorithms, Economics. 1.",
                "INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good multi-unit auction problem.",
                "Our scheme is both approximately efficient and approximately strategyproof.",
                "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
                "We consider both a reverse auction variation and a forward auction variation, and propose a compact and expressive bidding language that allows marginal-decreasing piecewise constant curves.",
                "In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
                "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
                "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
                "In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
                "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
                "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
                "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
                "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
                "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
                "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
                "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
                "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
                "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
                "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
                "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
                "Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
                "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
                "This upper-bound tends to 1 as the number of sellers increases.",
                "The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation.",
                "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
                "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
                "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
                "We also prove our claims about ε-strategyproofness.",
                "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
                "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
                "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
                "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
                "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases.",
                "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
                "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
                "For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem.",
                "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
                "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
                "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
                "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
                "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
                "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
                "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
                "The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
                "Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
                "APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions.",
                "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
                "We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language.",
                "This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
                "See Figure 1 for an example.",
                "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
                "Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
                "In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
                "Her valuation is zero for quantities outside the range [10, 25].",
                "In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25].",
                "In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
                "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
                "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
                "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
                "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
                "A sellers bid is similarly defined in the reverse auction.",
                "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
                "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
                "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism.",
                "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
                "We will use the term payoff interchangeably for utility.",
                "In the forward auction, there is a seller with M units to sell.",
                "We assume that this seller has no intrinsic value for the items.",
                "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
                "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
                "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
                "The VCG mechanism is defined as follows: 1.",
                "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
                "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
                "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
                "In this forward auction, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
                "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
                "In the reverse auction, there is a buyer with M units to buy, and n suppliers.",
                "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
                "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
                "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
                "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
                "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
                "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
                "The total payment is collected from the buyer.",
                "Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
                "Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
                "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
                "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
                "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
                "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
                "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
                "In words, there would be no efficient trade without the seller.",
                "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
                "Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
                "In other words, there must be no pivotal sellers.",
                "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
                "The payments to the sellers would never exceed the buyers value in this case.",
                "Conversely, to make the forward auction symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
                "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
                "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
                "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
                "In the second case, the payoffs are π = (−10, 30, 50, 30).",
                "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
                "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
                "We describe the result for the forward auction direction, but it is quite a general observation.",
                "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
                "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
                "We provide such an approximation scheme for our setting later in the paper.",
                "Let ˆx denote the allocation implemented by the approximation scheme.",
                "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
                "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
                "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
                "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
                "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium.",
                "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
                "We can now analyze the best possible gain from manipulation to an agent in our setting.",
                "We first assume that the other agents are truthful, and then relax this.",
                "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
                "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
                "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I).",
                "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
                "The analysis is very similar when the other agents are not truthful.",
                "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
                "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
                "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
                "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
                "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
                "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
                "We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction.",
                "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
                "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
                "In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS).",
                "One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions.",
                "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
                "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
                "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
                "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
                "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
                "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
                "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
                "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
                "The goal is to procure at least M units of the good at minimum possible cost.",
                "The problem has some flavor of the continuous knapsack problem.",
                "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
                "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
                "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
                "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
                "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
                "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
                "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
                "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
                "Otherwise, we say that xi is midrange.",
                "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
                "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
                "See Figure 2 for an example.",
                "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
                "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
                "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
                "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
                "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
                "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
                "Element x is assumed to have already contributed uj units.",
                "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
                "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
                "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
                "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
                "In any other group, we can choose at most one anchor.",
                "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
                "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
                "R is the number of units that remain to be acquired.",
                "S is the set of tuples accepted in the current tentative 170 solution.",
                "Best is the best solution found so far.",
                "Variable Skip is only used in the proof of correctness.",
                "Algorithm Greedy( , j) 1.",
                "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
                "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
                "Scan the tuples in U in the sorted order.",
                "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
                "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack.",
                "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
                "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
                "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
                "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
                "One exception to this rule is the tuple t .",
                "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
                "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
                "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
                "LEMMA 2.",
                "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
                "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
                "Consider the set Skip at the termination of Greedy( , j).",
                "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
                "In the first case, let St be the tentative solution S at the time t was added to Skip.",
                "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
                "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
                "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
                "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
                "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
                "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
                "Suppose our approximation algorithm returns the value V ( , j) for this modified instance.",
                "Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
                "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
                "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
                "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
                "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
                "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
                "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
                "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
                "Furthermore, define x = xj − uj .",
                "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
                "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
                "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
                "We have our first polynomial approximation algorithm.",
                "THEOREM 2.",
                "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
                "PROOF.",
                "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
                "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
                "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
                "The high level idea is fairly standard, but the details require technical care.",
                "We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table.",
                "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
                "In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
                "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
                "Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
                "As convention, agent i will index the row, and cost r will index the column.",
                "This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost.",
                "However, we can convert it into a FPTAS by scaling the cost dimension.",
                "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
                "Let ε denote the desired approximation factor.",
                "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
                "However, the computed solution might not be an optimal solution for the original problem.",
                "We show that the error introduced is within a factor of ε of the optimal solution.",
                "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
                "LEMMA 3.",
                "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
                "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
                "PROOF.",
                "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
                "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
                "Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
                "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
                "In particular, we consider the entries that provide at least M − uj+1 units.",
                "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
                "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
                "LEMMA 4.",
                "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
                "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
                "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
                "Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
                "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
                "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
                "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
                "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
                "Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units.",
                "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
                "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
                "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
                "For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
                "Thus, we have the following result.",
                "THEOREM 3.",
                "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
                "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
                "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
                "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
                "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
                "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
                "Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once.",
                "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
                "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
                "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
                "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
                "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
                "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
                "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
                "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
                "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
                "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
                "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
                "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
                "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
                "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
                "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
                "These first i agents are a different subset of agents in the forward and the backward tables.",
                "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
                "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
                "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
                "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
                "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
                "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
                "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
                "PROOF.",
                "From earlier, we define cost(A−i ) = C(I \\ i).",
                "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
                "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
                "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
                "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
                "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
                "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
                "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
                "From the preceding inequalities, we have yj l ≤ xj l .",
                "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
                "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
                "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
                "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
                "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
                "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
                "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
                "Let (g, h) be the current pair.",
                "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
                "The feasible pairs found during the walk are used to compute Eq. 6.",
                "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
                "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
                "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
                "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
                "Begin and End represent the start and end pointers to the feasible set.",
                "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
                "We maintain the feasible set as a min heap, where the key is modified cost.",
                "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
                "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
                "So, the main complexity of the computation lies in heap updates.",
                "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
                "First, using the 2 approximation algorithm, we compute an upper bound on C(I).",
                "We use this bound to scale down the tuple costs.",
                "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
                "The forward tables are used to compute C(I).",
                "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
                "Among all the locally optimal solutions we choose one with the minimum total cost.",
                "The most expensive step in the algorithm is computation of C(I \\ i).",
                "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
                "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
                "THEOREM 4.",
                "We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
                "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
                "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
                "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
                "The speed up comes from the way we solve iKnapsack−i ( , j).",
                "Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
                "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
                "Currently, the algorithm uses heap, which has logarithmic update time.",
                "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
                "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
                "CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good multi-unit auction problem, using marginal decreasing piecewise constant bidding language.",
                "Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0.",
                "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
                "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
                "REFERENCES [1] L M Ausubel and P R Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
                "Linear programming and Vickrey auctions.",
                "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 2002.",
                "Forthcoming. [4] K Chatterjee and W Samuelson.",
                "Bargaining under incomplete information.",
                "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
                "Multipart pricing of public goods.",
                "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 2002.",
                "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
                "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
                "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
                "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
                "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
                "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
                "Computational complexity of approximation algorithms for combinatorial problems.",
                "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
                "Incentives in teams.",
                "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
                "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
                "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [14] V Krishna and M Perry.",
                "Efficient mechanism design.",
                "Technical report, Pennsylvania State University, 1998.",
                "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
                "Truth revelation in approximately efficient combinatorial auctions.",
                "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
                "Optimal auction design.",
                "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
                "Computationally feasible VCG mechanisms.",
                "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
                "Almost dominant strategy implementation.",
                "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
                "Counterspeculation, auctions, and competitive sealed tenders.",
                "Journal of Finance, 16:8-37, 1961. 175"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "forward auction": {
            "translated_key": "subasta directa",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem.",
                "The bidding language in our auctions allows marginal-decreasing piecewise constant curves.",
                "First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
                "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
                "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
                "General Terms Algorithms, Economics. 1.",
                "INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good multi-unit auction problem.",
                "Our scheme is both approximately efficient and approximately strategyproof.",
                "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
                "We consider both a reverse auction variation and a <br>forward auction</br> variation, and propose a compact and expressive bidding language that allows marginal-decreasing piecewise constant curves.",
                "In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
                "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
                "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
                "In the <br>forward auction</br>, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
                "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
                "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
                "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
                "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the <br>forward auction</br> and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
                "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
                "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
                "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
                "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
                "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
                "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
                "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
                "Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
                "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
                "This upper-bound tends to 1 as the number of sellers increases.",
                "The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation.",
                "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
                "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
                "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
                "We also prove our claims about ε-strategyproofness.",
                "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
                "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
                "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
                "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
                "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases.",
                "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
                "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
                "For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem.",
                "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
                "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
                "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
                "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
                "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
                "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
                "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
                "The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
                "Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
                "APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions.",
                "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
                "We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language.",
                "This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
                "See Figure 1 for an example.",
                "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the <br>forward auction</br> to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
                "Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price <br>forward auction</br> Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
                "In the <br>forward auction</br> bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
                "Her valuation is zero for quantities outside the range [10, 25].",
                "In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25].",
                "In detail, in a <br>forward auction</br>, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
                "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
                "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
                "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
                "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
                "A sellers bid is similarly defined in the reverse auction.",
                "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
                "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
                "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism.",
                "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
                "We will use the term payoff interchangeably for utility.",
                "In the <br>forward auction</br>, there is a seller with M units to sell.",
                "We assume that this seller has no intrinsic value for the items.",
                "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
                "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
                "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
                "The VCG mechanism is defined as follows: 1.",
                "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
                "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
                "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
                "In this <br>forward auction</br>, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
                "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
                "In the reverse auction, there is a buyer with M units to buy, and n suppliers.",
                "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
                "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
                "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
                "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
                "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
                "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
                "The total payment is collected from the buyer.",
                "Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
                "Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
                "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
                "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
                "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
                "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
                "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
                "In words, there would be no efficient trade without the seller.",
                "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
                "Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
                "In other words, there must be no pivotal sellers.",
                "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
                "The payments to the sellers would never exceed the buyers value in this case.",
                "Conversely, to make the <br>forward auction</br> symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
                "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
                "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
                "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
                "In the second case, the payoffs are π = (−10, 30, 50, 30).",
                "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
                "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
                "We describe the result for the <br>forward auction</br> direction, but it is quite a general observation.",
                "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
                "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
                "We provide such an approximation scheme for our setting later in the paper.",
                "Let ˆx denote the allocation implemented by the approximation scheme.",
                "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
                "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
                "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
                "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
                "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium.",
                "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
                "We can now analyze the best possible gain from manipulation to an agent in our setting.",
                "We first assume that the other agents are truthful, and then relax this.",
                "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
                "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
                "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I).",
                "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
                "The analysis is very similar when the other agents are not truthful.",
                "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
                "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
                "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
                "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
                "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
                "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
                "We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction.",
                "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
                "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
                "In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS).",
                "One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions.",
                "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
                "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
                "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
                "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
                "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
                "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
                "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
                "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
                "The goal is to procure at least M units of the good at minimum possible cost.",
                "The problem has some flavor of the continuous knapsack problem.",
                "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
                "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
                "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
                "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
                "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
                "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
                "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
                "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
                "Otherwise, we say that xi is midrange.",
                "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
                "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
                "See Figure 2 for an example.",
                "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
                "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
                "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
                "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
                "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
                "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
                "Element x is assumed to have already contributed uj units.",
                "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
                "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
                "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
                "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
                "In any other group, we can choose at most one anchor.",
                "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
                "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
                "R is the number of units that remain to be acquired.",
                "S is the set of tuples accepted in the current tentative 170 solution.",
                "Best is the best solution found so far.",
                "Variable Skip is only used in the proof of correctness.",
                "Algorithm Greedy( , j) 1.",
                "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
                "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
                "Scan the tuples in U in the sorted order.",
                "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
                "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack.",
                "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
                "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
                "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
                "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
                "One exception to this rule is the tuple t .",
                "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
                "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
                "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
                "LEMMA 2.",
                "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
                "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
                "Consider the set Skip at the termination of Greedy( , j).",
                "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
                "In the first case, let St be the tentative solution S at the time t was added to Skip.",
                "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
                "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
                "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
                "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
                "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
                "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
                "Suppose our approximation algorithm returns the value V ( , j) for this modified instance.",
                "Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
                "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
                "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
                "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
                "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
                "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
                "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
                "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
                "Furthermore, define x = xj − uj .",
                "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
                "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
                "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
                "We have our first polynomial approximation algorithm.",
                "THEOREM 2.",
                "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
                "PROOF.",
                "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
                "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
                "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
                "The high level idea is fairly standard, but the details require technical care.",
                "We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table.",
                "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
                "In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
                "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
                "Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
                "As convention, agent i will index the row, and cost r will index the column.",
                "This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost.",
                "However, we can convert it into a FPTAS by scaling the cost dimension.",
                "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
                "Let ε denote the desired approximation factor.",
                "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
                "However, the computed solution might not be an optimal solution for the original problem.",
                "We show that the error introduced is within a factor of ε of the optimal solution.",
                "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
                "LEMMA 3.",
                "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
                "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
                "PROOF.",
                "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
                "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
                "Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
                "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
                "In particular, we consider the entries that provide at least M − uj+1 units.",
                "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
                "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
                "LEMMA 4.",
                "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
                "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
                "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
                "Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
                "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
                "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
                "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
                "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
                "Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units.",
                "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
                "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
                "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
                "For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
                "Thus, we have the following result.",
                "THEOREM 3.",
                "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
                "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
                "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
                "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
                "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
                "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
                "Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once.",
                "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
                "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
                "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
                "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
                "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
                "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
                "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
                "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
                "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
                "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
                "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
                "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
                "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
                "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
                "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
                "These first i agents are a different subset of agents in the forward and the backward tables.",
                "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
                "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
                "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
                "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
                "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
                "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
                "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
                "PROOF.",
                "From earlier, we define cost(A−i ) = C(I \\ i).",
                "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
                "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
                "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
                "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
                "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
                "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
                "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
                "From the preceding inequalities, we have yj l ≤ xj l .",
                "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
                "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
                "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
                "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
                "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
                "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
                "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
                "Let (g, h) be the current pair.",
                "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
                "The feasible pairs found during the walk are used to compute Eq. 6.",
                "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
                "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
                "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
                "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
                "Begin and End represent the start and end pointers to the feasible set.",
                "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
                "We maintain the feasible set as a min heap, where the key is modified cost.",
                "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
                "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
                "So, the main complexity of the computation lies in heap updates.",
                "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
                "First, using the 2 approximation algorithm, we compute an upper bound on C(I).",
                "We use this bound to scale down the tuple costs.",
                "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
                "The forward tables are used to compute C(I).",
                "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
                "Among all the locally optimal solutions we choose one with the minimum total cost.",
                "The most expensive step in the algorithm is computation of C(I \\ i).",
                "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
                "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
                "THEOREM 4.",
                "We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
                "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
                "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
                "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
                "The speed up comes from the way we solve iKnapsack−i ( , j).",
                "Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
                "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
                "Currently, the algorithm uses heap, which has logarithmic update time.",
                "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
                "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
                "CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good multi-unit auction problem, using marginal decreasing piecewise constant bidding language.",
                "Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0.",
                "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
                "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
                "REFERENCES [1] L M Ausubel and P R Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
                "Linear programming and Vickrey auctions.",
                "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 2002.",
                "Forthcoming. [4] K Chatterjee and W Samuelson.",
                "Bargaining under incomplete information.",
                "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
                "Multipart pricing of public goods.",
                "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 2002.",
                "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
                "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
                "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
                "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
                "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
                "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
                "Computational complexity of approximation algorithms for combinatorial problems.",
                "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
                "Incentives in teams.",
                "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
                "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
                "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [14] V Krishna and M Perry.",
                "Efficient mechanism design.",
                "Technical report, Pennsylvania State University, 1998.",
                "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
                "Truth revelation in approximately efficient combinatorial auctions.",
                "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
                "Optimal auction design.",
                "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
                "Computationally feasible VCG mechanisms.",
                "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
                "Almost dominant strategy implementation.",
                "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
                "Counterspeculation, auctions, and competitive sealed tenders.",
                "Journal of Finance, 16:8-37, 1961. 175"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Consideramos tanto una variación de subasta inversa como una variación de \"subasta directa\", y proponemos un lenguaje de licitación compacto y expresivo que permita curvas constantes por partes de la toma marginal.",
                "En la \"subasta hacia adelante\", consideramos un solo vendedor con unidades M de un bien y compradores de N, cada uno con una función de valoración por partes por partes marginales.",
                "El mecanismo Vickrey-Clarke-Groves (VCG) tiene una serie de propiedades económicas interesantes en este entorno, incluida la a prueba de estrategias, de modo que la oferta veraz es una estrategia dominante para los compradores en la \"subasta directa\" y los vendedores en la subasta inversa, y eficiencia asignativa, de modo que el resultado maximice el excedente total en el sistema.",
                "Además, relajamos ligeramente el requisito de recuperación marginal para permitir: un postor en la \"subasta directa\" para establecer una cantidad mínima de compra, de modo que tiene un valor cero para cantidades menores que esa cantidad;Un vendedor en la subasta inversa para establecer una restricción de capacidad, de modo que tiene un costo efectivamente infinito para suministrar cantidades superiores a una cantidad particular.",
                "Oferta de subasta inversa 7 5 10 20 25 10 8 Precio de la cantidad 7 5 10 20 25 10 8 Precio de la cantidad \"Subasta a plazo\" Oferta Figura 1: Boleras constantes de decisión marginal, por partes.",
                "En la oferta de \"subasta directa\", el postor ofrece $ 10 por unidad por cantidad en el rango [5, 10), $ 8 por unidad en el rango [10, 20) y $ 7 en el rango [20, 25].",
                "En detalle, en una \"subasta directa\", una oferta del comprador puedo ser escrita como una lista de tuplas (de rango de cantidad, precio de unidades), ((U1 I, P1 I), (U2 I, P2 I),.., (umi - 1 i, pmi - 1 i)), con un umi i umi i superior en la cantidad.",
                "En la \"Subasta de avance\", hay un vendedor con unidades M para vender.",
                "En esta \"subasta directa\", el mecanismo de VCG es a prueba de estrategias para los compradores, lo que significa que la licitación veraz es una estrategia dominante, es decir, la utilidad maximizando las ofertas de otros compradores.",
                "Por el contrario, para que la \"subasta hacia adelante\" sea simétrica con la subasta inversa, necesitaríamos un vendedor con un costo marginal constante (y alto) para vender cualquier cosa menos que las primeras unidades M, y luego un costo marginal bajo (o cero).",
                "Describimos el resultado de la dirección de \"subasta directa\", pero es una observación bastante general."
            ],
            "translated_text": "",
            "candidates": [
                "subasta hacia adelante",
                "subasta directa",
                "subasta hacia adelante",
                "subasta hacia adelante",
                "subasta hacia adelante",
                "subasta directa",
                "subasta hacia adelante",
                "subasta directa",
                "subasta hacia adelante",
                "Subasta a plazo",
                "subasta hacia adelante",
                "subasta directa",
                "subasta hacia adelante",
                "subasta directa",
                "subasta hacia adelante",
                "Subasta de avance",
                "subasta hacia adelante",
                "subasta directa",
                "subasta hacia adelante",
                "subasta hacia adelante",
                "subasta hacia adelante",
                "subasta directa"
            ],
            "error": []
        },
        "reverse auction": {
            "translated_key": "subasta inversa",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem.",
                "The bidding language in our auctions allows marginal-decreasing piecewise constant curves.",
                "First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
                "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
                "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
                "General Terms Algorithms, Economics. 1.",
                "INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good multi-unit auction problem.",
                "Our scheme is both approximately efficient and approximately strategyproof.",
                "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
                "We consider both a <br>reverse auction</br> variation and a forward auction variation, and propose a compact and expressive bidding language that allows marginal-decreasing piecewise constant curves.",
                "In the <br>reverse auction</br>, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
                "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
                "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
                "In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
                "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
                "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
                "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
                "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the <br>reverse auction</br>, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
                "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
                "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
                "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
                "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
                "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
                "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
                "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
                "Specifically, in the <br>reverse auction</br>, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
                "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
                "This upper-bound tends to 1 as the number of sellers increases.",
                "The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation.",
                "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
                "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
                "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
                "We also prove our claims about ε-strategyproofness.",
                "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
                "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
                "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
                "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
                "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases.",
                "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
                "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
                "For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem.",
                "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
                "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
                "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
                "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
                "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
                "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
                "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
                "The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
                "Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
                "APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions.",
                "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
                "We also discuss the economic properties of VCG mechanisms in these forward and <br>reverse auction</br> multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language.",
                "This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
                "See Figure 1 for an example.",
                "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the <br>reverse auction</br> to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
                "<br>reverse auction</br> Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
                "In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
                "Her valuation is zero for quantities outside the range [10, 25].",
                "In the <br>reverse auction</br> bid, the cost of the seller is ∞ outside the range [10, 25].",
                "In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
                "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
                "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
                "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
                "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
                "A sellers bid is similarly defined in the <br>reverse auction</br>.",
                "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
                "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
                "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism.",
                "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
                "We will use the term payoff interchangeably for utility.",
                "In the forward auction, there is a seller with M units to sell.",
                "We assume that this seller has no intrinsic value for the items.",
                "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
                "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
                "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
                "The VCG mechanism is defined as follows: 1.",
                "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
                "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
                "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
                "In this forward auction, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
                "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
                "In the <br>reverse auction</br>, there is a buyer with M units to buy, and n suppliers.",
                "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
                "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the <br>reverse auction</br> is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
                "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
                "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
                "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
                "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
                "The total payment is collected from the buyer.",
                "Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
                "Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
                "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
                "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
                "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
                "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
                "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
                "In words, there would be no efficient trade without the seller.",
                "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
                "Concretely, we have this participation problem in the <br>reverse auction</br> when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
                "In other words, there must be no pivotal sellers.",
                "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the <br>reverse auction</br> symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
                "The payments to the sellers would never exceed the buyers value in this case.",
                "Conversely, to make the forward auction symmetric with the <br>reverse auction</br>, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
                "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
                "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
                "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
                "In the second case, the payoffs are π = (−10, 30, 50, 30).",
                "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
                "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
                "We describe the result for the forward auction direction, but it is quite a general observation.",
                "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
                "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
                "We provide such an approximation scheme for our setting later in the paper.",
                "Let ˆx denote the allocation implemented by the approximation scheme.",
                "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
                "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
                "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
                "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
                "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium.",
                "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
                "We can now analyze the best possible gain from manipulation to an agent in our setting.",
                "We first assume that the other agents are truthful, and then relax this.",
                "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
                "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
                "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I).",
                "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
                "The analysis is very similar when the other agents are not truthful.",
                "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
                "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
                "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
                "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
                "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
                "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
                "We describe our results for the <br>reverse auction</br> variation, but the formulation is completely symmetric for the forward-auction.",
                "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
                "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
                "In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS).",
                "One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions.",
                "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
                "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
                "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a <br>reverse auction</br>, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
                "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
                "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
                "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
                "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
                "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
                "The goal is to procure at least M units of the good at minimum possible cost.",
                "The problem has some flavor of the continuous knapsack problem.",
                "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
                "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
                "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
                "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
                "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
                "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
                "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
                "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
                "Otherwise, we say that xi is midrange.",
                "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
                "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
                "See Figure 2 for an example.",
                "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
                "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
                "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
                "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
                "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
                "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
                "Element x is assumed to have already contributed uj units.",
                "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
                "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
                "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
                "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
                "In any other group, we can choose at most one anchor.",
                "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
                "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
                "R is the number of units that remain to be acquired.",
                "S is the set of tuples accepted in the current tentative 170 solution.",
                "Best is the best solution found so far.",
                "Variable Skip is only used in the proof of correctness.",
                "Algorithm Greedy( , j) 1.",
                "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
                "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
                "Scan the tuples in U in the sorted order.",
                "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
                "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack.",
                "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
                "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
                "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
                "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
                "One exception to this rule is the tuple t .",
                "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
                "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
                "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
                "LEMMA 2.",
                "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
                "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
                "Consider the set Skip at the termination of Greedy( , j).",
                "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
                "In the first case, let St be the tentative solution S at the time t was added to Skip.",
                "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
                "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
                "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
                "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
                "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
                "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
                "Suppose our approximation algorithm returns the value V ( , j) for this modified instance.",
                "Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
                "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
                "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
                "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
                "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
                "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
                "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
                "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
                "Furthermore, define x = xj − uj .",
                "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
                "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
                "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
                "We have our first polynomial approximation algorithm.",
                "THEOREM 2.",
                "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
                "PROOF.",
                "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
                "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
                "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
                "The high level idea is fairly standard, but the details require technical care.",
                "We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table.",
                "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
                "In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
                "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
                "Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
                "As convention, agent i will index the row, and cost r will index the column.",
                "This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost.",
                "However, we can convert it into a FPTAS by scaling the cost dimension.",
                "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
                "Let ε denote the desired approximation factor.",
                "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
                "However, the computed solution might not be an optimal solution for the original problem.",
                "We show that the error introduced is within a factor of ε of the optimal solution.",
                "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
                "LEMMA 3.",
                "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
                "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
                "PROOF.",
                "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
                "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
                "Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
                "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
                "In particular, we consider the entries that provide at least M − uj+1 units.",
                "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
                "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
                "LEMMA 4.",
                "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
                "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
                "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
                "Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
                "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
                "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
                "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
                "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
                "Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units.",
                "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
                "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
                "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
                "For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
                "Thus, we have the following result.",
                "THEOREM 3.",
                "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
                "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
                "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
                "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
                "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
                "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
                "Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once.",
                "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
                "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
                "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
                "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
                "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
                "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
                "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
                "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
                "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
                "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
                "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
                "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
                "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
                "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
                "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
                "These first i agents are a different subset of agents in the forward and the backward tables.",
                "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
                "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
                "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
                "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
                "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
                "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
                "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
                "PROOF.",
                "From earlier, we define cost(A−i ) = C(I \\ i).",
                "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
                "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
                "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
                "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
                "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
                "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
                "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
                "From the preceding inequalities, we have yj l ≤ xj l .",
                "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
                "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
                "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
                "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
                "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
                "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
                "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
                "Let (g, h) be the current pair.",
                "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
                "The feasible pairs found during the walk are used to compute Eq. 6.",
                "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
                "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
                "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
                "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
                "Begin and End represent the start and end pointers to the feasible set.",
                "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
                "We maintain the feasible set as a min heap, where the key is modified cost.",
                "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
                "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
                "So, the main complexity of the computation lies in heap updates.",
                "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
                "First, using the 2 approximation algorithm, we compute an upper bound on C(I).",
                "We use this bound to scale down the tuple costs.",
                "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
                "The forward tables are used to compute C(I).",
                "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
                "Among all the locally optimal solutions we choose one with the minimum total cost.",
                "The most expensive step in the algorithm is computation of C(I \\ i).",
                "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
                "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
                "THEOREM 4.",
                "We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
                "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
                "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
                "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
                "The speed up comes from the way we solve iKnapsack−i ( , j).",
                "Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
                "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
                "Currently, the algorithm uses heap, which has logarithmic update time.",
                "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
                "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
                "CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good multi-unit auction problem, using marginal decreasing piecewise constant bidding language.",
                "Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0.",
                "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
                "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
                "REFERENCES [1] L M Ausubel and P R Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
                "Linear programming and Vickrey auctions.",
                "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 2002.",
                "Forthcoming. [4] K Chatterjee and W Samuelson.",
                "Bargaining under incomplete information.",
                "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
                "Multipart pricing of public goods.",
                "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 2002.",
                "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
                "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
                "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
                "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
                "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
                "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
                "Computational complexity of approximation algorithms for combinatorial problems.",
                "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
                "Incentives in teams.",
                "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
                "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
                "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [14] V Krishna and M Perry.",
                "Efficient mechanism design.",
                "Technical report, Pennsylvania State University, 1998.",
                "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
                "Truth revelation in approximately efficient combinatorial auctions.",
                "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
                "Optimal auction design.",
                "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
                "Computationally feasible VCG mechanisms.",
                "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
                "Almost dominant strategy implementation.",
                "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
                "Counterspeculation, auctions, and competitive sealed tenders.",
                "Journal of Finance, 16:8-37, 1961. 175"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Consideramos tanto una variación de \"subasta inversa\" como una variación de subasta directa, y proponemos un lenguaje de licitación compacto y expresivo que permite curvas constantes por partes de la toma marginal.",
                "En la \"Subasta inversa\", consideramos un solo comprador con una demanda de unidades M de un bien y a los N-proveedores, cada uno con una función de costo por partes de la pieza por partes marginales.",
                "El mecanismo Vickrey-Clarke-Groves (VCG) tiene una serie de propiedades económicas interesantes en este entorno, incluida la a prueba de estrategias, de modo que la licitación veraz es una estrategia dominante para los compradores en la subasta a plazo y los vendedores en la \"subasta inversa\" y la eficiencia de asignación., de modo que el resultado maximice el excedente total en el sistema.",
                "Específicamente, en la \"subasta inversa\", suponga que C (i) es el costo mínimo para adquirir unidades M con todos los vendedores I, y C (i \\ i) es el costo mínimo sin el vendedor i.",
                "También discutimos las propiedades económicas de los mecanismos de VCG en estos entornos de múltiples unidades hacia adelante y de \"subasta inversa\".2.1 Ofertas por partes de decisión marginal Proporcionamos un lenguaje de licitación por partes constantes y marginales.",
                "Además, relajamos ligeramente el requisito de decisión marginal para permitir: un postor en la subasta directa para establecer una cantidad mínima de compra, de modo que tiene un valor cero para cantidades menores que esa cantidad;Una vendedora en la \"subasta inversa\" para establecer una restricción de capacidad, de modo que tiene un costo efectivamente infinito para suministrar cantidades superiores a una cantidad particular.",
                "\"Subasta inversa\" oferta 7 5 10 20 25 10 8 Precio de cantidad 7 5 10 20 25 10 8 PRECIO DE CANTIDAD SUBASTA PARA LA SUBASTA ATTRANJE Figura 1: Ofertas constantes de decisión marginal, por partes.",
                "En la oferta de \"subasta inversa\", el costo del vendedor es ∞ fuera del rango [10, 25].",
                "Una oferta de vendedores se define de manera similar en la \"subasta inversa\".",
                "En la \"subasta inversa\", hay un comprador con unidades M para comprar, y n proveedores.",
                "Para simplificar el problema de diseño del mecanismo, suponemos que el comprador anunciará con sinceramente este valor al mecanismo.4 El ganador3 De hecho, el mecanismo de VCG maximiza el pago esperado al vendedor en todos los mecanismos eficientes, incluso permitiendo implementaciones bayesianas [14 14]4 Sin esta suposición, el resultado de imposibilidad de Myerson-Satterthwaite [17] ya implicaría que no deberíamos esperar un mecanismo comercial eficiente en este entorno.El problema de determinación en la \"subasta inversa\" es determinar la asignación, x ∗, que minimiza el costo para el comprador o pierde el comercio si el costo mínimo es mayor que el valor, v.",
                "Concretamente, tenemos este problema de participación en la \"Sub(0, V - c (i \\ i))] Como se indicó anteriormente, primero tenga en cuenta que requerimos v> c (i \\ i) para todos los vendedores i.",
                "Dado esto, es necesario y suficiente que: v - c (i) ≥ i (c (i \\ i) - c (i)) (1) 5 para hacer que la \"subasta inversa\" sea simétrica con la dirección hacia adelante, nosotrosNecesitaría un comprador con un valor marginal constante para comprar las primeras unidades M y un valor cero para unidades adicionales.",
                "Por el contrario, para que la subasta de avance sea simétrica con la \"subasta inversa\", necesitaríamos un vendedor con un costo marginal constante (y alto) para vender cualquier cosa menos que las primeras unidades M, y luego un costo marginal bajo (o cero).",
                "Describimos nuestros resultados para la variación de \"subasta inversa\", pero la formulación es completamente simétrica para la subasta de reenvío.",
                "El objetivo es determinar un subconjunto de elementos de valor máximo con el tamaño total en la mayoría de M. Dado que queremos centrarnos en una \"subasta inversa\", el problema equivalente de mochila será elegir un conjunto de elementos con valor mínimo (es decir, costo)cuyo tamaño excede M. El problema de interés generalizado de la mochila para nosotros se puede definir de la siguiente manera: mochila generalizada: instancia: un objetivo m y un conjunto de l listas, donde la lista de ésima cuenta tiene la forma bi = (u1 i, p1 i),..., (umi - 1 i, pmi - 1 i), (umi i (i), ∞), donde uj i están aumentando con j y pj i están disminuyendo con j, y uj i, pj i, m son enteros positivos."
            ],
            "translated_text": "",
            "candidates": [
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "Subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "Subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa",
                "subasta inversa"
            ],
            "error": []
        },
        "equilibrium": {
            "translated_key": "equilibrio",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem.",
                "The bidding language in our auctions allows marginal-decreasing piecewise constant curves.",
                "First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
                "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
                "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
                "General Terms Algorithms, Economics. 1.",
                "INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good multi-unit auction problem.",
                "Our scheme is both approximately efficient and approximately strategyproof.",
                "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
                "We consider both a reverse auction variation and a forward auction variation, and propose a compact and expressive bidding language that allows marginal-decreasing piecewise constant curves.",
                "In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
                "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
                "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
                "In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
                "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
                "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
                "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
                "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
                "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
                "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
                "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
                "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
                "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
                "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
                "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
                "Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
                "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
                "This upper-bound tends to 1 as the number of sellers increases.",
                "The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation.",
                "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
                "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
                "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
                "We also prove our claims about ε-strategyproofness.",
                "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
                "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
                "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
                "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
                "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases.",
                "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
                "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
                "For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem.",
                "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
                "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
                "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
                "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
                "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
                "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
                "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
                "The focus of this paper is also different: it investigates the <br>equilibrium</br> prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
                "Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
                "APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions.",
                "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
                "We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language.",
                "This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
                "See Figure 1 for an example.",
                "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
                "Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
                "In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
                "Her valuation is zero for quantities outside the range [10, 25].",
                "In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25].",
                "In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
                "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
                "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
                "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
                "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
                "A sellers bid is similarly defined in the reverse auction.",
                "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
                "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
                "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism.",
                "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
                "We will use the term payoff interchangeably for utility.",
                "In the forward auction, there is a seller with M units to sell.",
                "We assume that this seller has no intrinsic value for the items.",
                "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
                "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
                "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
                "The VCG mechanism is defined as follows: 1.",
                "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
                "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
                "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
                "In this forward auction, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
                "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in <br>equilibrium</br>; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
                "In the reverse auction, there is a buyer with M units to buy, and n suppliers.",
                "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
                "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
                "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
                "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
                "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
                "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
                "The total payment is collected from the buyer.",
                "Again, in <br>equilibrium</br> each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
                "Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
                "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
                "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
                "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
                "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
                "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
                "In words, there would be no efficient trade without the seller.",
                "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
                "Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in <br>equilibrium</br>, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
                "In other words, there must be no pivotal sellers.",
                "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
                "The payments to the sellers would never exceed the buyers value in this case.",
                "Conversely, to make the forward auction symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
                "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
                "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
                "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
                "In the second case, the payoffs are π = (−10, 30, 50, 30).",
                "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
                "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
                "We describe the result for the forward auction direction, but it is quite a general observation.",
                "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
                "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
                "We provide such an approximation scheme for our setting later in the paper.",
                "Let ˆx denote the allocation implemented by the approximation scheme.",
                "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
                "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
                "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
                "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
                "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive <br>equilibrium</br>.",
                "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
                "We can now analyze the best possible gain from manipulation to an agent in our setting.",
                "We first assume that the other agents are truthful, and then relax this.",
                "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
                "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
                "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I).",
                "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
                "The analysis is very similar when the other agents are not truthful.",
                "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
                "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
                "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
                "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
                "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
                "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
                "We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction.",
                "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
                "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
                "In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS).",
                "One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions.",
                "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
                "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
                "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
                "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
                "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
                "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
                "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
                "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
                "The goal is to procure at least M units of the good at minimum possible cost.",
                "The problem has some flavor of the continuous knapsack problem.",
                "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
                "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
                "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
                "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
                "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
                "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
                "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
                "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
                "Otherwise, we say that xi is midrange.",
                "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
                "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
                "See Figure 2 for an example.",
                "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
                "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
                "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
                "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
                "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
                "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
                "Element x is assumed to have already contributed uj units.",
                "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
                "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
                "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
                "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
                "In any other group, we can choose at most one anchor.",
                "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
                "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
                "R is the number of units that remain to be acquired.",
                "S is the set of tuples accepted in the current tentative 170 solution.",
                "Best is the best solution found so far.",
                "Variable Skip is only used in the proof of correctness.",
                "Algorithm Greedy( , j) 1.",
                "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
                "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
                "Scan the tuples in U in the sorted order.",
                "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
                "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack.",
                "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
                "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
                "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
                "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
                "One exception to this rule is the tuple t .",
                "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
                "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
                "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
                "LEMMA 2.",
                "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
                "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
                "Consider the set Skip at the termination of Greedy( , j).",
                "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
                "In the first case, let St be the tentative solution S at the time t was added to Skip.",
                "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
                "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
                "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
                "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
                "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
                "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
                "Suppose our approximation algorithm returns the value V ( , j) for this modified instance.",
                "Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
                "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
                "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
                "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
                "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
                "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
                "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
                "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
                "Furthermore, define x = xj − uj .",
                "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
                "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
                "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
                "We have our first polynomial approximation algorithm.",
                "THEOREM 2.",
                "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
                "PROOF.",
                "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
                "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
                "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
                "The high level idea is fairly standard, but the details require technical care.",
                "We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table.",
                "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
                "In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
                "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
                "Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
                "As convention, agent i will index the row, and cost r will index the column.",
                "This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost.",
                "However, we can convert it into a FPTAS by scaling the cost dimension.",
                "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
                "Let ε denote the desired approximation factor.",
                "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
                "However, the computed solution might not be an optimal solution for the original problem.",
                "We show that the error introduced is within a factor of ε of the optimal solution.",
                "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
                "LEMMA 3.",
                "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
                "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
                "PROOF.",
                "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
                "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
                "Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
                "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
                "In particular, we consider the entries that provide at least M − uj+1 units.",
                "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
                "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
                "LEMMA 4.",
                "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
                "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
                "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
                "Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
                "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
                "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
                "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
                "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
                "Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units.",
                "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
                "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
                "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
                "For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
                "Thus, we have the following result.",
                "THEOREM 3.",
                "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
                "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
                "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
                "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
                "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
                "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
                "Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once.",
                "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
                "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
                "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
                "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
                "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
                "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
                "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
                "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
                "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
                "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
                "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
                "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
                "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
                "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
                "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
                "These first i agents are a different subset of agents in the forward and the backward tables.",
                "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
                "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
                "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
                "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
                "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
                "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
                "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
                "PROOF.",
                "From earlier, we define cost(A−i ) = C(I \\ i).",
                "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
                "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
                "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
                "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
                "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
                "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
                "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
                "From the preceding inequalities, we have yj l ≤ xj l .",
                "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
                "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
                "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
                "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
                "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
                "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
                "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
                "Let (g, h) be the current pair.",
                "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
                "The feasible pairs found during the walk are used to compute Eq. 6.",
                "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
                "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
                "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
                "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
                "Begin and End represent the start and end pointers to the feasible set.",
                "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
                "We maintain the feasible set as a min heap, where the key is modified cost.",
                "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
                "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
                "So, the main complexity of the computation lies in heap updates.",
                "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
                "First, using the 2 approximation algorithm, we compute an upper bound on C(I).",
                "We use this bound to scale down the tuple costs.",
                "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
                "The forward tables are used to compute C(I).",
                "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
                "Among all the locally optimal solutions we choose one with the minimum total cost.",
                "The most expensive step in the algorithm is computation of C(I \\ i).",
                "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
                "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
                "THEOREM 4.",
                "We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
                "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
                "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
                "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
                "The speed up comes from the way we solve iKnapsack−i ( , j).",
                "Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
                "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
                "Currently, the algorithm uses heap, which has logarithmic update time.",
                "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
                "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
                "CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good multi-unit auction problem, using marginal decreasing piecewise constant bidding language.",
                "Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0.",
                "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
                "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
                "REFERENCES [1] L M Ausubel and P R Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
                "Linear programming and Vickrey auctions.",
                "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 2002.",
                "Forthcoming. [4] K Chatterjee and W Samuelson.",
                "Bargaining under incomplete information.",
                "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
                "Multipart pricing of public goods.",
                "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 2002.",
                "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
                "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
                "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
                "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
                "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
                "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
                "Computational complexity of approximation algorithms for combinatorial problems.",
                "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
                "Incentives in teams.",
                "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
                "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
                "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [14] V Krishna and M Perry.",
                "Efficient mechanism design.",
                "Technical report, Pennsylvania State University, 1998.",
                "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
                "Truth revelation in approximately efficient combinatorial auctions.",
                "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
                "Optimal auction design.",
                "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
                "Computationally feasible VCG mechanisms.",
                "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
                "Almost dominant strategy implementation.",
                "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
                "Counterspeculation, auctions, and competitive sealed tenders.",
                "Journal of Finance, 16:8-37, 1961. 175"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "El enfoque de este documento también es diferente: investiga los precios de \"equilibrio\" utilizando las curvas de demanda y oferta, mientras que nuestro enfoque está en el diseño eficiente del mecanismo.",
                "Además, el mecanismo VCG es asignalmente eficiente, y los pagos de cada comprador siempre son positivos.3 Además, cada comprador paga menos de su valor y recibe el pago V (i) -v (i \\ i) en \"equilibrio\";Este es precisamente el valor marginal que el comprador I contribuye a la eficiencia económica del sistema.",
                "Nuevamente, en \"equilibrio\" de cada vendedor de pago es exactamente el valor marginal que el vendedor contribuye a la eficiencia económica del sistema;En el caso simple de que v ≥ c (i \\ i) para todos los vendedores I, esto es precisamente c (i \\ i) - c (i).",
                "Concretamente, tenemos este problema de participación en la subasta inversa cuando la recompensa total a los vendedores, en \"equilibrio\", excede el pago total de la asignación eficiente: v - c (i) ≥ i [v - c (i) - max(0, V - c (i \\ i))] Como se indicó anteriormente, primero tenga en cuenta que requerimos v> c (i \\ i) para todos los vendedores i.",
                "Sin embargo, frente a un algoritmo de asignación aproximada, el agente puede tratar de mejorar su recompensa al anunciar un valor que corrige la aproximación, y hace que el algoritmo de aproximación implementa la asignación que maximiza exactamente el valor total informado de los otros agentes junto con suValor real propio [18].6 Esta condición es implícita por los agentes son requisitos de sustitutos [3], que ha recibido cierta atención en la literatura de subastas combinatorias porque caracteriza el caso en el que los pagos de VCG pueden ser respaldados en un \"equilibrio\" competitivo."
            ],
            "translated_text": "",
            "candidates": [
                "equilibrio",
                "equilibrio",
                "equilibrio",
                "equilibrio",
                "equilibrio",
                "equilibrio",
                "equilibrio",
                "equilibrio",
                "equilibrio",
                "equilibrio"
            ],
            "error": []
        },
        "marginal-decreasing piecewise constant curve": {
            "translated_key": "curva constante marginalmente decreciente por tramos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem.",
                "The bidding language in our auctions allows <br>marginal-decreasing piecewise constant curve</br>s.",
                "First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
                "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
                "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
                "General Terms Algorithms, Economics. 1.",
                "INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good multi-unit auction problem.",
                "Our scheme is both approximately efficient and approximately strategyproof.",
                "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
                "We consider both a reverse auction variation and a forward auction variation, and propose a compact and expressive bidding language that allows <br>marginal-decreasing piecewise constant curve</br>s.",
                "In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
                "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
                "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
                "In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
                "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
                "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
                "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
                "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
                "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
                "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
                "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
                "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
                "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
                "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
                "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
                "Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
                "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
                "This upper-bound tends to 1 as the number of sellers increases.",
                "The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation.",
                "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
                "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
                "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
                "We also prove our claims about ε-strategyproofness.",
                "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
                "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
                "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
                "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
                "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases.",
                "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
                "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
                "For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem.",
                "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
                "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
                "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
                "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
                "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
                "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
                "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
                "The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
                "Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
                "APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions.",
                "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
                "We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language.",
                "This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
                "See Figure 1 for an example.",
                "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
                "Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
                "In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
                "Her valuation is zero for quantities outside the range [10, 25].",
                "In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25].",
                "In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
                "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
                "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
                "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
                "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
                "A sellers bid is similarly defined in the reverse auction.",
                "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
                "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
                "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism.",
                "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
                "We will use the term payoff interchangeably for utility.",
                "In the forward auction, there is a seller with M units to sell.",
                "We assume that this seller has no intrinsic value for the items.",
                "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
                "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
                "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
                "The VCG mechanism is defined as follows: 1.",
                "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
                "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
                "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
                "In this forward auction, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
                "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
                "In the reverse auction, there is a buyer with M units to buy, and n suppliers.",
                "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
                "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
                "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
                "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
                "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
                "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
                "The total payment is collected from the buyer.",
                "Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
                "Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
                "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
                "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
                "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
                "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
                "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
                "In words, there would be no efficient trade without the seller.",
                "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
                "Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
                "In other words, there must be no pivotal sellers.",
                "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
                "The payments to the sellers would never exceed the buyers value in this case.",
                "Conversely, to make the forward auction symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
                "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
                "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
                "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
                "In the second case, the payoffs are π = (−10, 30, 50, 30).",
                "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
                "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
                "We describe the result for the forward auction direction, but it is quite a general observation.",
                "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
                "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
                "We provide such an approximation scheme for our setting later in the paper.",
                "Let ˆx denote the allocation implemented by the approximation scheme.",
                "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
                "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
                "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
                "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
                "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium.",
                "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
                "We can now analyze the best possible gain from manipulation to an agent in our setting.",
                "We first assume that the other agents are truthful, and then relax this.",
                "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
                "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
                "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I).",
                "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
                "The analysis is very similar when the other agents are not truthful.",
                "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
                "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
                "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
                "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
                "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
                "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
                "We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction.",
                "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
                "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
                "In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS).",
                "One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions.",
                "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
                "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
                "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
                "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
                "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
                "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
                "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
                "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
                "The goal is to procure at least M units of the good at minimum possible cost.",
                "The problem has some flavor of the continuous knapsack problem.",
                "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
                "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
                "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
                "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
                "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
                "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
                "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
                "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
                "Otherwise, we say that xi is midrange.",
                "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
                "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
                "See Figure 2 for an example.",
                "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
                "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
                "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
                "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
                "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
                "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
                "Element x is assumed to have already contributed uj units.",
                "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
                "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
                "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
                "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
                "In any other group, we can choose at most one anchor.",
                "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
                "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
                "R is the number of units that remain to be acquired.",
                "S is the set of tuples accepted in the current tentative 170 solution.",
                "Best is the best solution found so far.",
                "Variable Skip is only used in the proof of correctness.",
                "Algorithm Greedy( , j) 1.",
                "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
                "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
                "Scan the tuples in U in the sorted order.",
                "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
                "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack.",
                "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
                "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
                "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
                "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
                "One exception to this rule is the tuple t .",
                "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
                "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
                "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
                "LEMMA 2.",
                "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
                "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
                "Consider the set Skip at the termination of Greedy( , j).",
                "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
                "In the first case, let St be the tentative solution S at the time t was added to Skip.",
                "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
                "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
                "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
                "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
                "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
                "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
                "Suppose our approximation algorithm returns the value V ( , j) for this modified instance.",
                "Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
                "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
                "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
                "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
                "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
                "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
                "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
                "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
                "Furthermore, define x = xj − uj .",
                "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
                "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
                "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
                "We have our first polynomial approximation algorithm.",
                "THEOREM 2.",
                "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
                "PROOF.",
                "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
                "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
                "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
                "The high level idea is fairly standard, but the details require technical care.",
                "We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table.",
                "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
                "In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
                "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
                "Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
                "As convention, agent i will index the row, and cost r will index the column.",
                "This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost.",
                "However, we can convert it into a FPTAS by scaling the cost dimension.",
                "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
                "Let ε denote the desired approximation factor.",
                "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
                "However, the computed solution might not be an optimal solution for the original problem.",
                "We show that the error introduced is within a factor of ε of the optimal solution.",
                "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
                "LEMMA 3.",
                "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
                "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
                "PROOF.",
                "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
                "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
                "Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
                "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
                "In particular, we consider the entries that provide at least M − uj+1 units.",
                "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
                "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
                "LEMMA 4.",
                "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
                "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
                "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
                "Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
                "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
                "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
                "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
                "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
                "Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units.",
                "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
                "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
                "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
                "For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
                "Thus, we have the following result.",
                "THEOREM 3.",
                "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
                "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
                "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
                "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
                "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
                "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
                "Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once.",
                "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
                "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
                "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
                "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
                "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
                "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
                "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
                "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
                "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
                "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
                "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
                "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
                "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
                "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
                "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
                "These first i agents are a different subset of agents in the forward and the backward tables.",
                "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
                "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
                "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
                "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
                "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
                "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
                "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
                "PROOF.",
                "From earlier, we define cost(A−i ) = C(I \\ i).",
                "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
                "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
                "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
                "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
                "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
                "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
                "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
                "From the preceding inequalities, we have yj l ≤ xj l .",
                "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
                "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
                "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
                "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
                "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
                "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
                "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
                "Let (g, h) be the current pair.",
                "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
                "The feasible pairs found during the walk are used to compute Eq. 6.",
                "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
                "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
                "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
                "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
                "Begin and End represent the start and end pointers to the feasible set.",
                "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
                "We maintain the feasible set as a min heap, where the key is modified cost.",
                "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
                "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
                "So, the main complexity of the computation lies in heap updates.",
                "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
                "First, using the 2 approximation algorithm, we compute an upper bound on C(I).",
                "We use this bound to scale down the tuple costs.",
                "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
                "The forward tables are used to compute C(I).",
                "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
                "Among all the locally optimal solutions we choose one with the minimum total cost.",
                "The most expensive step in the algorithm is computation of C(I \\ i).",
                "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
                "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
                "THEOREM 4.",
                "We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
                "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
                "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
                "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
                "The speed up comes from the way we solve iKnapsack−i ( , j).",
                "Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
                "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
                "Currently, the algorithm uses heap, which has logarithmic update time.",
                "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
                "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
                "CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good multi-unit auction problem, using marginal decreasing piecewise constant bidding language.",
                "Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0.",
                "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
                "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
                "REFERENCES [1] L M Ausubel and P R Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
                "Linear programming and Vickrey auctions.",
                "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 2002.",
                "Forthcoming. [4] K Chatterjee and W Samuelson.",
                "Bargaining under incomplete information.",
                "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
                "Multipart pricing of public goods.",
                "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 2002.",
                "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
                "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
                "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
                "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
                "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
                "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
                "Computational complexity of approximation algorithms for combinatorial problems.",
                "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
                "Incentives in teams.",
                "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
                "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
                "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [14] V Krishna and M Perry.",
                "Efficient mechanism design.",
                "Technical report, Pennsylvania State University, 1998.",
                "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
                "Truth revelation in approximately efficient combinatorial auctions.",
                "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
                "Optimal auction design.",
                "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
                "Computationally feasible VCG mechanisms.",
                "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
                "Almost dominant strategy implementation.",
                "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
                "Counterspeculation, auctions, and competitive sealed tenders.",
                "Journal of Finance, 16:8-37, 1961. 175"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "El lenguaje de licitación en nuestras subastas permite la \"curva constante por partes de decisión marginal\" s.",
                "Consideramos tanto una variación de una subasta inversa como una variación de subasta directa, y proponemos un lenguaje de licitación compacto y expresivo que permite la \"curva constante por partes de la toma de partes marginal\"."
            ],
            "translated_text": "",
            "candidates": [
                "curva constante por partes marginal que se agota",
                "curva constante por partes de decisión marginal",
                "curva constante por partes marginal que se agota",
                "curva constante por partes de la toma de partes marginal"
            ],
            "error": []
        },
        "bidding language": {
            "translated_key": "lenguaje de licitación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem.",
                "The <br>bidding language</br> in our auctions allows marginal-decreasing piecewise constant curves.",
                "First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
                "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
                "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
                "General Terms Algorithms, Economics. 1.",
                "INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good multi-unit auction problem.",
                "Our scheme is both approximately efficient and approximately strategyproof.",
                "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
                "We consider both a reverse auction variation and a forward auction variation, and propose a compact and expressive <br>bidding language</br> that allows marginal-decreasing piecewise constant curves.",
                "In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
                "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
                "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
                "In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
                "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
                "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
                "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
                "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
                "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
                "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
                "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
                "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
                "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
                "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
                "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
                "Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
                "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
                "This upper-bound tends to 1 as the number of sellers increases.",
                "The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation.",
                "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
                "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
                "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
                "We also prove our claims about ε-strategyproofness.",
                "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
                "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
                "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
                "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
                "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or <br>bidding language</br> quickly breaks these special cases.",
                "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor <br>bidding language</br>-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
                "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
                "For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem.",
                "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
                "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
                "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
                "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
                "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
                "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
                "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
                "The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
                "Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
                "APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise <br>bidding language</br> that is used in our forward and reverse auctions.",
                "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
                "We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing <br>bidding language</br>.",
                "This <br>bidding language</br> is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
                "See Figure 1 for an example.",
                "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
                "Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
                "In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
                "Her valuation is zero for quantities outside the range [10, 25].",
                "In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25].",
                "In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
                "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
                "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
                "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
                "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
                "A sellers bid is similarly defined in the reverse auction.",
                "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
                "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
                "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism.",
                "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
                "We will use the term payoff interchangeably for utility.",
                "In the forward auction, there is a seller with M units to sell.",
                "We assume that this seller has no intrinsic value for the items.",
                "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
                "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
                "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
                "The VCG mechanism is defined as follows: 1.",
                "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
                "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
                "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
                "In this forward auction, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
                "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
                "In the reverse auction, there is a buyer with M units to buy, and n suppliers.",
                "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
                "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
                "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
                "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
                "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
                "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
                "The total payment is collected from the buyer.",
                "Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
                "Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
                "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
                "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
                "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
                "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
                "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
                "In words, there would be no efficient trade without the seller.",
                "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
                "Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
                "In other words, there must be no pivotal sellers.",
                "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
                "The payments to the sellers would never exceed the buyers value in this case.",
                "Conversely, to make the forward auction symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
                "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
                "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
                "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
                "In the second case, the payoffs are π = (−10, 30, 50, 30).",
                "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
                "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
                "We describe the result for the forward auction direction, but it is quite a general observation.",
                "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
                "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
                "We provide such an approximation scheme for our setting later in the paper.",
                "Let ˆx denote the allocation implemented by the approximation scheme.",
                "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
                "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
                "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
                "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
                "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium.",
                "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
                "We can now analyze the best possible gain from manipulation to an agent in our setting.",
                "We first assume that the other agents are truthful, and then relax this.",
                "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
                "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
                "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I).",
                "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
                "The analysis is very similar when the other agents are not truthful.",
                "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
                "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
                "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
                "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
                "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
                "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
                "We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction.",
                "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
                "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
                "In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS).",
                "One of the major appeals of our piecewise <br>bidding language</br> is its compact representation of the bidders valuation functions.",
                "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
                "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
                "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
                "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
                "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
                "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
                "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
                "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
                "The goal is to procure at least M units of the good at minimum possible cost.",
                "The problem has some flavor of the continuous knapsack problem.",
                "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
                "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
                "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
                "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
                "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
                "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
                "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
                "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
                "Otherwise, we say that xi is midrange.",
                "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
                "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
                "See Figure 2 for an example.",
                "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
                "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
                "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
                "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
                "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
                "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
                "Element x is assumed to have already contributed uj units.",
                "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
                "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
                "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
                "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
                "In any other group, we can choose at most one anchor.",
                "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
                "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
                "R is the number of units that remain to be acquired.",
                "S is the set of tuples accepted in the current tentative 170 solution.",
                "Best is the best solution found so far.",
                "Variable Skip is only used in the proof of correctness.",
                "Algorithm Greedy( , j) 1.",
                "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
                "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
                "Scan the tuples in U in the sorted order.",
                "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
                "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack.",
                "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
                "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
                "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
                "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
                "One exception to this rule is the tuple t .",
                "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
                "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
                "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
                "LEMMA 2.",
                "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
                "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
                "Consider the set Skip at the termination of Greedy( , j).",
                "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
                "In the first case, let St be the tentative solution S at the time t was added to Skip.",
                "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
                "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
                "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
                "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
                "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
                "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
                "Suppose our approximation algorithm returns the value V ( , j) for this modified instance.",
                "Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
                "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
                "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
                "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
                "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
                "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
                "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
                "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
                "Furthermore, define x = xj − uj .",
                "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
                "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
                "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
                "We have our first polynomial approximation algorithm.",
                "THEOREM 2.",
                "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
                "PROOF.",
                "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
                "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
                "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
                "The high level idea is fairly standard, but the details require technical care.",
                "We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table.",
                "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
                "In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
                "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
                "Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
                "As convention, agent i will index the row, and cost r will index the column.",
                "This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost.",
                "However, we can convert it into a FPTAS by scaling the cost dimension.",
                "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
                "Let ε denote the desired approximation factor.",
                "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
                "However, the computed solution might not be an optimal solution for the original problem.",
                "We show that the error introduced is within a factor of ε of the optimal solution.",
                "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
                "LEMMA 3.",
                "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
                "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
                "PROOF.",
                "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
                "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
                "Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
                "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
                "In particular, we consider the entries that provide at least M − uj+1 units.",
                "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
                "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
                "LEMMA 4.",
                "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
                "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
                "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
                "Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
                "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
                "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
                "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
                "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
                "Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units.",
                "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
                "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
                "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
                "For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
                "Thus, we have the following result.",
                "THEOREM 3.",
                "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
                "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
                "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
                "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
                "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
                "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
                "Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once.",
                "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
                "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
                "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
                "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
                "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
                "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
                "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
                "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
                "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
                "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
                "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
                "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
                "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
                "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
                "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
                "These first i agents are a different subset of agents in the forward and the backward tables.",
                "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
                "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
                "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
                "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
                "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
                "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
                "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
                "PROOF.",
                "From earlier, we define cost(A−i ) = C(I \\ i).",
                "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
                "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
                "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
                "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
                "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
                "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
                "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
                "From the preceding inequalities, we have yj l ≤ xj l .",
                "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
                "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
                "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
                "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
                "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
                "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
                "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
                "Let (g, h) be the current pair.",
                "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
                "The feasible pairs found during the walk are used to compute Eq. 6.",
                "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
                "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
                "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
                "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
                "Begin and End represent the start and end pointers to the feasible set.",
                "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
                "We maintain the feasible set as a min heap, where the key is modified cost.",
                "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
                "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
                "So, the main complexity of the computation lies in heap updates.",
                "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
                "First, using the 2 approximation algorithm, we compute an upper bound on C(I).",
                "We use this bound to scale down the tuple costs.",
                "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
                "The forward tables are used to compute C(I).",
                "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
                "Among all the locally optimal solutions we choose one with the minimum total cost.",
                "The most expensive step in the algorithm is computation of C(I \\ i).",
                "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
                "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
                "THEOREM 4.",
                "We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
                "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
                "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
                "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
                "The speed up comes from the way we solve iKnapsack−i ( , j).",
                "Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
                "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
                "Currently, the algorithm uses heap, which has logarithmic update time.",
                "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
                "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
                "CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good multi-unit auction problem, using marginal decreasing piecewise constant <br>bidding language</br>.",
                "Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0.",
                "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
                "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
                "REFERENCES [1] L M Ausubel and P R Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
                "Linear programming and Vickrey auctions.",
                "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 2002.",
                "Forthcoming. [4] K Chatterjee and W Samuelson.",
                "Bargaining under incomplete information.",
                "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
                "Multipart pricing of public goods.",
                "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 2002.",
                "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
                "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
                "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
                "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
                "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
                "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
                "Computational complexity of approximation algorithms for combinatorial problems.",
                "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
                "Incentives in teams.",
                "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
                "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
                "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [14] V Krishna and M Perry.",
                "Efficient mechanism design.",
                "Technical report, Pennsylvania State University, 1998.",
                "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
                "Truth revelation in approximately efficient combinatorial auctions.",
                "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
                "Optimal auction design.",
                "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
                "Computationally feasible VCG mechanisms.",
                "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
                "Almost dominant strategy implementation.",
                "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
                "Counterspeculation, auctions, and competitive sealed tenders.",
                "Journal of Finance, 16:8-37, 1961. 175"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "El \"lenguaje de licitación\" en nuestras subastas permite curvas constantes por partes de decisión marginal.",
                "Consideramos tanto una variación de subasta inversa como una variación de subasta directa, y proponemos un \"lenguaje de licitación\" compacto y expresivo que permite curvas constantes por partes de la toma marginal.",
                "Aunque se han identificado algunos casos de tiempo polinómico para el CAP [6, 20], la introducción de un expresivo lenguaje exclusivo o \"licitación\" rompe rápidamente estos casos especiales.",
                "Identificamos un problema de asignación no trivial pero aproximado con un \"lenguaje de licitación\" expresivo exclusivo. El tomador de ofertas en nuestro entorno puede aceptar como máximo un momento en la curva de oferta.",
                "Aproximadamente las subastas de VCG a prueba de estrategias En esta sección, primero describimos el \"lenguaje de licitación\" por partes de decreciente marginal que se utiliza en nuestras subastas hacia adelante e inversa.",
                "También discutimos las propiedades económicas de los mecanismos de VCG en estos entornos de unidades múltiples de subasta hacia adelante e inversa.2.1 Ofertas por partes de decreciente marginal Proporcionamos un \"lenguaje de licitación\" por partes constantes y marginales.",
                "Este \"lenguaje de licitación\" es expresivo para una clase natural de valoración y funciones de costos: precios unitarios fijos durante intervalos de cantidades.",
                "Una de las principales apelaciones de nuestro \"lenguaje de licitación\" por partes es su representación compacta de las funciones de valoración de los licitantes.",
                "Conclusiones Presentamos un esquema de aproximación en tiempo polinómico para el problema de subasta de una sola unidad de una sola buena, utilizando una constante \"lenguaje de licitación\" de la constante por partes."
            ],
            "translated_text": "",
            "candidates": [
                "lenguaje de licitación",
                "lenguaje de licitación",
                "lenguaje de licitación",
                "lenguaje de licitación",
                "lenguaje de licitación",
                "licitación",
                "lenguaje de licitación",
                "lenguaje de licitación",
                "lenguaje de licitación",
                "lenguaje de licitación",
                "lenguaje de licitación",
                "lenguaje de licitación",
                "lenguaje de licitación",
                "lenguaje de licitación",
                "lenguaje de licitación",
                "lenguaje de licitación",
                "lenguaje de licitación",
                "lenguaje de licitación"
            ],
            "error": []
        },
        "dynamic programming": {
            "translated_key": "programación dinámica",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem.",
                "The bidding language in our auctions allows marginal-decreasing piecewise constant curves.",
                "First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
                "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
                "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
                "General Terms Algorithms, Economics. 1.",
                "INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good multi-unit auction problem.",
                "Our scheme is both approximately efficient and approximately strategyproof.",
                "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
                "We consider both a reverse auction variation and a forward auction variation, and propose a compact and expressive bidding language that allows marginal-decreasing piecewise constant curves.",
                "In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
                "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
                "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
                "In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
                "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
                "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
                "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
                "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
                "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
                "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
                "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
                "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
                "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
                "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
                "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
                "Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
                "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
                "This upper-bound tends to 1 as the number of sellers increases.",
                "The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation.",
                "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
                "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
                "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
                "We also prove our claims about ε-strategyproofness.",
                "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
                "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
                "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
                "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
                "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases.",
                "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
                "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
                "For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem.",
                "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
                "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
                "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
                "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
                "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
                "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
                "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
                "The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
                "Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
                "APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions.",
                "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
                "We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language.",
                "This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
                "See Figure 1 for an example.",
                "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
                "Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
                "In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
                "Her valuation is zero for quantities outside the range [10, 25].",
                "In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25].",
                "In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
                "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
                "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
                "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
                "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
                "A sellers bid is similarly defined in the reverse auction.",
                "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
                "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
                "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism.",
                "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
                "We will use the term payoff interchangeably for utility.",
                "In the forward auction, there is a seller with M units to sell.",
                "We assume that this seller has no intrinsic value for the items.",
                "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
                "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
                "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
                "The VCG mechanism is defined as follows: 1.",
                "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
                "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
                "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
                "In this forward auction, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
                "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
                "In the reverse auction, there is a buyer with M units to buy, and n suppliers.",
                "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
                "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
                "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
                "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
                "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
                "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
                "The total payment is collected from the buyer.",
                "Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
                "Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
                "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
                "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
                "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
                "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
                "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
                "In words, there would be no efficient trade without the seller.",
                "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
                "Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
                "In other words, there must be no pivotal sellers.",
                "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
                "The payments to the sellers would never exceed the buyers value in this case.",
                "Conversely, to make the forward auction symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
                "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
                "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
                "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
                "In the second case, the payoffs are π = (−10, 30, 50, 30).",
                "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
                "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
                "We describe the result for the forward auction direction, but it is quite a general observation.",
                "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
                "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
                "We provide such an approximation scheme for our setting later in the paper.",
                "Let ˆx denote the allocation implemented by the approximation scheme.",
                "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
                "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
                "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
                "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
                "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium.",
                "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
                "We can now analyze the best possible gain from manipulation to an agent in our setting.",
                "We first assume that the other agents are truthful, and then relax this.",
                "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
                "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
                "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I).",
                "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
                "The analysis is very similar when the other agents are not truthful.",
                "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
                "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
                "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
                "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
                "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
                "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
                "We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction.",
                "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
                "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
                "In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS).",
                "One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions.",
                "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
                "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
                "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
                "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
                "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
                "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
                "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
                "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
                "The goal is to procure at least M units of the good at minimum possible cost.",
                "The problem has some flavor of the continuous knapsack problem.",
                "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
                "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
                "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
                "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
                "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
                "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
                "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
                "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
                "Otherwise, we say that xi is midrange.",
                "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
                "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
                "See Figure 2 for an example.",
                "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
                "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
                "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
                "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
                "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
                "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
                "Element x is assumed to have already contributed uj units.",
                "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
                "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
                "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
                "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
                "In any other group, we can choose at most one anchor.",
                "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
                "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
                "R is the number of units that remain to be acquired.",
                "S is the set of tuples accepted in the current tentative 170 solution.",
                "Best is the best solution found so far.",
                "Variable Skip is only used in the proof of correctness.",
                "Algorithm Greedy( , j) 1.",
                "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
                "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
                "Scan the tuples in U in the sorted order.",
                "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
                "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack.",
                "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
                "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
                "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
                "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
                "One exception to this rule is the tuple t .",
                "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
                "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
                "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
                "LEMMA 2.",
                "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
                "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
                "Consider the set Skip at the termination of Greedy( , j).",
                "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
                "In the first case, let St be the tentative solution S at the time t was added to Skip.",
                "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
                "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
                "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
                "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
                "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
                "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
                "Suppose our approximation algorithm returns the value V ( , j) for this modified instance.",
                "Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
                "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
                "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
                "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
                "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
                "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
                "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
                "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
                "Furthermore, define x = xj − uj .",
                "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
                "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
                "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
                "We have our first polynomial approximation algorithm.",
                "THEOREM 2.",
                "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
                "PROOF.",
                "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
                "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
                "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
                "The high level idea is fairly standard, but the details require technical care.",
                "We use a <br>dynamic programming</br> algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the <br>dynamic programming</br> (DP) table.",
                "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
                "In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a <br>dynamic programming</br> table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
                "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
                "Then, the following recurrence relation describes how to construct the <br>dynamic programming</br> table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
                "As convention, agent i will index the row, and cost r will index the column.",
                "This <br>dynamic programming</br> algorithm is only pseudo-polynomial, since the number of column in the <br>dynamic programming</br> table depends upon the total cost.",
                "However, we can convert it into a FPTAS by scaling the cost dimension.",
                "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
                "Let ε denote the desired approximation factor.",
                "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
                "However, the computed solution might not be an optimal solution for the original problem.",
                "We show that the error introduced is within a factor of ε of the optimal solution.",
                "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
                "LEMMA 3.",
                "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
                "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
                "PROOF.",
                "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
                "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
                "Finally, given the <br>dynamic programming</br> table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
                "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
                "In particular, we consider the entries that provide at least M − uj+1 units.",
                "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
                "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
                "LEMMA 4.",
                "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
                "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
                "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
                "Now consider the <br>dynamic programming</br> table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
                "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
                "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
                "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
                "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
                "Among all the equal cost solutions, our <br>dynamic programming</br> tables chooses the one with maximum units.",
                "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
                "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
                "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
                "For a given midrange, the most expensive step in the algorithm is the construction of <br>dynamic programming</br> table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
                "Thus, we have the following result.",
                "THEOREM 3.",
                "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
                "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
                "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
                "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
                "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
                "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
                "Our overall strategy will be to build two <br>dynamic programming</br> tables, forward and backward, for each midrange element (l, j) once.",
                "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
                "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
                "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
                "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
                "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
                "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
                "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
                "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
                "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled <br>dynamic programming</br> algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
                "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
                "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
                "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
                "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
                "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
                "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
                "These first i agents are a different subset of agents in the forward and the backward tables.",
                "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
                "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
                "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
                "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
                "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
                "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
                "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
                "PROOF.",
                "From earlier, we define cost(A−i ) = C(I \\ i).",
                "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
                "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
                "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
                "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
                "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
                "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
                "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
                "From the preceding inequalities, we have yj l ≤ xj l .",
                "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
                "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
                "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
                "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
                "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
                "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
                "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
                "Let (g, h) be the current pair.",
                "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
                "The feasible pairs found during the walk are used to compute Eq. 6.",
                "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
                "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
                "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
                "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
                "Begin and End represent the start and end pointers to the feasible set.",
                "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
                "We maintain the feasible set as a min heap, where the key is modified cost.",
                "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
                "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
                "So, the main complexity of the computation lies in heap updates.",
                "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
                "First, using the 2 approximation algorithm, we compute an upper bound on C(I).",
                "We use this bound to scale down the tuple costs.",
                "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
                "The forward tables are used to compute C(I).",
                "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
                "Among all the locally optimal solutions we choose one with the minimum total cost.",
                "The most expensive step in the algorithm is computation of C(I \\ i).",
                "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
                "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
                "THEOREM 4.",
                "We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
                "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
                "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
                "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
                "The speed up comes from the way we solve iKnapsack−i ( , j).",
                "Time complexity of computing iKnapsack−i ( , j) by creating a new <br>dynamic programming</br> table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
                "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
                "Currently, the algorithm uses heap, which has logarithmic update time.",
                "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
                "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
                "CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good multi-unit auction problem, using marginal decreasing piecewise constant bidding language.",
                "Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0.",
                "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
                "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
                "REFERENCES [1] L M Ausubel and P R Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
                "Linear programming and Vickrey auctions.",
                "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 2002.",
                "Forthcoming. [4] K Chatterjee and W Samuelson.",
                "Bargaining under incomplete information.",
                "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
                "Multipart pricing of public goods.",
                "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 2002.",
                "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
                "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
                "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
                "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
                "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
                "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
                "Computational complexity of approximation algorithms for combinatorial problems.",
                "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
                "Incentives in teams.",
                "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
                "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
                "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [14] V Krishna and M Perry.",
                "Efficient mechanism design.",
                "Technical report, Pennsylvania State University, 1998.",
                "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
                "Truth revelation in approximately efficient combinatorial auctions.",
                "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
                "Optimal auction design.",
                "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
                "Computationally feasible VCG mechanisms.",
                "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
                "Almost dominant strategy implementation.",
                "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
                "Counterspeculation, auctions, and competitive sealed tenders.",
                "Journal of Finance, 16:8-37, 1961. 175"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Utilizamos un algoritmo de \"programación dinámica\" para resolver iknapsack (, j) para cada elemento de rango medio posible, con el algoritmo de 2 de acoplamiento que proporciona un límite superior en el valor de la solución y permite el uso de escala en la dimensión de costo del \"Tabla de programación dinámica \"(DP).",
                "En nuestros FPTA, en lugar de usar un algoritmo de aproximación codicioso para resolver iKnapsack (, j), construimos una tabla de \"programación dinámica\" para calcular el costo mínimo en el que se pueden obtener al menos m - Uj+1 unidades utilizando la N -−1 Listas en la mochila generalizada.",
                "Luego, la siguiente relación de recurrencia describe cómo construir la tabla de \"programación dinámica\": g [0, r] = 0 g [i, r] = max ´ g [i - 1, r] max j∈β (i, r) {G [i - 1, r - costo (tj i)] + uj i} µ donde β (i, r) = {j: 1 ≤ j ≤ mi, costo (tj i) ≤ r}, es el conjuntode anclajes para el agente i.",
                "Este algoritmo de \"programación dinámica\" es solo pseudopolinomio, ya que el número de columna en la tabla de \"programación dinámica\" depende del costo total.",
                "Finalmente, dada la tabla de \"programación dinámica\" para iKnapsack (, j), consideramos todas las entradas en la última fila de esta tabla, G [n - 1, r].",
                "Ahora considere la tabla de \"programación dinámica\" construida para iknapsack (, j), y considere su entrada g [n - 1, r].",
                "Entre todas las soluciones de igual costo, nuestras tablas de \"programación dinámica\" eligen una con unidades máximas.",
                "Para un rango medio dado, el paso más costoso en el algoritmo es la construcción de la tabla de \"programación dinámica\", que se puede hacer en el tiempo O (N2 /ε) suponiendo intervalos constantes por lista.",
                "Nuestra estrategia general será construir dos tablas de \"programación dinámica\", hacia adelante y hacia atrás, para cada elemento de rango medio (L, J) una vez.",
                "Comenzamos con el esquema simple.4.1 Un esquema de aproximación simple implementamos el algoritmo de \"programación dinámica\" escalado para iKnapsack (, j) con dos pedidos alternativos sobre los otros vendedores, K = L, uno con vendedores ordenados 1, 2 ,..., n, y uno con vendedores ordenados n, n - 1 ,..., 1.",
                "La complejidad del tiempo de calcular iKnapsack - I (, j) al crear una nueva tabla de \"programación dinámica\" será O (N2 ε) pero al usar las tablas hacia adelante y hacia atrás, la complejidad se reduce a O (N ε log n ε)."
            ],
            "translated_text": "",
            "candidates": [
                "programación dinámica",
                "programación dinámica",
                "Tabla de programación dinámica ",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "Programación dinámica",
                "programación dinámica",
                "programación dinámica",
                "programación dinámica"
            ],
            "error": []
        },
        "approximation algorithm": {
            "translated_key": "algoritmo de aproximación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem.",
                "The bidding language in our auctions allows marginal-decreasing piecewise constant curves.",
                "First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
                "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
                "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
                "General Terms Algorithms, Economics. 1.",
                "INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good multi-unit auction problem.",
                "Our scheme is both approximately efficient and approximately strategyproof.",
                "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
                "We consider both a reverse auction variation and a forward auction variation, and propose a compact and expressive bidding language that allows marginal-decreasing piecewise constant curves.",
                "In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
                "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
                "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
                "In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
                "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
                "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
                "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
                "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
                "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
                "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
                "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
                "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
                "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
                "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
                "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
                "Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
                "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
                "This upper-bound tends to 1 as the number of sellers increases.",
                "The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation.",
                "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
                "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
                "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
                "We also prove our claims about ε-strategyproofness.",
                "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
                "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
                "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
                "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
                "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases.",
                "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
                "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
                "For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem.",
                "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
                "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
                "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
                "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
                "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
                "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
                "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
                "The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
                "Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
                "APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions.",
                "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
                "We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language.",
                "This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
                "See Figure 1 for an example.",
                "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
                "Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
                "In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
                "Her valuation is zero for quantities outside the range [10, 25].",
                "In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25].",
                "In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
                "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
                "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
                "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
                "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
                "A sellers bid is similarly defined in the reverse auction.",
                "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
                "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
                "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism.",
                "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
                "We will use the term payoff interchangeably for utility.",
                "In the forward auction, there is a seller with M units to sell.",
                "We assume that this seller has no intrinsic value for the items.",
                "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
                "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
                "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
                "The VCG mechanism is defined as follows: 1.",
                "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
                "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
                "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
                "In this forward auction, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
                "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
                "In the reverse auction, there is a buyer with M units to buy, and n suppliers.",
                "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
                "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
                "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
                "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
                "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
                "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
                "The total payment is collected from the buyer.",
                "Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
                "Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
                "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
                "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
                "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
                "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
                "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
                "In words, there would be no efficient trade without the seller.",
                "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
                "Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
                "In other words, there must be no pivotal sellers.",
                "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
                "The payments to the sellers would never exceed the buyers value in this case.",
                "Conversely, to make the forward auction symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
                "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
                "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
                "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
                "In the second case, the payoffs are π = (−10, 30, 50, 30).",
                "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
                "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
                "We describe the result for the forward auction direction, but it is quite a general observation.",
                "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
                "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
                "We provide such an approximation scheme for our setting later in the paper.",
                "Let ˆx denote the allocation implemented by the approximation scheme.",
                "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
                "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
                "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
                "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
                "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the <br>approximation algorithm</br> to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium.",
                "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
                "We can now analyze the best possible gain from manipulation to an agent in our setting.",
                "We first assume that the other agents are truthful, and then relax this.",
                "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
                "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
                "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the <br>approximation algorithm</br>, and make the algorithm implement the allocation with value V (I).",
                "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
                "The analysis is very similar when the other agents are not truthful.",
                "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
                "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
                "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
                "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
                "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
                "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
                "We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction.",
                "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
                "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
                "In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS).",
                "One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions.",
                "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
                "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
                "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
                "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
                "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
                "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
                "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
                "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
                "The goal is to procure at least M units of the good at minimum possible cost.",
                "The problem has some flavor of the continuous knapsack problem.",
                "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
                "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
                "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
                "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
                "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
                "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
                "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
                "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
                "Otherwise, we say that xi is midrange.",
                "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
                "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
                "See Figure 2 for an example.",
                "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
                "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
                "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
                "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
                "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
                "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
                "Element x is assumed to have already contributed uj units.",
                "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
                "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
                "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
                "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
                "In any other group, we can choose at most one anchor.",
                "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
                "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
                "R is the number of units that remain to be acquired.",
                "S is the set of tuples accepted in the current tentative 170 solution.",
                "Best is the best solution found so far.",
                "Variable Skip is only used in the proof of correctness.",
                "Algorithm Greedy( , j) 1.",
                "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
                "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
                "Scan the tuples in U in the sorted order.",
                "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
                "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The <br>approximation algorithm</br> is very similar to the <br>approximation algorithm</br> for knapsack.",
                "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
                "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
                "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
                "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
                "One exception to this rule is the tuple t .",
                "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
                "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
                "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
                "LEMMA 2.",
                "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
                "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
                "Consider the set Skip at the termination of Greedy( , j).",
                "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
                "In the first case, let St be the tentative solution S at the time t was added to Skip.",
                "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
                "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
                "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
                "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
                "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
                "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
                "Suppose our <br>approximation algorithm</br> returns the value V ( , j) for this modified instance.",
                "Let t be the last tuple considered by the <br>approximation algorithm</br> before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
                "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
                "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
                "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
                "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
                "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
                "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
                "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
                "Furthermore, define x = xj − uj .",
                "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
                "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
                "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
                "We have our first polynomial <br>approximation algorithm</br>.",
                "THEOREM 2.",
                "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
                "PROOF.",
                "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
                "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
                "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-<br>approximation algorithm</br> presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
                "The high level idea is fairly standard, but the details require technical care.",
                "We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-<br>approximation algorithm</br> providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table.",
                "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
                "In our FPTAS, rather than using a greedy <br>approximation algorithm</br> to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
                "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
                "Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
                "As convention, agent i will index the row, and cost r will index the column.",
                "This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost.",
                "However, we can convert it into a FPTAS by scaling the cost dimension.",
                "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
                "Let ε denote the desired approximation factor.",
                "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
                "However, the computed solution might not be an optimal solution for the original problem.",
                "We show that the error introduced is within a factor of ε of the optimal solution.",
                "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
                "LEMMA 3.",
                "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
                "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
                "PROOF.",
                "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
                "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
                "Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
                "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
                "In particular, we consider the entries that provide at least M − uj+1 units.",
                "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
                "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
                "LEMMA 4.",
                "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
                "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
                "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
                "Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
                "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
                "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
                "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
                "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
                "Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units.",
                "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
                "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
                "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
                "For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
                "Thus, we have the following result.",
                "THEOREM 3.",
                "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
                "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
                "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
                "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
                "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
                "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
                "Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once.",
                "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
                "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
                "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
                "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
                "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
                "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
                "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
                "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
                "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
                "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
                "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
                "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
                "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
                "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
                "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
                "These first i agents are a different subset of agents in the forward and the backward tables.",
                "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
                "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
                "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
                "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
                "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
                "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
                "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
                "PROOF.",
                "From earlier, we define cost(A−i ) = C(I \\ i).",
                "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
                "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
                "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
                "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
                "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
                "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
                "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
                "From the preceding inequalities, we have yj l ≤ xj l .",
                "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
                "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
                "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
                "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
                "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
                "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
                "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
                "Let (g, h) be the current pair.",
                "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
                "The feasible pairs found during the walk are used to compute Eq. 6.",
                "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
                "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
                "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
                "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
                "Begin and End represent the start and end pointers to the feasible set.",
                "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
                "We maintain the feasible set as a min heap, where the key is modified cost.",
                "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
                "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
                "So, the main complexity of the computation lies in heap updates.",
                "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
                "First, using the 2 <br>approximation algorithm</br>, we compute an upper bound on C(I).",
                "We use this bound to scale down the tuple costs.",
                "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
                "The forward tables are used to compute C(I).",
                "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
                "Among all the locally optimal solutions we choose one with the minimum total cost.",
                "The most expensive step in the algorithm is computation of C(I \\ i).",
                "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
                "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
                "THEOREM 4.",
                "We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
                "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
                "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
                "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
                "The speed up comes from the way we solve iKnapsack−i ( , j).",
                "Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
                "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
                "Currently, the algorithm uses heap, which has logarithmic update time.",
                "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
                "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
                "CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good multi-unit auction problem, using marginal decreasing piecewise constant bidding language.",
                "Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0.",
                "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
                "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
                "REFERENCES [1] L M Ausubel and P R Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
                "Linear programming and Vickrey auctions.",
                "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 2002.",
                "Forthcoming. [4] K Chatterjee and W Samuelson.",
                "Bargaining under incomplete information.",
                "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
                "Multipart pricing of public goods.",
                "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 2002.",
                "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
                "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
                "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
                "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
                "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
                "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
                "Computational complexity of approximation algorithms for combinatorial problems.",
                "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
                "Incentives in teams.",
                "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
                "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
                "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [14] V Krishna and M Perry.",
                "Efficient mechanism design.",
                "Technical report, Pennsylvania State University, 1998.",
                "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
                "Truth revelation in approximately efficient combinatorial auctions.",
                "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
                "Optimal auction design.",
                "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
                "Computationally feasible VCG mechanisms.",
                "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
                "Almost dominant strategy implementation.",
                "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
                "Counterspeculation, auctions, and competitive sealed tenders.",
                "Journal of Finance, 16:8-37, 1961. 175"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Sin embargo, frente a un algoritmo de asignación aproximada, el agente puede tratar de mejorar su recompensa al anunciar un valor que corrige la aproximación y hace que el \"algoritmo de aproximación\" implementa la asignación que maximiza exactamente el valor total reportado de los otros agentes juntos.con su propio valor real [18].6 Esta condición es implícita por los agentes son requisitos de sustitutos [3], que ha recibido cierta atención en la literatura de subastas combinatorias porque caracteriza el caso en el que los pagos de VCG pueden ser respaldados en un equilibrio competitivo.",
                "Entonces, un agente podría esperar recibir una recompensa mejorada de: V (i) - V (i) 1 + ε = ε 1 + ε V (i) Esto es posible si el agente puede seleccionar un tipo informado para corregir el\"Algoritmo de aproximación\", y haga que el algoritmo implementa la asignación con el valor V (i).",
                "Si Mark (i) = 1, ignora esta tupla;de lo contrario, haga los siguientes pasos: • Si tamaño (tk i)> r e i = return min {cost (s) + rpj, costo (mejor)};• Si el tamaño (tk i)> r y costo (tk i) ≤ costos (s) retorno min {costo (s) + costo (tk i), costo (mejor)};• Si el tamaño (tk i)> r y el costo (tk i)> costos (s) agregue tk i para omitir;Establecer mejor a S ∪ {tk i} si el costo mejora;• Si el tamaño (tk i) ≤ r, entonces agregue tk i a s;marca (i) = 1;Tamaño de resta (TK I) de R. El \"algoritmo de aproximación\" es muy similar al \"algoritmo de aproximación\" para la mochila.",
                "Supongamos que nuestro \"Algoritmo de aproximación\" devuelve el valor V (, j) para esta instancia modificada.",
                "Sea t la última tupla considerada por el \"algoritmo de aproximación\" antes de la terminación en la instancia modificada, y sea la solución tentativa correspondiente establecida en ese paso.",
                "Tenemos nuestro primer \"algoritmo de aproximación\" polinomial.",
                "La dependencia del número de piezas también es polinomio: si cada oferta tiene un máximo de piezas C, entonces el tiempo de ejecución es O ((NC) 2).171 3.3 Un esquema de aproximación ahora usamos el \"Algoritmo de aproximación\" presentado en la sección anterior para desarrollar una aproximación totalmente polinomial (FPTA) para el problema de la mochila generalizada.",
                "Utilizamos un algoritmo de programación dinámico para resolver iKnapsack (, j) para cada elemento de rango medio posible, con el 2- Algoritmo de aproximación \"que proporciona un límite superior en el valor de la solución y permite el uso de escala en la dimensión de costo de la dinámicaTabla de programación (DP).",
                "En nuestros FPTA, en lugar de usar un \"algoritmo de aproximación\" codicioso para resolver iKnapsack (, j), construimos una tabla de programación dinámica para calcular el costo mínimo al que se pueden obtener al menos m - Uj+1 unidades utilizando la N -−1 Listas en la mochila generalizada.",
                "Primero, usando el \"algoritmo de aproximación\", calculamos un límite superior en C (i)."
            ],
            "translated_text": "",
            "candidates": [
                "algoritmo de aproximación",
                "algoritmo de aproximación",
                "algoritmo de aproximación",
                "Algoritmo de aproximación",
                "algoritmo de aproximación",
                "algoritmo de aproximación",
                "algoritmo de aproximación",
                "algoritmo de aproximación",
                "Algoritmo de aproximación",
                "algoritmo de aproximación",
                "algoritmo de aproximación",
                "algoritmo de aproximación",
                "algoritmo de aproximación",
                "algoritmo de aproximación",
                "Algoritmo de aproximación",
                "algoritmo de aproximación",
                "algoritmo de aproximación",
                "algoritmo de aproximación",
                "algoritmo de aproximación",
                "algoritmo de aproximación"
            ],
            "error": []
        },
        "multi-unit auction": {
            "translated_key": "subasta de unidades múltiples",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Approximately-Strategyproof and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem.",
                "The bidding language in our auctions allows marginal-decreasing piecewise constant curves.",
                "First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
                "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
                "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
                "General Terms Algorithms, Economics. 1.",
                "INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good <br>multi-unit auction</br> problem.",
                "Our scheme is both approximately efficient and approximately strategyproof.",
                "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
                "We consider both a reverse auction variation and a forward auction variation, and propose a compact and expressive bidding language that allows marginal-decreasing piecewise constant curves.",
                "In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
                "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
                "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
                "In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
                "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
                "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
                "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
                "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
                "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
                "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
                "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
                "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
                "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
                "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
                "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
                "Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
                "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
                "This upper-bound tends to 1 as the number of sellers increases.",
                "The approximate VCG mechanism is ( ε 1+ε )-strategyproof for an approximation to within (1 + ) of the optimal allocation.",
                "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
                "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
                "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
                "We also prove our claims about ε-strategyproofness.",
                "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
                "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
                "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
                "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
                "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases.",
                "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
                "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
                "For instance, Lehmann et al. [15] propose a greedy and strategyproof approximation to a single-minded combinatorial auction problem.",
                "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
                "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
                "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
                "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
                "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
                "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
                "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
                "The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
                "Ausubel [1] has proposed an ascending-price <br>multi-unit auction</br> for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
                "APPROXIMATELY-STRATEGYPROOF VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions.",
                "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
                "We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language.",
                "This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
                "See Figure 1 for an example.",
                "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
                "Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
                "In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
                "Her valuation is zero for quantities outside the range [10, 25].",
                "In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25].",
                "In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
                "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
                "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
                "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
                "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
                "A sellers bid is similarly defined in the reverse auction.",
                "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
                "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
                "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-strategyproof multiunit auctions around a VCG mechanism.",
                "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
                "We will use the term payoff interchangeably for utility.",
                "In the forward auction, there is a seller with M units to sell.",
                "We assume that this seller has no intrinsic value for the items.",
                "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
                "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
                "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
                "The VCG mechanism is defined as follows: 1.",
                "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
                "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
                "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
                "In this forward auction, the VCG mechanism is strategyproof for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
                "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
                "In the reverse auction, there is a buyer with M units to buy, and n suppliers.",
                "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
                "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
                "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
                "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
                "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
                "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
                "The total payment is collected from the buyer.",
                "Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
                "Although the VCG mechanism remains strategyproof for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
                "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
                "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
                "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
                "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
                "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
                "In words, there would be no efficient trade without the seller.",
                "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
                "Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
                "In other words, there must be no pivotal sellers.",
                "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
                "The payments to the sellers would never exceed the buyers value in this case.",
                "Conversely, to make the forward auction symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
                "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
                "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
                "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
                "In the second case, the payoffs are π = (−10, 30, 50, 30).",
                "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
                "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
                "We describe the result for the forward auction direction, but it is quite a general observation.",
                "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
                "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
                "We provide such an approximation scheme for our setting later in the paper.",
                "Let ˆx denote the allocation implemented by the approximation scheme.",
                "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
                "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
                "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
                "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
                "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium.",
                "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
                "We can now analyze the best possible gain from manipulation to an agent in our setting.",
                "We first assume that the other agents are truthful, and then relax this.",
                "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
                "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
                "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I).",
                "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
                "The analysis is very similar when the other agents are not truthful.",
                "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
                "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
                "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) strategyproof for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
                "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
                "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
                "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
                "We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction.",
                "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
                "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
                "In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS).",
                "One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions.",
                "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
                "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
                "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
                "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
                "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
                "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
                "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
                "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
                "The goal is to procure at least M units of the good at minimum possible cost.",
                "The problem has some flavor of the continuous knapsack problem.",
                "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
                "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
                "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
                "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
                "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
                "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
                "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
                "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
                "Otherwise, we say that xi is midrange.",
                "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
                "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
                "See Figure 2 for an example.",
                "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
                "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
                "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
                "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
                "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
                "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
                "Element x is assumed to have already contributed uj units.",
                "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
                "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
                "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
                "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
                "In any other group, we can choose at most one anchor.",
                "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
                "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
                "R is the number of units that remain to be acquired.",
                "S is the set of tuples accepted in the current tentative 170 solution.",
                "Best is the best solution found so far.",
                "Variable Skip is only used in the proof of correctness.",
                "Algorithm Greedy( , j) 1.",
                "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
                "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
                "Scan the tuples in U in the sorted order.",
                "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
                "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack.",
                "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
                "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
                "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
                "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
                "One exception to this rule is the tuple t .",
                "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
                "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
                "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
                "LEMMA 2.",
                "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
                "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
                "Consider the set Skip at the termination of Greedy( , j).",
                "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
                "In the first case, let St be the tentative solution S at the time t was added to Skip.",
                "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
                "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
                "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
                "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
                "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
                "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
                "Suppose our approximation algorithm returns the value V ( , j) for this modified instance.",
                "Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
                "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
                "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
                "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
                "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
                "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
                "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
                "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
                "Furthermore, define x = xj − uj .",
                "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
                "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
                "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
                "We have our first polynomial approximation algorithm.",
                "THEOREM 2.",
                "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
                "PROOF.",
                "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
                "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
                "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
                "The high level idea is fairly standard, but the details require technical care.",
                "We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table.",
                "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
                "In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
                "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
                "Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
                "As convention, agent i will index the row, and cost r will index the column.",
                "This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost.",
                "However, we can convert it into a FPTAS by scaling the cost dimension.",
                "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
                "Let ε denote the desired approximation factor.",
                "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
                "However, the computed solution might not be an optimal solution for the original problem.",
                "We show that the error introduced is within a factor of ε of the optimal solution.",
                "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
                "LEMMA 3.",
                "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
                "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
                "PROOF.",
                "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
                "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
                "Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
                "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
                "In particular, we consider the entries that provide at least M − uj+1 units.",
                "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
                "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
                "LEMMA 4.",
                "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
                "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
                "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
                "Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
                "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
                "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
                "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
                "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
                "Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units.",
                "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
                "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
                "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
                "For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
                "Thus, we have the following result.",
                "THEOREM 3.",
                "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
                "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
                "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
                "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
                "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
                "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
                "Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once.",
                "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
                "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
                "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
                "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
                "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
                "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
                "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
                "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
                "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
                "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
                "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
                "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
                "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
                "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
                "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
                "These first i agents are a different subset of agents in the forward and the backward tables.",
                "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
                "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
                "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
                "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
                "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
                "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
                "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
                "PROOF.",
                "From earlier, we define cost(A−i ) = C(I \\ i).",
                "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
                "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
                "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
                "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
                "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
                "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
                "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
                "From the preceding inequalities, we have yj l ≤ xj l .",
                "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
                "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
                "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
                "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
                "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
                "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
                "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
                "Let (g, h) be the current pair.",
                "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
                "The feasible pairs found during the walk are used to compute Eq. 6.",
                "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
                "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
                "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
                "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
                "Begin and End represent the start and end pointers to the feasible set.",
                "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
                "We maintain the feasible set as a min heap, where the key is modified cost.",
                "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
                "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
                "So, the main complexity of the computation lies in heap updates.",
                "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
                "First, using the 2 approximation algorithm, we compute an upper bound on C(I).",
                "We use this bound to scale down the tuple costs.",
                "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
                "The forward tables are used to compute C(I).",
                "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
                "Among all the locally optimal solutions we choose one with the minimum total cost.",
                "The most expensive step in the algorithm is computation of C(I \\ i).",
                "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
                "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
                "THEOREM 4.",
                "We can compute an /(1+ )-strategyproof approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
                "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
                "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
                "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
                "The speed up comes from the way we solve iKnapsack−i ( , j).",
                "Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
                "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
                "Currently, the algorithm uses heap, which has logarithmic update time.",
                "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
                "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
                "CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good <br>multi-unit auction</br> problem, using marginal decreasing piecewise constant bidding language.",
                "Our scheme is both approximately efficient and approximately strategyproof within any specified factor ε > 0.",
                "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
                "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
                "REFERENCES [1] L M Ausubel and P R Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
                "Linear programming and Vickrey auctions.",
                "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 2002.",
                "Forthcoming. [4] K Chatterjee and W Samuelson.",
                "Bargaining under incomplete information.",
                "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
                "Multipart pricing of public goods.",
                "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 2002.",
                "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
                "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
                "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
                "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
                "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
                "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
                "Computational complexity of approximation algorithms for combinatorial problems.",
                "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
                "Incentives in teams.",
                "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
                "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
                "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [14] V Krishna and M Perry.",
                "Efficient mechanism design.",
                "Technical report, Pennsylvania State University, 1998.",
                "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
                "Truth revelation in approximately efficient combinatorial auctions.",
                "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
                "Optimal auction design.",
                "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
                "Computationally feasible VCG mechanisms.",
                "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
                "Almost dominant strategy implementation.",
                "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
                "Counterspeculation, auctions, and competitive sealed tenders.",
                "Journal of Finance, 16:8-37, 1961. 175"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Introducción En este documento presentamos un esquema de aproximación en tiempo polinómico para el problema de \"subasta múltiple\".",
                "Ausubel [1] ha propuesto una \"subasta de unidades múltiples\" de precio ascendente para compradores con valores de decisión marginal [1], con una interpretación como un algoritmo primal-dual [2].2.",
                "Conclusiones presentamos un esquema de aproximación en tiempo polinómico para el problema de \"subasta múltiple\" de una sola buena \"subasta múltiple\", utilizando un lenguaje de licitación constante por partes decreciente marginal."
            ],
            "translated_text": "",
            "candidates": [
                "subasta de unidades múltiples",
                "subasta múltiple",
                "Subasta de unidades múltiples",
                "subasta de unidades múltiples",
                "subasta de unidades múltiples",
                "subasta múltiple",
                "subasta múltiple"
            ],
            "error": []
        },
        "strategyproof": {
            "translated_key": "a prueba de estrategias",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Approximately-<br>strategyproof</br> and Tractable Multi-Unit Auctions Anshul Kothari∗ David C. Parkes† Subhash Suri∗ ABSTRACT We present an approximately-efficient and approximatelystrategyproof auction mechanism for a single-good multi-unit allocation problem.",
                "The bidding language in our auctions allows marginal-decreasing piecewise constant curves.",
                "First, we develop a fully polynomial-time approximation scheme for the multi-unit allocation problem, which computes a (1 + )approximation in worst-case time T = O(n3 / ), given n bids each with a constant number of pieces.",
                "Second, we embed this approximation scheme within a Vickrey-Clarke-Groves (VCG) mechanism and compute payments to n agents for an asymptotic cost of O(T log n).",
                "The maximal possible gain from manipulation to a bidder in the combined scheme is bounded by /(1+ )V , where V is the total surplus in the efficient outcome.",
                "Categories and Subject Descriptors F.2 [Theory of Computation]: Analysis of Algorithms and Problem Complexity; J.4 [Computer Applications]: Social and Behavioral Sciences-Economics.",
                "General Terms Algorithms, Economics. 1.",
                "INTRODUCTION In this paper we present a fully polynomial-time approximation scheme for the single-good multi-unit auction problem.",
                "Our scheme is both approximately efficient and approximately <br>strategyproof</br>.",
                "The auction settings considered in our paper are motivated by recent trends in electronic commerce; for instance, corporations are increasingly using auctions for their strategic sourcing.",
                "We consider both a reverse auction variation and a forward auction variation, and propose a compact and expressive bidding language that allows marginal-decreasing piecewise constant curves.",
                "In the reverse auction, we consider a single buyer with a demand for M units of a good and n suppliers, each with a marginal-decreasing piecewise-constant cost function.",
                "In addition, each supplier can also express an upper bound, or capacity constraint on the number of units she can supply.",
                "The reverse variation models, for example, a procurement auction to obtain raw materials or other services (e.g. circuit boards, power suppliers, toner cartridges), with flexible-sized lots.",
                "In the forward auction, we consider a single seller with M units of a good and n buyers, each with a marginal-decreasing piecewise-constant valuation function.",
                "A buyer can also express a lower bound, or minimum lot size, on the number of units she demands.",
                "The forward variation models, for example, an auction to sell excess inventory in flexible-sized lots.",
                "We consider the computational complexity of implementing the Vickrey-Clarke-Groves [22, 5, 11] mechanism for the multiunit auction problem.",
                "The Vickrey-Clarke-Groves (VCG) mechanism has a number of interesting economic properties in this setting, including strategyproofness, such that truthful bidding is a dominant strategy for buyers in the forward auction and sellers in the reverse auction, and allocative efficiency, such that the outcome maximizes the total surplus in the system.",
                "However, as we discuss in Section 2, the application of the VCG-based approach is limited in the reverse direction to instances in which the total payments to the sellers are less than the value of the outcome to the buyer.",
                "Otherwise, either the auction must run at a loss in these instances, or the buyer cannot be expected to voluntarily choose to participate.",
                "This is an example of the budget-deficit problem that often occurs in efficient mechanism design [17].",
                "The computational problem is interesting, because even with marginal-decreasing bid curves, the underlying allocation problem turns out to (weakly) intractable.",
                "For instance, the classic 0/1 knapsack is a special case of this problem.1 We model the 1 However, the problem can be solved easily by a greedy scheme if we remove all capacity constraints from the seller and all 166 allocation problem as a novel and interesting generalization of the classic knapsack problem, and develop a fully polynomialtime approximation scheme, computing a (1 + )-approximation in worst-case time T = O(n3 /ε), where each bid has a fixed number of piecewise constant pieces.",
                "Given this scheme, a straightforward computation of the VCG payments to all n agents requires time O(nT).",
                "We compute approximate VCG payments in worst-case time O(αT log(αn/ε)), where α is a constant that quantifies a reasonable no-monopoly assumption.",
                "Specifically, in the reverse auction, suppose that C(I) is the minimal cost for procuring M units with all sellers I, and C(I \\ i) is the minimal cost without seller i.",
                "Then, the constant α is defined as an upper bound for the ratio C(I \\i)/C(I), over all sellers i.",
                "This upper-bound tends to 1 as the number of sellers increases.",
                "The approximate VCG mechanism is ( ε 1+ε )-<br>strategyproof</br> for an approximation to within (1 + ) of the optimal allocation.",
                "This means that a bidder can gain at most ( ε 1+ε )V from a nontruthful bid, where V is the total surplus from the efficient allocation.",
                "As such, this is an example of a computationally-tractable ε-dominance result.2 In practice, we can have good confidence that bidders without good information about the bidding strategies of other participants will have little to gain from attempts at manipulation.",
                "Section 2 formally defines the forward and reverse auctions, and defines the VCG mechanisms.",
                "We also prove our claims about ε-strategyproofness.",
                "Section 3 provides the generalized knapsack formulation for the multi-unit allocation problems and introduces the fully polynomial time approximation scheme.",
                "Section 4 defines the approximation scheme for the payments in the VCG mechanism.",
                "Section 5 concludes. 1.1 Related Work There has been considerable interest in recent years in characterizing polynomial-time or approximable special cases of the general combinatorial allocation problem, in which there are multiple different items.",
                "The combinatorial allocation problem (CAP) is both NP-complete and inapproximable (e.g. [6]).",
                "Although some polynomial-time cases have been identified for the CAP [6, 20], introducing an expressive exclusive-or bidding language quickly breaks these special cases.",
                "We identify a non-trivial but approximable allocation problem with an expressive exclusiveor bidding language-the bid taker in our setting is allowed to accept at most one point on the bid curve.",
                "The idea of using approximations within mechanisms, while retaining either full-strategyproofness or ε-dominance has received some previous attention.",
                "For instance, Lehmann et al. [15] propose a greedy and <br>strategyproof</br> approximation to a single-minded combinatorial auction problem.",
                "Nisan & Ronen [18] discussed approximate VCG-based mechanisms, but either appealed to particular maximal-in-range approximations to retain full strategyproofness, or to resource-bounded agents with information or computational limitations on the ability to compute strategies.",
                "Feigenminimum-lot size constraints from the buyers. 2 However, this may not be an example of what Feigenbaum & Shenker refer to as a tolerably-manipulable mechanism [8] because we have not tried to bound the effect of such a manipulation on the efficiency of the outcome.",
                "VCG mechanism do have a natural self-correcting property, though, because a useful manipulation to an agent is a reported value that improves the total value of the allocation based on the reports of other agents and the agents own value. baum & Shenker [8] have defined the concept of strategically faithful approximations, and proposed the study of approximations as an important direction for algorithmic mechanism design.",
                "Schummer [21] and Parkes et al [19] have previously considered ε-dominance, in the context of economic impossibility results, for example in combinatorial exchanges.",
                "Eso et al. [7] have studied a similar procurement problem, but for a different volume discount model.",
                "This earlier work formulates the problem as a general mixed integer linear program, and gives some empirical results on simulated data.",
                "Kalagnanam et al. [12] address double auctions, where multiple buyers and sellers trade a divisible good.",
                "The focus of this paper is also different: it investigates the equilibrium prices using the demand and supply curves, whereas our focus is on efficient mechanism design.",
                "Ausubel [1] has proposed an ascending-price multi-unit auction for buyers with marginal-decreasing values [1], with an interpretation as a primal-dual algorithm [2]. 2.",
                "APPROXIMATELY-<br>strategyproof</br> VCG AUCTIONS In this section, we first describe the marginal-decreasing piecewise bidding language that is used in our forward and reverse auctions.",
                "Continuing, we introduce the VCG mechanism for the problem and the ε-dominance results for approximations to VCG outcomes.",
                "We also discuss the economic properties of VCG mechanisms in these forward and reverse auction multi-unit settings. 2.1 Marginal-Decreasing Piecewise Bids We provide a piecewise-constant and marginal-decreasing bidding language.",
                "This bidding language is expressive for a natural class of valuation and cost functions: fixed unit prices over intervals of quantities.",
                "See Figure 1 for an example.",
                "In addition, we slightly relax the marginal-decreasing requirement to allow: a bidder in the forward auction to state a minimal purchase amount, such that she has zero value for quantities smaller than that amount; a seller in the reverse auction to state a capacity constraint, such that she has an effectively infinite cost to supply quantities in excess of a particular amount.",
                "Reverse Auction Bid 7 5 10 20 25 10 8 Quantity Price 7 5 10 20 25 10 8 Quantity Price Forward Auction Bid Figure 1: Marginal-decreasing, piecewise constant bids.",
                "In the forward auction bid, the bidder offers $10 per unit for quantity in the range [5, 10), $8 per unit in the range [10, 20), and $7 in the range [20, 25].",
                "Her valuation is zero for quantities outside the range [10, 25].",
                "In the reverse auction bid, the cost of the seller is ∞ outside the range [10, 25].",
                "In detail, in a forward auction, a bid from buyer i can be written as a list of (quantity-range, unit-price) tuples, ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), with an upper bound umi i on the quantity.",
                "The interpretation is that the bidders valuation in the 167 (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the valuation is 0 for quantities less than u1 i as well as for quantities more than um i .",
                "This is implemented by adding two dummy bid tuples, with zero prices in the range [0, u1 i ) and (umi i , ∞).",
                "We interpret the bid list as defining a price function, pbid,i(q) = qpj i , if uj i ≤ q < uj+1 i , where j = 1, 2, . . . , mi −1.",
                "In order to resolve the boundary condition, we assume that the bid price for the upper bound quantity umi i is pbid,i(umi i ) = umi i pmi−1 i .",
                "A sellers bid is similarly defined in the reverse auction.",
                "The interpretation is that the bidders cost in the (semi-open) quantity range [uj i , uj+1 i ) is pj i for each unit.",
                "Additionally, it is assumed that the cost is ∞ for quantities less than u1 i as well as for quantities more than um i .",
                "Equivalently, the unit prices in the ranges [0, u1 i ) and (um i , ∞) are infinity.",
                "We interpret the bid list as defining a price function, pask,i(q) = qpj i , if uj i ≤ q < uj+1 i . 2.2 VCG-Based Multi-Unit Auctions We construct the tractable and approximately-<br>strategyproof</br> multiunit auctions around a VCG mechanism.",
                "We assume that all agents have quasilinear utility functions; that is, ui(q, p) = vi(q)− p, for a buyer i with valuation vi(q) for q units at price p, and ui(q, p) = p − ci(q) for a seller i with cost ci(q) at price p. This is a standard assumption in the auction literature, equivalent to assuming risk-neutral agents [13].",
                "We will use the term payoff interchangeably for utility.",
                "In the forward auction, there is a seller with M units to sell.",
                "We assume that this seller has no intrinsic value for the items.",
                "Given a set of bids from I agents, let V (I) denote the maximal revenue to the seller, given that at most one point on the bid curve can be selected from each agent and no more than M units of the item can be sold.",
                "Let x∗ = (x∗ 1, . . . , x∗ N ) denote the solution to this winner- determination problem, where x∗ i is the number of units sold to agent i.",
                "Similarly, let V (I \\ i) denote the maximal revenue to the seller without bids from agent i.",
                "The VCG mechanism is defined as follows: 1.",
                "Receive piecewise-constant bid curves and capacity constraints from all the buyers. 2.",
                "Implement the outcome x∗ that solves the winner-determination problem with all buyers. 3.",
                "Collect payment pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \\ i)] from each buyer, and pass the payments to the seller.",
                "In this forward auction, the VCG mechanism is <br>strategyproof</br> for buyers, which means that truthful bidding is a dominant strategy, i.e. utility maximizing whatever the bids of other buyers.",
                "In addition, the VCG mechanism is allocatively-efficient, and the payments from each buyer are always positive.3 Moreover, each buyer pays less than its value, and receives payoff V (I)−V (I \\ i) in equilibrium; this is precisely the marginal-value that buyer i contributes to the economic efficiency of the system.",
                "In the reverse auction, there is a buyer with M units to buy, and n suppliers.",
                "We assume that the buyer has value V > 0 to purchase all M units, but zero value otherwise.",
                "To simplify the mechanism design problem we assume that the buyer will truthfully announce this value to the mechanism.4 The winner3 In fact, the VCG mechanism maximizes the expected payoff to the seller across all efficient mechanisms, even allowing for Bayesian-Nash implementations [14]. 4 Without this assumption, the Myerson-Satterthwaite [17] impossibility result would already imply that we should not expect an efficient trading mechanism in this setting. determination problem in the reverse auction is to determine the allocation, x∗ , that minimizes the cost to the buyer, or forfeits trade if the minimal cost is greater than value, V .",
                "Let C(I) denote the minimal cost given bids from all sellers, and let C(I \\i) denote the minimal cost without bids from seller i.",
                "We can assume, without loss of generality, that there is an efficient trade and V ≥ C(I).",
                "Otherwise, then the efficient outcome is no trade, and the outcome of the VCG mechanism is no trade and no payments.",
                "The VCG mechanism implements the outcome x∗ that minimizes cost based on bids from all sellers, and then provides payment pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\\i))] to each seller.",
                "The total payment is collected from the buyer.",
                "Again, in equilibrium each sellers payoff is exactly the marginal-value that the seller contributes to the economic efficiency of the system; in the simple case that V ≥ C(I \\ i) for all sellers i, this is precisely C(I \\ i) − C(I).",
                "Although the VCG mechanism remains <br>strategyproof</br> for sellers in the reverse direction, its applicability is limited to cases in which the total payments to the sellers are less than the buyers value.",
                "Otherwise, there will be instances in which the buyer will not choose to voluntarily participate in the mechanism, based on its own value and its beliefs about the costs of sellers.",
                "This leads to a loss in efficiency when the buyer chooses not to participate, because efficient trades are missed.",
                "This problem with the size of the payments, does not occur in simple single-item reverse auctions, or even in multi-unit reverse auctions with a buyer that has a constant marginal-valuation for each additional item that she procures.5 Intuitively, the problem occurs in the reverse multi-unit setting because the buyer demands a fixed number of items, and has zero value without them.",
                "This leads to the possibility of the trade being contingent on the presence of particular, so-called pivotal sellers.",
                "Define a seller i as pivotal, if C(I) ≤ V but C(I\\i) > V .",
                "In words, there would be no efficient trade without the seller.",
                "Any time there is a pivotal seller, the VCG payments to that seller allow her to extract all of the surplus, and the payments are too large to sustain with the buyers value unless this is the only winning seller.",
                "Concretely, we have this participation problem in the reverse auction when the total payoff to the sellers, in equilibrium, exceeds the total payoff from the efficient allocation: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \\ i))] As stated above, first notice that we require V > C(I \\ i) for all sellers i.",
                "In other words, there must be no pivotal sellers.",
                "Given this, it is then necessary and sufficient that: V − C(I) ≥ i (C(I \\ i) − C(I)) (1) 5 To make the reverse auction symmetric with the forward direction, we would need a buyer with a constant marginal-value to buy the first M units, and zero value for additional units.",
                "The payments to the sellers would never exceed the buyers value in this case.",
                "Conversely, to make the forward auction symmetric with the reverse auction, we would need a seller with a constant (and high) marginal-cost to sell anything less than the first M units, and then a low (or zero) marginal cost.",
                "The total payments received by the seller can be less than the sellers cost for the outcome in this case. 168 In words, the surplus of the efficient allocation must be greater than the total marginal-surplus provided by each seller.6 Consider an example with 3 agents {1, 2, 3}, and V = 150 and C(123) = 50.",
                "Condition (1) holds when C(12) = C(23) = 70 and C(13) = 100, but not when C(12) = C(23) = 80 and C(13) = 100.",
                "In the first case, the agent payoffs π = (π0, π1, π2, π3), where 0 is the seller, is (10, 20, 50, 20).",
                "In the second case, the payoffs are π = (−10, 30, 50, 30).",
                "One thing we do know, because the VCG mechanism will maximize the payoff to the buyer across all efficient mechanisms [14], is that whenever Eq. 1 is not satisfied there can be no efficient auction mechanism.7 2.3 ε-Strategyproofness We now consider the same VCG mechanism, but with an approximation scheme for the underlying allocation problem.",
                "We derive an ε-strategyproofness result, that bounds the maximal gain in payoff that an agent can expect to achieve through a unilateral deviation from following a simple truth-revealing strategy.",
                "We describe the result for the forward auction direction, but it is quite a general observation.",
                "As before, let V (I) denote the value of the optimal solution to the allocation problem with truthful bids from all agents, and V (I \\i) denote the value of the optimal solution computed without bids from agent i.",
                "Let ˆV (I) and ˆV (I \\ i) denote the value of the allocation computed with an approximation scheme, and assume that the approximation satisfies: (1 + ) ˆV (I) ≥ V (I) for some > 0.",
                "We provide such an approximation scheme for our setting later in the paper.",
                "Let ˆx denote the allocation implemented by the approximation scheme.",
                "The payoff to agent i, for announcing valuation ˆvi, is: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \\ i) The final term is independent of the agents announced value, and can be ignored in an incentive-analysis.",
                "However, agent i can try to improve its payoff through the effect of its announced value on the allocation ˆx implemented by the mechanism.",
                "In particular, agent i wants the mechanism to select ˆx to maximize the sum of its true value, vi(ˆxi), and the reported value of the other agents, Èj=i ˆvj (ˆxj).",
                "If the mechanisms allocation algorithm is optimal, then all the agent needs to do is truthfully state its value and the mechanism will do the rest.",
                "However, faced with an approximate allocation algorithm, the agent can try to improve its payoff by announcing a value that corrects for the approximation, and causes the approximation algorithm to implement the allocation that exactly maximizes the total reported value of the other agents together with its own actual value [18]. 6 This condition is implied by the agents are substitutes requirement [3], that has received some attention in the combinatorial auction literature because it characterizes the case in which VCG payments can be supported in a competitive equilibrium.",
                "Useful characterizations of conditions that satisfy agents are substitutes, in terms of the underlying valuations of agents have proved quite elusive. 7 Moreover, although there is a small literature on maximallyefficient mechanisms subject to requirements of voluntaryparticipation and budget-balance (i.e. with the mechanism neither introducing or removing money), analytic results are only known for simple problems (e.g. [16, 4]).",
                "We can now analyze the best possible gain from manipulation to an agent in our setting.",
                "We first assume that the other agents are truthful, and then relax this.",
                "In both cases, the maximal benefit to agent i occurs when the initial approximation is worst-case.",
                "With truthful reports from other agents, this occurs when the value of choice ˆx is V (I)/(1 + ε).",
                "Then, an agent could hope to receive an improved payoff of: V (I) − V (I) 1 + ε = ε 1 + ε V (I) This is possible if the agent is able to select a reported type to correct the approximation algorithm, and make the algorithm implement the allocation with value V (I).",
                "Thus, if other agents are truthful, and with a (1 + ε)-approximation scheme to the allocation problem, then no agent can improve its payoff by more than a factor ε/(1 + ε) of the value of the optimal solution.",
                "The analysis is very similar when the other agents are not truthful.",
                "In this case, an individual agent can improve its payoff by no more than a factor /(1 + ) of the value of the optimal solution given the values reported by the other agents.",
                "Let V in the following theorem define the total value of the efficient allocation, given the reported values of agents j = i, and the true value of agent i. THEOREM 1.",
                "A VCG-based mechanism with a (1 + ε)allocation algorithm is (1+ −V ) <br>strategyproof</br> for agent i, and agent i can gain at most this payoff through some non-truthful strategy.",
                "Notice that we did not need to bound the error on the allocation problems without each agent, because the -strategyproofness result follows from the accuracy of the first-term in the VCG payment and is independent of the accuracy of the second-term.",
                "However, the accuracy of the solution to the problem without each agent is important to implement a good approximation to the revenue properties of the VCG mechanism. 3.",
                "THEGENERALIZED KNAPSACK PROBLEM In this section, we design a fully polynomial approximation scheme for the generalized knapsack, which models the winnerdetermination problem for the VCG-based multi-unit auctions.",
                "We describe our results for the reverse auction variation, but the formulation is completely symmetric for the forward-auction.",
                "In describing our approximation scheme, we begin with a simple property (the Anchor property) of an optimal knapsack solution.",
                "We use this property to develop an O(n2 ) time 2-approximation for the generalized knapsack.",
                "In turn, we use this basic approximation to develop our fully polynomial-time approximation scheme (FPTAS).",
                "One of the major appeals of our piecewise bidding language is its compact representation of the bidders valuation functions.",
                "We strive to preserve this, and present an approximation scheme that will depend only on the number of bidders, and not the maximum quantity, M, which can be very large in realistic procurement settings.",
                "The FPTAS implements an (1 + ε) approximation to the optimal solution x∗ , in worst-case time T = O(n3 /ε), where n is the number of bidders, and where we assume that the piecewise bid for each bidder has O(1) pieces.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum 169 of c pieces, then the running time can be derived by substituting nc for each occurrence of n. 3.1 Preliminaries Before we begin, let us recall the classic 0/1 knapsack problem: we are given a set of n items, where the item i has value vi and size si, and a knapsack of capacity M; all sizes are integers.",
                "The goal is to determine a subset of items of maximum value with total size at most M. Since we want to focus on a reverse auction, the equivalent knapsack problem will be to choose a set of items with minimum value (i.e. cost) whose size exceeds M. The generalized knapsack problem of interest to us can be defined as follows: Generalized Knapsack: Instance: A target M, and a set of n lists, where the ith list has the form Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , where uj i are increasing with j and pj i are decreasing with j, and uj i , pj i , M are positive integers.",
                "Problem: Determine a set of integers xj i such that 1. (One per list) At most one xj i is non-zero for any i, 2. (Membership) xj i = 0 implies xj i ∈ [uj i , uj+1 i ), 3. (Target) Èi Èj xj i ≥ M, and 4. (Objective) Èi Èj pj i xj i is minimized.",
                "This generalized knapsack formulation is a clear generalization of the classic 0/1 knapsack.",
                "In the latter, each list consists of a single point (si, vi).8 The connection between the generalized knapsack and our auction problem is transparent.",
                "Each list encodes a bid, representing multiple mutually exclusive quantity intervals, and one can choose any quantity in an interval, but at most one interval can be selected.",
                "Choosing interval [uj i , uj+1 i ) has cost pj i per unit.",
                "The goal is to procure at least M units of the good at minimum possible cost.",
                "The problem has some flavor of the continuous knapsack problem.",
                "However, there are two major differences that make our problem significantly more difficult: (1) intervals have boundaries, and so to choose interval [uj i , uj+1 i ) requires that at least uj i and at most uj+1 i units must be taken; (2) unlike the classic knapsack, we cannot sort the items (bids) by value/size, since different intervals in one list have different unit costs. 3.2 A 2-Approximation Scheme We begin with a definition.",
                "Given an instance of the generalized knapsack, we call each tuple tj i = (uj i , pj i ) an anchor.",
                "Recall that these tuples represent the breakpoints in the piecewise constant curve bids.",
                "We say that the size of an anchor tj i is uj i , 8 In fact, because of the one per list constraint, the generalized problem is closer in spirit to the multiple choice knapsack problem [9], where the underling set of items is partitioned into disjoint subsets U1, U2, . . . , Uk, and one can choose at most one item from each subset.",
                "PTAS do exist for this problem [10], and indeed, one can convert our problem into a huge instance of the multiple choice knapsack problem, by creating one group for each list; put a (quantity, price) point tuple (x, p) for each possible quantity for a bidder into his group (subset).",
                "However, this conversion explodes the problem size, making it infeasible for all but the most trivial instances. the minimum number of units available at this anchors price pj i .",
                "The cost of the anchor tj i is defined to be the minimum total price associated with this tuple, namely, cost(tj i ) = pj i uj i if j < mi, and cost(tmi i ) = pmi−1 i umi i .",
                "In a feasible solution {x1, x2, . . . , xn} of the generalized knapsack, we say that an element xi = 0 is an anchor if xi = uj i , for some anchor uj i .",
                "Otherwise, we say that xi is midrange.",
                "We observe that an optimal knapsack solution can always be constructed so that at most one solution element is midrange.",
                "If there are two midrange elements x and x , for bids from two different agents, with x ≤ x , then we can increment x and decrement x, until one of them becomes an anchor.",
                "See Figure 2 for an example.",
                "LEMMA 1. [Anchor Property] There exists an optimal solution of the generalized knapsack problem with at most one midrange element.",
                "All other elements are anchors. 1 midrange bid 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity 5 20 15 10 25 5 25 30201510 35 3 2 1 Price Quantity (i) Optimal solution with 2 midrange bids (ii) Optimal soltution with Figure 2: (i) An optimal solution with more than one bid not anchored (2,3); (ii) an optimal solution with only one bid (3) not anchored.",
                "We use the anchor property to first obtain a polynomial-time 2-approximation scheme.",
                "We do this by solving several instances of a restricted generalized-knapsack problem, which we call iKnapsack, where one element is forced to be midrange for a particular interval.",
                "Specifically, suppose element x for agent l is forced to lie in its jth range, [uj , uj+1 ), while all other elements, x1, . . . , xl−1, xl+1, xn, are required to be anchors, or zero.",
                "This corresponds to the restricted problem iKnapsack( , j), in which the goal is to obtain at least M − uj units with minimum cost.",
                "Element x is assumed to have already contributed uj units.",
                "The value of a solution to iKnapsack( , j) represents the minimal additional cost to purchase the rest of the units.",
                "We create n − 1 groups of potential anchors, where ith group contains all the anchors of the list i in the generalized knapsack.",
                "The group for agent l contains a single element that represents the interval [0, uj+1 −uj ), and the associated unit-price pj .",
                "This interval represents the excess number of units that can be taken from agent l in iKnapsack( , j), in addition to uj , which has already been committed.",
                "In any other group, we can choose at most one anchor.",
                "The following pseudo-code describes our algorithm for this restriction of the generalized knapsack problem.",
                "U is the union of all the tuples in n groups, including a tuple t for agent l. The size of this special tuple is defined as uj+1 − uj , and the cost is defined as pj l (uj+1 −uj ).",
                "R is the number of units that remain to be acquired.",
                "S is the set of tuples accepted in the current tentative 170 solution.",
                "Best is the best solution found so far.",
                "Variable Skip is only used in the proof of correctness.",
                "Algorithm Greedy( , j) 1.",
                "Sort all tuples of U in the ascending order of unit price; in case of ties, sort in ascending order of unit quantities. 2.",
                "Set mark(i) = 0, for all lists i = 1, 2, . . . , n. Initialize R = M − uj , S = Best = Skip = ∅. 3.",
                "Scan the tuples in U in the sorted order.",
                "Suppose the next tuple is tk i , i.e. the kth anchor from agent i.",
                "If mark(i) = 1, ignore this tuple; otherwise do the following steps: • if size(tk i ) > R and i = return min {cost(S) + Rpj , cost(Best)}; • if size(tk i ) > R and cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • if size(tk i ) > R and cost(tk i ) > cost(S) Add tk i to Skip; Set Best to S ∪ {tk i } if cost improves; • if size(tk i ) ≤ R then add tk i to S; mark(i) = 1; subtract size(tk i ) from R. The approximation algorithm is very similar to the approximation algorithm for knapsack.",
                "Since we wish to minimize the total cost, we consider the tuples in order of increasing per unit cost.",
                "If the size of tuple tk i is smaller than R, then we add it to S, update R, and delete from U all the tuples that belong to the same group as tk i .",
                "If size(tk i ) is greater than R, then S along with tk i forms a feasible solution.",
                "However, this solution can be far from optimal if the size of tk i is much larger than R. If total cost of S and tk i is smaller than the current best solution, we update Best.",
                "One exception to this rule is the tuple t .",
                "Since this tuple can be taken fractionally, we update Best if the sum of Ss cost and fractional cost of t is an improvement.",
                "The algorithm terminates in either of the first two cases, or when all tuples are scanned.",
                "In particular, it terminates whenever we find a tk i such that size(tk i ) is greater than R but cost(tk i ) is less than cost(S), or when we reach the tuple representing agent l and it gives a feasible solution.",
                "LEMMA 2.",
                "Suppose A∗ is an optimal solution of the generalized knapsack, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the cost V (l, j), returned by Greedy( , j), satisfies: V ( , j) + cost(tj ) ≤ 2cost(A∗ ) PROOF.",
                "Let V ( , j) be the value returned by Greedy( , j) and let V ∗ ( , j) be an optimal solution for iKnapsack( , j).",
                "Consider the set Skip at the termination of Greedy( , j).",
                "There are two cases to consider: either some tuple t ∈ Skip is also in V ∗ ( , j), or no tuple in Skip is in V ∗ ( , j).",
                "In the first case, let St be the tentative solution S at the time t was added to Skip.",
                "Because t ∈ Skip then size(t) > R, and St together with t forms a feasible solution, and we have: V ( , j) ≤ cost(Best) ≤ cost(St) + cost(t).",
                "Again, because t ∈ Skip then cost(t) > cost(St), and we have V ( , j) < 2cost(t).",
                "On the other hand, since t is included in V ∗ ( , j), we have V ∗ ( , j) ≥ cost(t).",
                "These two inequalities imply the desired bound: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j).",
                "In the second case, imagine a modified instance of iKnapsack( , j), which excludes all the tuples of the set Skip.",
                "Since none of these tuples were included in V ∗ ( , j), the optimal solution for the modified problem should be the same as the one for the original.",
                "Suppose our approximation algorithm returns the value V ( , j) for this modified instance.",
                "Let t be the last tuple considered by the approximation algorithm before termination on the modified instance, and let St be the corresponding tentative solution set in that step.",
                "Since we consider tuples in order of increasing per unit price, and none of the tuples are going to be placed in the set Skip, we must have cost(St ) < V ∗ ( , j) because St is the optimal way to obtain size(St ).",
                "We also have cost(t ) ≤ cost(St ), and the following inequalities: V ( , j) ≤ V ( , j) ≤ cost(St ) + cost(t ) < 2V ∗ ( , j) The inequality V ( , j) ≤ V ( , j) follows from the fact that a tuple in the Skip list can only affect the Best but not the tentative solutions.",
                "Therefore, dropping the tuples in the set Skip can only make the solution worse.",
                "The above argument has shown that the value returned by Greedy( , j) is within a factor 2 of the optimal solution for iKnapsack( , j).",
                "We now show that the value V ( , j) plus cost(tj ) is a 2-approximation of the original generalized knapsack problem.",
                "Let A∗ be an optimal solution of the generalized knapsack, and suppose that element xj is midrange.",
                "Let x− to be set of the remaining elements, either zero or anchors, in this solution.",
                "Furthermore, define x = xj − uj .",
                "Thus, cost(A∗ ) = cost(xl) + cost(tj l ) + cost(x−l) It is easy to see that (x− , x ) is an optimal solution for iKnapsack( , j).",
                "Since V ( , j) is a 2-approximation for this optimal solution, we have the following inequalities: V ( , j) + cost(tj ) ≤ cost(tj ) + 2(cost(x ) + cost(x− )) ≤ 2(cost(x ) + cost(tj ) + cost(x− )) ≤ 2cost(A∗ ) This completes the proof of Lemma 2.",
                "It is easy to see that, after an initial sorting of the tuples in U, the algorithm Greedy( , j) takes O(n) time.",
                "We have our first polynomial approximation algorithm.",
                "THEOREM 2.",
                "A 2-approximation of the generalized knapsack problem can be found in time O(n2 ), where n is number of item lists (each of constant length).",
                "PROOF.",
                "We run the algorithm Greedy( , j) once for each tuple (l, j) as a candidate for midrange.",
                "There are O(n) tuples, and it suffices to sort them once, the total cost of the algorithm is O(n2 ).",
                "By Lemma 1, there is an optimal solution with at most one midrange element, so our algorithm will find a 2-approximation, as claimed.",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time is O((nc)2 ). 171 3.3 An Approximation Scheme We now use the 2-approximation algorithm presented in the preceding section to develop a fully polynomial approximation (FPTAS) for the generalized knapsack problem.",
                "The high level idea is fairly standard, but the details require technical care.",
                "We use a dynamic programming algorithm to solve iKnapsack( , j) for each possible midrange element, with the 2-approximation algorithm providing an upper bound on the value of the solution and enabling the use of scaling on the cost dimension of the dynamic programming (DP) table.",
                "Consider, for example, the case that the midrange element is x , which falls in the range [uj , uj+1 ).",
                "In our FPTAS, rather than using a greedy approximation algorithm to solve iKnapsack( , j), we construct a dynamic programming table to compute the minimum cost at which at least M − uj+1 units can be obtained using the remaining n − 1 lists in the generalized knapsack.",
                "Suppose G[i, r] denotes the maximum number of units that can be obtained at cost at most r using only the first i lists in the generalized knapsack.",
                "Then, the following recurrence relation describes how to construct the dynamic programming table: G[0, r] = 0 G[i, r] = max ´ G[i − 1, r] max j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ where β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, is the set of anchors for agent i.",
                "As convention, agent i will index the row, and cost r will index the column.",
                "This dynamic programming algorithm is only pseudo-polynomial, since the number of column in the dynamic programming table depends upon the total cost.",
                "However, we can convert it into a FPTAS by scaling the cost dimension.",
                "Let A denote the 2-approximation to the generalized knapsack problem, with total cost, cost(A).",
                "Let ε denote the desired approximation factor.",
                "We compute the scaled cost of a tuple tj i , denoted scost(tj i ), as scost(tj i ) = n cost(tj i ) εcost(A) (2) This scaling improves the running time of the algorithm because the number of columns in the modified table is at most n ε , and independent of the total cost.",
                "However, the computed solution might not be an optimal solution for the original problem.",
                "We show that the error introduced is within a factor of ε of the optimal solution.",
                "As a prelude to our approximation guarantee, we first show that if two different solutions to the iKnapsack problem have equal scaled cost, then their original (unscaled) costs cannot differ by more than εcost(A).",
                "LEMMA 3.",
                "Let x and y be two distinct feasible solutions of iKnapsack( , j), excluding their midrange elements.",
                "If x and y have equal scaled costs, then their unscaled costs cannot differ by more than εcost(A).",
                "PROOF.",
                "Let Ix and Iy, respectively, denote the indicator functions associated with the anchor vectors x and y-there is 1 in position Ix[i, k] if the xk i > 0.",
                "Since x and y has equal scaled cost, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) However, by (2), the scaled costs satisfy the following inequalities: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Substituting the upper-bound on scaled cost from (4) for cost(x), the lower-bound on scaled cost from (4) for cost(y), and using equality (3) to simplify, we have: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), The last inequality uses the fact that at most n components of an indicator vector are non-zero; that is, any feasible solution contains at most n tuples.",
                "Finally, given the dynamic programming table for iKnapsack( , j), we consider all the entries in the last row of this table, G[n−1, r].",
                "These entries correspond to optimal solutions with all agents except l, for different levels of cost.",
                "In particular, we consider the entries that provide at least M − uj+1 units.",
                "Together with a contribution from agent l, we choose the entry in this set that minimizes the total cost, defined as follows: cost(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj , where cost() is the original, unscaled cost associated with entry G[n−1, r].",
                "It is worth noting, that unlike the 2-approximation scheme for iKnapsack( , j), the value computed with this FPTAS includes the cost to acquire uj l units from l. The following lemma shows that we achieve a (1+ε)-approximation.",
                "LEMMA 4.",
                "Suppose A∗ is an optimal solution of the generalized knapsack problem, and suppose that element (l, j) is midrange in the optimal solution.",
                "Then, the solution A(l, j) from running the scaled dynamic-programming algorithm on iKnapsack( , j) satisfies cost(A(l, j)) ≤ (1 + 2ε)cost(A∗ ) PROOF.",
                "Let x− denote the vector of the elements in solution A∗ without element l. Then, by definition, cost(A∗ ) = cost(x− ) + pj xj .",
                "Let r = scost(x− ) be the scaled cost associated with the vector x− .",
                "Now consider the dynamic programming table constructed for iKnapsack( , j), and consider its entry G[n − 1, r].",
                "Let A denote the 2-approximation to the generalized knapsack problem, and A(l, j) denote the solution from the dynamic-programming algorithm.",
                "Suppose y− is the solution associated with this entry in our dynamic program; the components of the vector y− are the quantities from different lists.",
                "Since both x− and y− have equal scaled costs, by Lemma 3, their unscaled costs are within εcost(A) of each other; that is, cost(y− ) − cost(x− ) ≤ εcost(A).",
                "Now, define yj = max{uj , M − Èi= Èj yj i }; this is the contribution needed from to make (y− , yj ) a feasible solution.",
                "Among all the equal cost solutions, our dynamic programming tables chooses the one with maximum units.",
                "Therefore, i= j yj i ≥ i= j xj i 172 Therefore, it must be the case that yj ≤ xj .",
                "Because (yj , y− ) is also a feasible solution, if our algorithm returns a solution with cost cost(A(l, j)), then we must have cost(A(l, j)) ≤ cost(y− ) + pj yj ≤ cost(x− ) + εcost(A) + pj xj ≤ (1 + 2ε)cost(A∗ ), where we use the fact that cost(A) ≤ 2cost(A∗ ).",
                "Putting this together, our approximation scheme for the generalized knapsack problem will iterate the scheme described above for each choice of the midrange element (l, j), and choose the best solution from among these O(n) solutions.",
                "For a given midrange, the most expensive step in the algorithm is the construction of dynamic programming table, which can be done in O(n2 /ε) time assuming constant intervals per list.",
                "Thus, we have the following result.",
                "THEOREM 3.",
                "We can compute an (1 + ε) approximation to the solution of a generalized knapsack problem in worst-case time O(n3 /ε).",
                "The dependence on the number of pieces is also polynomial: if each bid has a maximum of c pieces, then the running time can be derived by substituting cn for each occurrence of n. 4.",
                "COMPUTING VCG PAYMENTS We now consider the related problem of computing the VCG payments for all the agents.",
                "A naive approach requires solving the allocation problem n times, removing each agent in turn.",
                "In this section, we show that our approximation scheme for the generalized knapsack can be extended to determine all n payments in total time O(αT log(αn/ε)), where 1 ≤ C(I\\i)/C(I) ≤ α, for a constant upper bound, α, and T is the complexity of solving the allocation problem once.",
                "This α-bound can be justified as a no monopoly condition, because it bounds the marginal value that a single buyer brings to the auction.",
                "Similarly, in the reverse variation we can compute the VCG payments to each seller in time O(αT log(αn/ε)), where α bounds the ratio C(I\\ i)/C(I) for all i.",
                "Our overall strategy will be to build two dynamic programming tables, forward and backward, for each midrange element (l, j) once.",
                "The forward table is built by considering the agents in the order of their indices, where as the backward table is built by considering them in the reverse order.",
                "The optimal solution corresponding to C(I \\ i) can be broken into two parts: one corresponding to first (i − 1) agents and the other corresponding to last (n − i) agents.",
                "As the (i − 1)th row of the forward table corresponds to the sellers with first (i−1) indices, an approximation to the first part will be contained in (i − 1)th row of the forward table.",
                "Similarly, (n− i)th row of the backward table will contain an approximation for the second part.",
                "We first present a simple but an inefficient way of computing the approximate value of C(I \\ i), which illustrates the main idea of our algorithm.",
                "Then we present an improved scheme, which uses the fact that the elements in the rows are sorted, to compute the approximate value more efficiently.",
                "In the following, we concentrate on computing an allocation with xj being midrange, and some agent i = l removed.",
                "This will be a component in computing an approximation to C(I \\ i), the value of the solution to the generalized knapsack without bids from agent i.",
                "We begin with the simple scheme. 4.1 A Simple Approximation Scheme We implement the scaled dynamic programming algorithm for iKnapsack( , j) with two alternate orderings over the other sellers, k = l, one with sellers ordered 1, 2, . . . , n, and one with sellers ordered n, n − 1, . . . , 1.",
                "We call the first table the forward table, and denote it F , and the second table the backward table, and denote it Bl.",
                "The subscript reminds us that the agent is midrange.9 In building these tables, we use the same scaling factor as before; namely, the cost of a tuple tj i is scaled as follows: scost(tj i ) = ncost(tj i ) εcost(A) where cost(A) is the upper bound on C(I), given by our 2approximation scheme.",
                "In this case, because C(I \\ i) can be α times C(I), the scaled value of C(I \\ i) can be at most nα/ε.",
                "Therefore, the cost dimension of our dynamic programs table will be nα/ε.",
                "FlTable F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Table Bl Figure 3: Computing VCG payments. m = nα ε Now, suppose we want to compute a (1 + )-approximation to the generalized knapsack problem restricted to element (l, j) midrange, and further restricted to remove bids from some seller i = l. Call this problem iKnapsack−i ( , j).",
                "Recall that the ith row of our DP table stores the best solution possible using only the first i agents excluding agent l, all of them either cleared at zero, or on anchors.",
                "These first i agents are a different subset of agents in the forward and the backward tables.",
                "By carefully combining one row of Fl with one row of Bl we can compute an approximation to iKnapsack−i ( , j).",
                "We consider the row of Fl that corresponds to solutions constructed from agents {1, 2, . . . , i − 1}, skipping agent l. We consider the row of Bl that corresponds to solutions constructed from agents {i+1, i+2, . . . , n}, again skipping agent l. The rows are labeled Fl(i − 1) and Bl(n − i) respectively.10 The scaled costs for acquiring these units are the column indices for these entries.",
                "To solve iKnapsack−i ( , j) we choose one entry from row F (i−1) and one from row B (n−i) such that their total quantity exceeds M − uj+1 and their combined cost is minimum over all such combinations.",
                "Formally, let g ∈ Fl(i − 1), and h ∈ Bl(n − 1) denote entries in each row, with size(g), size(h), denoting the number of units and cost(g) and cost(h) denoting the unscaled cost associated with the entry.",
                "We compute the following, subject 9 We could label the tables with both and j, to indicate the jth tuple is forced to be midrange, but omit j to avoid clutter. 10 To be precise, the index of the rows are (i − 2) and (n − i) for Fl and Bl when l < i, and (i − 1) and (n − i − 1), respectively, when l > i. 173 to the condition that g and h satisfy size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMMA 5.",
                "Suppose A−i is an optimal solution of the generalized knapsack problem without bids from agent i, and suppose that element (l, j) is the midrange element in the optimal solution.",
                "Then, the expression in Eq. 5, for the restricted problem iKnapsack−i ( , j), computes a (1 + ε)-approximation to A−i .",
                "PROOF.",
                "From earlier, we define cost(A−i ) = C(I \\ i).",
                "We can split the optimal solution, A−i , into three disjoint parts: xl corresponds to the midrange seller, xi corresponds to first i − 1 sellers (skipping agent l if l < i), and x−i corresponds to last n − i sellers (skipping agent l if l > i).",
                "We have: cost(A−i ) = cost(xi) + cost(x−i) + pj xj Let ri = scost(xi) and r−i = scost(x−i).",
                "Let yi and y−i be the solution vectors corresponding to scaled cost ri and r−i in F (i − 1) and B (n − i), respectively.",
                "From Lemma 3 we conclude that, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) where cost(A) is the upper-bound on C(I) computed with the 2-approximation.",
                "Among all equal scaled cost solutions, our dynamic program chooses the one with maximum units.",
                "Therefore we also have, (size(yi) ≥ size(xi)) and (size(y−i) ≥ size(x−i)) where we use shorthand size(x) to denote total number of units in all tuples in x.",
                "Now, define yj l = max(uj l , M −size(yi)−size(y−i)).",
                "From the preceding inequalities, we have yj l ≤ xj l .",
                "Since (yj l , yi, y−i) is also a feasible solution to the generalized knapsack problem without agent i, the value returned by Eq. 5 is at most cost(yi) + cost(y−i) + pj l yj l ≤ C(I \\ i) + εcost(A) ≤ C(I \\ i) + 2cost(A∗ )ε ≤ C(I \\ i) + 2C(I \\ i)ε This completes the proof.",
                "A naive implementation of this scheme will be inefficient because it might check (nα/ε)2 pairs of elements, for any particular choice of (l, j) and choice of dropped agent i.",
                "In the next section, we present an efficient way to compute Eq. 5, and eventually to compute the VCG payments. 4.2 Improved Approximation Scheme Our improved approximation scheme for the winner-determination problem without agent i uses the fact that elements in F (i − 1) and B (n − i) are sorted; specifically, both, unscaled cost and quantity (i.e. size), increases from left to right.",
                "As before, let g and h denote generic entries in F (i − 1) and B (n − i) respectively.",
                "To compute Eq. 5, we consider all the tuple pairs, and first divide the tuples that satisfy condition size(g) + size(h) > M − uj+1 l into two disjoint sets.",
                "For each set we compute the best solution, and then take the best between the two sets. [case I: size(g) + size(h) ≥ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l uj Ó (6) We define a pair (g, h) to be feasible if size(g) + size(h) ≥ M − uj l .",
                "Now to compute Eq. 6, we do a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We start from the smallest index of F (i − 1) and move right, and from the highest index of B (n − i) and move left.",
                "Let (g, h) be the current pair.",
                "If (g, h) is feasible, we decrement Bs pointer (that is, move backward) otherwise we increment Fs pointer.",
                "The feasible pairs found during the walk are used to compute Eq. 6.",
                "The complexity of this step is linear in size of F (i − 1), which is O(nα/ε). [case II: M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l ] The problem reduces to min g∈F (i−1), h∈B (n−i) Òcost(g) + cost(h) + pj l (M − size(g) − size(h)) Ó To compute the above equation, we transform the above problem to another problem using modified cost, which is defined as: mcost(g) = cost(g) − pj l · size(g) mcost(h) = cost(h) − pj l · size(h) The new problem is to compute min g∈F (i−1), h∈B (n−i) Òmcost(g) + mcost(h) + pj l M Ó (7) The modified cost simplifies the problem, but unfortunately the elements in F (i − 1) and B (n − i) are no longer sorted with respect to mcost.",
                "However, the elements are still sorted in quantity and we use this property to compute Eq. 7.",
                "Call a pair (g, h) feasible if M − uj+1 l ≤ size(g) + size(h) ≤ M − uj l .",
                "Define the feasible set of g as the elements h ∈ B (n − i) that are feasible given g. As the elements are sorted by quantity, the feasible set of g is a contiguous subset of B (n − i) and shifts left as g increases. 2 3 4 5 10 20 30 40 50 60 Begin End B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figure 4: The feasible set of g = 3, defined on B (n − i), is {2, 3, 4} when M − uj+1 l = 50 and M − uj l = 60.",
                "Begin and End represent the start and end pointers to the feasible set.",
                "Therefore, we can compute Eq. 7 by doing a forward and backward walk on F (i − 1) and B (n − i) respectively.",
                "We walk on B (n − i), starting from the highest index, using two pointers, Begin and End, to indicate the start and end of the current feasible set.",
                "We maintain the feasible set as a min heap, where the key is modified cost.",
                "To update the feasible set, when we increment Fs pointer(move forward), we walk left on B, first using End to remove elements from feasible set which are no longer 174 feasible and then using Begin to add new feasible elements.",
                "For a given g, the only element which we need to consider in gs feasible set is the one with minimum modified cost which can be computed in constant time with the min heap.",
                "So, the main complexity of the computation lies in heap updates.",
                "Since, any element is added or deleted at most once, there are O(nα ε ) heap updates and the time complexity of this step is O(nα ε log nα ε ). 4.3 Collecting the Pieces The algorithm works as follows.",
                "First, using the 2 approximation algorithm, we compute an upper bound on C(I).",
                "We use this bound to scale down the tuple costs.",
                "Using the scaled costs, we build the forward and backward tables corresponding to each tuple (l, j).",
                "The forward tables are used to compute C(I).",
                "To compute C(I \\ i), we iterate over all the possible midrange tuples and use the corresponding forward and backward tables to compute the locally optimal solution using the above scheme.",
                "Among all the locally optimal solutions we choose one with the minimum total cost.",
                "The most expensive step in the algorithm is computation of C(I \\ i).",
                "The time complexity of this step is O(n2 α ε log nα ε ) as we have to iterate over all O(n) choices of tj l , for all l = i, and each time use the above scheme to compute Eq. 5.",
                "In the worst case, we might need to compute C(I \\ i) for all n sellers, in which case the final complexity of the algorithm will be O(n3 α ε log nα ε ).",
                "THEOREM 4.",
                "We can compute an /(1+ )-<br>strategyproof</br> approximation to the VCG mechanism in the forward and reverse multi-unit auctions in worst-case time O(n3 α ε log nα ε ).",
                "It is interesting to recall that T = O(n3 ε ) is the time complexity of the FPTAS to the generalized knapsack problem with all agents.",
                "Our combined scheme computes an approximation to the complete VCG mechanism, including payments to O(n) agents, in time complexity O(T log(n/ε)), taking the no-monopoly parameter, α, as a constant.",
                "Thus, our algorithm performs much better than the naive scheme, which computes the VCG payment for each agent by solving a new instance of generalized knapsack problem.",
                "The speed up comes from the way we solve iKnapsack−i ( , j).",
                "Time complexity of computing iKnapsack−i ( , j) by creating a new dynamic programming table will be O(n2 ε ) but by using the forward and backward tables, the complexity is reduced to O(n ε log n ε ).",
                "We can further improve the time complexity of our algorithm by computing Eq. 5 more efficiently.",
                "Currently, the algorithm uses heap, which has logarithmic update time.",
                "In worst case, we can have two heap update operations for each element, which makes the time complexity super linear.",
                "If we can compute Eq. 5 in linear time then the complexity of computing the VCG payment will be same as the complexity of solving a single generalized knapsack problem. 5.",
                "CONCLUSIONS We presented a fully polynomial-time approximation scheme for the single-good multi-unit auction problem, using marginal decreasing piecewise constant bidding language.",
                "Our scheme is both approximately efficient and approximately <br>strategyproof</br> within any specified factor ε > 0.",
                "As such it is an example of computationally tractable ε-dominance result, as well as an example of a non-trivial but approximable allocation problem.",
                "It is particularly interesting that we are able to compute the payments to n agents in a VCG-based mechanism in worst-case time O(T log n), where T is the time complexity to compute the solution to a single allocation problem. 6.",
                "REFERENCES [1] L M Ausubel and P R Milgrom.",
                "Ascending auctions with package bidding.",
                "Frontiers of Theoretical Economics, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer, and R V Vohra.",
                "Linear programming and Vickrey auctions.",
                "Technical report, Anderson Graduate School of Management, U.C.L.A., 2001. [3] S Bikchandani and J M Ostroy.",
                "The package assignment model.",
                "Journal of Economic Theory, 2002.",
                "Forthcoming. [4] K Chatterjee and W Samuelson.",
                "Bargaining under incomplete information.",
                "Operations Research, 31:835-851, 1983. [5] E H Clarke.",
                "Multipart pricing of public goods.",
                "Public Choice, 11:17-33, 1971. [6] S de Vries and R V Vohra.",
                "Combinatorial auctions: A survey.",
                "Informs Journal on Computing, 2002.",
                "Forthcoming. [7] M Eso, S Ghosh, J R Kalagnanam, and L Ladanyi.",
                "Bid evaluation in procurement auctions with piece-wise linear supply curves.",
                "Technical report, IBM TJ Watson Research Center, 2001. in preparation. [8] J Feigenbaum and S Shenker.",
                "Distributed Algorithmic Mechanism Design: Recent Results and Future Directions.",
                "In Proceedings of the 6th International Workshop on Discrete Algorithms and Methods for Mobile Computing and Communications, pages 1-13, 2002. [9] M R Garey and D S Johnson.",
                "Computers and Intractability: A Guide to the Theory of NP-Completeness.",
                "W.H.Freeman and Company, New York, 1979. [10] G V Gens and E V Levner.",
                "Computational complexity of approximation algorithms for combinatorial problems.",
                "In Mathematical Foundation of Computer Science, 292-300, 1979. [11] T Groves.",
                "Incentives in teams.",
                "Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport, and H S Lee.",
                "Computational aspects of clearing continuous call double auctions with assignment constraints and indivisible demand.",
                "Electronic Commerce Journal, 1(3):221-238, 2001. [13] V Krishna.",
                "Auction Theory.",
                "Academic Press, 2002. [14] V Krishna and M Perry.",
                "Efficient mechanism design.",
                "Technical report, Pennsylvania State University, 1998.",
                "Available at: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan, and Y Shoham.",
                "Truth revelation in approximately efficient combinatorial auctions.",
                "JACM, 49(5):577-602, September 2002. [16] R B Myerson.",
                "Optimal auction design.",
                "Mathematics of Operation Research, 6:58-73, 1981. [17] R B Myerson and M A Satterthwaite.",
                "Efficient mechanisms for bilateral trading.",
                "Journal of Economic Theory, 28:265-281, 1983. [18] N Nisan and A Ronen.",
                "Computationally feasible VCG mechanisms.",
                "In ACM-EC, pages 242-252, 2000. [19] D C Parkes, J R Kalagnanam, and M Eso.",
                "Achieving budget-balance with Vickrey-based payment schemes in exchanges.",
                "In IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc, and R M Harstad.",
                "Computationally manageable combinatorial auctions.",
                "Management Science, 44(8):1131-1147, 1998. [21] J Schummer.",
                "Almost dominant strategy implementation.",
                "Technical report, MEDS Department, Kellogg Graduate School of Management, 2001. [22] W Vickrey.",
                "Counterspeculation, auctions, and competitive sealed tenders.",
                "Journal of Finance, 16:8-37, 1961. 175"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Subastas de unidades múltiples \"a prueba de estrategias\" y manejables Anshul Kothari ∗ David C. Parkes † Subhash Suri ∗ Resumen, presentamos un mecanismo de subasta aproximadamente eficiente y aproximadamente a prueba de estructuras para un problema de asignación múltiple de unidades múltiples.",
                "Nuestro esquema es aproximadamente eficiente y aproximadamente \"a prueba de estrategias\".",
                "El mecanismo VCG aproximado es (ε 1 + ε)-\"a prueba de estrategias\" para una aproximación dentro (1 +) de la asignación óptima.",
                "Por ejemplo, Lehmann et al.[15] propone una aproximación codiciosa y \"a prueba de estrategias\" a un problema de subasta combinatorial resuelta.",
                "Aproximadamente: subastas de VCG \"a prueba de estrategias\" En esta sección, primero describimos el lenguaje de licitación por partes marginal que se usa en nuestras subastas hacia adelante e inversa.",
                "Interpretamos la lista de ofertas como definir una función de precio, Pask, I (Q) = Qpj I, si UJ I ≤ Q <UJ+1 i.2.2 Subastas de unidades múltiples basadas en VCG Construimos las subastas múltiples manejables y aproximadamente \"a prueba de estrategias\" en torno a un mecanismo VCG.",
                "En esta subasta hacia adelante, el mecanismo VCG es \"a prueba de estrategias\" para los compradores, lo que significa que la licitación veraz es una estrategia dominante, es decir, la utilidad maximizando las ofertas de otros compradores.",
                "Aunque el mecanismo VCG sigue siendo \"a prueba de estrategias\" para los vendedores en la dirección inversa, su aplicabilidad se limita a los casos en que los pagos totales a los vendedores son menores que el valor de los compradores.",
                "Un mecanismo basado en VCG con un algoritmo de asignación (1 + ε) es (1+ −V) \"a prueba de estrategias\" para el agente I, y el agente que puedo obtener como máximo este pago a través de alguna estrategia no juzgada.",
                "Podemos calcular AN /(1+)-Aproximación \"a prueba de estrategias\" al mecanismo VCG en las subastas de unidades múltiples directivas e inversas en el peor tiempo O (N3 α ε log Nα ε).",
                ""
            ],
            "translated_text": "",
            "candidates": [
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "a prueba de estrategias",
                "",
                "a prueba de estrategias"
            ],
            "error": []
        }
    }
}