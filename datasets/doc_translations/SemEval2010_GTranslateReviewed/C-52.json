{
    "id": "C-52",
    "original_text": "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver. The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender. This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object. But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well. This leads to unfairness in game playing. In this paper, we first introduce an error measure for estimating this inaccuracy. Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time. This algorithm makes the game very fair at the expense of increasing the overall mean error of all players. To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the mean error thereby maintaining the accuracy of game playing. We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular distributed multi-player game. We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays. An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing. Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1. INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server. Usually, in such games, the players are part of the game and in addition they may control entities that make up the game. During the course of the game, the players and the entities move within the game space. A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector. A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions. Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity. In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server. The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit. DR vectors are quantization of the real trajectory (which we refer to as real path) at a player. Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold. We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path. Therefore, at the sending player, there is a deviation between the real path and the exported path. The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same. Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest. Therefore, the receiving players can, at best, follow the exported path. Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed. Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path). We refer to this error as the export error. Note that the export error, in turn, results in a deviation between the real and the placed paths. The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error). In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero. That is, the placed and the exported paths match after the DR vector is received. We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1]. Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error. In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers. Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers. This brings in unfairness in game playing. For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered. Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players. We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender. We propose two algorithms to achieve this. Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players. At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same. The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses. The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point. Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error). The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR). To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players. At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer. Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach. It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game. In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2. PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4]. These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another. For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies. The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays. In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely. Players with a network delay larger than 100 ms simply cannot participate in the game. In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players. There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms. But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game. Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object). These additions and deletions are communicated to the game server using action messages. Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages. Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players. Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works. In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game. DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model). It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place. Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof. For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage. We emphasize that the focus of this paper is on fairness without addressing the issue of cheating. In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1]. In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag. Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level accuracy of game playing. Conclusions are presented in Section 6. 2 3. GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other. The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model). As mentioned before, we assume synchronized clocks among the participating players. Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity. We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path. Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 . Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates. Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik). Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity. For simplicity, we consider a two dimensional game space rather than a three dimensional one. Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi). The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed. Note that the computation of time difference is feasible since all the clocks are synchronized. The receiving player then uses the velocity components to project and render the trajectory of the entity. This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations. Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered. The figure shows the reception of DR vectors at a player (henceforth called the receiver). The horizontal axis shows the time which is synchronized among all the players. The vertical axis tries to conceptually capture the two-dimensional position of an entity. Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver. Assume that DR0 is received at the receiver after a delay of dt0 time units. The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E). The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path). At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 . Assume that DR1 is received at the receiver after a delay of dt1 time units. When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C). The velocity components vx1 and vy1 are used to project and render this entity further. Let us now consider the error due to network delay. Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1. This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0. Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same. The deviation between the exported and placed paths creates an error component which we refer to as the export error. A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync. We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2). In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1]. Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error. Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector. This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received. Starting from time T1 onwards, there is a deviation between the real and the exported paths. As we discussed earlier, this export error is unavoidable. The above figure and example illustrates one receiver only. But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players. Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players. The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4. SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received. We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time. Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal. However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver. Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers. In this section we provide motivations for the algorithm and describe the steps it goes through. Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers. DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers. DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2. Consider the example in Figure 2. The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2. DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path. Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0. Now consider DR1. At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2). Note that the sender includes the sending timestamp with the DR vector as shown in the figure. Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same. However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2. This is due to the fact that the sender uses the estimated delay dt1 to compute this error. Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]). Note that the above errors from the senders perspective are only estimates. In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced. This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender. The concept of relative export error is illustrated in Figure 2. Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1). This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1. We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender. The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock). Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2. Relative export errors are computed by the sender as and when it receives the feedback from the receivers. This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved. As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2. This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers. The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively. Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2. If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2). But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before). Let us represent the accumulated relative error up to DRi for receiver j as Ri j. To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i. This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector. In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed. Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively. Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant. THEOREM 4.1. When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction. Assume that the premise holds for some i. We show that it holds for i+1. The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances. In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n . Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed. From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2). Note that the values of R0 1 and R0 2 are already known at the sender. Consider the computation of Err(DR1, T1, T1 +δ1 +dt1). This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0. From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0). The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t). The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt. A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution. In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2. The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2). If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2). This equality will hold if δ1 + dt1 = δ2 + dt2. Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time. As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account. To delve deeper into this, consider the computation of the export error as illustrated in the previous section. To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2). That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt. That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt. The components R0 1, R0 2, are already known to (or estimated by) the sender. Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2. Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt. Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt. Assume that E1 > E2. Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt. To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement. Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt. In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays. Then, it finds the smallest of these values. Let Ek be the smallest value. The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1. The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1). It schedules, DRi to be sent to receiver k at time Ti + δi k. 2. The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk. The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3. The sender computes Ri k as described earlier and illustrated in Figure 2. The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4. Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k . Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers. How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent? Let us consider the first scenario. We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N . Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1. This means, DRi has been sent only to receivers up to k in the scheduled order. In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1. For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later). For these receivers, Ei j, 1 ≤ j ≤ k can be computed. For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply. Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent. Refer to Figure 3. For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj]. Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj). Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed. Now consider the second scenario. Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled. In this case, Ri k cannot be computed. Thus, in the computation of δk for DRi+1, this will be assumed to be zero. We do assume that a reliable mechanism is used to send dak back to the sender. When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game. It is a first-person shooter game where the players in teams drive tanks and move within a battle field. The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area. The players shoot each others tanks using shooting bullets. The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors. We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector. We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers. The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector. NISTNet [12] was used to introduce delays across the sender and the three receivers. Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively. We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay. The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case. The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds. Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case. Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken. Observe that the standard deviation of the error with scheduling is much lower as compared to the base case. This implies that the accumulated errors of the receivers in the scheduling case are closer to one another. This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender. Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case. Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher. Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule. In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error. This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value. This flip-flop effect leads to the increase in the accumulated error for all the receivers. The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature. This led us to explore different ways of equalizing the accumulated errors. The approach discussed in the following section is a heuristic approach based on the following idea. Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time. At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case). We refer to such an algorithm as a budget based algorithm. 5. BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity. Lower the threshold, more DR vectors are generated during a given time period. Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest. In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players. The budget based algorithm is based on this idea and there are two variations of it. One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player. These steps are described below. The lowering of DR threshold is implemented as follows. Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated. Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors. Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers). Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case. We want to ensure n t = nt. Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger. In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1). This probability is based on the relative weights of the receivers accumulated errors. That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector. Consider that the accumulated error for three players are a1, a2 and a3 respectively. Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 . Similarly for the other players. Once the player is picked, the DR vector is sent to that player. To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison). As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments. This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case. The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time. In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach. We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms). The results are shown in Figures 5 and 6. As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken. Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case. This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case. The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature. When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher. At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time. This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic. The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector. Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1. If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s). If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2. For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3. If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies. This process is repeated until all the receivers have a frequency of less than or equal to 1. This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver. That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver. Credit obtained previously (explained in step 5) if any is subtracted from the schedule. Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule. For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers. However, we are constrained to send it at the 4th trigger giving us a credit of 0.5. When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5. The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6. For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger. Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time. Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector. At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers. This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm. We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case. Results from our experiments are shown in Figures 5 and 6. It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case. This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm. In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach. With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6. CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors. Due to the variable delay between players, these DR vectors reach different players at different times. There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time. In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers. We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players. This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players. To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated). We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7. REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K. Singhal and D.R. Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C. Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10",
    "original_translation": "Equidad en los juegos de múltiples jugadores distribuidos basados en la recubrimiento muerto Sudhir Aggarwal Hemant Banavar Departamento de Ciencias de la Computación de la Universidad Estatal de Florida, Tallahassee, FL Correo electrónico: {Sudhir, banavarht.fsu.edu sarit Mukherjee Sampath Rangarajan Center para la investigación Bell Laboratories,,Holmdel, NJ Correo electrónico: {sarit, sampath}@bell-labs.com Resumen En un juego de jugadores múltiples distribuido que utiliza vectores de recuperación muerta para intercambiar información de movimiento entre los jugadores, existe una inexactitud para representar los objetos en el receptor debido a la redretraso entre el remitente y el receptor. El objeto se coloca en el receptor en la posición indicada por el vector de recuperación muerta, pero para ese momento, la posición real podría haber cambiado considerablemente en el remitente. Esta inexactitud sería tolerable si es consistente entre todos los jugadores;Es decir, al mismo tiempo físico, todos los jugadores ven inexactos (con respecto a la posición real del objeto) pero la misma posición y trayectoria para un objeto. Pero debido a los diferentes retrasos en la red entre el remitente y los diferentes receptores, la inexactitud también es diferente en diferentes jugadores. Esto lleva a la injusticia en el juego. En este artículo, primero introducimos una medida de error para estimar esta inexactitud. Luego desarrollamos un algoritmo para programar el envío de vectores de madera muerta a un remitente que se esfuerza por hacer que este error sea igual a los diferentes receptores con el tiempo. Este algoritmo hace que el juego sea muy justo a expensas de aumentar el error medio general de todos los jugadores. Para mitigar este efecto, proponemos un algoritmo basado en el presupuesto que proporciona una mayor justicia sin aumentar el error medio, manteniendo así la precisión del juego. Hemos implementado tanto el algoritmo de programación como el algoritmo basado en el presupuesto como parte de BZFLAG, un popular juego de jugadores distribuidos. Mostramos a través de los experimentos que estos algoritmos proporcionan equidad entre los jugadores a pesar de los retrasos de red ampliamente variables. Una propiedad adicional de los algoritmos propuestos es que requieren que se intercambien menos número de DR (en comparación con la implementación actual de BZFLAG) para lograr el mismo nivel de precisión en el juego. Categorías y descriptores de sujetos C.2.4 [Redes de comunicación por computadora]: Aplicaciones distribuidas distribuidas de sistemas Algoritmos de términos generales, diseño, experimentación, rendimiento 1. Introducción En un juego multijugador distribuido, los jugadores normalmente se distribuyen en Internet y tienen retrasos diferentes entre sí o con un servidor de juegos central. Por lo general, en tales juegos, los jugadores son parte del juego y, además, pueden controlar entidades que componen el juego. Durante el curso del juego, los jugadores y las entidades se mueven dentro del espacio del juego. Un jugador envía información sobre su movimiento, así como el movimiento de las entidades que controla a los otros jugadores que usan un vector de rescate muerto (DR). Un vector DR contiene información sobre la posición actual del reproductor/entidad en términos de coordenadas x, y y z (en el momento en que se envió el vector DR), así como la trayectoria de la entidad en términos del componente de velocidad en cada uno de loslas dimensiones. Cada uno de los jugadores participantes recibe tales vectores DR el uno del otro y hace que los otros jugadores/entidades en las consolas locales se reciban un nuevo Dr. Vector para ese jugador/entidad. En un juego de pares, los jugadores se envían vectores DR directamente entre sí;En un juego de cliente cliente, estos vectores DR pueden reenviarse a través de un servidor de juegos. La idea de DR se usa porque es casi imposible para los jugadores/entidades intercambiar sus posiciones actuales en cada unidad de tiempo. Los vectores DR son cuantificación de la trayectoria real (que nos referimos como ruta real) en un jugador. Normalmente, se calcula y se envía un nuevo Vector DR cada vez que la ruta real se desvía de la ruta extrapolada utilizando el vector DR anterior (digamos, en términos de distancia en el plano X, Y, Z) en cierta cantidad especificada por un umbral. Nos referimos a la trayectoria que se puede calcular utilizando la secuencia de vectores DR como la ruta exportada. Por lo tanto, en el jugador de envío, hay una desviación entre la ruta real y la ruta exportada. El error debido a esta desviación se puede eliminar si cada movimiento de jugador/entidad se comunica a los otros jugadores en cada unidad de tiempo;Ese es un vector DR se genera en cada unidad de tiempo, lo que hace que las rutas reales y exportadas sean iguales. Dado que no es factible satisfacer esto debido a las limitaciones de ancho de banda, este error no es de interés práctico. Por lo tanto, los jugadores receptores pueden, en el mejor de los casos, seguir la ruta exportada. Debido al retraso de la red entre los jugadores de envío y recepción, cuando se recibe y se presenta un Vector DR en un jugador, la trayectoria original del jugador/entidad ya puede haber cambiado. Por lo tanto, en tiempo físico, hay una desviación en el jugador receptor entre la ruta exportada y la trayectoria renderizada (a la que nos referimos como ruta colocada). Nos referimos a este error como el error de exportación. Tenga en cuenta que el error de exportación, a su vez, da como resultado una desviación entre las rutas reales y colocadas. El error de exportación se manifiesta debido a la desviación entre la ruta exportada en el remitente y la ruta colocada en el receptor (i) 1 antes de que el vector DR se reciba en el receptor (denominado error de exportación anterior, y (ii) despuésEl vector DR se recibe en el receptor (denominado error de exportación posterior). En un artículo anterior [1], demostramos que al sincronizar los relojes en todos los jugadores y al usar una técnica basada en mensajes de estampado de tiempo que transportan los vectores DR, podemos garantizar que el error de exportación posterior se haga cero. Es decir, las rutas colocadas y exportadas coinciden después de que se recibe el vector DR. También demostramos que el error de exportación anterior nunca se puede eliminar, ya que siempre hay un retraso de red no cero, pero puede reducirse significativamente utilizando nuestra técnica [1]. En adelante, suponemos que los jugadores usan una técnica de este tipo que resulta en un error de exportación inevitable pero pequeño general. En este documento consideramos el problema de los retrasos en la red diferentes y variables entre cada par del remitente-receptor de un vector DR y, en consecuencia, los errores de exportación diferentes y variables en los receptores. Debido a la diferencia en los errores de exportación entre los receptores, la misma entidad se representa en diferente tiempo físico en diferentes receptores. Esto trae injusticia en el juego. Por ejemplo, un jugador con un gran retraso siempre vería una entidad tarde en el tiempo físico en comparación con los otros jugadores y, por lo tanto, su acción sobre la entidad se retrasaría (en tiempo físico) incluso si reaccionó instantáneamente después de que se prestara la entidad. Nuestro objetivo en este documento es mejorar la equidad de estos juegos a pesar de los diferentes retrasos en la red al igualar el error de exportación a los jugadores. Exploramos si el promedio de tiempo de los errores de exportación (que es el error de exportación acumulativo durante un período de tiempo promediado durante el período de tiempo) en todos los jugadores se puede hacer lo mismo programando el envío de los vectores DR adecuadamente en el remitente. Proponemos dos algoritmos para lograr esto. Ambos algoritmos se basan en retrasar (o soltar) el envío de vectores DR a algunos jugadores de forma continua para tratar de hacer que el error de exportación sea el mismo en todos los jugadores. En un nivel abstracto, el algoritmo retrasa que envían vectores DR a jugadores cuyo error acumulado hasta ahora en el juego es más pequeño que otros;Esto significaría que el error de exportación debido a este vector DR en estos jugadores será más grande que el de los otros jugadores, lo que los hace lo mismo. El objetivo es cometer este error al menos aproximadamente igual en cada vector DR con la desviación en el error que se hace más pequeño a medida que avanza el tiempo. El primer algoritmo (al que nos referimos como algoritmo de programación) se basa en estimar el retraso entre los jugadores y la refinación del envío de vectores DR al programarlos para ser enviados a diferentes jugadores en diferentes momentos en cada punto de generación de DR. A través de una implementación de este algoritmo utilizando el juego de código abierto BZFlag, mostramos que este algoritmo hace que el juego sea muy justo (medimos la equidad en términos de la desviación estándar del error). El inconveniente de este algoritmo es que tiende a impulsar el error de todos los jugadores hacia el del jugador con el peor error (que es el error en el jugador más lejano, en términos de retraso, del remitente del DR). Para aliviar este efecto, proponemos un algoritmo basado en presupuesto que presupueste cómo se envían los DR a diferentes jugadores. En un alto nivel, el algoritmo se basa en la idea de enviar más DRS a los jugadores que están más lejos del remitente en comparación con los que están más cerca. Los resultados experimentales de BZFLAG ilustran que el algoritmo basado en el presupuesto sigue un enfoque más equilibrado. Mejora la justicia del juego, pero al mismo tiempo lo hace sin presionar el error medio de los jugadores, manteniendo así la precisión del juego. Además, se muestra que el algoritmo basado en el presupuesto alcanza el mismo nivel de precisión del juego que la implementación actual de BZFLAG utilizando mucho menos número de vectores DR.2. Trabajo anterior El trabajo anterior en los juegos de red para tratar la latencia de la red se ha centrado principalmente en técnicas de compensación para el retraso y pérdida de paquetes [2, 3, 4]. Estos métodos tienen como objetivo hacer que los grandes retrasos y la pérdida de mensajes sean tolerables para los jugadores, pero no consideran los problemas que pueden introducirse variando retrasos del servidor a diferentes jugadores o de los jugadores entre sí. Por ejemplo, el concepto de retraso local se ha utilizado en [3] donde cada jugador retrasa cada operación local durante una cierta cantidad de tiempo para que los jugadores remotos puedan recibir información sobre la operación local y ejecutar la misma operación al mismo tiempo,reduciendo así las inconsistencias estatales. El juego de múltiples jugadores en línea Mimaze [2, 5, 6], por ejemplo, toma un enfoque de sincronización de cubo estático para compensar los retrasos en la red variables. En Mimaze, cada jugador retrasa todos los eventos en 100 ms, independientemente de si se generan a nivel local o remotamente. Los jugadores con un retraso de la red mayor de 100 ms simplemente no pueden participar en el juego. En general, las técnicas basadas en la sincronización de cubos dependen de imponer el peor retraso de todos los jugadores. Ha habido algunos documentos que han estudiado el problema de la equidad en un juego distribuido por mecanismos de entrega de mensajes más sofisticados. Pero estas obras [7, 8] asumen la existencia de una visión global del juego donde un servidor de juegos mantiene una vista (o estado) del juego. Los jugadores pueden introducir objetos en el juego o eliminar objetos que ya forman parte del juego (por ejemplo, en un juego de tiradores en primera persona, disparando el objeto). Estas adiciones y deleciones se comunican al servidor de juegos utilizando mensajes de acción. Según estos mensajes de acción, el estado del juego se cambia en el servidor del juego y estos cambios se comunican a los jugadores utilizando mensajes de actualización. La justicia se logra ordenando la entrega de la acción y actualizar los mensajes en el servidor de juegos y los jugadores, respectivamente, en función de la noción de un orden justo que tiene en cuenta los retrasos entre el servidor de juegos y los diferentes jugadores. Los objetos que forman parte del juego pueden moverse, pero cómo esta información se comunica a los jugadores parece estar más allá del alcance de estos trabajos. En este sentido, estos trabajos tienen un alcance muy limitado y pueden ser aplicables solo a los juegos de tiradores de la primera persona y eso también solo para juegos donde los jugadores no son parte del juego. Los vectores DR se pueden intercambiar directamente entre los jugadores (modelo de pares de pares) o utilizando un servidor central como relé (modelo de cliente cliente). Se ha demostrado en [9] que los juegos de múltiples jugadores que usan vectores DR junto con la sincronización de cubos no son a prueba de trucos a menos que se establezcan mecanismos adicionales. Tanto el algoritmo de programación como el algoritmo basado en el presupuesto descrito en nuestros vectores DR de uso en papel y, por lo tanto, no son a prueba de trucos. Por ejemplo, un receptor podría sesgar la estimación de retraso en el remitente para que el remitente crea que la demora entre el remitente y el receptor es alta, obteniendo así una ventaja indebida. Hacemos hincapié en que el enfoque de este documento está en la justicia sin abordar el tema de las trampas. En la siguiente sección, describimos el modelo de juego que usamos e ilustramos cómo los remitentes y receptores intercambian vectores DR y cómo se representan las entidades en los receptores en función del intercambio de vectores DR de la tabla de tiempo como se describe en [1]. En la Sección 4, describimos el algoritmo de programación DR Vector que tiene como objetivo hacer que el error de exportación sea igual a los jugadores con retrasos variables del remitente de un vector DR, seguido de resultados experimentales obtenidos de la instrumentación del algoritmo de programación en el juego de código abierto BZFLAG. La Sección 5 describe el algoritmo basado en el presupuesto que logra una mayor justicia pero sin reducir la precisión del nivel del juego. Las conclusiones se presentan en la Sección 6. 2 3. Modelo de juego La arquitectura del juego se basa en jugadores distribuidos en Internet e intercambiando vectores DR entre ellos. Los vectores DR podrían enviarse directamente de un jugador a otro (modelo peerto-peer) o podrían enviarse a través de un servidor de juegos que recibe el vector DR de un jugador y lo reenvía a otros jugadores (modelo cliente-servidor). Como se mencionó anteriormente, asumimos los relojes sincronizados entre los jugadores participantes. Cada DR Vector enviado de un jugador a otro especifica la trayectoria de exactamente un jugador/entidad. Asumimos un vector DR lineal en que la información contenida en el Vector DR es solo suficiente en el jugador receptor para calcular la trayectoria y representar la entidad en una ruta de línea recta. Tal vector DR contiene información sobre la posición inicial y la velocidad del reproductor/entidad donde la velocidad es constante1. Por lo tanto, los vectores DR enviados por un jugador especifican la hora actual en el jugador cuando se calcula el vector DR (no el momento en que este vector DR se envía a los otros jugadores como explicaremos más adelante), la posición actual del jugador/Entidad en términos de las coordenadas X, Y, Z y el vector de velocidad en la dirección de las coordenadas X, Y y Z. Específicamente, el I -ésimo DR Vector enviado por el jugador J sobre la entidad KTH es denotada por DRJ IK y está representado por la siguiente tuple (TJ Ik, Xj Ik, Yj Ik, Zj Ik, Vxj Ik, Vyj Ik, VZJ IK). Sin pérdida de generalidad, en el resto de la discusión, consideramos una secuencia de vectores DR enviados por un solo jugador y solo para una entidad. Para simplificar, consideramos un espacio de juego bidimensional en lugar de uno tridimensional. Por lo tanto, usamos DRI para denotar el ésimo vector DR representado como la tupla (ti, xi, yi, vxi, vyi). El jugador receptor calcula la posición inicial para la entidad basada en Xi, Yi y la diferencia de tiempo entre cuando se recibe el vector DR y el tiempo TI en el que se calculó. Tenga en cuenta que el cálculo de la diferencia de tiempo es factible ya que todos los relojes están sincronizados. El jugador receptor usa los componentes de velocidad para proyectar y representar la trayectoria de la entidad. Esta trayectoria se sigue hasta que se recibe un nuevo Vector DR que cambia la posición y/o la velocidad de la entidad.TIMET1 REAL exportado colocado dt1 a b c d dr1 = (t1, x1, y1, vx1, vy1) calculado en el tiempo t1 y enviado al receptor dr0 = (t0, x0, y0, vx0, vy0) calculado en el tiempo T0 y enviado al receptorT0 dt0 colocado e Figura 1: trayectorias y desviaciones. Según este modelo, la Figura 1 ilustra el envío y el otro tipo de vectores DR incluyen vectores DR cuadráticos que especifican la aceleración de la entidad y los vectores DR de la spline cúbica que consideran la posición inicial y la velocidad y la posición final y la velocidad de la entidad.ing vectores DR y los diferentes errores que se encuentran. La figura muestra la recepción de los vectores DR en un jugador (en adelante llamado receptor). El eje horizontal muestra el tiempo que se sincroniza entre todos los jugadores. El eje vertical intenta capturar conceptualmente la posición bidimensional de una entidad. Suponga que en el momento T0 T0 Vector DR0 es calculado por el remitente e inmediatamente enviado al receptor. Suponga que DR0 se recibe en el receptor después de un retraso de las unidades de tiempo DT0. El receptor calcula la posición inicial de la entidad como (x0 + vx0 × dt0, y0 + vy0 × dt0) (se muestra como punto E). La línea gruesa EBD representa la trayectoria proyectada y renderizada en el receptor en función de los componentes de velocidad VX0 y VY0 (ruta colocada). En el momento T1 se calcula un DR Vector DR1 para la misma entidad e inmediatamente se envía al receptor2. Suponga que DR1 se recibe en el receptor después de un retraso de las unidades de tiempo DT1. Cuando se recibe este vector DR, suponga que la entidad está en el punto D. Una nueva posición para la entidad se calcula como (x1 + vx1 × dt1, y1 + vy0 × dt1) y la entidad se mueve a esta posición (punto c). Los componentes de velocidad VX1 y VY1 se utilizan para proyectar y hacer que esta entidad sea aún más. Consideremos ahora el error debido al retraso de la red. Aunque el DR1 se calculó en el momento T1 y se envió al receptor, no llegó al receptor hasta el tiempo T1 + DT1. Esto significa que, aunque la ruta exportada basada en DR1 en el remitente en el momento T1 es la trayectoria AC, hasta el tiempo T1 + DT1, en el receptor, esta entidad se estaba presentando en Trayectory BD basada en DR0. Solo en el tiempo T1 + DT1 se movió la entidad al punto C desde el cual se exportó y las rutas colocadas son las mismas. La desviación entre las rutas exportadas y colocadas crea un componente de error al que nos referimos como el error de exportación. Una forma de representar el error de exportación es calcular la integral de la distancia entre las dos trayectorias durante el tiempo cuando no están sincronizados. Representamos la integral de las distancias entre las rutas colocadas y exportadas debido a algún DR DRI durante un intervalo de tiempo [T1, T2] como ERR (DRI, T1, T2). En la figura, el error de exportación debido a DR1 se calcula como la integral de la distancia entre las trayectorias AC y BD durante el intervalo de tiempo [T1, T1 + DT1]. Tenga en cuenta que también podría haber otras formas de representar este error, pero en este documento, utilizamos la integral de la distancia entre las dos trayectorias como una medida del error de exportación. Tenga en cuenta que habría habido un error de exportación creado debido a la recepción de DR0, momento en el que la ruta colocada se habría basado en un vector DR anterior. Esto no se muestra en la figura, pero sirve para recordarle al lector que el error de exportación es acumulativo cuando se reciben una secuencia de vectores DR. A partir del tiempo T1 en adelante, existe una desviación entre las rutas reales y exportadas. Como discutimos anteriormente, este error de exportación es inevitable. La figura y el ejemplo anteriores ilustran solo un receptor. Pero en realidad, el remitente envía DR Vectores DR0 y DR1 a todos los jugadores participantes. Cada uno de estos jugadores recibe DR0 y DR1 después de diferentes retrasos, creando diferentes valores de error de exportación en diferentes jugadores. El objetivo del algoritmo de programación DR Vector que se describirá en la siguiente sección es hacer que este error de exportación (acumulativo) sea igual a cada jugador de forma independiente para cada una de las entidades que componen el juego.4. Algoritmo de programación que atraviesa los vectores DR En la Sección 3. Mostramos cómo el retraso del remitente de un nuevo DR 2 Normalmente, los vectores DR no se calculan de manera periódica, sino a base de demanda en la que la decisión de calcular un nuevo vector DR se basa enSe excedió algún umbral de la desviación entre la ruta real y la ruta exportada por el vector DR anterior.3 Vector al receptor del vector DR podría conducir a un error de exportación debido a la desviación de la ruta colocada de la ruta exportada en el receptor hasta que se recibe este nuevo vector DR. También mencionamos que el objetivo del algoritmo de programación del vector DR es hacer que el error de exportación sea igual a todos los receptores durante un período de tiempo. Dado que el juego se juega en un entorno distribuido, tiene sentido que el remitente de una entidad haga un seguimiento de todos los errores en los receptores e intente hacerlos igual. Sin embargo, el remitente no puede conocer el error real en un receptor hasta que obtenga alguna información sobre el error del receptor. Nuestro algoritmo estima el error para calcular un horario para enviar vectores DR a los receptores y corrige el error cuando recibe comentarios de los receptores. En esta sección proporcionamos motivaciones para el algoritmo y describimos los pasos por los que pasa. A lo largo de esta sección, utilizaremos el siguiente ejemplo para ilustrar el algoritmo.TIMET1 Ruta exportada Ruta colocada en el receptor 2 DT1 A B C D E F T0 G2 G1 DT2 DR1 Enviado al receptor 1 DR1 Enviado al receptor 2 T1 1 T1 2 Da1 Da2 G H I J K L N M DR1 estimado por el receptor 2 DR1 estimado por el receptor 1 DR1 realmente recibidopor el receptor 1 DR1 realmente recibido por el receptor 2 DR0 enviado a ambos receptores DR1 calculado por la ruta colocada del remitente en el receptor 1 Figura 2: Flujo del vector DR entre un remitente y dos receptores y la evolución de las rutas colocadas estimadas y reales en los receptores. DR0 = (T0, T0, X0, Y0, VX0, VY0), enviado en el momento T0 a ambos receptores. Dr1 = (t1, t1 1, x1, y1, vx1, vy1) enviado en el tiempo t1 1 = t1+Δ1 al receptor 1 y dr1 = (t1, t2 1, x1, y1, vx1, vy1) enviado en el tiempo t2 1= T1 + Δ2 al receptor 2. Considere el ejemplo en la Figura 2. La figura muestra un solo remitente que envía vectores DR para una entidad a dos receptores diferentes 1 y 2. DR0 calculado en T0 es enviado y recibido por los receptores en algún momento entre T0 y T1, en cuyo momento mueven la ubicación de la entidad para que coincida con la ruta exportada. Por lo tanto, la ruta de la entidad se muestra solo desde el punto donde la ruta colocada coincide con la ruta exportada para DR0. Ahora considere DR1. En el momento T1, DR1 es calculado por el remitente, pero suponga que no se envía inmediatamente a los receptores y solo se envía después del tiempo Δ1 al receptor 1 (en el tiempo T1 1 = T1 + Δ1) y después del tiempo Δ2 al receptor 2 (AT ATTiempo T2 1 = T1 + Δ2). Tenga en cuenta que el remitente incluye la marca de tiempo de envío con el vector DR como se muestra en la figura. Suponga que el remitente estima (estará claro en breve por qué el remitente debe estimar el retraso) que después de un retraso de DT1, el receptor 1 lo recibirá, usará los parámetros de coordenadas y de velocidad para calcular la ubicación actual de las entidades y lo moverá allí(Punto C) y a partir de este momento, las rutas exportadas y colocadas se convertirán en las mismas. Sin embargo, en realidad, el receptor 1 recibe DR1 después de un retraso de DA1 (que es menor que las estimaciones de los remitentes de DT1), y mueve la entidad correspondiente al punto H. De manera similar, el remitente estima que después de un retraso de DT2, el receptor 2 recibiráDR1, calculará la ubicación actual de la entidad y la moverá a ese punto (punto E), mientras que en realidad recibe DR1 después de un retraso de Da2> dt2 y mueve la entidad para que puntos N. los otros puntos que se muestran en el colocado yLas rutas exportadas se utilizarán más adelante en la discusión para describir diferentes componentes de error.4.1 Cálculo del error de exportación relativa que se refiere a la discusión desde la Sección 3, desde la perspectiva del remitente, el error de exportación en el receptor 1 debido a DR1 viene dado por ERR (DR1, T1, T1 + Δ1 + DT1) (la integral de la distancia de la distanciaentre las trayectorias AC y DB durante el intervalo de tiempo [T1, T1 + Δ1 + DT1]) de la Figura 2. Esto se debe al hecho de que el remitente usa el retraso estimado DT1 para calcular este error. Del mismo modo, el error de exportación desde la perspectiva de los remitentes en Recibe 2 debido a DR1 está dado por ERR (DR1, T1, T1 + Δ2 + DT2) (la integral de la distancia entre las trayectorias AE y DF durante el intervalo de tiempo [T1, T1, T1,+ Δ2 + dt2]). Tenga en cuenta que los errores anteriores desde la perspectiva del remitente son solo estimaciones. En realidad, el error de exportación será menor o mayor que el valor estimado, en función de si la estimación de retraso fue mayor o menor que el retraso real que experimentó DR1. Esta diferencia entre el error de exportación estimado y el real es el error de exportación relativo (que podría ser positivo o negativo) que ocurre para cada vector DR que se envía y se acumula en el remitente. El concepto de error de exportación relativo se ilustra en la Figura 2. Dado que el retraso real al receptor 1 es DA1, el error de exportación inducido por DR1 en el receptor 1 es ERR (DR1, T1, T1 + Δ1 + DA1). Esto significa que hay un error en el error de exportación estimado y el remitente puede calcular este error solo después de que reciba una retroalimentación del receptor sobre el retraso real para la entrega de DR1, es decir, el valor de DA1. Proponemos que una vez que el receptor 1 reciba DR1, envía el valor de DA1 al remitente. El receptor puede calcular esta información, ya que sabe el momento en que se envió DR1 (T1 1 = T1 + Δ1, que se adjunta al vector DR como se muestra en la Figura 2) y el tiempo de recepción local (que se sincroniza con el reloj de los remitentes). Por lo tanto, el remitente calcula el error de exportación relativa para el receptor 1, representado usando R1 como R1 = err (DR1, T1, T1 + Δ1 + DT1) - ERR (DR1, T1, T1 + Δ1 + Da1) = ERR (DR1, T1, T1, T1,+ Δ1 + dt1, t1 + Δ1 + da1) De manera similar, el error de exportación relativo para el receptor 2 se calcula como r2 = err (dr1, t1, t1 + Δ2 + dt2) - err (dr1, t1, t1 + Δ2 + da2) = = =ERR (DR1, T1 + Δ2 + DT2, T1 + Δ2 + DA2) Tenga en cuenta que R1> 0 como Da1 <DT1 y R2 <0 como Da2> DT2. El remitente calcula los errores de exportación relativos cuando recibe los comentarios de los receptores. Este ejemplo muestra los 4 valores de error de exportación relativos después de que se envía DR1 y se reciben los comentarios correspondientes.4.2 Equalización de error entre los receptores ahora explicamos lo que queremos decir con hacer que los errores sean iguales en todos los receptores y cómo se puede lograr esto. Como se indica antes, el remitente mantiene las estimaciones de los retrasos a los receptores, DT1 y DT2 en el ejemplo de la Figura 2. Esto dice que en el momento T1, cuando se calcula DR1, el remitente ya sabe cuánto tiempo puede tomar mensajes que llevan este vector DR para llegar a los receptores. El remitente utiliza esta información para calcular los errores de exportación, que son ERR (DR1, T1, T1 + Δ1 + DT1) y ERR (DR1, T1, T1 + Δ2 + DT2) para los receptores 1 y 2, respectivamente. Tenga en cuenta que las áreas de estos componentes de error son una función de Δ1 y Δ2, así como de la red retrasa DT1 y DT2. Si queremos hacer los errores de exportaciones debido a DR1 lo mismo en ambos receptores, el remitente debe elegir Δ1 y Δ2 tal que Err (DR1, T1, T1 + Δ1 + DT1) = err (DR1, T1, T1 + Δ2 +dt2). Pero cuando se calculó T1, ya podría haberse acumulado errores de exportación relativos debido a los vectores DR anteriores (DR0 y los anteriores). Representemos el error relativo acumulado hasta DRI para el receptor J as ri j. Para acomodar estos errores relativos acumulados, el remitente ahora debe elegir Δ1 y Δ2 tal que R0 1 + err (DR1, T1, T1 + Δ1 + DT1) = R0 2 + err (DR1, T1, T1 + Δ2 + DT2) el ΔIDetermina el instante de programación del vector DR en el remitente para el receptor i. Este método de cálculo de ΔS garantiza que el error de exportación acumulado (es decir, error real total) para cada receptor iguale a la transmisión de cada vector DR. Para establecer esto, suponga que la retroalimentación para DR Vector DI de un receptor llega al remitente antes de calcular el horario para DI+1. Deje que Si M y Ai M denoten el error estimado para el receptor M utilizado para el programa de computación para DI y error acumulado para el receptor M calculado después de recibir comentarios para DI, respectivamente. Entonces ri m = ai m −si m.Para calcular las instancias de programación (es decir, ΔS) para DI, para cualquier par de receptores M y N, hacemos Ri - 1 m + Si M = Ri - 1 N + Si N.El siguiente teorema establece el hecho de que el error de exportación acumulado se iguala en cada instante de programación. Teorema 4.1. Cuando se calculan las instancias de programación para el envío de DI para cualquier par de receptores M y N, se cumple la siguiente condición: I - 1 K = 1 Ak M + Si M = I - 1 K = 1 Ak N + Si N.Prueba: por inducción. Suponga que la premisa se mantiene para algunos i. Mostramos que es necesario para i+1. El caso base para i = 1 se mantiene ya que inicialmente R0 m = R0 n = 0, y el S1 M = S1 N se usa para calcular las instancias de programación. Para calcular el cronograma para Di+1, primero calculamos los errores relativos como ri m = ai m - si m, y ri n = ai n - si n.Luego, para calcular ΔS, ejecutamos Ri M + Si + 1 M = Ri N + Si + 1 N Ai M - Si M + Si + 1 M = Ai N - Si N + Si + 1 n. Agregando la condición de la premisa en ambos lados que obtenemos, I K = 1 Ak M + Si + 1 M = I K = 1 Ak N + Si + 1 N.4.3 Cálculo del error de exportación Consideremos ahora cómo se pueden calcular los errores de exportación. De la sección anterior, para encontrar Δ1 y Δ2 necesitamos encontrar ERR (DR1, T1, T1 +Δ1 +DT1) y ERR (DR1, T1, T1 +Δ2 +DT2). Tenga en cuenta que los valores de R0 1 y R0 2 ya se conocen en el remitente. Considere el cálculo de ERR (DR1, T1, T1 +Δ1 +DT1). Esta es la integral de la distancia entre las trayectorias AC debido a DR1 y BD debido a DR0. De DR0 y DR1, punto A es (x1, y1) = (x1, y1) y el punto B es (x0, y0) = (x0 + (t1 - t0) × vx0, y0 + (t1 - t0) × vy0). La trayectoria AC se puede representar como una función del tiempo como (x1 (t), y1 (t) = (x1 + vx1 × t, y1 + vy1 × t) y la trayectoria de BD se puede representar como (x0 (t), Y0 (t) = (x0 + vx0 × t, y0 + vy0 × t). La distancia entre las dos trayectorias en función del tiempo se convierte en Dist (t) = (x1 (t) - x0 (t)) 2 + (y1 (t) - y0 (t)) 2 = ((x1 - x0) + (vx1 - vx0) t) 2 + ((y1 - y0) + (vy1 - vy0) t) 2 = ((vx1 - vx0) 2 + (vy1 - vy0) 2) t2 +2 ((x1 - x0) (vx1 - vx0) + (y1 - y0) (vy1 - vy0)) t + (x1 - x0) 2 + (y1 - y0) 2 dejen a = (vx1 - vx0) 2 + (vy1 - vy0) 2 b) 2 b) 2 b)= 2 ((x1 - x0) (vx1 - vx0) + (y1 - y0) (vy1 - vy0)) c = (x1 - x0) 2 + (y1 - y0) 2 entonces el dist (t) se puede escribir como dist(t) = A × T2 + B × T + C.Entonces ERR (DR1, T1, T2) para algún intervalo de tiempo [T1, T2] se convierte en T2 T1 Dist (T) DT = T2 T1 A × T2 + B × T + C DT. Una solución de forma cerrada para la integral indefinida A × T2 + B × T + C DT = (2AT + B) √ AT2 + BT + C 4A + 1 2 LN 1 2B + AT √ A + AT2 + BT + C C 1 √ A- 1 8 ln 1 2b + en √ a + at2 + bt + c b2 a− 3 2 err (dr1, t1, t1 + Δ1 + dt1) y err (dr1, t1, t1 + Δ2 + dt2) luego se puede calcularaplicando los límites apropiados a la solución anterior. En la siguiente sección, consideramos el cálculo de los receptores ΔS para N.5 4.4 Cálculo de los instantes de programación nuevamente observamos el cálculo de ΔS referiéndose a la Figura 2. El remitente elige Δ1 y Δ2 tal que R0 1 +Err (DR1, T1, T1 +Δ1 +DT1) = R0 2 +Err (DR1, T1, T1 +Δ2 +DT2). Si R0 1 y R0 2 son cero, entonces Δ1 y Δ2 deben elegirse de tal manera que ERR (DR1, T1, T1 +Δ1 +DT1) = err (DR1, T1, T1 +Δ2 +DT2). Esta igualdad se mantendrá si Δ1 + DT1 = Δ2 + DT2. Por lo tanto, si no hay un error de exportación relativo acumulado, todo lo que el remitente debe hacer es elegir los Δs de tal manera que contrarresten la diferencia en el retraso a los dos receptores, de modo que reciban el vector DR al mismo tiempotiempo. Como se discutió anteriormente, debido a que el remitente no puede aprender a priori el retraso, siempre habrá un error de exportación relativo acumulado de un vector DR anterior que debe tenerse en cuenta. Para profundizar en esto, considere el cálculo del error de exportación como se ilustra en la sección anterior. Para calcular el ΔS requerimos que R0 1 + Err (DR1, T1, T1 + Δ1 + DT1) = R0 2 + err (DR1, T1, T1 + Δ2 + DT2). Es decir, R0 1+T1+Δ1+DT1 T1 Dist (T) DT = R0 2+T1+Δ2+DT2 T1 Dist (T) DT. Es decir r0 1+t1+dt1 t1 dist (t) dt+t1+dt1+Δ1 t1+dt1 dist (t) dt = r0 2+t1+dt2 t1 dist (t) dt+t1+dt2+Δ2 t1+dt2dist (t) dt. Los componentes R0 1, R0 2, ya se conocen (o estimados por) el remitente. Además, los componentes de error T1+DT1 T1 Dist (T) DT y T1+DT2 T1 Dist (T) DT pueden calcularse a priori por el remitente utilizando valores estimados de DT1 y DT2. Usemos E1 para denotar R0 1 + T1 + DT1 T1 Dist (T) DT y E2 para denotar R0 2 + T1 + DT2 T1 Dist (T) DT. Luego, requerimos que E1+T1+DT1+Δ1 T1+DT1 Dist (T) DT = E2+T1+DT2+Δ2 T1+DT2 Dist (T) DT. Suponga que e1> e2. Luego, para que la ecuación anterior se mantenga, requerimos que t1+dt1+Δ1 t1+dt1 dist (t) dt <t1+dt2+Δ2 t1+dt2 dist (t) dt. Para hacer que el juego lo sea lo más rápido posible dentro de este marco, los valores δ deben hacerse lo más pequeños posible para que los vectores DR se envíen a los receptores lo antes posible sujeto al requisito de equidad. Dado esto, elegiríamos Δ1 para ser cero y calcular Δ2 de la ecuación E1 = E2+T1+DT2+Δ2 T1+DT2 Dist (T) DT. En general, si hay n receptores 1 ,..., N, cuando un remitente genera un vector DR y decide programarlos para que se envíen, primero calcula los valores de EI para todos ellos a partir de los errores de exportación relativos acumulados y las estimaciones de los retrasos. Luego, encuentra el más pequeño de estos valores. Deje que Ek sea el valor más pequeño. El remitente hace que ΔK sea cero y calcula el resto de los ΔS de la igualdad ei+t1+dti+Δi t1+dti dist (t) dt = ek, ∀i 1 ≤ i ≤ n, i = k.(1) El ΔS así obtenido proporciona los instantes de programación del vector DR para los receptores.4.5 Pasos del algoritmo de programación a los efectos de la discusión a continuación, como antes denotamos el error de exportación relativa acumulado en un remitente para el receptor k up hasta que DRI se ri k.Denotemos el retraso programado en el remitente antes de que DRI se envíe al receptor K como Δi k.Dada la discusión anterior, los pasos del algoritmo son los siguientes: 1. El remitente calcula DRI en (digamos) tiempo Ti y luego calcula ΔI K, y Ri - 1 k, ∀K, 1 ≤ k ≤ n basado en la estimación de retrasos DTK, ∀K, 1 ≤ k ≤ n según la ecuación ((1). Programas, DRI se enviará al receptor K en el momento ti + Δi k.2. Los vectores DR se envían a los receptores en los tiempos programados que se reciben después de un retraso de DAK, ∀K, 1 ≤ K ≤ N donde DAK ≤ o> DTK. Los receptores envían el valor de DAK nuevamente al remitente (el receptor puede calcular este valor en función de las marcas de tiempo en el vector DR como se describió anteriormente).3. El remitente calcula Ri K como se describió anteriormente e ilustrado en la Figura 2. El remitente también recomputa (utilizando un método de promedio exponencial similar a la estimación de tiempo de ida y vuelta por TCP [10]) La estimación de DTART DTK del nuevo valor de DAK para el receptor k.4. Regrese al paso 1 para calcular DRI+1 cuando sea necesario y siga los pasos del algoritmo para programar y enviar este vector DR a los receptores.4.6 Manejo de casos en la práctica Hasta ahora que implicidad asumimos que DRI se envía a todos los receptores antes de que se tome una decisión para calcular el próximo DR Vector DRI+1, y los receptores envían el valor de DAK correspondiente a DRI y esta información llega al remitenteAntes de calcular DRI+1 para que pueda calcular Ri+1 K y luego usarlo en el cálculo de ΔI+1 K. Dos problemas necesitan consideración con respecto al algoritmo anterior cuando se usa en la práctica.• Puede suceder que se calcule un nuevo DR Vector incluso antes de que el Vector DR anterior se envíe a todos los receptores. ¿Cómo se manejará esta situación?• ¿Qué sucede si la retroalimentación no llega antes de que DRI+1 se calcule y se programe? Consideremos el primer escenario. Suponemos que se ha programado DRI para ser enviado y los instantes de programación son tales que Δi 1 <ΔI 2 <· · · <Δi n. Suponga que DRI+1 debe calcularse (porque la ruta real se ha desviado excediendo un umbral de la ruta exportada por DRI) en el tiempo Ti+1 donde Ti+Δi K <ti+1 <ti+ΔI K+1. Esto significa que DRI ha sido enviado solo a receptores hasta K en el orden programado. En nuestro algoritmo, en este caso, la cola de pedido de retraso programada está enjuagada, lo que significa que DRI no se envía a los receptores que todavía están en cola para recibirlo, pero se calcula una nueva orden de programación para que todos los receptores envíen DRI+1. Para aquellos receptores que han recibido DRI, suponga por ahora que DAJ, 1 ≤ J ≤ K ha sido recibido de todos los receptores (el escenario en el que DAJ no se ha recibido se considerará como parte del segundo escenario más adelante). Para estos receptores, se puede calcular 1 ≤ j ≤ k. Para aquellos receptores J, K + 1 ≤ J ≤ n a quien no se envió DRI ei J no se aplica. Considere un receptor j, k + 1 ≤ j ≤ n a quien no se envió DRI. Consulte la Figura 3. Para dicho receptor J, cuando Dri+1 debe programarse y 6 TIMETI exportó ruta dtj a b c d ti-1 gi j dri+1 calculado por remitente y DRI para el receptor K+1 a N se elimina de la cola DRI+1 programada paraReceptor K+1 Ti+1 G H E F DRI Programado para el receptor J DRI calculado por el remitente Ruta colocada en el receptor K+1 GI+1 J Figura 3: Cálculo de programación Cuando DRI no se envía al receptor J, K+1 ≤ J ≤ N.Se debe calcular ΔI+1 J, el error de exportación total es el error de exportación relativo acumulado en el tiempo TI cuando se calculó el cronograma para DRI, más la integral de la distancia entre las dos trayectorias AC y BD de la Figura 3 durante el intervalo de tiempo [Ti, ti + 1 + Δi + 1 j + dtj]. Tenga en cuenta que esta integral está dada por ERR (DRI, TI, TI+1)+ERR (DRI+1, TI+1, TI+1+ΔI+1 J+DTJ). Por lo tanto, en lugar de Ei J de la ecuación (1), usamos el valor ri - 1 j+err (dri, ti, ti+1)+err (dri+1, ti+1, ti+1+Δi+1 j+ dtj) donde RI - 1 J es un error de exportación relativo utilizado cuando se calculó el cronograma para DRI. Ahora considere el segundo escenario. Aquí los comentarios Dak correspondientes a DRI no han llegado antes de que DRI+1 se calcule y programe. En este caso, Ri K no se puede calcular. Por lo tanto, en el cálculo de ΔK para DRI+1, esto se supondrá que es cero. Suponemos que se utiliza un mecanismo confiable para enviar DAK al remitente. Cuando esta información llega en un momento posterior, Ri K se calculará y acumulará en futuros errores de exportación relativa (por ejemplo, RI+1 k si DAK se recibe antes de que DRI+2 se calcule) y se use en el cálculo de ΔK cuando un futuro DRSe debe programar vector (por ejemplo DRI+2).4.7 Resultados experimentales Para evaluar la efectividad y cuantificar los beneficios obtenidos mediante el uso del algoritmo de programación, implementamos el algoritmo propuesto en el juego BZFLAG (Battle Zone Flag) [11]. Es un juego de tiradores en primera persona donde los jugadores de los equipos conducen tanques y se mueven dentro de un campo de batalla. El objetivo de los jugadores es navegar y capturar banderas pertenecientes al otro equipo y traerlas de regreso a su propia área. Los jugadores se disparan tanques con balas de tiro. El movimiento de los tanques, así como el de los disparos, se intercambian entre los jugadores que usan vectores DR. Hemos modificado la implementación de BZFLAG para incorporar relojes sincronizados entre los jugadores y el servidor e intercambiar puestos de tiempo con el Vector DR. Configuramos un testbed con cuatro jugadores ejecutando la versión instrumentada de BZFlag, con uno como remitente y el resto como receptores. El enfoque de programación y el caso base en el que cada vector DR se envió a todos los receptores simultáneamente en cada punto de activación se implementaron en la misma ejecución etiquetando los vectores DR de acuerdo con el tipo de enfoque utilizado para enviar el vector DR. NISTNET [12] se usó para introducir demoras en todo el remitente y los tres receptores. Se introdujeron retrasos medios de 800 ms, 500 ms y 200 ms entre el remitente y el primer, segundo y el tercer receptor, respectivamente. Introducimos una varianza de 100 ms (al retraso medio de cada receptor) para modelar la variabilidad en el retraso. El remitente registró los errores de cada receptor cada 100 milisegundos tanto para el enfoque de programación como para el caso base. El remitente también calculó la desviación estándar y la media del error de exportación acumulado de todos los receptores cada 100 milisegundos. La Figura 4 traza la media y la desviación estándar del error de exportación acumulado de todos los receptores en el caso de programación contra el caso base. Tenga en cuenta que el eje X de estos gráficos (y los otros gráficos que siguen) representa el tiempo del sistema cuando se tomó la instantánea del juego. Observe que la desviación estándar del error con la programación es mucho menor en comparación con el caso base. Esto implica que los errores acumulados de los receptores en el caso de programación están más cerca uno del otro. Esto muestra que el enfoque de programación logra la equidad entre los receptores, incluso si están a diferentes distancias (es decir, latencias) del remitente. Observe que la media del error acumulado aumentó múltiples con la programación en comparación con el caso base. Una mayor exploración por el motivo del aumento en la media condujo a la conclusión de que cada vez que los vectores DR están programados para igualar el error total, empuja a cada error total de los receptores más alto. Además, como el error acumulado tiene un componente estimado, el cronograma no es preciso para igualar los errores para los receptores, lo que lleva a que el vector DR llegue más temprano o posterior al horario real. En cualquier caso, el error no se iguala y si el vector DR llega tarde, en realidad aumenta el error para un receptor más allá del error acumulado más alto. Esto significa que en el siguiente disparo, este receptor será el que tenga el error más alto y cualquier otro error de receptores se impulsará a este valor de error. Este efecto de flip-flop conduce al aumento en el error acumulado para todos los receptores. La programación de la justicia conduce a la disminución de la desviación estándar (es decir, aumenta la equidad entre los diferentes jugadores), pero tiene costo de un error medio más alto, lo que puede no ser una característica deseable. Esto nos llevó a explorar diferentes formas de igualar los errores acumulados. El enfoque discutido en la siguiente sección es un enfoque heurístico basado en la siguiente idea. Usando la misma cantidad de vectores DR a lo largo del tiempo que en el caso base, en lugar de enviar los vectores DR a todos los receptores a la misma frecuencia que en el caso base, si podemos aumentar la frecuencia de enviar los vectores DR al receptor conMayor error acumulado y disminuir la frecuencia de enviar vectores DR al receptor con un error acumulado más bajo, podemos igualar el error de exportación de todos los receptores a lo largo del tiempo. Al mismo tiempo, deseamos disminuir el error del receptor con el error más acumulado en el caso base (por supuesto, este receptor se enviaría más vectores DR que en el caso base). Nos referimos a dicho algoritmo como un algoritmo basado en presupuesto.5. Algoritmo basado en presupuesto En un juego, el remitente de una entidad envía vectores DR a todos los receptores cada vez que la entidad cruza un umbral. Bajo el umbral, se generan más vectores DR durante un período de tiempo determinado. Dado que los vectores DR se envían a todos los receptores y no se puede evitar el retraso de la red entre los pares de remitente-receptor, el error de exportación antes de la exportación 3 con el jugador más distante siempre notará que después de la exportación se elimina el error de exportación utilizando el reloj sincronizado entre el reloj entre eljugadores.7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MEDIACUMULELETER TIEME EN SECUESAlgoritmo de programación #1 Figura 4: media y desviación estándar del error con la programación y sin (es decir, caso base).ser más alto que el resto. Para mitigar el desequilibrio en el error, proponemos enviar vectores DR selectivamente a diferentes jugadores en función de los errores acumulados de estos jugadores. El algoritmo basado en el presupuesto se basa en esta idea y hay dos variaciones de la misma. Uno es un esquema probabilístico basado en presupuesto y el otro, un esquema de base de presupuesto determinista.5.1 Esquema probabilístico basado en el presupuesto El esquema basado en el presupuesto probabilístico tiene tres pasos principales: a) Baje el umbral de calibración muerta, pero al mismo tiempo mantenga el número total de DR enviados al mismo tiempo que el caso base, b) en cada desencadenante, elija probabilísticamente a AJugador para enviar el Dr. Vector a, y c) enviar el Vector DR al reproductor elegido. Estos pasos se describen a continuación. La disminución del umbral de DR se implementa de la siguiente manera. Bajar el umbral es equivalente a aumentar el número de puntos de activación donde se generan vectores DR. Supongamos que el umbral es tal que el número de desencadenantes causados por él en el caso base es T y en cada desencadenante N DR vectores enviados por el remitente, lo que resulta en un total de vectores NT DR. Nuestro objetivo es mantener el número total de vectores DR enviados por el remitente fijados en NT, pero reducir el número de vectores DR enviados en cada disparador (es decir, no envíe el vector DR a todos los receptores). Sea N y T el número de vectores DR enviados en cada activador y número de desencadenantes respectivamente en el caso modificado. Queremos asegurarnos de n t = nt. Dado que queremos aumentar el número de puntos de activación, es decir, t> t, esto significaría que n <n.Es decir, no todos los receptores recibirán el Vector DR en cada disparador. En el esquema basado en el presupuesto probabilístico, en cada desencadenante, se calcula una probabilidad para que cada receptor se envíe un vector DR y solo se envía un receptor el DR (n = 1). Esta probabilidad se basa en los pesos relativos de los receptores acumulados por errores. Es decir, un receptor con un error acumulado más alto tendrá una mayor probabilidad de recibir el vector DR. Considere que el error acumulado para tres jugadores son A1, A2 y A3 respectivamente. Entonces, la probabilidad de que el Jugador 1 reciba el Vector DR sería A1 A1+A2+A3. Del mismo modo para los otros jugadores. Una vez que el jugador es elegido, el Dr. Vector se envía a ese jugador. Para comparar el algoritmo probabilístico basado en el presupuesto con el caso base, necesitábamos reducir el umbral para el caso base (para una comparación justa). Como el umbral de cálculo muerto en el caso base ya estaba muy bien, se decidió que en lugar de reducir el umbral, el enfoque probabilístico basado en el presupuesto se compararía con un caso base modificado que usaría el umbral normal como algoritmo basado en el presupuesto, pero el algoritmo pero el algoritmo pero elEl caso base se modificó de manera que cada tercer desencadenante se usara para enviar un vector DR a los tres receptores utilizados en nuestros experimentos. Esto se llamó como el caso base 1/3, ya que resultó en que se envió 1/3 número de vectores DR en comparación con el caso base. El presupuesto por activación para el enfoque basado en la probabilidad se calculó como un vector DR en cada desencadenante en comparación con tres vectores DR en cada tercio de activación en el caso base 1/3;Por lo tanto, los dos casos conducen a la misma cantidad de vectores de DR que se envían con el tiempo. Para evaluar la efectividad del algoritmo probabilístico basado en el presupuesto, instrumimos el juego BZFLAG para usar este enfoque. Utilizamos el mismo Testbed que consta de un remitente y tres receptores con retrasos de 800 ms, 500 ms y 200 ms del remitente y con baja varianza de retraso (100 ms) y varianza de retraso moderada (180 ms). Los resultados se muestran en las Figuras 5 y 6. Como se mencionó anteriormente, el eje X de estos gráficos representa el tiempo del sistema cuando se tomó la instantánea del juego. Observe de las cifras que la desviación estándar del error acumulado entre los receptores con el algoritmo basado en presupuesto probabilístico es menor que el caso base 1/3 y la media es un poco más alta que el caso base 1/3. Esto implica que el juego es más justo en comparación con el caso base 1/3 a costa de aumentar el error medio en una pequeña cantidad en comparación con el caso base 1/3. El aumento del error medio en el caso probabilístico en comparación con el caso base 1/3 se puede atribuir al hecho de que a pesar de que el enfoque probabilístico en promedio envía el mismo número de vectores DR que el caso base 1/3, a veces envíaLos vectores de DR a un receptor con menos frecuencia y, a veces, con mayor frecuencia que el caso base 1/3 debido a su naturaleza probabilística. Cuando un receptor no recibe un vector DR durante mucho tiempo, la trayectoria de los receptores está cada vez más apagado de la trayectoria del remitente y, por lo tanto, la tasa de acumulación del error en el receptor es más alta. En momentos en que un receptor recibe vectores DR con más frecuencia, se acumula un error a una velocidad más baja, pero no hay forma de revertir el error que se construyó cuando no recibió un vector DR durante mucho tiempo. Esto lleva a los receptores a acumular más error en el caso probabilístico en comparación con el caso base 1/3 donde los receptores reciben un vector DR casi periódicamente.8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MEDIACUMULELETROR TIEMPO en segundos 1/3 Caso base Algoritmo Determinista Algoritmo probabilístico 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16150 16200 16250 16300 16300Segundos 1/3 Caso base Algoritmo determinista Algoritmo probabilístico Figura 5: media y desviación estándar de error para diferentes algoritmos (incluidos los algoritmos basados en presupuesto) para una baja varianza de retraso.0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180EstandaryDeviationFacumulatedError Tiempo en segundos 1/3 Caso base Algoritmo Determinista Algoritmo probabilístico Figura 6: media y desviación estándar de error para diferentes algoritmos (incluidos los algoritmos basados en presupuesto) para una varianza de retraso moderada.5.2 Esquema determinista basado en el presupuesto para limitar el aumento del error medio, decidimos modificar el algoritmo basado en el presupuesto para ser determinista. Los primeros dos pasos del algoritmo son los mismos que en el algoritmo probabilístico;Los puntos de activación se incrementan para reducir el umbral y los errores acumulados se utilizan para calcular la probabilidad de que un receptor receptor de un vector DR. Una vez que se completan estos pasos, un cronograma determinista para el receptor se calcula de la siguiente manera: 1. Si hay algún receptor etiquetado para recibir un vector DR en el disparador actual, el remitente envía el vector DR al receptor respectivo. Si al menos un receptor se envió un vector DR, el remitente calcula las probabilidades de cada receptor que recibe un vector DR como se explica anteriormente y sigue los pasos 2 a 6, de lo contrario, no hace nada.2. Para cada receptor, el valor de probabilidad se multiplica con el presupuesto disponible en cada disparador (que se establece en 1 como se explica a continuación) para dar la frecuencia de enviar el vector DR a cada receptor.3. Si alguna de las frecuencia de los receptores después de multiplicar con el presupuesto pasa por 1, la frecuencia de los receptores se establece como 1 y la cantidad excedente se distribuye por igual a todos los receptores al agregar la cantidad a sus frecuencias existentes. Este proceso se repite hasta que todos los receptores tengan una frecuencia de menos o igual a 1. Esto se debe al hecho de que en un desencadenante no podemos enviar más de un vector DR al receptor respectivo. Ese será el desperdicio de vectores DR enviando información redundante.4. (1/frecuencia) nos da el horario en el que el remitente debe enviar vectores DR al receptor respectivo. El crédito obtenido anteriormente (explicado en el paso 5) si alguno se resta del cronograma. Observe que el valor resultante del cronograma podría no ser un entero;Por lo tanto, el valor se redondea tomando el techo del horario. Por ejemplo, si la frecuencia es 1/3.5, esto implica que nos gustaría que un vector DR envíe cada 3.5 desencadenantes. Sin embargo, estamos obligados a enviarlo en el 4to disparador que nos da un crédito de 0.5. Cuando enviemos el Dr. Vector la próxima vez, podríamos enviarlo 9 en el tercer desencadenante debido al crédito 0.5.5. La diferencia entre el cronograma y el techo del cronograma es el crédito que el receptor ha obtenido, lo que se recuerda para el futuro y se usa en la próxima vez como se explica en el Paso 4. 6. Para cada uno de esos receptores que se les envió un vector DR en el disparador actual, los receptores están etiquetados para recibir el siguiente vector DR en el desencadenante que ocurre exactamente el cronograma (el techo del horario) número de veces del activador actual. Observe que ningún horario de otro receptores se modifica en este punto, ya que todos están ejecutando un programa calculado en algún momento anterior. Esos horarios se modificarán automáticamente en el disparador cuando estén programados para recibir el próximo Vector DR. En el primer activador, el remitente envía el vector DR a todos los receptores y utiliza una probabilidad relativa de 1/n para cada receptor y sigue los pasos 2 a 6 para calcular el siguiente horario para cada receptor de la misma manera que se menciona para otrosdesencadenantes. Este algoritmo asegura que cada receptor tenga un cronograma garantizado de recepción de vectores DR y, por lo tanto, no existe irregularidad en el envío del vector DR a cualquier receptor como se observó en el algoritmo probabilístico basado en el presupuesto. Utilizamos el Testbed descrito anteriormente (tres receptores con retrasos variables) para evaluar el algoritmo determinista utilizando el presupuesto de 1 vector DR por disparador para usar el mismo número de vectores DR que en el caso base 1/3. Los resultados de nuestros experimentos se muestran en las Figuras 5 y 6. Se puede observar que la desviación estándar del error en el algoritmo basado en el presupuesto determinista es menor que el caso base 1/3 y también tiene el mismo error medio que el caso base 1/3. Esto indica que el algoritmo determinista es más justo que el caso base 1/3 y, al mismo tiempo, no aumenta el error medio, lo que lleva a una mejor calidad del juego en comparación con el algoritmo probabilístico. En general, al comparar el enfoque determinista con el enfoque probabilístico, encontramos que el error acumulado medio siempre fue menor en el enfoque determinista. Con respecto a la desviación estándar del error acumulado, encontramos que en los casos de varianza fijos o bajos, el enfoque determinista fue generalmente más bajo, pero en casos de varianza más alto, era más difícil sacar conclusiones ya que el enfoque probabilístico a veces era mejor que el deterministaacercarse.6. Conclusiones y el trabajo futuro en los juegos multiplicadores distribuidos jugados en Internet, la trayectoria de los objetos y el jugador dentro del espacio del juego se intercambian en términos de vectores DR. Debido al retraso variable entre los jugadores, estos vectores DR alcanzan diferentes jugadores en diferentes momentos. Hay una ventaja injusta obtenida por los receptores que están más cerca del remitente del DR, ya que pueden hacer que la posición de los remitentes con mayor precisión en tiempo real. En este artículo, primero desarrollamos un modelo para estimar el error al representar las trayectorias de los jugadores en los receptores. Luego presentamos un algoritmo basado en la programación de los vectores DR para que se enviaran a diferentes jugadores en diferentes momentos, igualando así el error en diferentes jugadores. Este algoritmo tiene como objetivo hacer que el juego sea justo para todos los jugadores, pero tiende a aumentar el error medio de los jugadores. Para contrarrestar este efecto, presentamos algoritmos basados en presupuesto donde los vectores DR aún están programados para enviarse a diferentes jugadores en diferentes momentos, pero el algoritmo equilibra la necesidad de ser justos con el requisito de que el error de los peores jugadores (que están más lejos deEl remitente) no aumentan en comparación con el caso base (donde todos los vectores DR se envían a todos los jugadores cada vez que se genera un vector DR). Presentamos dos variaciones de los algoritmos basados en el presupuesto y mediante la experimentación mostró que los algoritmos reducen la desviación estándar del error, lo que hace que el juego sea más justo y al mismo tiempo tiene un error medio comparable para el caso base.7. Referencias [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee y S. Rangarajan, Precisión en juegos de múltiples jugadores distribuidos basados en la reducción muerta, Actas de ACM Sigcomm 2004 Workshop en la red y el soporte del sistema para juegos para juegos(NetGames 2004), agosto de 2004. [2] L. Gautier y C. Diot, Diseño y evaluación de Mimaze, un juego multijugador en Internet, en Proc.de IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistencia en medios interactivos continuos replicados, en Proc.de la Conferencia ACM sobre el trabajo cooperativo compatible con la computadora (CSCW00), 2000, pp. 181-190.[4] S.K. Singhal y D.R. Cheriton, Explotación del historial de posición para una representación remota eficiente en la realidad virtual en red, presencia: teleoperators y entornos virtuales, vol.4, no.2, pp. 169-193, 1995. [5] C. Diot y L. Gautier, Una arquitectura distribuida para aplicaciones interactivas multijugador en Internet, en IEEE Network Magazine, 1999, vol.13, págs. 6-15.[6] L. Pantel y L.C. Wolf, sobre el impacto del retraso en los juegos multijugador en tiempo real, en Proc.de ACM Nossdav02, mayo de 2002. [7] Y. Lin, K. Guo y S. Paul, Sync-MS: Servicio de mensajería sincronizado para juegos distribuidos de jugadores múltiples en tiempo real, en Proc.de la décima Conferencia Internacional IEEE sobre protocolos de red (ICNP), noviembre de 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan y S. Paul, un marco de intercambio de mensajes justo para juegos múltiples distribuidos, en Proc.de NetGames2003, mayo de 2003. [9] N. E. Baughman y B. N. Levine, Juega a prueba de trucos para juegos en línea centralizados y distribuidos, en Proc.de IEEE Infocom01, abril de 2001. [10] M. Allman y V. Paxson, al estimar las propiedades de la ruta de red de extremo a extremo, en Proc.de ACM SIGCOMM99, septiembre de 1999. [11] Foro BZFlag, juego BZFlag, URL: http://www.bzflag.org.[12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/.10",
    "original_sentences": [
        "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
        "The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender.",
        "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
        "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
        "This leads to unfairness in game playing.",
        "In this paper, we first introduce an error measure for estimating this inaccuracy.",
        "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
        "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
        "To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the mean error thereby maintaining the accuracy of game playing.",
        "We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular distributed multi-player game.",
        "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
        "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
        "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
        "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
        "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
        "During the course of the game, the players and the entities move within the game space.",
        "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
        "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
        "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
        "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
        "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
        "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
        "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
        "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
        "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
        "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
        "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
        "Therefore, the receiving players can, at best, follow the exported path.",
        "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
        "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
        "We refer to this error as the export error.",
        "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
        "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
        "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
        "That is, the placed and the exported paths match after the DR vector is received.",
        "We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
        "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
        "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
        "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
        "This brings in unfairness in game playing.",
        "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
        "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players.",
        "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
        "We propose two algorithms to achieve this.",
        "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
        "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
        "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
        "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
        "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
        "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
        "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
        "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
        "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
        "It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game.",
        "In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
        "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
        "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
        "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
        "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
        "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
        "Players with a network delay larger than 100 ms simply cannot participate in the game.",
        "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
        "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
        "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
        "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
        "These additions and deletions are communicated to the game server using action messages.",
        "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
        "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
        "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
        "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
        "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
        "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
        "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
        "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
        "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
        "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
        "In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
        "Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level accuracy of game playing.",
        "Conclusions are presented in Section 6. 2 3.",
        "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
        "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
        "As mentioned before, we assume synchronized clocks among the participating players.",
        "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
        "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
        "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
        "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
        "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
        "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
        "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
        "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
        "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
        "Note that the computation of time difference is feasible since all the clocks are synchronized.",
        "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
        "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
        "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
        "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
        "The horizontal axis shows the time which is synchronized among all the players.",
        "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
        "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
        "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
        "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
        "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
        "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
        "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
        "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
        "The velocity components vx1 and vy1 are used to project and render this entity further.",
        "Let us now consider the error due to network delay.",
        "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
        "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
        "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
        "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
        "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
        "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
        "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
        "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
        "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
        "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
        "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
        "As we discussed earlier, this export error is unavoidable.",
        "The above figure and example illustrates one receiver only.",
        "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
        "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
        "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
        "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
        "We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time.",
        "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
        "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
        "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
        "In this section we provide motivations for the algorithm and describe the steps it goes through.",
        "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
        "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
        "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
        "Consider the example in Figure 2.",
        "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
        "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
        "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
        "Now consider DR1.",
        "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
        "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
        "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
        "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
        "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
        "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
        "Note that the above errors from the senders perspective are only estimates.",
        "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
        "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
        "The concept of relative export error is illustrated in Figure 2.",
        "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
        "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
        "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
        "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
        "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
        "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
        "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
        "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
        "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
        "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
        "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
        "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
        "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
        "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
        "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
        "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
        "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
        "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
        "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
        "THEOREM 4.1.",
        "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
        "Assume that the premise holds for some i.",
        "We show that it holds for i+1.",
        "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
        "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
        "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
        "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
        "Note that the values of R0 1 and R0 2 are already known at the sender.",
        "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
        "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
        "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
        "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
        "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
        "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
        "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
        "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
        "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
        "This equality will hold if δ1 + dt1 = δ2 + dt2.",
        "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
        "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
        "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
        "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
        "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
        "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
        "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
        "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
        "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
        "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
        "Assume that E1 > E2.",
        "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
        "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
        "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
        "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
        "Then, it finds the smallest of these values.",
        "Let Ek be the smallest value.",
        "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
        "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
        "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
        "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
        "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
        "The sender computes Ri k as described earlier and illustrated in Figure 2.",
        "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
        "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
        "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
        "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
        "Let us consider the first scenario.",
        "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
        "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
        "This means, DRi has been sent only to receivers up to k in the scheduled order.",
        "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
        "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
        "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
        "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
        "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
        "Refer to Figure 3.",
        "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
        "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
        "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
        "Now consider the second scenario.",
        "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
        "In this case, Ri k cannot be computed.",
        "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
        "We do assume that a reliable mechanism is used to send dak back to the sender.",
        "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
        "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
        "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
        "The players shoot each others tanks using shooting bullets.",
        "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
        "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
        "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
        "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
        "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
        "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
        "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
        "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
        "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
        "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
        "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
        "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
        "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
        "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
        "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
        "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
        "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
        "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
        "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
        "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
        "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
        "This led us to explore different ways of equalizing the accumulated errors.",
        "The approach discussed in the following section is a heuristic approach based on the following idea.",
        "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
        "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
        "We refer to such an algorithm as a budget based algorithm. 5.",
        "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
        "Lower the threshold, more DR vectors are generated during a given time period.",
        "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
        "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
        "The budget based algorithm is based on this idea and there are two variations of it.",
        "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
        "These steps are described below.",
        "The lowering of DR threshold is implemented as follows.",
        "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
        "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
        "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
        "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
        "We want to ensure n t = nt.",
        "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
        "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
        "This probability is based on the relative weights of the receivers accumulated errors.",
        "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
        "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
        "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
        "Similarly for the other players.",
        "Once the player is picked, the DR vector is sent to that player.",
        "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
        "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
        "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
        "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
        "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
        "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
        "The results are shown in Figures 5 and 6.",
        "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
        "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
        "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
        "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
        "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
        "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
        "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic.",
        "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
        "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
        "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
        "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
        "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
        "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
        "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
        "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
        "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
        "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
        "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
        "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
        "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
        "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
        "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
        "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
        "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
        "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
        "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
        "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
        "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
        "Results from our experiments are shown in Figures 5 and 6.",
        "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
        "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
        "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
        "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
        "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
        "Due to the variable delay between players, these DR vectors reach different players at different times.",
        "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
        "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
        "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
        "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
        "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
        "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
        "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
        "Singhal and D.R.",
        "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
        "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
    ],
    "error_count": 0,
    "keys": {
        "fairness": {
            "translated_key": "justicia",
            "is_in_text": true,
            "original_annotated_sentences": [
                "<br>fairness</br> in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
                "To mitigate this effect, we propose a budget based algorithm that provides improved <br>fairness</br> without increasing the mean error thereby maintaining the accuracy of game playing.",
                "We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular distributed multi-player game.",
                "We show through experiments that these algorithms provide <br>fairness</br> among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the export error.",
                "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
                "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the <br>fairness</br> of these games in spite of the varying network delays by equalizing the export error at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure <br>fairness</br> in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
                "It improves the <br>fairness</br> of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game.",
                "In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a network delay larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of <br>fairness</br> in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "<br>fairness</br> is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
                "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on <br>fairness</br> without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
                "Section 5, describes the budget based algorithm that achieves improved <br>fairness</br> but without reducing the level accuracy of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to network delay.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
                "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
                "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this export error is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
                "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
                "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative export error is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the <br>fairness</br> requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves <br>fairness</br> among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for <br>fairness</br> leads to the decrease in standard deviation (i.e., increases the <br>fairness</br> among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a budget based algorithm. 5.",
                "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The budget based algorithm is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
                "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for <br>fairness</br> with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "\"Justicia\" en los juegos múltiples distribuidos de los jugadores basados en la recién nacidos Sudhir Aggarwal Hemant Banavar Departamento de Ciencias de la Computación Florida Universidad Estatal de Florida, Tallahassee, FL Correo electrónico: {Sudhir, banavarth@cs.fsu.edu sarit Mukherjee Sampath Rangarajan Center for Red Research BellLaboratories, Holmdel, NJ Correo electrónico: {sarit, sampath}@bell-labs.com Resumen En un juego de jugadores múltiples distribuido que utiliza vectores de recuperación muerta para intercambiar información de movimiento entre los jugadores, existe una inexactitud para representar los objetos en el receptor debidopara retrasar la red entre el remitente y el receptor.",
                "Para mitigar este efecto, proponemos un algoritmo basado en presupuesto que proporciona una \"equidad\" mejorada sin aumentar el error medio, manteniendo así la precisión del juego.",
                "Mostramos a través de los experimentos que estos algoritmos proporcionan \"justicia\" entre los jugadores a pesar de los retrasos de red ampliamente variables.",
                "Nuestro objetivo en este documento es mejorar la \"equidad\" de estos juegos a pesar de los diferentes retrasos en la red al igualar el error de exportación en los jugadores.",
                "A través de una implementación de este algoritmo utilizando el juego de código abierto BZFLAG, mostramos que este algoritmo hace que el juego sea muy justo (medimos la \"equidad\" en términos de la desviación estándar del error).",
                "Mejora la \"justicia\" del juego, pero al mismo tiempo lo hace sin presionar el error medio de los jugadores, manteniendo así la precisión del juego.",
                "Ha habido algunos documentos que han estudiado el problema de la \"equidad\" en un juego distribuido por mecanismos de entrega de mensajes más sofisticados.",
                "La \"justicia\" se logra ordenando la entrega de la acción y actualizar los mensajes en el servidor de juegos y los jugadores, respectivamente, en función de la noción de un orden justo que tiene en cuenta los retrasos entre el servidor de juegos y los diferentes jugadores.",
                "Hacemos hincapié en que el enfoque de este documento está en la \"justicia\" sin abordar el tema de la trampa.",
                "La Sección 5 describe el algoritmo basado en el presupuesto que logra una \"equidad\" mejorada pero sin reducir la precisión del nivel del juego.",
                "Para hacer que el juego lo sea lo más rápido posible dentro de este marco, los valores δ deben hacerse lo más pequeños posible para que los vectores DR se envíen a los receptores lo antes posible sujeto al requisito de \"equidad\".",
                "Esto muestra que el enfoque de programación logra \"justicia\" entre los receptores, incluso si están a diferentes distancias (es decir, latencias) del remitente.",
                "La programación de \"justicia\" conduce a la disminución de la desviación estándar (es decir, aumenta la \"justicia\" entre los diferentes jugadores), pero tiene un costo de un error medio más alto, lo que puede no ser una característica deseable.",
                "Para contrarrestar este efecto, presentamos algoritmos basados en presupuesto donde los vectores DR aún están programados para enviarse a diferentes jugadores en diferentes momentos, pero el algoritmo equilibra la necesidad de \"equidad\" con el requisito de que el error de los peores jugadores (que seanAdemás del remitente) no aumentan en comparación con el caso base (donde todos los vectores de la DR se envían a todos los jugadores cada vez que se genera un vector DR)."
            ],
            "translated_text": "",
            "candidates": [
                "justicia",
                "Justicia",
                "justicia",
                "equidad",
                "justicia",
                "justicia",
                "justicia",
                "equidad",
                "justicia",
                "equidad",
                "justicia",
                "justicia",
                "justicia",
                "equidad",
                "justicia",
                "justicia",
                "justicia",
                "justicia",
                "justicia",
                "equidad",
                "justicia",
                "equidad",
                "justicia",
                "justicia",
                "justicia",
                "justicia",
                "justicia",
                "justicia",
                "equidad"
            ],
            "error": []
        },
        "dead-reckoning vector": {
            "translated_key": "vector de estima",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the <br>dead-reckoning vector</br>, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
                "To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the mean error thereby maintaining the accuracy of game playing.",
                "We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular distributed multi-player game.",
                "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the export error.",
                "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
                "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
                "It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game.",
                "In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a network delay larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
                "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
                "Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level accuracy of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to network delay.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
                "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
                "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this export error is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
                "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
                "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative export error is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a budget based algorithm. 5.",
                "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The budget based algorithm is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
                "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "El objeto se coloca en el receptor en la posición indicada por el \"vector de recuperación muerta\", pero para ese momento, la posición real podría haber cambiado considerablemente en el remitente."
            ],
            "translated_text": "",
            "candidates": [
                "vector de madera",
                "vector de recuperación muerta"
            ],
            "error": []
        },
        "distributed multi-player game": {
            "translated_key": "juego multijugador distribuido",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a <br>distributed multi-player game</br> that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
                "To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the mean error thereby maintaining the accuracy of game playing.",
                "We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular <br>distributed multi-player game</br>.",
                "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a <br>distributed multi-player game</br>, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the export error.",
                "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
                "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
                "It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game.",
                "In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a network delay larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
                "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
                "Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level accuracy of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to network delay.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
                "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
                "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this export error is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
                "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
                "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative export error is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a budget based algorithm. 5.",
                "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The budget based algorithm is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
                "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Equidad en los juegos de múltiples jugadores distribuidos basados en la recubrimiento muerto Sudhir Aggarwal Hemant Banavar Departamento de Ciencias de la Computación de la Universidad Estatal de Florida, Tallahassee, FL Correo electrónico: {Sudhir, banavarht.fsu.edu sarit Mukherjee Sampath Rangarajan Center para la investigación Bell Laboratories,,Holmdel, NJ Correo electrónico: {sarit, sampath}@bell-labs.com Resumen En un \"juego multijugador distribuido\" que utiliza vectores de recuperación muerta para intercambiar información de movimiento entre los jugadores, existe una inexactitud en la presentación de los objetos en el receptor debidopara retrasar la red entre el remitente y el receptor.",
                "Hemos implementado tanto el algoritmo de programación como el algoritmo basado en el presupuesto como parte de BZFLAG, un popular \"juego multiplicado\".",
                "Introducción En un \"juego multijugador distribuido\", los jugadores normalmente se distribuyen en Internet y tienen retrasos diferentes entre sí o con un servidor de juegos central."
            ],
            "translated_text": "",
            "candidates": [
                "Juego distribuido de múltiples jugadores",
                "juego multijugador distribuido",
                "Juego distribuido de múltiples jugadores",
                "juego multiplicado",
                "Juego distribuido de múltiples jugadores",
                "juego multijugador distribuido"
            ],
            "error": []
        },
        "budget based algorithm": {
            "translated_key": "algoritmo basado en presupuesto",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
                "To mitigate this effect, we propose a <br>budget based algorithm</br> that provides improved fairness without increasing the mean error thereby maintaining the accuracy of game playing.",
                "We have implemented both the scheduling algorithm and the <br>budget based algorithm</br> as part of BZFlag, a popular distributed multi-player game.",
                "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the export error.",
                "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
                "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a <br>budget based algorithm</br> which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the <br>budget based algorithm</br> follows a more balanced approach.",
                "It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game.",
                "In addition, the <br>budget based algorithm</br> is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a network delay larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
                "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
                "Section 5, describes the <br>budget based algorithm</br> that achieves improved fairness but without reducing the level accuracy of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to network delay.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
                "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
                "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this export error is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
                "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
                "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative export error is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a <br>budget based algorithm</br>. 5.",
                "<br>budget based algorithm</br> In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The <br>budget based algorithm</br> is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic <br>budget based algorithm</br> with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the <br>budget based algorithm</br> but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic <br>budget based algorithm</br>, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic <br>budget based algorithm</br> is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
                "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the <br>budget based algorithm</br> to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic <br>budget based algorithm</br> is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Para mitigar este efecto, proponemos un \"algoritmo basado en presupuesto\" que proporciona una mayor equidad sin aumentar el error medio, manteniendo así la precisión del juego.",
                "Hemos implementado tanto el algoritmo de programación como el \"algoritmo basado en el presupuesto\" como parte de BZFlag, un popular juego de múltiples jugadores distribuidos.",
                "Para aliviar este efecto, proponemos un \"algoritmo basado en presupuesto\" que presupueste cómo se envían los DR a diferentes jugadores.",
                "Los resultados experimentales de BZFLAG ilustran que el \"algoritmo basado en presupuesto\" sigue un enfoque más equilibrado.",
                "Además, se muestra que el \"algoritmo basado en presupuesto\" alcanza el mismo nivel de precisión del juego que la implementación actual de BZFLAG utilizando mucho menos número de vectores DR.2.",
                "La Sección 5 describe el \"algoritmo basado en el presupuesto\" que logra una mayor justicia, pero sin reducir la precisión del nivel del juego.",
                "Nos referimos a dicho algoritmo como un \"algoritmo basado en presupuesto\".5.",
                "\"Algoritmo basado en el presupuesto\" En un juego, el remitente de una entidad envía vectores DR a todos los receptores cada vez que la entidad cruza un umbral.",
                "El \"algoritmo basado en presupuesto\" se basa en esta idea y hay dos variaciones de la misma.",
                "Para comparar el \"algoritmo basado en presupuesto\" probabilístico con el caso base, necesitábamos reducir el umbral para el caso base (para comparación justa).",
                "Como el umbral de cuentas de cálculo muerto en el caso base ya estaba muy bien, se decidió que en lugar de reducir el umbral, el enfoque probabilístico basado en el presupuesto se compararía con un caso base modificado que usaría el umbral normal como el \"algoritmo presupuestario\"Pero el caso base se modificó de tal manera que cada tercer desencadenante se utilizaría para enviar un vector DR a los tres receptores utilizados en nuestros experimentos.",
                "Para evaluar la efectividad del \"algoritmo basado en presupuesto\" probabilístico, instrumimos el juego BZFLAG para usar este enfoque.",
                "Observe de las cifras que la desviación estándar del error acumulado entre los receptores con el \"algoritmo basado en presupuesto\" probabilístico es menor que el caso base 1/3 y la media es un poco más alta que el caso base de 1/3.",
                "Esto lleva a los receptores a acumular más error en el caso probabilístico en comparación con el caso base 1/3 donde los receptores reciben un vector DR casi periódicamente.8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MEDIACUMULELETROR TIEMPO en segundos 1/3 Caso base Algoritmo Determinista Algoritmo probabilístico 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16150 16200 16250 16300 16300Segundos 1/3 Caso base Algoritmo determinista Algoritmo probabilístico Figura 5: media y desviación estándar de error para diferentes algoritmos (incluidos los algoritmos basados en presupuesto) para una baja varianza de retraso.0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180EstandaryDeviationFacumulatedError Tiempo en segundos 1/3 Caso base Algoritmo Determinista Algoritmo probabilístico Figura 6: media y desviación estándar de error para diferentes algoritmos (incluidos los algoritmos basados en presupuesto) para una varianza de retraso moderada.5.2 Esquema determinista basado en el presupuesto para limitar el aumento del error medio, decidimos modificar el \"algoritmo basado en presupuesto\" para ser determinista.",
                "Se puede observar que la desviación estándar del error en el \"algoritmo basado en presupuesto\" determinista es menor que el caso base 1/3 y también tiene el mismo error medio que el caso base 1/3."
            ],
            "translated_text": "",
            "candidates": [
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en el presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "Algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en el presupuesto",
                "Algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "Algoritmo basado en el presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo presupuestario",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto",
                "algoritmo basado en presupuesto"
            ],
            "error": []
        },
        "mean error": {
            "translated_key": "error medio",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall <br>mean error</br> of all players.",
                "To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the <br>mean error</br> thereby maintaining the accuracy of game playing.",
                "We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular distributed multi-player game.",
                "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the export error.",
                "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
                "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
                "It improves the fairness of the game but at the same time does so without pushing up the <br>mean error</br> of the players thereby maintaining the accuracy of the game.",
                "In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a network delay larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
                "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
                "Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level accuracy of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to network delay.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
                "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
                "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this export error is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
                "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
                "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative export error is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher <br>mean error</br>, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a budget based algorithm. 5.",
                "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The budget based algorithm is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the <br>mean error</br> by a small amount as compared to the 1/3 base case.",
                "The increase in <br>mean error</br> in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in <br>mean error</br> we decided to modify the budget based algorithm to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same <br>mean error</br> as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the <br>mean error</br> thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the <br>mean error</br> of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable <br>mean error</br> to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Este algoritmo hace que el juego sea muy justo a expensas de aumentar el \"error medio\" general de todos los jugadores.",
                "Para mitigar este efecto, proponemos un algoritmo basado en el presupuesto que proporciona una mayor equidad sin aumentar el \"error medio\", manteniendo así la precisión del juego.",
                "Mejora la justicia del juego, pero al mismo tiempo lo hace sin presionar el \"error medio\" de los jugadores, manteniendo así la precisión del juego.",
                "La programación de la justicia conduce a la disminución de la desviación estándar (es decir, aumenta la equidad entre los diferentes jugadores), pero tiene costo de un \"error medio\" más alto, que puede no ser una característica deseable.",
                "Esto implica que el juego es más justo en comparación con el caso base 1/3 a costa de aumentar el \"error medio\" en una pequeña cantidad en comparación con el caso base 1/3.",
                "El aumento en el \"error medio\" en el caso probabilístico en comparación con el caso base 1/3 se puede atribuir al hecho de que a pesar de que el enfoque probabilístico en promedio envía el mismo número de vectores de DR que el caso base de 1/3, esA veces envía vectores DR a un receptor con menos frecuencia y a veces con más frecuencia que el caso base 1/3 debido a su naturaleza probabilística.",
                "Esto lleva a los receptores a acumular más error en el caso probabilístico en comparación con el caso base 1/3 donde los receptores reciben un vector DR casi periódicamente.8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MEDIACUMULELETROR TIEMPO en segundos 1/3 Caso base Algoritmo Determinista Algoritmo probabilístico 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16150 16200 16250 16300 16300Segundos 1/3 Caso base Algoritmo determinista Algoritmo probabilístico Figura 5: media y desviación estándar de error para diferentes algoritmos (incluidos los algoritmos basados en presupuesto) para una baja varianza de retraso.0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180EstandaryDeviationFacumulatedError Tiempo en segundos 1/3 Caso base Algoritmo Determinista Algoritmo probabilístico Figura 6: media y desviación estándar de error para diferentes algoritmos (incluidos los algoritmos basados en presupuesto) para una varianza de retraso moderada.5.2 Esquema determinista basado en el presupuesto para limitar el aumento del \"error medio\", decidimos modificar el algoritmo basado en el presupuesto para ser determinista.",
                "Se puede observar que la desviación estándar del error en el algoritmo basado en el presupuesto determinista es menor que el caso base 1/3 y también tiene el mismo \"error medio\" que el caso base 1/3.",
                "Esto indica que el algoritmo determinista es más justo que el caso base 1/3 y, al mismo tiempo, no aumenta el \"error medio\", lo que lleva a una mejor calidad del juego en comparación con el algoritmo probabilístico.",
                "Este algoritmo tiene como objetivo hacer que el juego sea justo para todos los jugadores, pero tiende a aumentar el \"error medio\" de los jugadores.",
                "Presentamos dos variaciones de los algoritmos basados en el presupuesto y mediante la experimentación mostró que los algoritmos reducen la desviación estándar del error, lo que hace que el juego sea más justo y, al mismo tiempo, tiene un \"error medio\" comparable al caso base.7."
            ],
            "translated_text": "",
            "candidates": [
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "error medio",
                "Error medio",
                "error medio"
            ],
            "error": []
        },
        "accuracy": {
            "translated_key": "precisión",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
                "To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the mean error thereby maintaining the <br>accuracy</br> of game playing.",
                "We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular distributed multi-player game.",
                "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of <br>accuracy</br> in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the export error.",
                "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
                "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
                "It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the <br>accuracy</br> of the game.",
                "In addition, the budget based algorithm is shown to achieve the same level of <br>accuracy</br> of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a network delay larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
                "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
                "Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level <br>accuracy</br> of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to network delay.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
                "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
                "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this export error is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
                "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
                "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative export error is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a budget based algorithm. 5.",
                "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The budget based algorithm is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
                "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, <br>accuracy</br> in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Para mitigar este efecto, proponemos un algoritmo basado en presupuesto que proporciona una mayor equidad sin aumentar el error medio, manteniendo así la \"precisión\" del juego.",
                "Una propiedad adicional de los algoritmos propuestos es que requieren que se intercambien menos número de DR (en comparación con la implementación actual de BZFLAG) para lograr el mismo nivel de \"precisión\" en el juego.",
                "Mejora la justicia del juego, pero al mismo tiempo lo hace sin presionar el error medio de los jugadores, manteniendo así la \"precisión\" del juego.",
                "Además, se muestra que el algoritmo basado en el presupuesto alcanza el mismo nivel de \"precisión\" del juego que la implementación actual de BZFLAG utilizando mucho menos número de vectores DR.2.",
                "La Sección 5 describe el algoritmo basado en el presupuesto que logra una mayor justicia pero sin reducir el nivel de \"precisión\" del juego.",
                "Referencias [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee y S. Rangarajan, \"Precisión\" en juegos de múltiples jugadores distribuidos basados en la reducción muerta, Actas de ACM Sigcomm 2004 Workshop on Network y System Supportpara juegos (NetGames 2004), agosto de 2004. [2] L. Gautier y C. Diot, Diseño y evaluación de Mimaze, un juego multijugador en Internet, en Proc.de IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistencia en medios interactivos continuos replicados, en Proc.de la Conferencia ACM sobre el trabajo cooperativo compatible con la computadora (CSCW00), 2000, pp. 181-190.[4] S.K."
            ],
            "translated_text": "",
            "candidates": [
                "exactitud",
                "precisión",
                "exactitud",
                "precisión",
                "exactitud",
                "precisión",
                "precisión",
                "precisión",
                "exactitud",
                "precisión",
                "exactitud",
                "Precisión"
            ],
            "error": []
        },
        "scheduling algorithm": {
            "translated_key": "algoritmo de programación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
                "To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the mean error thereby maintaining the accuracy of game playing.",
                "We have implemented both the <br>scheduling algorithm</br> and the budget based algorithm as part of BZFlag, a popular distributed multi-player game.",
                "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the export error.",
                "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
                "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the <br>scheduling algorithm</br>) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
                "It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game.",
                "In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a network delay larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
                "Both the <br>scheduling algorithm</br> and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector <br>scheduling algorithm</br> that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the <br>scheduling algorithm</br> on the open source game BZFlag.",
                "Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level accuracy of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to network delay.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
                "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
                "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this export error is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
                "The goal of the DR vector <br>scheduling algorithm</br> to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
                "<br>scheduling algorithm</br> FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector <br>scheduling algorithm</br> is to make the export error equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative export error is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the <br>scheduling algorithm</br> For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the <br>scheduling algorithm</br>, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a budget based algorithm. 5.",
                "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case <br>scheduling algorithm</br> #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case <br>scheduling algorithm</br> #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The budget based algorithm is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
                "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Hemos implementado tanto el \"Algoritmo de programación\" como el algoritmo basado en el presupuesto como parte de BZFLAG, un popular juego multiplicado por distribución.",
                "El primer algoritmo (al que nos referimos como el \"Algoritmo de programación\") se basa en estimar el retraso entre los jugadores y refinar el envío de vectores DR al programarlos para ser enviados a diferentes jugadores en diferentes momentos en cada punto de generación de DR.",
                "Tanto el \"algoritmo de programación\" como el algoritmo basado en el presupuesto descrito en nuestro documento usan los vectores DR y, por lo tanto, no son a prueba de trucos.",
                "En la sección 4, describimos el \"algoritmo de programación\" del vector DR que tiene como objetivo hacer que el error de exportación sea igual a los jugadores con retrasos variables del remitente de un vector DR, seguido de resultados experimentales obtenidos de la instrumentación del \"Algoritmo de programación\" en elJuego de código abierto bzflag.",
                "El objetivo del \"Algoritmo de Programación\" del Dr. Vector que se describirá en la siguiente sección es hacer que este error de exportación (acumulativo) sea igual a cada jugador de forma independiente para cada una de las entidades que componen el juego.4.",
                "\"Algoritmo de programación\" que fingió a los vectores DR en la Sección 3, mostramos cómo la demora del remitente de un nuevo DR 2 Normalmente, los vectores DR no se calculan de manera periódica, sino a pedido, donde la decisión de calcular un nuevo vector DR esBasado en que se supere algún umbral en la desviación entre la ruta real y la ruta exportada por el Vector DR anterior.3 Vector al receptor del vector DR podría conducir a un error de exportación debido a la desviación de la ruta colocada de la ruta exportada en el receptor hasta que se recibe este nuevo vector DR.",
                "También mencionamos que el objetivo del \"Algoritmo de programación\" del Vector DR es hacer que el error de exportación sea igual a todos los receptores durante un período de tiempo.",
                "El remitente hace que ΔK sea cero y calcula el resto de los ΔS de la igualdad ei+t1+dti+Δi t1+dti dist (t) dt = ek, ∀i 1 ≤ i ≤ n, i = k.(1) El ΔS así obtenido proporciona los instantes de programación del vector DR para los receptores.4.5 Pasos del \"Algoritmo de programación\" para el propósito de la discusión a continuación, como antes denotamos el error de exportación relativa acumulado en un remitente para el receptor K hasta que Dri sea ri k.Denotemos el retraso programado en el remitente antes de que DRI se envíe al receptor K como Δi k.Dada la discusión anterior, los pasos del algoritmo son los siguientes: 1.",
                "Cuando esta información llega en un momento posterior, Ri K se calculará y acumulará en futuros errores de exportación relativa (por ejemplo, RI+1 k si DAK se recibe antes de que DRI+2 se calcule) y se use en el cálculo de ΔK cuando un futuro DRSe debe programar vector (por ejemplo DRI+2).4.7 Resultados experimentales Para evaluar la efectividad y cuantificar los beneficios obtenidos mediante el uso del \"Algoritmo de programación\", implementamos el algoritmo propuesto en el juego BZFLAG (Battle Zone Flag) [11].",
                "Dado que los vectores DR se envían a todos los receptores y no se puede evitar el retraso de la red entre los pares de remitente-receptor, el error de exportación antes de la exportación 3 con el jugador más distante siempre notará que después de la exportación se elimina el error de exportación utilizando el reloj sincronizado entre el reloj entre eljugadores.7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MEDIACUMULELETERError Tiempo en segundos Caso base \"Algoritmo de programación\" #1 0 50 100 150 2000 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16300 Estándar StandardDdevicofaccumulationCaso base \"Algoritmo de programación\" #1 Figura 4: media y desviación estándar del error con la programación y sin (es decir, caso base).ser más alto que el resto."
            ],
            "translated_text": "",
            "candidates": [
                "algoritmo de programación",
                "Algoritmo de programación",
                "algoritmo de programación",
                "Algoritmo de programación",
                "algoritmo de programación",
                "algoritmo de programación",
                "algoritmo de programación",
                "algoritmo de programación",
                "Algoritmo de programación",
                "Algoritmo de programación",
                "Algoritmo de Programación",
                "algoritmo de programación",
                "Algoritmo de programación",
                "algoritmo de programación",
                "Algoritmo de programación",
                "Algoritmo de programación",
                "Algoritmo de programación",
                "algoritmo de programación",
                "Algoritmo de programación",
                "algoritmo de programación",
                "Algoritmo de programación",
                "Algoritmo de programación"
            ],
            "error": []
        },
        "quantization": {
            "translated_key": "cuantificación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
                "To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the mean error thereby maintaining the accuracy of game playing.",
                "We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular distributed multi-player game.",
                "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are <br>quantization</br> of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the export error.",
                "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
                "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
                "It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game.",
                "In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a network delay larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
                "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
                "Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level accuracy of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to network delay.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
                "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
                "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this export error is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
                "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
                "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative export error is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a budget based algorithm. 5.",
                "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The budget based algorithm is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
                "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Los vectores DR son \"cuantización\" de la trayectoria real (que nos referimos como ruta real) en un jugador."
            ],
            "translated_text": "",
            "candidates": [
                "cuantificación",
                "cuantización"
            ],
            "error": []
        },
        "export error": {
            "translated_key": "error de exportación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
                "To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the mean error thereby maintaining the accuracy of game playing.",
                "We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular distributed multi-player game.",
                "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the <br>export error</br>.",
                "Note that the <br>export error</br>, in turn, results in a deviation between the real and the placed paths.",
                "The <br>export error</br> manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before <br>export error</br>, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after <br>export error</br> is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before <br>export error</br> can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall <br>export error</br>.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the <br>export error</br> at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative <br>export error</br> over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the <br>export error</br> the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the <br>export error</br> due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
                "It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game.",
                "In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a network delay larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
                "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector scheduling algorithm that aims to make the <br>export error</br> equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
                "Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level accuracy of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to network delay.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the <br>export error</br>.",
                "A way to represent the <br>export error</br> is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the <br>export error</br> due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the <br>export error</br>.",
                "Note that there would have been an <br>export error</br> created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the <br>export error</br> is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this <br>export error</br> is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different <br>export error</br> values at different players.",
                "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) <br>export error</br> equal at every player independently for each of the entities that make up the game. 4.",
                "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to <br>export error</br> because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector scheduling algorithm is to make the <br>export error</br> equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative <br>export error</br> Referring back to the discussion from Section 3, from the senders perspective, the <br>export error</br> at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the <br>export error</br> from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the <br>export error</br> will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual <br>export error</br> is the relative <br>export error</br> (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative <br>export error</br> is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the <br>export error</br> induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated <br>export error</br> and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative <br>export error</br> for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative <br>export error</br> for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative <br>export error</br> values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated <br>export error</br> (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated <br>export error</br> is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the <br>export error</br> Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative <br>export error</br>, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative <br>export error</br> from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the <br>export error</br> as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative <br>export error</br> at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total <br>export error</br> is the accumulated relative <br>export error</br> at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative <br>export error</br> used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated <br>export error</br> of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated <br>export error</br> of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the <br>export error</br> of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a budget based algorithm. 5.",
                "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before <br>export error</br> 3 with the most distant player will always 3 Note that after <br>export error</br> is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The budget based algorithm is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
                "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Nos referimos a este error como el \"error de exportación\".",
                "Tenga en cuenta que el \"error de exportación\", a su vez, da como resultado una desviación entre las rutas reales y colocadas.",
                "El \"error de exportación\" se manifiesta debido a la desviación entre la ruta exportada en el remitente y la ruta colocada en el receptor (i) 1 antes de que se reciba el vector DR en el receptor (denominado \"error de exportación\" anterior, y(ii) Después de que el vector DR se reciba en el receptor (denominado error de exportación después de la exportación).",
                "En un artículo anterior [1], demostramos que al sincronizar los relojes en todos los jugadores y al usar una técnica basada en mensajes de estampado de tiempo que transportan los vectores DR, podemos garantizar que el \"error de exportación\" posterior se haga cero.",
                "También demostramos que el \"error de exportación\" anterior nunca se puede eliminar, ya que siempre hay un retraso de red no cero, pero puede reducirse significativamente utilizando nuestra técnica [1].",
                "En adelante, suponemos que los jugadores usan una técnica de este tipo que resulta en un \"error de exportación\" inevitable pero pequeño general.",
                "Nuestro objetivo en este documento es mejorar la equidad de estos juegos a pesar de los diferentes retrasos en la red al igualar el \"error de exportación\" en los jugadores.",
                "Exploramos si el promedio de tiempo de los errores de exportación (que es el \"error de exportación\" acumulativo durante un período de tiempo promedio durante el período de tiempo) en todos los jugadores se pueden hacer lo mismo programando el envío de los vectores DR de manera adecuada ael remitente.",
                "Ambos algoritmos se basan en retrasar (o soltar) el envío de vectores DR a algunos jugadores de manera continua para tratar de hacer que el \"error de exportación\" sea igual a todos los jugadores.",
                "En un nivel abstracto, el algoritmo retrasa que envían vectores DR a jugadores cuyo error acumulado hasta ahora en el juego es más pequeño que otros;Esto significaría que el \"error de exportación\" debido a este vector DR en estos jugadores será más grande que el de los otros jugadores, lo que los hace lo mismo.",
                "En la Sección 4, describimos el algoritmo de programación DR Vector que tiene como objetivo hacer que el \"error de exportación\" sea igual a los jugadores con retrasos variables del remitente de un vector DR, seguido de resultados experimentales obtenidos de la instrumentación del algoritmo de programación en el código abiertojuego bzflag.",
                "La desviación entre las rutas exportadas y colocadas crea un componente de error al que nos referimos como el \"error de exportación\".",
                "Una forma de representar el \"error de exportación\" es calcular la integral de la distancia entre las dos trayectorias durante el tiempo cuando no están sincronizados.",
                "En la figura, el \"error de exportación\" debido a DR1 se calcula como la integral de la distancia entre las trayectorias AC y BD durante el intervalo de tiempo [T1, T1 + DT1].",
                "Tenga en cuenta que también podría haber otras formas de representar este error, pero en este documento, utilizamos la integral de la distancia entre las dos trayectorias como una medida del \"error de exportación\".",
                "Tenga en cuenta que habría habido un \"error de exportación\" creado debido a la recepción de DR0, momento en el que la ruta colocada se habría basado en un vector DR anterior.",
                "Esto no se muestra en la figura, pero sirve para recordarle al lector que el \"error de exportación\" es acumulativo cuando se reciben una secuencia de vectores DR.",
                "Como discutimos anteriormente, este \"error de exportación\" es inevitable.",
                "Cada uno de estos jugadores recibe DR0 y DR1 después de diferentes retrasos, creando así diferentes valores de \"error de exportación\" en diferentes jugadores.",
                "El objetivo del algoritmo de programación DR Vector que se describirá en la siguiente sección es hacer que este \"error de exportación acumulativo) sea igual en cada jugador de forma independiente para cada una de las entidades que componen el juego.4.",
                "Algoritmo de programación que atraviesa los vectores DR En la Sección 3. Mostramos cómo el retraso del remitente de un nuevo DR 2 Normalmente, los vectores DR no se calculan de manera periódica, sino a base de demanda en la que la decisión de calcular un nuevo vector DR se basa enSe excedió algún umbral de la desviación entre la ruta real y la ruta exportada por el vector DR anterior.3 Vector al receptor del vector DR podría conducir a un \"error de exportación\" debido a la desviación de la ruta colocada de la ruta exportada en el receptor hasta que se recibe este nuevo vector DR.",
                "También mencionamos que el objetivo del algoritmo de programación del vector DR es hacer que el \"error de exportación\" sea igual en todos los receptores durante un período de tiempo.",
                "Sin embargo, en realidad, el receptor 1 recibe DR1 después de un retraso de DA1 (que es menor que las estimaciones de los remitentes de DT1), y mueve la entidad correspondiente al punto H. De manera similar, el remitente estima que después de un retraso de DT2, el receptor 2 recibiráDR1, calculará la ubicación actual de la entidad y la moverá a ese punto (punto E), mientras que en realidad recibe DR1 después de un retraso de Da2> dt2 y mueve la entidad para que puntos N. los otros puntos que se muestran en el colocado yLas rutas exportadas se utilizarán más adelante en la discusión para describir diferentes componentes de error.4.1 Cálculo del relativo \"error de exportación\" que se refiere a la discusión desde la Sección 3, desde la perspectiva del remitente, el \"error de exportación\" en el receptor 1 debido a DR1 viene dado por ERR (DR1, T1, T1 + Δ1 + DT1) (elIntegral de la distancia entre las trayectorias AC y DB durante el intervalo de tiempo [T1, T1 + Δ1 + DT1]) de la Figura 2.",
                "Del mismo modo, el \"error de exportación\" desde la perspectiva de los remitentes en recibido 2 debido a DR1 está dado por ERR (DR1, T1, T1 + Δ2 + DT2) (la integral de la distancia entre las trayectorias AE y DF durante el intervalo de tiempo [T1 [T1, T1 + Δ2 + dt2]).",
                "En realidad, el \"error de exportación\" será más pequeño o mayor que el valor estimado, en función de si la estimación de retraso fue mayor o menor que el retraso real que experimentó DR1.",
                "Esta diferencia entre el \"error de exportación\" estimado y el real es el \"error de exportación\" relativo (que podría ser positivo o negativo), lo que ocurre para cada vector DR que se envía y se acumula en el remitente.",
                "El concepto de \"error de exportación\" relativo se ilustra en la Figura 2.",
                "Dado que el retraso real al receptor 1 es DA1, el \"error de exportación\" inducido por DR1 en el receptor 1 es ERR (DR1, T1, T1 + Δ1 + DA1).",
                "Esto significa que hay un error en el \"error de exportación\" estimado y el remitente puede calcular este error solo después de recibir comentarios del receptor sobre el retraso real para la entrega de DR1, es decir, el valor de DA1.",
                "Por lo tanto, el remitente calcula el \"error de exportación\" relativo para el receptor 1, representado usando R1 como R1 = err (DR1, T1, T1 + Δ1 + DT1) - ERR (DR1, T1, T1 + Δ1 + Da1) = ERR (DR1, T1 + Δ1 + dt1, t1 + Δ1 + da1) De manera similar, el \"error de exportación\" relativo para el receptor 2 se calcula como r2 = err (dr1, t1, t1 + Δ2 + dt2) - err (dr1, t1, t1 + Δ2+ da2) = err (dr1, t1 + Δ2 + dt2, t1 + Δ2 + da2) Tenga en cuenta que r1> 0 como da1 <dt1 y r2 <0 como da2> dt2.",
                "Este ejemplo muestra los 4 valores relativos de \"error de exportación\" después de que se envía DR1 y se reciben los comentarios correspondientes.4.2 Equalización de error entre los receptores ahora explicamos lo que queremos decir con hacer que los errores sean iguales en todos los receptores y cómo se puede lograr esto.",
                "Este método de cálculo de ΔS asegura que el \"error de exportación\" acumulado (es decir, error real total) para cada receptor iguale a la transmisión de cada vector DR.",
                "Entonces ri m = ai m −si m.Para calcular las instancias de programación (es decir, ΔS) para DI, para cualquier par de receptores M y N, hacemos Ri - 1 m + Si M = Ri - 1 N + Si N.El siguiente teorema establece el hecho de que el \"error de exportación\" acumulado se iguala en cada instante de programación.",
                "Agregando la condición de la premisa en ambos lados que obtenemos, I K = 1 Ak M + Si + 1 M = I K = 1 Ak N + Si + 1 N.4.3 Cálculo del \"error de exportación\" consideremos ahora cómo se pueden calcular los errores de exportación.",
                "Por lo tanto, si no hay un \"error de exportación\" relativo acumulado, todo lo que el remitente debe hacer es elegir los Δs de tal manera que contrarresten la diferencia en el retraso a los dos receptores, de modo que reciban el vector DR aal mismo tiempo.",
                "Como se discutió anteriormente, debido a que el remitente no puede aprender a priori el retraso, siempre habrá un \"error de exportación\" relativo acumulado de un vector DR anterior que debe tenerse en cuenta.",
                "Para profundizar en esto, considere el cálculo del \"error de exportación\" como se ilustra en la sección anterior.",
                "El remitente hace que ΔK sea cero y calcula el resto de los ΔS de la igualdad ei+t1+dti+Δi t1+dti dist (t) dt = ek, ∀i 1 ≤ i ≤ n, i = k.(1) El ΔS así obtenido proporciona los instantes de programación del vector DR para los receptores.4.5 Pasos del algoritmo de programación a los efectos de la discusión a continuación, como antes denotamos el \"error de exportación\" relativo acumulado en un remitente para el receptor k up hasta que Dri se ri k.Denotemos el retraso programado en el remitente antes de que DRI se envíe al receptor K como Δi k.Dada la discusión anterior, los pasos del algoritmo son los siguientes: 1.",
                "Para dicho receptor J, cuando Dri+1 debe programarse y 6 TIMETI exportó ruta dtj a b c d ti-1 gi j dri+1 calculado por remitente y DRI para el receptor K+1 a N se elimina de la cola DRI+1 programada paraReceptor K+1 Ti+1 G H E F DRI Programado para el receptor J DRI calculado por el remitente Ruta colocada en el receptor K+1 GI+1 J Figura 3: Cálculo de programación Cuando DRI no se envía al receptor J, K+1 ≤ J ≤ N.Se debe calcular ΔI+1 J, el \"error de exportación\" total es el \"error de exportación\" relativo acumulado en el tiempo TI cuando se calculó el cronograma para DRI, más la integral de la distancia entre las dos trayectorias AC y BD de la Figura 3 sobreEl intervalo de tiempo [ti, ti + 1 + Δi + 1 j + dtj].",
                "Por lo tanto, en lugar de Ei J de la ecuación (1), usamos el valor ri - 1 j+err (dri, ti, ti+1)+err (dri+1, ti+1, ti+1+Δi+1 j+ dtj) donde Ri - 1 J es relativo \"error de exportación\" utilizado cuando se calculó el cronograma para DRI.",
                "El remitente también calculó la desviación estándar y la media del \"error de exportación\" acumulado de todos los receptores cada 100 milisegundos.",
                "La Figura 4 traza la media y la desviación estándar del \"error de exportación\" acumulado de todos los receptores en el caso de programación contra el caso base.",
                "Usando la misma cantidad de vectores DR a lo largo del tiempo que en el caso base, en lugar de enviar los vectores DR a todos los receptores a la misma frecuencia que en el caso base, si podemos aumentar la frecuencia de enviar los vectores DR al receptor conUn error acumulado más alto y disminuir la frecuencia de enviar vectores DR al receptor con un error acumulado más bajo, podemos igualar el \"error de exportación\" de todos los receptores a lo largo del tiempo.",
                "Dado que los vectores DR se envían a todos los receptores y no se puede evitar el retraso de la red entre los pares de remitente-receptor, el error de \"Error de exportación\" antes de la exportación con el jugador más distante siempre notará que después de un \"error de exportación\" se elimina utilizando el uso de utilizandoreloj sincronizado entre los jugadores.7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MEDIACUMULELETER TIEME EN SECUESAlgoritmo de programación #1 Figura 4: media y desviación estándar del error con la programación y sin (es decir, caso base).ser más alto que el resto."
            ],
            "translated_text": "",
            "candidates": [
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "Error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "Error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "Error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "Error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "Error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "error de exportación",
                "Error de exportación",
                "error de exportación"
            ],
            "error": []
        },
        "bucket synchronization": {
            "translated_key": "sincronización de cubos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
                "To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the mean error thereby maintaining the accuracy of game playing.",
                "We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular distributed multi-player game.",
                "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the export error.",
                "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
                "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
                "It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game.",
                "In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static <br>bucket synchronization</br> approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a network delay larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on <br>bucket synchronization</br> depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with <br>bucket synchronization</br> are not cheatproof unless additional mechanisms are put in place.",
                "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
                "Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level accuracy of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to network delay.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
                "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
                "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this export error is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
                "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
                "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative export error is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a budget based algorithm. 5.",
                "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The budget based algorithm is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
                "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "El juego de múltiples jugadores en línea Mimaze [2, 5, 6], por ejemplo, adopta un enfoque estático de \"sincronización de cubos\" para compensar los retrasos de la red variables.",
                "En general, las técnicas basadas en la \"sincronización de cubos\" dependen de imponer el peor retraso de todos los jugadores.",
                "Se ha demostrado en [9] que los juegos de múltiples jugadores que usan vectores DR junto con \"sincronización de cubos\" no son a prueba de trucos a menos que se establezcan mecanismos adicionales."
            ],
            "translated_text": "",
            "candidates": [
                "sincronización de cubos",
                "sincronización de cubos",
                "sincronización de cubos",
                "sincronización de cubos",
                "sincronización de cubos",
                "sincronización de cubos"
            ],
            "error": []
        },
        "network delay": {
            "translated_key": "retraso de la red",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to <br>network delay</br> between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
                "To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the mean error thereby maintaining the accuracy of game playing.",
                "We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular distributed multi-player game.",
                "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the <br>network delay</br> between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the export error.",
                "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
                "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before export error can never be eliminated since there is always a non-zero <br>network delay</br>, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
                "It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game.",
                "In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a <br>network delay</br> larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
                "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
                "Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level accuracy of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to <br>network delay</br>.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
                "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
                "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this export error is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
                "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
                "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative export error is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a budget based algorithm. 5.",
                "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the <br>network delay</br> between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The budget based algorithm is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
                "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Equidad en los juegos de múltiples jugadores distribuidos basados en la recubrimiento muerto Sudhir Aggarwal Hemant Banavar Departamento de Ciencias de la Computación de la Universidad Estatal de Florida, Tallahassee, FL Correo electrónico: {Sudhir, banavarht.fsu.edu sarit Mukherjee Sampath Rangarajan Center para la investigación Bell Laboratories,,Holmdel, NJ Correo electrónico: {sarit, sampath}@bell-labs.com Resumen En un juego de jugadores múltiples distribuido que utiliza vectores de recuperación muerta para intercambiar información de movimiento entre los jugadores, existe una inexactitud para representar los objetos en el receptor debido a \"Retraso de red \"entre el remitente y el receptor.",
                "Debido al \"retraso de la red\" entre los jugadores de envío y recepción, cuando se recibe y se presenta un Vector DR en un jugador, la trayectoria original del jugador/entidad ya puede haber cambiado.",
                "También demostramos que el error de exportación antes nunca se puede eliminar ya que siempre hay un \"retraso de red\" no cero, pero puede reducirse significativamente utilizando nuestra técnica [1].",
                "Los jugadores con un \"retraso en la red\" de más de 100 ms simplemente no pueden participar en el juego.",
                "Consideremos ahora el error debido al \"retraso de la red\".",
                "Dado que los vectores DR se envían a todos los receptores y no se puede evitar el \"retraso de la red\" entre los pares de remitente del remitente, el error de exportación antes de la exportación con el jugador más distante siempre notará que después de la exportación se elimina el error de exportación utilizando el reloj sincronizadoentre los jugadores.7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MEDIACUMULELETER TIEME EN SECUESAlgoritmo de programación #1 Figura 4: media y desviación estándar del error con la programación y sin (es decir, caso base).ser más alto que el resto."
            ],
            "translated_text": "",
            "candidates": [
                "retraso de la red",
                "Retraso de red ",
                "retraso de la red",
                "retraso de la red",
                "retraso de la red",
                "retraso de red",
                "retraso de la red",
                "retraso en la red",
                "retraso de la red",
                "retraso de la red",
                "retraso de la red",
                "retraso de la red"
            ],
            "error": []
        },
        "distribute multi-player game": {
            "translated_key": "Distribuir el juego de múltiples jugadores",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
                "To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the mean error thereby maintaining the accuracy of game playing.",
                "We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular distributed multi-player game.",
                "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the export error.",
                "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
                "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
                "It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game.",
                "In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a network delay larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
                "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
                "Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level accuracy of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to network delay.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
                "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
                "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this export error is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
                "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
                "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative export error is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a budget based algorithm. 5.",
                "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The budget based algorithm is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
                "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "dead-reckon": {
            "translated_key": "punto muerto",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses <br>dead-reckon</br>ing vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the <br>dead-reckon</br>ing vector, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of <br>dead-reckon</br>ing vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
                "To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the mean error thereby maintaining the accuracy of game playing.",
                "We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular distributed multi-player game.",
                "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the export error.",
                "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
                "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
                "It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game.",
                "In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a network delay larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
                "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
                "Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level accuracy of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to network delay.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
                "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
                "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this export error is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
                "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
                "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative export error is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a budget based algorithm. 5.",
                "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The budget based algorithm is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
                "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Equidad en los juegos de múltiples jugadores distribuidos basados en la recubrimiento muerto Sudhir Aggarwal Hemant Banavar Departamento de Ciencias de la Computación de la Universidad Estatal de Florida, Tallahassee, FL Correo electrónico: {Sudhir, banavarht.fsu.edu sarit Mukherjee Sampath Rangarajan Center para la investigación Bell Laboratories,,Holmdel, NJ Correo electrónico: {sarit, sampath}@bell-labs.com Resumen En un juego de jugadores múltiples distribuido que utiliza vectores \"Dead-Reckon\" para intercambiar información de movimiento entre los jugadores, existe una inexactitud en la presentación de los objetos en el receptorDebido al retraso de la red entre el remitente y el receptor.",
                "El objeto se coloca en el receptor en la posición indicada por el vector \"Dead-Reckon\", pero para ese momento, la posición real podría haber cambiado considerablemente en el remitente.",
                "Luego desarrollamos un algoritmo para programar el envío de vectores \"Dead-Reckon\" en un remitente que se esfuerza por hacer que este error sea igual a los diferentes receptores con el tiempo."
            ],
            "translated_text": "",
            "candidates": [
                "recio",
                "Dead-Reckon",
                "recio",
                "Dead-Reckon",
                "recio",
                "Dead-Reckon"
            ],
            "error": []
        },
        "clock synchronization": {
            "translated_key": "sincronización de reloj",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Fairness in Dead-Reckoning based Distributed Multi-Player Games Sudhir Aggarwal Hemant Banavar Department of Computer Science Florida State University, Tallahassee, FL Email: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Center for Networking Research Bell Laboratories, Holmdel, NJ Email: {sarit, sampath}@bell-labs.com ABSTRACT In a distributed multi-player game that uses dead-reckoning vectors to exchange movement information among players, there is inaccuracy in rendering the objects at the receiver due to network delay between the sender and the receiver.",
                "The object is placed at the receiver at the position indicated by the dead-reckoning vector, but by that time, the real position could have changed considerably at the sender.",
                "This inaccuracy would be tolerable if it is consistent among all players; that is, at the same physical time, all players see inaccurate (with respect to the real position of the object) but the same position and trajectory for an object.",
                "But due to varying network delays between the sender and different receivers, the inaccuracy is different at different players as well.",
                "This leads to unfairness in game playing.",
                "In this paper, we first introduce an error measure for estimating this inaccuracy.",
                "Then we develop an algorithm for scheduling the sending of dead-reckoning vectors at a sender that strives to make this error equal at different receivers over time.",
                "This algorithm makes the game very fair at the expense of increasing the overall mean error of all players.",
                "To mitigate this effect, we propose a budget based algorithm that provides improved fairness without increasing the mean error thereby maintaining the accuracy of game playing.",
                "We have implemented both the scheduling algorithm and the budget based algorithm as part of BZFlag, a popular distributed multi-player game.",
                "We show through experiments that these algorithms provide fairness among players in spite of widely varying network delays.",
                "An additional property of the proposed algorithms is that they require less number of DRs to be exchanged (compared to the current implementation of BZflag) to achieve the same level of accuracy in game playing.",
                "Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Distributed applications General Terms Algorithms, Design, Experimentation, Performance 1.",
                "INTRODUCTION In a distributed multi-player game, players are normally distributed across the Internet and have varying delays to each other or to a central game server.",
                "Usually, in such games, the players are part of the game and in addition they may control entities that make up the game.",
                "During the course of the game, the players and the entities move within the game space.",
                "A player sends information about her movement as well as the movement of the entities she controls to the other players using a Dead-Reckoning (DR) vector.",
                "A DR vector contains information about the current position of the player/entity in terms of x, y and z coordinates (at the time the DR vector was sent) as well as the trajectory of the entity in terms of the velocity component in each of the dimensions.",
                "Each of the participating players receives such DR vectors from one another and renders the other players/entities on the local consoles until a new DR vector is received for that player/entity.",
                "In a peer-to-peer game, players send DR vectors directly to each other; in a client-server game, these DR vectors may be forwarded through a game server.",
                "The idea of DR is used because it is almost impossible for players/entities to exchange their current positions at every time unit.",
                "DR vectors are quantization of the real trajectory (which we refer to as real path) at a player.",
                "Normally, a new DR vector is computed and sent whenever the real path deviates from the path extrapolated using the previous DR vector (say, in terms of distance in the x, y, z plane) by some amount specified by a threshold.",
                "We refer to the trajectory that can be computed using the sequence of DR vectors as the exported path.",
                "Therefore, at the sending player, there is a deviation between the real path and the exported path.",
                "The error due to this deviation can be removed if each movement of player/entity is communicated to the other players at every time unit; that is a DR vector is generated at every time unit thereby making the real and exported paths the same.",
                "Given that it is not feasible to satisfy this due to bandwidth limitations, this error is not of practical interest.",
                "Therefore, the receiving players can, at best, follow the exported path.",
                "Because of the network delay between the sending and receiving players, when a DR vector is received and rendered at a player, the original trajectory of the player/entity may have already changed.",
                "Thus, in physical time, there is a deviation at the receiving player between the exported path and the rendered trajectory (which we refer to as placed path).",
                "We refer to this error as the export error.",
                "Note that the export error, in turn, results in a deviation between the real and the placed paths.",
                "The export error manifests itself due to the deviation between the exported path at the sender and the placed path at the receiver (i) 1 before the DR vector is received at the receiver (referred to as the before export error, and (ii) after the DR vector is received at the receiver (referred to as the after export error).",
                "In an earlier paper [1], we showed that by synchronizing the clocks at all the players and by using a technique based on time-stamping messages that carry the DR vectors, we can guarantee that the after export error is made zero.",
                "That is, the placed and the exported paths match after the DR vector is received.",
                "We also showed that the before export error can never be eliminated since there is always a non-zero network delay, but can be significantly reduced using our technique [1].",
                "Henceforth we assume that the players use such a technique which results in unavoidable but small overall export error.",
                "In this paper we consider the problem of different and varying network delays between each sender-receiver pair of a DR vector, and consequently, the different and varying export errors at the receivers.",
                "Due to the difference in the export errors among the receivers, the same entity is rendered at different physical time at different receivers.",
                "This brings in unfairness in game playing.",
                "For instance a player with a large delay would always see an entity late in physical time compared to the other players and, therefore, her action on the entity would be delayed (in physical time) even if she reacted instantaneously after the entity was rendered.",
                "Our goal in this paper is to improve the fairness of these games in spite of the varying network delays by equalizing the export error at the players.",
                "We explore whether the time-average of the export errors (which is the cumulative export error over a period of time averaged over the time period) at all the players can be made the same by scheduling the sending of the DR vectors appropriately at the sender.",
                "We propose two algorithms to achieve this.",
                "Both the algorithms are based on delaying (or dropping) the sending of DR vectors to some players on a continuous basis to try and make the export error the same at all the players.",
                "At an abstract level, the algorithm delays sending DR vectors to players whose accumulated error so far in the game is smaller than others; this would mean that the export error due to this DR vector at these players will be larger than that of the other players, thereby making them the same.",
                "The goal is to make this error at least approximately equal at every DR vector with the deviation in the error becoming smaller as time progresses.",
                "The first algorithm (which we refer to as the scheduling algorithm) is based on estimating the delay between players and refining the sending of DR vectors by scheduling them to be sent to different players at different times at every DR generation point.",
                "Through an implementation of this algorithm using the open source game BZflag, we show that this algorithm makes the game very fair (we measure fairness in terms of the standard deviation of the error).",
                "The drawback of this algorithm is that it tends to push the error of all the players towards that of the player with the worst error (which is the error at the farthest player, in terms of delay, from the sender of the DR).",
                "To alleviate this effect, we propose a budget based algorithm which budgets how the DRs are sent to different players.",
                "At a high level, the algorithm is based on the idea of sending more DRs to players who are farther away from the sender compared to those who are closer.",
                "Experimental results from BZflag illustrates that the budget based algorithm follows a more balanced approach.",
                "It improves the fairness of the game but at the same time does so without pushing up the mean error of the players thereby maintaining the accuracy of the game.",
                "In addition, the budget based algorithm is shown to achieve the same level of accuracy of game playing as the current implementation of BZflag using much less number of DR vectors. 2.",
                "PREVIOUS WORK Earlier work on network games to deal with network latency has mostly focussed on compensation techniques for packet delay and loss [2, 3, 4].",
                "These methods are aimed at making large delays and message loss tolerable for players but does not consider the problems that may be introduced by varying delays from the server to different players or from the players to one another.",
                "For example, the concept of local lag has been used in [3] where each player delays every local operation for a certain amount of time so that remote players can receive information about the local operation and execute the same operation at the about same time, thus reducing state inconsistencies.",
                "The online multi-player game MiMaze [2, 5, 6], for example, takes a static bucket synchronization approach to compensate for variable network delays.",
                "In MiMaze, each player delays all events by 100 ms regardless of whether they are generated locally or remotely.",
                "Players with a network delay larger than 100 ms simply cannot participate in the game.",
                "In general, techniques based on bucket synchronization depend on imposing a worst case delay on all the players.",
                "There have been a few papers which have studied the problem of fairness in a distributed game by more sophisticated message delivery mechanisms.",
                "But these works [7, 8] assume the existence of a global view of the game where a game server maintains a view (or state) of the game.",
                "Players can introduce objects into the game or delete objects that are already part of the game (for example, in a first-person shooter game, by shooting down the object).",
                "These additions and deletions are communicated to the game server using action messages.",
                "Based on these action messages, the state of the game is changed at the game server and these changes are communicated to the players using update messages.",
                "Fairness is achieved by ordering the delivery of action and update messages at the game server and players respectively based on the notion of a fair-order which takes into account the delays between the game server and the different players.",
                "Objects that are part of the game may move but how this information is communicated to the players seems to be beyond the scope of these works.",
                "In this sense, these works are very limited in scope and may be applicable only to firstperson shooter games and that too to only games where players are not part of the game.",
                "DR vectors can be exchanged directly among the players (peerto-peer model) or using a central server as a relay (client-server model).",
                "It has been shown in [9] that multi-player games that use DR vectors together with bucket synchronization are not cheatproof unless additional mechanisms are put in place.",
                "Both the scheduling algorithm and the budget-based algorithm described in our paper use DR vectors and hence are not cheat-proof.",
                "For example, a receiver could skew the delay estimate at the sender to make the sender believe that the delay between the sender and the receiver is high thereby gaining undue advantage.",
                "We emphasize that the focus of this paper is on fairness without addressing the issue of cheating.",
                "In the next section, we describe the game model that we use and illustrate how senders and receivers exchange DR vectors and how entities are rendered at the receivers based on the time-stamp augmented DR vector exchange as described in [1].",
                "In Section 4, we describe the DR vector scheduling algorithm that aims to make the export error equal across the players with varying delays from the sender of a DR vector, followed by experimental results obtained from instrumentation of the scheduling algorithm on the open source game BZFlag.",
                "Section 5, describes the budget based algorithm that achieves improved fairness but without reducing the level accuracy of game playing.",
                "Conclusions are presented in Section 6. 2 3.",
                "GAME MODEL The game architecture is based on players distributed across the Internet and exchanging DR vectors to each other.",
                "The DR vectors could either be sent directly from one player to another (peerto-peer model) or could be sent through a game server which receives the DR vector from a player and forwards it to other players (client-server model).",
                "As mentioned before, we assume synchronized clocks among the participating players.",
                "Each DR vector sent from one player to another specifies the trajectory of exactly one player/entity.",
                "We assume a linear DR vector in that the information contained in the DR vector is only enough at the receiving player to compute the trajectory and render the entity in a straight line path.",
                "Such a DR vector contains information about the starting position and velocity of the player/entity where the velocity is constant1 .",
                "Thus, the DR vectors sent by a player specifies the current time at the player when the DR vector is computed (not the time at which this DR vector is sent to the other players as we will explain later), the current position of the player/entity in terms of the x, y, z coordinates and the velocity vector in the direction of x, y and z coordinates.",
                "Specifically, the ith DR vector sent by player j about the kth entity is denoted by DRj ik and is represented by the following tuple (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik).",
                "Without loss of generality, in the rest of the discussion, we consider a sequence of DR vectors sent by only one player and for only one entity.",
                "For simplicity, we consider a two dimensional game space rather than a three dimensional one.",
                "Hence we use DRi to denote the ith such DR vector represented as the tuple (Ti, xi, yi, vxi, vyi).",
                "The receiving player computes the starting position for the entity based on xi, yi and the time difference between when the DR vector is received and the time Ti at which it was computed.",
                "Note that the computation of time difference is feasible since all the clocks are synchronized.",
                "The receiving player then uses the velocity components to project and render the trajectory of the entity.",
                "This trajectory is followed until a new DR vector is received which changes the position and/or velocity of the entity. timeT1 Real Exported Placed dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) computed at time T1 and sent to the receiver DR0 = (T0, x0, y0, vx0, vy0) computed at time T0 and sent to the receiver T0 dt0 Placed E Figure 1: Trajectories and deviations.",
                "Based on this model, Figure 1 illustrates the sending and receiv1 Other type of DR vectors include quadratic DR vectors which specify the acceleration of the entity and cubic spline DR vectors that consider the starting position and velocity and the ending position and velocity of the entity. ing of DR vectors and the different errors that are encountered.",
                "The figure shows the reception of DR vectors at a player (henceforth called the receiver).",
                "The horizontal axis shows the time which is synchronized among all the players.",
                "The vertical axis tries to conceptually capture the two-dimensional position of an entity.",
                "Assume that at time T0 a DR vector DR0 is computed by the sender and immediately sent to the receiver.",
                "Assume that DR0 is received at the receiver after a delay of dt0 time units.",
                "The receiver computes the initial position of the entity as (x0 + vx0 × dt0, y0 + vy0 × dt0) (shown as point E).",
                "The thick line EBD represents the projected and rendered trajectory at the receiver based on the velocity components vx0 and vy0 (placed path).",
                "At time T1 a DR vector DR1 is computed for the same entity and immediately sent to the receiver2 .",
                "Assume that DR1 is received at the receiver after a delay of dt1 time units.",
                "When this DR vector is received, assume that the entity is at point D. A new position for the entity is computed as (x1 + vx1 × dt1, y1 + vy0 × dt1) and the entity is moved to this position (point C).",
                "The velocity components vx1 and vy1 are used to project and render this entity further.",
                "Let us now consider the error due to network delay.",
                "Although DR1 was computed at time T1 and sent to the receiver, it did not reach the receiver until time T1 + dt1.",
                "This means, although the exported path based on DR1 at the sender at time T1 is the trajectory AC, until time T1 + dt1, at the receiver, this entity was being rendered at trajectory BD based on DR0.",
                "Only at time T1 + dt1 did the entity get moved to point C from which point onwards the exported and the placed paths are the same.",
                "The deviation between the exported and placed paths creates an error component which we refer to as the export error.",
                "A way to represent the export error is to compute the integral of the distance between the two trajectories over the time when they are out of sync.",
                "We represent the integral of the distances between the placed and exported paths due to some DR DRi over a time interval [t1, t2] as Err(DRi, t1, t2).",
                "In the figure, the export error due to DR1 is computed as the integral of the distance between the trajectories AC and BD over the time interval [T1, T1 + dt1].",
                "Note that there could be other ways of representing this error as well, but in this paper, we use the integral of the distance between the two trajectories as a measure of the export error.",
                "Note that there would have been an export error created due to the reception of DR0 at which time the placed path would have been based on a previous DR vector.",
                "This is not shown in the figure but it serves to remind the reader that the export error is cumulative when a sequence of DR vectors are received.",
                "Starting from time T1 onwards, there is a deviation between the real and the exported paths.",
                "As we discussed earlier, this export error is unavoidable.",
                "The above figure and example illustrates one receiver only.",
                "But in reality, DR vectors DR0 and DR1 are sent by the sender to all the participating players.",
                "Each of these players receives DR0 and DR1 after varying delays thereby creating different export error values at different players.",
                "The goal of the DR vector scheduling algorithm to be described in the next section is to make this (cumulative) export error equal at every player independently for each of the entities that make up the game. 4.",
                "SCHEDULING ALGORITHM FORSENDING DR VECTORS In Section 3 we showed how delay from the sender of a new DR 2 Normally, DR vectors are not computed on a periodic basis but on an on-demand basis where the decision to compute a new DR vector is based on some threshold being exceeded on the deviation between the real path and the path exported by the previous DR vector. 3 vector to the receiver of the DR vector could lead to export error because of the deviation of the placed path from the exported path at the receiver until this new DR vector is received.",
                "We also mentioned that the goal of the DR vector scheduling algorithm is to make the export error equal at all receivers over a period of time.",
                "Since the game is played in a distributed environment, it makes sense for the sender of an entity to keep track of all the errors at the receivers and try to make them equal.",
                "However, the sender cannot know the actual error at a receiver till it gets some information regarding the error back from the receiver.",
                "Our algorithm estimates the error to compute a schedule to send DR vectors to the receivers and corrects the error when it gets feedbacks from the receivers.",
                "In this section we provide motivations for the algorithm and describe the steps it goes through.",
                "Throughout this section, we will use the following example to illustrate the algorithm. timeT1 Exported path Placed path at receiver 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 sent to receiver 1 DR1 sent to receiver 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimated to be received by receiver 2 DR1 estimated to be received by receiver 1 DR1 actually received by receiver 1 DR1 actually received by receiver 2 DR0 sent to both receivers DR1 computed by sender Placed path at receiver 1 Figure 2: DR vector flow between a sender and two receivers and the evolution of estimated and actual placed paths at the receivers.",
                "DR0 = (T0, T0, x0, y0, vx0, vy0), sent at time T0 to both receivers.",
                "DR1 = (T1, T1 1 , x1, y1, vx1, vy1) sent at time T1 1 = T1+δ1 to receiver 1 and DR1 = (T1, T2 1 , x1, y1, vx1, vy1) sent at time T2 1 = T1 + δ2 to receiver 2.",
                "Consider the example in Figure 2.",
                "The figure shows a single sender sending DR vectors for an entity to two different receivers 1 and 2.",
                "DR0 computed at T0 is sent and received by the receivers sometime between T0 and T1 at which time they move the location of the entity to match the exported path.",
                "Thus, the path of the entity is shown only from the point where the placed path matches the exported path for DR0.",
                "Now consider DR1.",
                "At time T1, DR1 is computed by the sender but assume that it is not immediately sent to the receivers and is only sent after time δ1 to receiver 1 (at time T1 1 = T1 + δ1) and after time δ2 to receiver 2 (at time T2 1 = T1 + δ2).",
                "Note that the sender includes the sending timestamp with the DR vector as shown in the figure.",
                "Assume that the sender estimates (it will be clear shortly why the sender has to estimate the delay) that after a delay of dt1, receiver 1 will receive it, will use the coordinate and velocity parameters to compute the entitys current location and move it there (point C) and from this time onwards, the exported and the placed paths will become the same.",
                "However, in reality, receiver 1 receives DR1 after a delay of da1 (which is less than senders estimates of dt1), and moves the corresponding entity to point H. Similarly, the sender estimates that after a delay of dt2, receiver 2 will receive DR1, will compute the current location of the entity and move it to that point (point E), while in reality it receives DR1 after a delay of da2 > dt2 and moves the entity to point N. The other points shown on the placed and exported paths will be used later in the discussion to describe different error components. 4.1 Computation of Relative Export Error Referring back to the discussion from Section 3, from the senders perspective, the export error at receiver 1 due to DR1 is given by Err(DR1, T1, T1 + δ1 + dt1) (the integral of the distance between the trajectories AC and DB over the time interval [T1, T1 + δ1 + dt1]) of Figure 2.",
                "This is due to the fact that the sender uses the estimated delay dt1 to compute this error.",
                "Similarly, the export error from the senders perspective at received 2 due to DR1 is given by Err(DR1, T1, T1 + δ2 + dt2) (the integral of the distance between the trajectories AE and DF over the time interval [T1, T1 + δ2 + dt2]).",
                "Note that the above errors from the senders perspective are only estimates.",
                "In reality, the export error will be either smaller or larger than the estimated value, based on whether the delay estimate was larger or smaller than the actual delay that DR1 experienced.",
                "This difference between the estimated and the actual export error is the relative export error (which could either be positive or negative) which occurs for every DR vector that is sent and is accumulated at the sender.",
                "The concept of relative export error is illustrated in Figure 2.",
                "Since the actual delay to receiver 1 is da1, the export error induced by DR1 at receiver 1 is Err(DR1, T1, T1 + δ1 + da1).",
                "This means, there is an error in the estimated export error and the sender can compute this error only after it gets a feedback from the receiver about the actual delay for the delivery of DR1, i.e., the value of da1.",
                "We propose that once receiver 1 receives DR1, it sends the value of da1 back to the sender.",
                "The receiver can compute this information as it knows the time at which DR1 was sent (T1 1 = T1 + δ1, which is appended to the DR vector as shown in Figure 2) and the local receiving time (which is synchronized with the senders clock).",
                "Therefore, the sender computes the relative export error for receiver 1, represented using R1 as R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1) Similarly the relative export error for receiver 2 is computed as R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2) Note that R1 > 0 as da1 < dt1, and R2 < 0 as da2 > dt2.",
                "Relative export errors are computed by the sender as and when it receives the feedback from the receivers.",
                "This example shows the 4 relative export error values after DR1 is sent and the corresponding feedbacks are received. 4.2 Equalization of Error Among Receivers We now explain what we mean by making the errors equal at all the receivers and how this can be achieved.",
                "As stated before the sender keeps estimates of the delays to the receivers, dt1 and dt2 in the example of Figure 2.",
                "This says that at time T1 when DR1 is computed, the sender already knows how long it may take messages carrying this DR vector to reach the receivers.",
                "The sender uses this information to compute the export errors, which are Err(DR1, T1, T1 + δ1 + dt1) and Err(DR1, T1, T1 + δ2 + dt2) for receivers 1 and 2, respectively.",
                "Note that the areas of these error components are a function of δ1 and δ2 as well as the network delays dt1 and dt2.",
                "If we are to make the exports errors due to DR1 the same at both receivers, the sender needs to choose δ1 and δ2 such that Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2).",
                "But when T1 was computed there could already have been accumulated relative export errors due to previous DR vectors (DR0 and the ones before).",
                "Let us represent the accumulated relative error up to DRi for receiver j as Ri j.",
                "To accommodate these accumulated relative errors, the sender should now choose δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2) The δi determines the scheduling instant of the DR vector at the sender for receiver i.",
                "This method of computation of δs ensures that the accumulated export error (i.e., total actual error) for each receiver equalizes at the transmission of each DR vector.",
                "In order to establish this, assume that the feedback for DR vector Di from a receiver comes to the sender before schedule for Di+1 is computed.",
                "Let Si m and Ai m denote the estimated error for receiver m used for computing schedule for Di and accumulated error for receiver m computed after receiving feedback for Di, respectively.",
                "Then Ri m = Ai m −Si m. In order to compute the schedule instances (i.e., δs) for Di, for any pair of receivers m and n, we do Ri−1 m + Si m = Ri−1 n + Si n. The following theorem establishes the fact that the accumulated export error is equalized at every scheduling instant.",
                "THEOREM 4.1.",
                "When the schedule instances for sending Di are computed for any pair of receivers m and n, the following condition is satisfied: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Proof: By induction.",
                "Assume that the premise holds for some i.",
                "We show that it holds for i+1.",
                "The base case for i = 1 holds since initially R0 m = R0 n = 0, and the S1 m = S1 n is used to compute the scheduling instances.",
                "In order to compute the schedule for Di+1, the we first compute the relative errors as Ri m = Ai m − Si m, and Ri n = Ai n − Si n. Then to compute δs we execute Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n .",
                "Adding the condition of the premise on both sides we get, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n . 4.3 Computation of the Export Error Let us now consider how the export errors can be computed.",
                "From the previous section, to find δ1 and δ2 we need to find Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2).",
                "Note that the values of R0 1 and R0 2 are already known at the sender.",
                "Consider the computation of Err(DR1, T1, T1 +δ1 +dt1).",
                "This is the integral of the distance between the trajectories AC due to DR1 and BD due to DR0.",
                "From DR0 and DR1, point A is (X1, Y1) = (x1, y1) and point B is (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0).",
                "The trajectory AC can be represented as a function of time as (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) and the trajectory of BD can be represented as (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t).",
                "The distance between the two trajectories as a function of time then becomes, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Let a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Then dist(t) can be written as dist(t) = a × t2 + b × t + c. Then Err(DR1, t1, t2) for some time interval [t1, t2] becomes t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt.",
                "A closed form solution for the indefinite integral a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) and Err(DR1, T1, T1 +δ2 +dt2) can then be calculated by applying the appropriate limits to the above solution.",
                "In the next section, we consider the computation of the δs for N receivers. 5 4.4 Computation of Scheduling Instants We again look at the computation of δs by referring to Figure 2.",
                "The sender chooses δ1 and δ2 such that R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 +Err(DR1, T1, T1 +δ2 +dt2).",
                "If R0 1 and R0 2 both are zero, then δ1 and δ2 should be chosen such that Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2).",
                "This equality will hold if δ1 + dt1 = δ2 + dt2.",
                "Thus, if there is no accumulated relative export error, all that the sender needs to do is to choose the δs in such a way that they counteract the difference in the delay to the two receivers, so that they receive the DR vector at the same time.",
                "As discussed earlier, because the sender is not able to a priori learn the delay, there will always be an accumulated relative export error from a previous DR vector that does have to be taken into account.",
                "To delve deeper into this, consider the computation of the export error as illustrated in the previous section.",
                "To compute the δs we require that R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2).",
                "That is, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt.",
                "That is R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "The components R0 1, R0 2, are already known to (or estimated by) the sender.",
                "Further, the error components T1+dt1 T1 dist(t) dt and T1+dt2 T1 dist(t) dt can be a priori computed by the sender using estimated values of dt1 and dt2.",
                "Let us use E1 to denote R0 1 + T1+dt1 T1 dist(t) dt and E2 to denote R0 2 + T1+dt2 T1 dist(t) dt.",
                "Then, we require that E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "Assume that E1 > E2.",
                "Then, for the above equation to hold, we require that T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "To make the game as fast as possible within this framework, the δ values should be made as small as possible so that DR vectors are sent to the receivers as soon as possible subject to the fairness requirement.",
                "Given this, we would choose δ1 to be zero and compute δ2 from the equation E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt.",
                "In general, if there are N receivers 1, . . . , N, when a sender generates a DR vector and decides to schedule them to be sent, it first computes the Ei values for all of them from the accumulated relative export errors and estimates of delays.",
                "Then, it finds the smallest of these values.",
                "Let Ek be the smallest value.",
                "The sender makes δk to be zero and computes the rest of the δs from the equality Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) The δs thus obtained gives the scheduling instants of the DR vector for the receivers. 4.5 Steps of the Scheduling Algorithm For the purpose of the discussion below, as before let us denote the accumulated relative export error at a sender for receiver k up until DRi to be Ri k. Let us denote the scheduled delay at the sender before DRi is sent to receiver k as δi k. Given the above discussion, the algorithm steps are as follows: 1.",
                "The sender computes DRi at (say) time Ti and then computes δi k, and Ri−1 k , ∀k, 1 ≤ k ≤ N based on the estimation of delays dtk, ∀k, 1 ≤ k ≤ N as per Equation (1).",
                "It schedules, DRi to be sent to receiver k at time Ti + δi k. 2.",
                "The DR vectors are sent to the receivers at the scheduled times which are received after a delay of dak, ∀k, 1 ≤ k ≤ N where dak ≤ or > dtk.",
                "The receivers send the value of dak back to the sender (the receiver can compute this value based on the time stamps on the DR vector as described earlier). 3.",
                "The sender computes Ri k as described earlier and illustrated in Figure 2.",
                "The sender also recomputes (using exponential averaging method similar to round-trip time estimation by TCP [10]) the estimate of delay dtk from the new value of dak for receiver k. 4.",
                "Go back to Step 1 to compute DRi+1 when it is required and follow the steps of the algorithm to schedule and send this DR vector to the receivers. 4.6 Handling Cases in Practice So far we implicity assumed that DRi is sent out to all receivers before a decision is made to compute the next DR vector DRi+1, and the receivers send the value of dak corresponding to DRi and this information reaches the sender before it computes DRi+1 so that it can compute Ri+1 k and then use it in the computation of δi+1 k .",
                "Two issues need consideration with respect to the above algorithm when it is used in practice. • It may so happen that a new DR vector is computed even before the previous DR vector is sent out to all receivers.",
                "How will this situation be handled? • What happens if the feedback does not arrive before DRi+1 is computed and scheduled to be sent?",
                "Let us consider the first scenario.",
                "We assume that DRi has been scheduled to be sent and the scheduling instants are such that δi 1 < δi 2 < · · · < δi N .",
                "Assume that DRi+1 is to be computed (because the real path has deviated exceeding a threshold from the path exported by DRi) at time Ti+1 where Ti + δi k < Ti+1 < Ti + δi k+1.",
                "This means, DRi has been sent only to receivers up to k in the scheduled order.",
                "In our algorithm, in this case, the scheduled delay ordering queue is flushed which means DRi is not sent to receivers still queued to receive it, but a new scheduling order is computed for all the receivers to send DRi+1.",
                "For those receivers who have been sent DRi, assume for now that daj, 1 ≤ j ≤ k has been received from all receivers (the scenario where daj has not been received will be considered as a part of the second scenario later).",
                "For these receivers, Ei j, 1 ≤ j ≤ k can be computed.",
                "For those receivers j, k + 1 ≤ j ≤ N to whom DRi was not sent Ei j does not apply.",
                "Consider a receiver j, k + 1 ≤ j ≤ N to whom DRi was not sent.",
                "Refer to Figure 3.",
                "For such a receiver j, when DRi+1 is to be scheduled and 6 timeTi Exported path dtj A B C D Ti-1 Gi j DRi+1 computed by sender and DRi for receiver k+1 to N is removed from queue DRi+1 scheduled for receiver k+1 Ti+1 G H E F DRi scheduled for receiver j DRi computed by sender Placed path at receiver k+1 Gi+1 j Figure 3: Schedule computation when DRi is not sent to receiver j, k + 1 ≤ j ≤ N. δi+1 j needs to be computed, the total export error is the accumulated relative export error at time Ti when schedule for DRi was computed, plus the integral of the distance between the two trajectories AC and BD of Figure 3 over the time interval [Ti, Ti+1 + δi+1 j + dtj].",
                "Note that this integral is given by Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj).",
                "Therefore, instead of Ei j of Equation (1), we use the value Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) where Ri−1 j is relative export error used when the schedule for DRi was computed.",
                "Now consider the second scenario.",
                "Here the feedback dak corresponding to DRi has not arrived before DRi+1 is computed and scheduled.",
                "In this case, Ri k cannot be computed.",
                "Thus, in the computation of δk for DRi+1, this will be assumed to be zero.",
                "We do assume that a reliable mechanism is used to send dak back to the sender.",
                "When this information arrives at a later time, Ri k will be computed and accumulated to future relative export errors (for example Ri+1 k if dak is received before DRi+2 is computed) and used in the computation of δk when a future DR vector is to be scheduled (for example DRi+2). 4.7 Experimental Results In order to evaluate the effectiveness and quantify benefits obtained through the use of the scheduling algorithm, we implemented the proposed algorithm in BZFlag (Battle Zone Flag) [11] game.",
                "It is a first-person shooter game where the players in teams drive tanks and move within a battle field.",
                "The aim of the players is to navigate and capture flags belonging to the other team and bring them back to their own area.",
                "The players shoot each others tanks using shooting bullets.",
                "The movement of the tanks as well as that of the shots are exchanged among the players using DR vectors.",
                "We have modified the implementation of BZFlag to incorporate synchronized clocks among the players and the server and exchange time-stamps with the DR vector.",
                "We set up a testbed with four players running the instrumented version of BZFlag, with one as a sender and the rest as receivers.",
                "The scheduling approach and the base case where each DR vector was sent to all the receivers concurrently at every trigger point were implemented in the same run by tagging the DR vectors according to the type of approach used to send the DR vector.",
                "NISTNet [12] was used to introduce delays across the sender and the three receivers.",
                "Mean delays of 800ms, 500ms and 200ms were introduced between the sender and first, second and the third receiver, respectively.",
                "We introduce a variance of 100 msec (to the mean delay of each receiver) to model variability in delay.",
                "The sender logged the errors of each receiver every 100 milliseconds for both the scheduling approach and the base case.",
                "The sender also calculated the standard deviation and the mean of the accumulated export error of all the receivers every 100 milliseconds.",
                "Figure 4 plots the mean and standard deviation of the accumulated export error of all the receivers in the scheduling case against the base case.",
                "Note that the x-axis of these graphs (and the other graphs that follow) represents the system time when the snapshot of the game was taken.",
                "Observe that the standard deviation of the error with scheduling is much lower as compared to the base case.",
                "This implies that the accumulated errors of the receivers in the scheduling case are closer to one another.",
                "This shows that the scheduling approach achieves fairness among the receivers even if they are at different distances (i.e, latencies) from the sender.",
                "Observe that the mean of the accumulated error increased multifold with scheduling in comparison to the base case.",
                "Further exploration for the reason for the rise in the mean led to the conclusion that every time the DR vectors are scheduled in a way to equalize the total error, it pushes each receivers total error higher.",
                "Also, as the accumulated error has an estimated component, the schedule is not accurate to equalize the errors for the receivers, leading to the DR vector reaching earlier or later than the actual schedule.",
                "In either case, the error is not equalized and if the DR vector reaches late, it actually increases the error for a receiver beyond the highest accumulated error.",
                "This means that at the next trigger, this receiver will be the one with highest error and every other receivers error will be pushed to this error value.",
                "This flip-flop effect leads to the increase in the accumulated error for all the receivers.",
                "The scheduling for fairness leads to the decrease in standard deviation (i.e., increases the fairness among different players), but it comes at the cost of higher mean error, which may not be a desirable feature.",
                "This led us to explore different ways of equalizing the accumulated errors.",
                "The approach discussed in the following section is a heuristic approach based on the following idea.",
                "Using the same amount of DR vectors over time as in the base case, instead of sending the DR vectors to all the receivers at the same frequency as in the base case, if we can increase the frequency of sending the DR vectors to the receiver with higher accumulated error and decrease the frequency of sending DR vectors to the receiver with lower accumulated error, we can equalize the export error of all receivers over time.",
                "At the same time we wish to decrease the error of the receiver with the highest accumulated error in the base case (of course, this receiver would be sent more DR vectors than in the base case).",
                "We refer to such an algorithm as a budget based algorithm. 5.",
                "BUDGET BASED ALGORITHM In a game, the sender of an entity sends DR vectors to all the receivers every time a threshold is crossed by the entity.",
                "Lower the threshold, more DR vectors are generated during a given time period.",
                "Since the DR vectors are sent to all the receivers and the network delay between the sender-receiver pairs cannot be avoided, the before export error 3 with the most distant player will always 3 Note that after export error is eliminated by using synchronized clock among the players. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds Base Case Scheduling Algorithm #1 Figure 4: Mean and standard deviation of error with scheduling and without (i.e., base case). be higher than the rest.",
                "In order to mitigate the imbalance in the error, we propose to send DR vectors selectively to different players based on the accumulated errors of these players.",
                "The budget based algorithm is based on this idea and there are two variations of it.",
                "One is a probabilistic budget based scheme and the other, a deterministic budget base scheme. 5.1 Probabilistic budget based scheme The probabilistic budget based scheme has three main steps: a) lower the dead reckoning threshold but at the same time keep the total number of DRs sent the same as the base case, b) at every trigger, probabilistically pick a player to send the DR vector to, and c) send the DR vector to the chosen player.",
                "These steps are described below.",
                "The lowering of DR threshold is implemented as follows.",
                "Lowering the threshold is equivalent to increasing the number of trigger points where DR vectors are generated.",
                "Suppose the threshold is such that the number of triggers caused by it in the base case is t and at each trigger n DR vectors sent by the sender, which results in a total of nt DR vectors.",
                "Our goal is to keep the total number of DR vectors sent by the sender fixed at nt, but lower the number of DR vectors sent at each trigger (i.e., do not send the DR vector to all the receivers).",
                "Let n and t be the number of DR vectors sent at each trigger and number of triggers respectively in the modified case.",
                "We want to ensure n t = nt.",
                "Since we want to increase the number of trigger points, i.e, t > t, this would mean that n < n. That is, not all receivers will be sent the DR vector at every trigger.",
                "In the probabilistic budget based scheme, at each trigger, a probability is calculated for each receiver to be sent a DR vector and only one receiver is sent the DR (n = 1).",
                "This probability is based on the relative weights of the receivers accumulated errors.",
                "That is, a receiver with a higher accumulated error will have a higher probability of being sent the DR vector.",
                "Consider that the accumulated error for three players are a1, a2 and a3 respectively.",
                "Then the probability of player 1 receiving the DR vector would be a1 a1+a2+a3 .",
                "Similarly for the other players.",
                "Once the player is picked, the DR vector is sent to that player.",
                "To compare the probabilistic budget based algorithm with the base case, we needed to lower the threshold for the base case (for fair comparison).",
                "As the dead reckoning threshold in the base case was already very fine, it was decided that instead of lowering the threshold, the probabilistic budget based approach would be compared against a modified base case that would use the normal threshold as the budget based algorithm but the base case was modified such that every third trigger would be actually used to send out a DR vector to all the three receivers used in our experiments.",
                "This was called as the 1/3 base case as it resulted in 1/3 number of DR vectors being sent as compared to the base case.",
                "The budget per trigger for the probability based approach was calculated as one DR vector at each trigger as compared to three DR vectors at every third trigger in the 1/3 base case; thus the two cases lead to the same number of DR vectors being sent out over time.",
                "In order to evaluate the effectiveness of the probabilistic budget based algorithm, we instrumented the BZFlag game to use this approach.",
                "We used the same testbed consisting of one sender and three receivers with delays of 800ms, 500ms and 200ms from the sender and with low delay variance (100ms) and moderate delay variance (180ms).",
                "The results are shown in Figures 5 and 6.",
                "As mentioned earlier, the x-axis of these graphs represents the system time when the snapshot of the game was taken.",
                "Observe from the figures that the standard deviation of the accumulated error among the receivers with the probabilistic budget based algorithm is less than the 1/3 base case and the mean is a little higher than the 1/3 base case.",
                "This implies that the game is fairer as compared to the 1/3 base case at the cost of increasing the mean error by a small amount as compared to the 1/3 base case.",
                "The increase in mean error in the probabilistic case compared to the 1/3 base case can be attributed to the fact that the even though the probabilistic approach on average sends the same number of DR vectors as the 1/3 base case, it sometimes sends DR vectors to a receiver less frequently and sometimes more frequently than the 1/3 base case due to its probabilistic nature.",
                "When a receiver does not receive a DR vector for a long time, the receivers trajectory is more and more off of the senders trajectory and hence the rate of buildup of the error at the receiver is higher.",
                "At times when a receiver receives DR vectors more frequently, it builds up error at a lower rate but there is no way of reversing the error that was built up when it did not receive a DR vector for a long time.",
                "This leads the receivers to build up more error in the probabilistic case as compared to the 1/3 base case where the receivers receive a DR vector almost periodically. 8 0 200 400 600 800 1000 15950 16000 16050 16100 16150 16200 16250 16300 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 5: Mean and standard deviation of error for different algorithms (including budget based algorithms) for low delay variance. 0 200 400 600 800 1000 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 MeanAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm 0 50 100 150 200 250 300 16960 16980 17000 17020 17040 17060 17080 17100 17120 17140 17160 17180 StandardDeviationofAccumulatedError Time in Seconds 1/3 Base Case Deterministic Algorithm Probabilistic Algorithm Figure 6: Mean and standard deviation of error for different algorithms (including budget based algorithms) for moderate delay variance. 5.2 Deterministic budget based scheme To bound the increase in mean error we decided to modify the budget based algorithm to be deterministic.",
                "The first two steps of the algorithm are the same as in the probabilistic algorithm; the trigger points are increased to lower the threshold and accumulated errors are used to compute the probability that a receiver will receiver a DR vector.",
                "Once these steps are completed, a deterministic schedule for the receiver is computed as follows: 1.",
                "If there is any receiver(s) tagged to receive a DR vector at the current trigger, the sender sends out the DR vector to the respective receiver(s).",
                "If at least one receiver was sent a DR vector, the sender calculates the probabilities of each receiver receiving a DR vector as explained before and follows steps 2 to 6, else it does not do anything. 2.",
                "For each receiver, the probability value is multiplied with the budget available at each trigger (which is set to 1 as explained below) to give the frequency of sending the DR vector to each receiver. 3.",
                "If any of the receivers frequency after multiplying with the budget goes over 1, the receivers frequency is set as 1 and the surplus amount is equally distributed to all the receivers by adding the amount to their existing frequencies.",
                "This process is repeated until all the receivers have a frequency of less than or equal to 1.",
                "This is due to the fact that at a trigger we cannot send more than one DR vector to the respective receiver.",
                "That will be wastage of DR vectors by sending redundant information. 4. (1/frequency) gives us the schedule at which the sender should send DR vectors to the respective receiver.",
                "Credit obtained previously (explained in step 5) if any is subtracted from the schedule.",
                "Observe that the resulting value of the schedule might not be an integer; hence, the value is rounded off by taking the ceiling of the schedule.",
                "For example, if the frequency is 1/3.5, this implies that we would like to have a DR vector sent every 3.5 triggers.",
                "However, we are constrained to send it at the 4th trigger giving us a credit of 0.5.",
                "When we do send the DR vector next time, we would be able to send it 9 on the 3rd trigger because of the 0.5 credit. 5.",
                "The difference between the schedule and the ceiling of the schedule is the credit that the receiver has obtained which is remembered for the future and used at the next time as explained in step 4. 6.",
                "For each of those receivers who were sent a DR vector at the current trigger, the receivers are tagged to receive the next DR vector at the trigger that happens exactly schedule (the ceiling of the schedule) number of times away from the current trigger.",
                "Observe that no other receivers schedule is modified at this point as they all are running a schedule calculated at some previous point of time.",
                "Those schedules will be automatically modified at the trigger when they are scheduled to receive the next DR vector.",
                "At the first trigger, the sender sends the DR vector to all the receivers and uses a relative probability of 1/n for each receiver and follows the steps 2 to 6 to calculate the next schedule for each receiver in the same way as mentioned for other triggers.",
                "This algorithm ensures that every receiver has a guaranteed schedule of receiving DR vectors and hence there is no irregularity in sending the DR vector to any receiver as was observed in the budget based probabilistic algorithm.",
                "We used the testbed described earlier (three receivers with varying delays) to evaluate the deterministic algorithm using the budget of 1 DR vector per trigger so as to use the same number of DR vectors as in the 1/3 base case.",
                "Results from our experiments are shown in Figures 5 and 6.",
                "It can be observed that the standard deviation of error in the deterministic budget based algorithm is less than the 1/3 base case and also has the same mean error as the 1/3 base case.",
                "This indicates that the deterministic algorithm is more fair than the 1/3 base case and at the same time does not increase the mean error thereby leading to a better game quality compared to the probabilistic algorithm.",
                "In general, when comparing the deterministic approach to the probabilistic approach, we found that the mean accumulated error was always less in the deterministic approach.",
                "With respect to standard deviation of the accumulated error, we found that in the fixed or low variance cases, the deterministic approach was generally lower, but in higher variance cases, it was harder to draw conclusions as the probabilistic approach was sometimes better than the deterministic approach. 6.",
                "CONCLUSIONS AND FUTURE WORK In distributed multi-player games played across the Internet, object and player trajectory within the game space are exchanged in terms of DR vectors.",
                "Due to the variable delay between players, these DR vectors reach different players at different times.",
                "There is unfair advantage gained by receivers who are closer to the sender of the DR as they are able to render the senders position more accurately in real time.",
                "In this paper, we first developed a model for estimating the error in rendering player trajectories at the receivers.",
                "We then presented an algorithm based on scheduling the DR vectors to be sent to different players at different times thereby equalizing the error at different players.",
                "This algorithm is aimed at making the game fair to all players, but tends to increase the mean error of the players.",
                "To counter this effect, we presented budget based algorithms where the DR vectors are still scheduled to be sent at different players at different times but the algorithm balances the need for fairness with the requirement that the error of the worst case players (who are furthest from the sender) are not increased compared to the base case (where all DR vectors are sent to all players every time a DR vector is generated).",
                "We presented two variations of the budget based algorithms and through experimentation showed that the algorithms reduce the standard deviation of the error thereby making the game more fair and at the same time has comparable mean error to the base case. 7.",
                "REFERENCES [1] S.Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee, and S. Rangarajan, Accuracy in Dead-Reckoning based Distributed Multi-Player Games, Proceedings of ACM SIGCOMM 2004 Workshop on Network and System Support for Games (NetGames 2004), Aug. 2004. [2] L. Gautier and C. Diot, Design and Evaluation of MiMaze, a Multiplayer Game on the Internet, in Proc. of IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistency in Replicated Continuous Interactive Media, in Proc. of the ACM Conference on Computer Supported Cooperative Work (CSCW00), 2000, pp. 181-190. [4] S.K.",
                "Singhal and D.R.",
                "Cheriton, Exploiting Position History for Efficient Remote Rendering in Networked Virtual Reality, Presence: Teleoperators and Virtual Environments, vol. 4, no. 2, pp. 169-193, 1995. [5] C. Diot and L. Gautier, A Distributed Architecture for Multiplayer Interactive Applications on the Internet, in IEEE Network Magazine, 1999, vol. 13, pp. 6-15. [6] L. Pantel and L.C.",
                "Wolf, On the Impact of Delay on Real-Time Multiplayer Games, in Proc. of ACM NOSSDAV02, May 2002. [7] Y. Lin, K. Guo, and S. Paul, Sync-MS: Synchronized Messaging Service for Real-Time Multi-Player Distributed Games, in Proc. of 10th IEEE International Conference on Network Protocols (ICNP), Nov 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan, and S. Paul, A Fair Message Exchange Framework for Distributed Multi-Player Games, in Proc. of NetGames2003, May 2003. [9] N. E. Baughman and B. N. Levine, Cheat-Proof Playout for Centralized and Distributed Online Games, in Proc. of IEEE INFOCOM01, April 2001. [10] M. Allman and V. Paxson, On Estimating End-to-End Network Path Properties, in Proc. of ACM SIGCOMM99, Sept. 1999. [11] BZFlag Forum, BZFlag Game, URL: http://www.bzflag.org. [12] Nation Institute of Standards and Technology, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/. 10"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        }
    }
}