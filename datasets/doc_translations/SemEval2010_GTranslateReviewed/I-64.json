{
    "id": "I-64",
    "original_text": "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems. However, there is no best way to organize and all ways of organizing are not equally effective. Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities. If the environment is dynamic, the environmental conditions or the problem task structure may change over time. This precludes the use of static, design-time generated, organizational structures in such systems. On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures. Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime. We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization. We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment. Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1. INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents. The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2]. Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved. The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure. On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance. Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures. We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances. In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent. We use TÆMS as the underlying representation for our problem solving requests. TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3]. The root node of the task structure represents the high-level goal that the agent is trying to achieve. The sub-nodes of a node represent the subtasks and methods that make up the highlevel task. The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform. The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration. TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal. TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15]. The main contributions of this paper are as follows: 1. We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains. This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2. We model the use of resources other than only processor resources. 3. We incorporate robustness into the organizational structures. 2. RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them. More recently Dignum et. al.[8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision. According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command. Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing. In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition. The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures. The latter also allows us to incorporate different design-to-criteria schedulers [16]. Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation. However, their approach assumes a fixed number of agents with designated (and fixed) roles. OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals. We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing. In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load. Hence, agent cloning can be thought of as akin to agent spawning in our approach. However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents. In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent. Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach. Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3. TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model. In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >. In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 . The MAS has no prior knowledge about the task ti before the arrival time, ai. In order for the MAS to accrue quality, the task ti must be completed before the deadline, di. Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks. The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve. Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task. Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M). For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve. The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}. In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol. Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol. Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs). The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods. For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE. See [5] for formal definitions. • E is the set of (non-local) effects. Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method. That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1. The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}. That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2. All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve. We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure. Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3. All resources are exclusive, i.e., only one agent may use a resource at any given time. Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4. All resources are non-consumable. 4. ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles. One or more agents may enact a particular role and one or more roles must be enacted by every agent. The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination). The relationships between the roles are the coordination relationships that exist between the subparts of a problem. In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved. We define a role as a TÆMS subtree rooted at a particular node. Hence, the set (T ∪ M) encompasses the space of all possible roles. Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees. Hence, we will use the terms role, task node and task interchangeably. We, also, differentiate between local and managed (non-local) roles. Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node. For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent. Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents. Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination. Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition. These two primitives result in a change in the assignment of roles to the agents. Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent. Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged. In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments. Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing. Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far. To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1. For a local role, all the descendent nodes of that role will be local. TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2. Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed. TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3. If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4. If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1). To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed. Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge. At the 1230 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles. Similarly, the newly spawned agent will only know of its just assigned local roles. When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent. To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent. Care is taken to preserve the organizational invariant rules 1 and 4. Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself? The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above. This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent. This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm. Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first. That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent). We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines. Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles. If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do. For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent. If this difference is close to zero, then the both the agents have roughly the same amount of work to do. Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures. The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand. Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change. Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change. If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high. Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change. To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure. This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant. The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below. From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large. Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change. To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue. Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation. To calculate if agent composition is necessary, we again use the simulated annealing equation. However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle. If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5. ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones. The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected. The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement. Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better. Rather a thorough empirical evaluation of both approaches would be required. In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper. To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to. If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent. This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information. The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents. This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents. For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively. The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents. The details are beyond the scope of this paper. 6. EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines. At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor. During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines. To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run. We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials. We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines). The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents. The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles. The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks. In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3. The runtime of all the experiments was 2500 cycles. We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests. Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment. The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks. This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03). For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 . Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach. We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents). The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld. The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality. We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05). For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD. The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004). The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead. These results make intuitive sense given our goals for the OSD approach. We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids. The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria. Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality. The results of testing the first hypothesis were slightly more surprising. It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks. Next, we evaluated the performance of the three heuristics for allocating tasks. Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated. We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria. To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2. The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5. Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set. Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment. Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics. Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results. Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results. If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation. The final evaluation was done on 673 experimental sets. We tested the potential of these three heuristics on the following performance criteria: 1. The average number of agents used. 2. The total number of organizational changes. 3. The total messages sent by all the agents. 4. The total resource cost of the organization. 5. The number of tasks completed. 6. The average quality accrued. The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7. The average response time of the organization. The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time). Hence, the response time is equivalent to the wait time. For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8. The average runtime of the tasks attempted by the organization. This time is defined as the difference between the time at which the task completed or failed and the start time. For tasks that were never stated, this time is set to zero. 9. The turnaround time is defined as the sum of the response time and runtime of a task. Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance. Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets. The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration. We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05). We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest. These counts are given in Tables 1 and 2. The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1. The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2. Both of these tables allow us to glean important information about the performance of the three heuristics. Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF). When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other. We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load. This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach. The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent. With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets. In fact, it was over ten times as good as its second best competitor (TF). This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time. We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time! This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning). Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time. In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation. We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information. We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future. Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2). As expected, as the probability of failure increases, the number of agents failing during a run also increases. This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time. The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best. Only the more interesting heuristic groupings are shown. All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline. As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness. The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines. Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness. For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines. However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness. Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7. CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable organizational structure. We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time. Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8. REFERENCES [1] K. S. Barber and C. E. Martin. Dynamic reorganization of decision-making groups. In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser. Computational organization theory. In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker. The analysis of coordination in an information system application - emergency medical services. In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51. Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser. The use of meta-level control for coordination in a distributed problem solving network. Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker. Environment centered analysis and design of coordination mechanisms. Ph.D. Thesis, Dept. of Comp. Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li. Coordinating mutually exclusive resources using GPGP. Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein. An experimental evaluation of domain-independent fault handling services in open multi-agent systems. Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg. Towards Dynamic Reorganization of Agent Societies. In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser. Using self-diagnosis to adapt organizational structures. In AGENTS 01, pages 529-536, New York, NY, USA, 2001. ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo. Organization self-design of distributed production systems. IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al. Evolution of the gpgp/tæms domain-independent coordination framework. Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum. Towards adaptive fault tolerance for distributed multi-agent systems. Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al. Agent cloning: an approach to agent mobility and resource allocation. IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y. So and E. Durfee. An organizational self-design model for organizational change. In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner. Coordination decision support assistants (coordinators). Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser. Design-to-criteria scheduling: Real-time agent control. Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235",
    "original_translation": "Diseño de la organización en entornos semi-dinámicos Sachin Kamboj ∗ y Keith S. Decker Departamento de Ciencias de la Computación e Información Universidad de Delaware Newark, DE 19716 {Kamboj, decker ostsistemas multiagentes. Sin embargo, no hay la mejor manera de organizarse y todas las formas de organizar no son igualmente efectivas. Intentar optimizar una estructura organizativa depende en gran medida de las características ambientales, incluidas las características del problema, los recursos disponibles y las capacidades de los agentes. Si el entorno es dinámico, las condiciones ambientales o la estructura de la tarea problemática pueden cambiar con el tiempo. Esto impide el uso de estructuras organizativas generadas estáticas en el tiempo de diseño en tales sistemas. Por otro lado, para muchos entornos reales, los problemas tampoco son totalmente únicos: ciertas características y condiciones cambian lentamente, si es que lo hacen, y estos pueden tener un efecto importante en la creación de estructuras organizativas estables. El diseño de la organización de la organización (OSD) se ha propuesto como un enfoque para construir estructuras organizacionales adecuadas en tiempo de ejecución. Extendemos el enfoque de OSD existente para incluir dominios digitados, modelar otros recursos además de solo recursos del procesador y incorporar la robustez en la organización. Luego evaluamos nuestro enfoque contra el enfoque de la red de contratos y mostramos que nuestros agentes de OSD funcionan mejor, son más eficientes y más flexibles para los cambios en el medio ambiente. Categorías y descriptores de sujetos I.2.11 [Inteligencia artificial distribuida]: Sistemas multiagentes Algoritmos de términos generales, diseño, rendimiento, experimentación 1. Introducción En este documento, estamos principalmente interesados en el diseño organizacional de un sistema multiagente: los roles promulgados por los agentes, ∗ El autor principal es un estudiante la coordinación entre los roles y el número y la asignación de roles y recursos a los agentes individuales. El diseño organizacional se complica por el hecho de que no existe la mejor manera de organizarse y que todas las formas de organizar no son igualmente efectivas [2]. En cambio, la estructura organizativa óptima depende tanto del problema en cuestión como de las condiciones ambientales bajo las cuales el problema debe resolverse. Las condiciones ambientales pueden no ser conocidas a priori, o pueden cambiar con el tiempo, lo que impediría el uso de una estructura organizativa estática. Por otro lado, todas las instancias problemáticas y las condiciones ambientales no siempre son únicos, lo que haría ineficiente el uso de una nueva estructura organizativa a medida para cada instancia de problemas. Se ha propuesto el auto-diseño organizacional (OSD) [4, 10] como un enfoque para diseñar organizaciones en tiempo de ejecución en el que los agentes son responsables de generar sus propias estructuras organizativas. Creemos que OSD es especialmente adecuado para el escenario anterior en el que el medio ambiente es semi-dinámico, ya que los agentes pueden adaptarse a los cambios en las estructuras de tareas y las condiciones ambientales, al tiempo que pueden generar estructuras organizativas relativamente estables que explotan las características comunes entreinstancias problemáticas. En nuestro enfoque (como en [10]), definimos dos operadores para el desove y la composición del agente OSD - cuando un agente se sobrecarga, genera un nuevo agente para manejar parte de su carga/responsabilidad de tareas;Cuando un agente está inactivo durante un período prolongado de tiempo, puede decidir componer con otro agente. Usamos Tæms como la representación subyacente para nuestras solicitudes de resolución de problemas. Tæms [11] (análisis de tareas, modelado y simulación de entorno) es un marco computacional para representar y razonar sobre entornos de tareas complejos en los que se representan las tareas (problemas) utilizando estructuras de tareas jerárquicas extendidas [3]. El nodo raíz de la estructura de tareas representa el objetivo de alto nivel que el agente está tratando de lograr. Los sub-nodos de un nodo representan las subtareas y métodos que componen la tarea de alto nivel. Los nodos de la hoja están en el nivel más bajo de abstracción y representan métodos ejecutables: las acciones primitivas que los agentes pueden realizar. Los métodos ejecutables, ellos mismos, pueden tener múltiples resultados, con diferentes probabilidades y diferentes características, como calidad, costo y duración. Tæms también permite varios mecanismos para especificar variaciones y alternativas de subtareas, es decir, cada nodo en Tæms está etiquetado con una función de acumulación característica que describe cuántos o subconocentes o conjuntos de subggoals deben lograrse para lograr un objetivo de nivel superior particular. Tæms se ha utilizado para modelar muchos entornos de problemas diferentes, incluidas redes de sensores distribuidos, recopilación de información, programación de hospitales, EMS y planificación militar.[5, 6, 3, 15]. Las principales contribuciones de este documento son las siguientes: 1. Extendemos los enfoques de OSD existentes para usar Tæms como la representación del problema subyacente, que nos permite modelar y usar OSD para dominios orientados a la pena. Esto a su vez nos permite razonar sobre (1) tareas alternativas y asignaciones de roles que hacen diferentes compensaciones de calidad/costos y generan diferentes estructuras organizacionales y (2) incertidumbres en la ejecución de tareas.2. Modelamos el uso de recursos que no sean solo recursos del procesador.3. Incorporamos robustez en las estructuras organizacionales.2. Trabajo relacionado El concepto de OSD no es nuevo y ha existido desde el trabajo de Corkill y menor en el sistema DVMT [4], a pesar de que el concepto no fue completamente desarrollado por ellos. Más recientemente Dignum et.Alabama.[8] han descrito a OSD en el contexto de la reorganización de las sociedades de los agentes e intentan clasificar los diversos tipos de reorganización posibles de acuerdo con el motivo de la reorganización, el tipo de reorganización y quién es responsable de la decisión de reorganización. Según su esquema, el tipo de reorganización realizada por nuestros agentes cae en la categoría de cambios estructurales y la decisión de reorganización puede describirse como un comando compartido. Nuestra investigación se basa principalmente en el trabajo realizado por Gasser e Ishida [10], en el que usan OSD en el contexto de un sistema de producción para realizar la asignación de trabajo adaptativo y el equilibrio de carga. En su enfoque, definen dos primitivas organizacionales: composición y descomposición, que son similares a nuestras primitivas organizacionales para el desove y la composición de los agentes. La principal diferencia entre su trabajo y nuestro trabajo es que usamos Tæms como la representación subyacente para nuestros problemas, lo que permite, en primer lugar, la representación de una clase de problemas más grande y más general y, en segundo lugar, razonamiento cuantitativo sobre las estructuras de tareas. Este último también nos permite incorporar diferentes programadores de diseño a criterios [16]. Horling y Lesser [9] presentan un enfoque diferente y de arriba hacia abajo para OSD que también usa Tæms como la representación subyacente. Sin embargo, su enfoque supone un número fijo de agentes con roles designados (y fijos). OSD se usa en su trabajo para cambiar los patrones de interacción entre los agentes y los resultados en los agentes que usan diferentes subtareas o diferentes recursos para lograr sus objetivos. También extendemos el trabajo realizado por Sycara et.Al., [13] sobre la clonación del agente, que es otro enfoque para la asignación de recursos y el equilibrio de carga. En este enfoque, los autores presentan la clonación del agente como una posible respuesta a la sobrecarga del agente: si un agente detecta que está sobrecargado y que hay recursos de repuesto (no utilizado) en el sistema, el agente se clama y le da a su clon una parte de sucarga de tareas. Por lo tanto, la clonación del agente puede considerarse como el desove del agente en nuestro enfoque. Sin embargo, los dos enfoques son diferentes, ya que no hay especialización de los agentes en los anteriores, los agentes clonados son réplicas perfectas de los agentes originales y cumplen los mismos roles y responsabilidades que los agentes originales. En nuestro enfoque, por otro lado, los agentes generados están especializados en una subparte de la estructura de tareas de los agentes de desove, que ya no es responsabilidad del agente de desove. Por lo tanto, nuestro enfoque también trata con la formación explícita de la organización y la coordinación de las tareas de los agentes que no son manejadas por su enfoque. Otros enfoques para OSD incluyen el trabajo de SO y Durfee [14], quienes describen un modelo de arriba hacia abajo de OSD en el contexto de la resolución cooperativa de problemas distributivos (CDP) y Barber y Martin [1], que describen un marco de toma de decisiones adaptativoen el que los agentes pueden reorganizar los grupos de toma de decisiones cambiando dinámicamente (1) quién toma las decisiones para un objetivo particular y (2) que deben llevar a cabo estas decisiones. Este último trabajo se ocupa principalmente de las decisiones de coordinación y se puede utilizarComplementa nuestro trabajo de OSD, que trata principalmente de la asignación de tareas y recursos.3. Tarea y modelo de recursos Para fundamentar nuestra discusión sobre OSD, ahora describimos formalmente nuestra tarea y modelo de recursos. En nuestro modelo, la entrada principal al sistema de agentes múltiples (MAS) es un conjunto ordenado de solicitudes de resolución de problemas o instancias de tareas, <P1, P2, P3, ..., Pn>, donde cada solicitud de resolución de problemas, PI,se puede representar usando la tuple <ti, ai, di>. En este esquema, Ti es la estructura de tareas Tæms subyacente, ai ∈ N+ es el tiempo de llegada y di ∈ N+ es la fecha límite de la instancia de la tarea ésima 1. El MAS no tiene conocimiento previo sobre la tarea TI antes de la hora de llegada, IA. Para que el MAS acumule la calidad, la tarea TI debe completarse antes de la fecha límite, DI. Además, cada estructura de tareas subyacente, TI, puede representarse utilizando la tuple <t, τ, m, q, e, r, ρ, c>, donde: • t es el conjunto de tareas. Las tareas son nodos no hojas en una estructura de tareas Tæms y se utilizan para denotar objetivos que los agentes deben alcanzar. Las tareas tienen una función de acumulación característica (ver más abajo) y están compuestas por otras subtareas y/o métodos que deben lograrse para lograr el objetivo representado por esa tarea. Formalmente, cada tarea TJ se puede representar usando el par (QJ, SJ), donde Qj ∈ Q y Sj ⊂ (T ∪ M). Para nuestra comodidad, definimos dos subtareas de funciones (tarea): t → P (t ∪ m) y supertasks (nodo tæms): t ∪ m → p (t), que devuelven las subtareas y supertasks de un nodo Tæms respectivamente 2.• τ ∈ T, es la raíz de la estructura de tareas, es decir, el objetivo de nivel más alto que la organización está tratando de lograr. La calidad acumulada en un problema es igual a la calidad de la tarea τ.• M es el conjunto de métodos ejecutables, es decir, m = {m1, m2, ..., mn}, donde cada método, mk, se representa utilizando la distribución de resultados, {(o1, p1), (o2, p2),..., (om, pm)}. En la pareja (OL, PL), OL es un resultado y PL es la probabilidad de que la ejecución de MK resulte en el resultado OL. Además, cada resultado, OL se representa utilizando el triple (Ql, Cl, DL), donde QL es la distribución de calidad, CL es la distribución de costos y DL es la distribución de duración del resultado OL. Cada distribución discreta es en sí misma un conjunto de pares, {(n1, p1), (n2, p2), ..., (nn, pn)}, donde pi ∈ + es la probabilidad de que el resultado tenga una calidad/costo/Duración de nl ∈ N dependiendo del tipo de distribución y PM i = 1 pl = 1. • Q es el conjunto de funciones de acumulación de calidad/características (CAF). Los CAF determinan cómo un grupo de tareas acumula calidad dada la calidad acumulada por sus subtareas/métodos. Para nuestra investigación, usamos cuatro CAF: Min, Max, Sum y Exact Exact. Ver [5] para definiciones formales.• E es el conjunto de efectos (no locales). Nuevamente, ver [5] para las definiciones formales.• R es el conjunto de recursos.• ρ es una asignación de un método y recurso ejecutable a la cantidad de ese recurso necesario (por un agente) para programar/ejecutar ese método. Es decir ρ (método, recurso): M × R → N. 1 N es el conjunto de números naturales que incluyen cero y n+ es el conjunto de números naturales positivos que excluyen cero.2 P es el conjunto de potencia de SET, es decir, el conjunto de todos los subconjuntos de un conjunto del sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 1229 • C es un mapeo de un recurso a el costo de ese recurso, es decir, C (recurso): R → N+ también hacemos el siguiente conjunto de supuestos en nuestra investigación:1. Los agentes en el MAS se extraen del conjunto infinito a = {a1, a2, a3, ...}. Es decir, no asumimos un conjunto fijo de agentes, en cambio, los agentes se crean (generados) y se destruyen (combinados) según sea necesario.2. Todas las solicitudes de resolución de problemas tienen la misma estructura de tareas subyacentes, es decir, ∃t∀iti = t, donde t es la estructura de tareas del problema que el MAS está tratando de resolver. Creemos que esta suposición es válida para muchos de los problemas prácticos que tenemos en mente porque las estructuras de tareas de Tæms son básicamente planes de alto nivel para lograr un objetivo en el que los pasos necesarios para lograr el objetivo, así como las posibles situaciones de contingenciaha sido precomputado fuera de línea y representado en la estructura de tareas. Debido a que representa muchas contingencias, alternativas, características inciertas y opciones flexibles en tiempo de ejecución, la misma estructura de tareas subyacentes puede desarrollarse de manera muy diferente en instancias específicas.3. Todos los recursos son exclusivos, es decir, solo un agente puede usar un recurso en un momento dado. Además, suponemos que cada agente debe poseer el conjunto de recursos que necesita, aunque la propiedad de los recursos puede cambiar durante la evolución de la organización.4. Todos los recursos no pueden consultar.4. Auto diseño organizacional 4.1 Roles y relaciones de agentes La estructura organizacional se compone principalmente de roles y las relaciones entre los roles. Uno o más agentes pueden promulgar un papel particular y cada agente debe promulgar uno o más roles. Se pueden considerar los roles como las partes que juegan los agentes que promulgan los roles en la solución al problema y reflejan los compromisos a largo plazo hechos por los agentes en cuestión a un cierto curso de acción (que incluye la responsabilidad de la tarea, la autoridad yMecanismos para la coordinación). Las relaciones entre los roles son las relaciones de coordinación que existen entre las subpartes de un problema. En nuestro enfoque, el diseño organizacional depende directamente de la estructura de tareas y las condiciones ambientales bajo las cuales los problemas deben resolverse. Definimos un papel como un subárbol Tæms enraizado en un nodo particular. Por lo tanto, el conjunto (T ∪ M) abarca el espacio de todos los roles posibles. Tenga en cuenta que, por definición, un papel puede consistir en uno o más roles (sub) como un nodo Tæms particular puede estar compuesto por uno o más subreos. Por lo tanto, utilizaremos el rol de los términos, el nodo de tareas y la tarea indistintamente. También diferenciamos entre roles locales y administrados (no locales). Los roles locales son roles que son responsabilidad exclusiva de un solo agente, es decir, el agente en cuestión es responsable de resolver todos los subproblemas del árbol arraigado en ese nodo. Para tales roles, el agente en cuestión puede hacer una o más subtareas, únicamente a su discreción y sin consultar con ningún otro agente. Los roles administrados, por otro lado, deben coordinarse entre dos o más agentes como tales roles tendrán dos o más roles locales descendientes que son responsabilidad de dos o más agentes separados. Cualquiera de los mecanismos de coordinación existentes (como GPGP [11]) puede usarse para lograr esta coordinación. Formalmente, si el tipo de función (agente, nodo Tæms): a × (t ∪ m) → {local, administrado, sin asignar}, devuelve el tipo de responsabilidad del agente hacia el rol especificado, entonces escriba (a, r)= Local ⇐⇒ ∀ri∈Subtasks (r) tipo (a, ri) = tipo local (a, r) = gestionado ⇐⇒ [∃a1∃r1 (r1 ∈ Subtareas (r)) ∧ (tipo (a1, r1)= Administrado)] ∨ [∃a2∃a3∃r2∃r3 (a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ Subtareas (r)) ∧ (r3 ∈ Subtareas (r)) ∧ (tipo (a2, r2) = Local) ∧ (tipo (A3, R3) = local)] 4.2 Formación y adaptación de la organización para formar o adaptar su estructura organizacional, los agentes usan dos primitivas organizacionales: desove de agentes y composición. Estas dos primitivas dan como resultado un cambio en la asignación de roles a los agentes. El desove del agente es la generación de un nuevo agente para manejar un subconjunto de los roles del agente de desove. La composición del agente, por otro lado, es ortogonal al desove del agente e implica la fusión de dos o más agentes juntos: el agente combinado es responsable de promulgar todos los roles de los agentes que se fusionan. Para participar en la formación y adaptación de una organización, los agentes deben representar explícitamente y razonar sobre las asignaciones de roles. Por lo tanto, como parte de su conocimiento organizacional, cada agente mantiene una lista de los roles locales que está promulgando y los roles no locales que está administrando. Tenga en cuenta que cada agente solo tiene un conocimiento organizacional limitado y es individualmente responsable de desovar o combinar con otro agente, según sea necesario, en función de su estimación de su desempeño hasta ahora. Para ver cómo funcionan las primitivas organizacionales, primero describimos cuatro reglas que pueden considerarse como los invariantes organizacionales que siempre se mantendrán antes y después de cualquier cambio organizacional: 1. Para un papel local, todos los nodos descendientes de ese papel serán locales. Tipo (a, r) = local = ⇒ ∀ri∈Subtasks (r) tipo (a, ri) = local 2. Del mismo modo, para un papel administrado (no local), se gestionarán todos los nodos ascendentes de ese rol. Tipo (a, r) = administrado = ⇒ ∀ri∈SuperTasks (r) ∃ai (ai ∈ A) ∧ (tipo (ai, ri) = administrado) 3. Si dos roles locales promulgados por dos agentes diferentes comparten un antepasado común, ese antepasado será un papel administrado.(Tipo (a1, r1) = local) ∧ (tipo (a2, r2) = local) ∧ (a1 = a2) ∧ (r1 = r2) = ⇒ ∀ri∈ (SuperTasks (R1) ∩superTasks (R2)) ∃ai (ai ∈ A) ∧ (tipo (ai, ri) = administrado) 4. Si todos los descendientes directos de un papel son locales y la única responsabilidad de un solo agente, ese papel será un papel local.∃a∃r∀ri∈Subtasks (r) (a ∈ A) ∧ (r ∈ (t ∪ m)) ∧ (tipo (a, ri) = local) = ⇒ (tipo (a, r) = local) cuandoSe genera un nuevo agente, el agente que realiza el desove asignará uno o más de sus roles locales al agente recién generado (Algoritmo 1). Para preservar las reglas invariantes 2 y 3, el agente de desove cambiará el tipo de todos los roles ascendentes de los nodos asignados al agente recién generado de local a administrado. Tenga en cuenta que el agente de desove solo está cambiando su conocimiento organizacional local y no el conocimiento organizacional global. En el 1230 el sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) al mismo tiempo, el agente de desove está asumiendo la tarea de administrar los roles previamente locales. Del mismo modo, el agente recién generado solo sabrá de sus roles locales recién asignados. Cuando un agente (el agente de composición) decide componer con otro agente (el agente compuesto), el conocimiento organizacional del agente de composición se fusiona con el conocimiento organizacional del agente compuesto. Para hacer esto, el agente compuesto asume los roles de todas las tareas locales y administradas del agente de composición. Se tiene cuidado para preservar las reglas invariantes de la organización 1 y 4. Algoritmo 1 Spawnagent (Spawningagent): A → A 1: LocalRoles ← {r ⊆ (T ∪ M) |Tipo (SpawningAgent, R) = Local} 2: NewAgent ← CreateNewagent () 3: NewAgentRoles ← FindRolesForsPawnedAgent (LocalRoles) 4: Para el papel en NewAgentroles do 5: Tipo (NewAgent, rol) ← Local 6: Tipo (Spawninggent, rol) ← ← ←No asignado 7: PreserveRorganizationalInvariants () 8: Algoritmo de retorno NewAgent 2 FindRolesForsPawnedAgent (SpawningAgentRoles): (T ∪ M) → (T ∪ M) 1: R ← SpawningageNroles 2: Roles seleccionados ← Nil 3: para el roles en [P) - {{{φ, r}] do 4: if costo (r, roleset) <cost (r, selectionrols) luego 5: Selectedroles ← Roleset 6: Devuelve el algoritmo de roles 3 getResourCecost (roles): (t ∪ m) → 1: m ← ((((Roles ∩ m) 2: Costo ← 0 3: para recursos en r do 4: maxResourceUsage ← 0 5: para el método en m do 6: if ρ (método, recurso)> maxResourceUsage entonces 7: max ← ρ (método, recurso)8: Costo ← Costo + [C (Recurso) × MaxResourceUsage] 9: Costo de retorno 4.2.1 Asignación de roles durante el desove Una de las preguntas clave que el agente que realiza el desove debe responder es: ¿cuál de sus roles locales debe asignaral agente recién generado y ¿cuál de sus roles locales debería mantenerse para sí mismo? La responsabilidad de responder a esta pregunta recae en la función FindRolesForsPawnedAgent (), que se muestra en el Algoritmo 2 anterior. Esta función toma el conjunto de roles locales que son responsabilidad del agente de desove y devuelve un subconjunto de esos roles para la asignación al agente recién generado. Este subconjunto se selecciona en función de los resultados de una función de costo como es evidente en la línea 4 del algoritmo. Dado que el uso de diferentes funciones de costo dará como resultado diferentes estructuras organizacionales y, dado que no tenemos una razón a priori para creer que una función de costo superará a la otra, evaluamos el rendimiento de tres funciones de costo diferentes basadas en las siguientes tres heurísticas diferentes: Algoritmo 4 GetEppectedDuration (roles): (t ∪ m) → n+ 1: m ← (roles ∩ m) 2: exptduration ← 0 3: para [resultado = <(q, c, d), resultados de resultados>] en m do4: Exptoutcomeduration ← 0 5: for (n, p) en d do 6: exptoutcomeduration ← n × p 7: exptduration ← exptduration + [exptoutcomeduration × resultados de resultados] 8: return expturation asignando roles de mayor mayorprimero en los nodos más altos. Es decir, si los nodos de una estructura de tareas estuvieran numerados, comenzando desde la raíz, de manera amplia, entonces esta heurística seleccionaría el rol local del agente de desove que tenía el número más bajo y la ruptura ese nodo (al asignaruna de sus subtareas al agente recién generado). Seleccionamos esta heurística porque (a) es el más simple de implementar, (b) más rápido de ejecutar (la asignación de roles se puede hacer en tiempo constante sin la necesidad de una búsqueda a través de la estructura de tareas) y (c) tiene sentido desdeUna perspectiva humana-organización como esta heurística corresponde a dividir una organización a lo largo de líneas funcionales. Minimización de recursos totales: esta heurística intenta minimizar el costo total de los recursos que necesitan los agentes de la organización para ejecutar sus roles. Si r es las roles locales del agente de desove y R ser el subconjunto de roles que se evalúan para la asignación al agente recién generado, la función de costo para esta heurística está dada por: Costo (R, R) ← GetResourCecost (R - R)+Tiempo de ejecución de equilibrio de GetResourCost (R): esta heurística intenta asignar roles de una manera que intente garantizar que cada agente tenga una cantidad igual de trabajo por hacer. Para cada asignación de roles potencial, esta heurística funciona calculando el valor absoluto de la diferencia entre la duración esperada de sus propios roles después del desove y la duración esperada de los roles del agente recién generado. Si esta diferencia está cerca de cero, entonces los dos agentes tienen aproximadamente la misma cantidad de trabajo por hacer. Formalmente, si r es las roles locales del agente de desove y R ser el subconjunto de roles que se evalúan para la asignación al agente recién generado, entonces la función de costo para esta heurística viene dada por: Costo (R, R) ← | GetEppectedDuration (R - r) -getEppectedDuration (r) |Para evaluar estas heurísticas, realizamos una serie de experimentos que probaron el rendimiento de la organización resultante en estructuras de tareas generadas al azar. Los resultados se dan en la Sección 6. 4.3 Razones para el cambio organizacional ya que el cambio organizacional es costoso (requiere ciclos de reloj, asignación/desacuerdo de recursos, etc.) Queremos una estructura organizacional estable adecuada para la tarea y las condiciones ambientales en cuestión. Por lo tanto, deseamos cambiar la estructura organizativa solo si la estructura de tareas y/o las condiciones ambientales cambian. También para permitir que se pasen por alto los cambios temporales en las condiciones ambientales, queremos que la probabilidad de que un cambio organizacional sea inversamente proporcional al tiempo desde el último cambio organizacional. Si este tiempo es relativamente corto, los agentes todavía se están ajustando a los cambios en el entorno, por lo tanto, la probabilidad de que un agente inicie un cambio organizacional debería ser alta. Del mismo modo, si el tiempo desde el último cambio organizacional es relativamente grande, deseamos tener una baja probabilidad de cambio organizacional. Para permitir esta variación en la probabilidad de cambio organizacional, utilizamos recocido simulado para determinar la probabilidad de mantener el sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 1231 una estructura organizacional existente. Esta probabilidad se calcula utilizando la fórmula de recocido: P = E - ΔE Kt donde ΔE es la cantidad de sobrecarga/subcarga, T es el tiempo desde el último cambio organizacional y K es una constante. El mecanismo de calcular ΔE es diferente para el desove de los agentes que para la composición del agente y se describe a continuación. De esta fórmula, si T es grande, P, o la probabilidad de mantener la estructura organizativa existente es grande. Tenga en cuenta que el valor de P se limita a un cierto umbral para evitar que la organización sea demasiado lenta en su reacción al cambio ambiental. Para calcular si el desove del agente es necesario, usamos la ecuación de recocido con ΔE = 1 α ∗ Slack donde α es una constante y la holgura es la diferencia entre el tiempo total disponible para completar las tareas pendientes y la suma del tiempo esperado parafinalización de cada tarea en la cola de tareas. Además, si la cantidad de holgura es negativa, se producirá el desove de agente inmediato sin el uso de la ecuación de recocido. Para calcular si la composición del agente es necesaria, nuevamente usamos la ecuación de recocido simulada. Sin embargo, en este caso, ΔE = β ∗ tiempo de inactividad, donde β es un tiempo constante y el tiempo inactivo es la cantidad de tiempo para el cual el agente estaba inactivo. Si el agente ha estado inactivo durante un largo período de tiempo, ΔE es grande, lo que implica que P, la probabilidad de mantener la estructura organizacional existente, es baja.5. Organización y robustez Hay dos enfoques comúnmente utilizados para lograr la robustez en los sistemas multiagentes: 1. El enfoque de supervivencia [12], que implica replicar agentes de dominio para permitir que las réplicas se hagan cargo si los agentes originales falla;y 2. El enfoque ciudadano [7], que implica el uso de agentes de monitoreo especiales (llamados agentes centinela) para detectar la falla del agente e iniciar dinámicamente nuevos agentes en lugar de los fallidos. La ventaja del enfoque de supervivencia es que la recuperación es relativamente rápida, ya que las réplicas son preexistentes en la organización y pueden hacerse cargo tan pronto como se detecta una falla. Las ventajas del enfoque ciudadano son que requiere menos recursos, poca modificación para la estructura organizacional existente y el protocolo de coordinación y es más simple de implementar. Ambos enfoques se pueden aplicar para lograr la robustez en nuestros agentes de OSD y no está claro qué enfoque sería mejor. Más bien se requeriría una evaluación empírica exhaustiva de ambos enfoques. En este artículo, presentamos el enfoque ciudadano tal como ha demostrado tener un mejor desempeño que el enfoque de supervivencia en el protocolo de red del contrato, y dejar la presentación y evaluación del enfoque de supervivencia para un documento futuro. Para implementar el enfoque ciudadano, diseñamos agentes de monitoreo especiales, que periódicamente encuestan a los agentes de dominio enviándoles mensajes vivos a los que los agentes deben responder. Si un agente falla, no responderá a tales mensajes: los agentes de monitoreo pueden crear un nuevo agente y delegar las responsabilidades del agente muerto al nuevo agente. Esta delegación de responsabilidades no es trivial ya que los agentes de monitoreo no tienen acceso al estado interno de los agentes de dominio, que se compone en dos componentes: el conocimiento organizacional y la información de la tarea. El primero consiste en la información sobre los roles locales y gerenciales del agente, mientras que el segundo está compuesto por los métodos que se están programando y ejecutando y las tareas que se han delegado a otros agentes. Esta información de estado solo se puede deducir al monitorear y registrar los mensajes enviados y recibidos por los agentes de dominio. Por ejemplo, para deducir el conocimiento organizacional, los agentes de monitoreo deben realizar un seguimiento de los mensajes de desove y componer los agentes enviados por los agentes para desencadenar las operaciones de desove y composición, respectivamente. El proceso de deducción es particularmente complicado en el caso de la información de la tarea, ya que los agentes de monitoreo no tienen acceso a los horarios privados de los agentes de dominio. Los detalles están más allá del alcance de este documento.6. Evaluación Para evaluar nuestro enfoque, ejecutamos una serie de experimentos que simularon el funcionamiento tanto de los agentes de OSD como de los agentes netos por contrato en diversas estructuras de tareas con variadas tasas de llegada y plazos. Al comienzo de cada experimento, se generó una estructura de tarea TEMS aleatoria con una profundidad especificada y un factor de ramificación. Durante el curso del experimento, una serie de instancias de tareas (problemas) llegan a la organización y deben ser completadas por los agentes antes de sus plazos especificados. Para comparar directamente el enfoque OSD con el enfoque neto del contrato, cada experimento se repitió varias veces, utilizando agentes de OSD en la primera ejecución y un número diferente de agentes netos de contrato en cada ejecución posterior. Tuvimos cuidado de usar la misma estructura de tareas, tiempos de llegada de tareas, plazos de tareas y números aleatorios para cada uno de estos ensayos. Dividimos los experimentos en dos grupos: experimentos en los que el entorno era estático (tasas de llegada de tareas fijas y plazos) y experimentos en los que el entorno era dinámico (tasas de llegada variables y/o plazos). Los dos gráficos en la Figura 1 muestran el desempeño promedio de la organización OSD contra las organizaciones de redes contractuales con 8, 10, 12 y 14 agentes. Los resultados mostrados son los promedios de ejecutar 40 experimentos.20 de esos experimentos tenían un entorno estático con un tiempo de llegada de tarea fija de 15 ciclos y una ventana de fecha límite de 20 ciclos. Los 20 experimentos restantes tuvieron una tasa de llegada de tarea variable: la tasa de llegada de la tarea se cambió de 15 ciclos a 30 ciclos y de regreso a 15 ciclos después de cada 20 tareas. En todos los experimentos, las estructuras de tareas se generaron aleatoriamente con una profundidad máxima de 4 y un factor de ramificación máximo de 3. El tiempo de ejecución de todos los experimentos fue de 2500 ciclos. Probamos varias hipótesis relacionadas con el rendimiento comparativo de nuestro enfoque OSD utilizando las pruebas de rango con firma de pares de pares de Wilcoxon. El par coincidente significa que estamos comparando el rendimiento de cada sistema en el mismo conjunto de tareas aleatorias dentro de cada experimento separado. La hipótesis probada es: La organización OSD requiere menos agentes para completar un número igual o mayor de tareas en comparación con la organización neta del contrato: para probar esta hipótesis, probamos la hipótesis nula más fuerte que establece que los agentes netos por contrato completan más tareas. Esta hipótesis nula es rechazada para todas las organizaciones netas de contrato con menos de 14 agentes (estática: p <0.0003; dinámica: p <0.03). Para las grandes organizaciones de redes contractuales, el número de tareas completadas es estadísticamente equivalente al número completado por los agentes de OSD, sin embargo, el número de agentes utilizados por la organización OSD es menor: 9.59 agentes (en el caso estático) y 7.38 agentes (en elCaso dinámico) versus 14 agentes netos de contrato3. Por lo tanto, la hipótesis original, que OSD requiere menos agentes a 3, estos valores no deben interpretarse como una indicación de la escalabilidad de nuestro enfoque. Hemos probado nuestro enfoque en organizaciones con más de 300 agentes, que es significativamente mayor que el número de agentes necesarios para el tipo de aplicaciones que tenemos en mente (es decir, coreografía de servicios web, uso dinámico eficiente de la computación de la red, recopilación de información distribuida,etc.).1232 El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) Figura 1: Gráfico comparando el rendimiento promedio de la organización OSD con las organizaciones de redes contractuales (con 8, 10, 12 y 14 agentes). Las barras de error muestran las desviaciones estándar.Completa un número igual o mayor de tareas, se mantiene. Las organizaciones de OSD logran una calidad promedio igual o mayor que las organizaciones netas de contrato: la hipótesis nula es que los agentes netos por contrato logran una calidad promedio mayor. Podemos rechazar la hipótesis nula para las organizaciones de redes contractuales con menos de 12 agentes (estática: p <0.01; dinámica: p <0.05). Para organizaciones netas contractuales más grandes, la calidad promedio es estadísticamente equivalente a la lograda por OSD. Los agentes de OSD tienen un tiempo de respuesta promedio más bajo en comparación con los agentes netos de contrato: la hipótesis nula de que OSD tiene el mismo tiempo de respuesta o más alto para todas las organizaciones netas de contrato (estática: P <0.0002; dinámica: p <0.0004). Los agentes de OSD envían menos mensajes que los agentes netos de contrato: la hipótesis nula de que OSD envía lo mismo o más mensajes es rechazado para todas las organizaciones netas de contrato (p <.0003 en todos los casos, excepto 8 agentes netos por contrato en un entorno estático donde p <0.02) Por lo tanto, como lo demuestran las pruebas anteriores, nuestros agentes funcionan mejor que los agentes netos por contrato, ya que completan un mayor número de tareas, logran una mayor calidad y también tienen un tiempo de respuesta y una sobrecarga de comunicación más bajas. Estos resultados tienen sentido intuitivo dado nuestros objetivos para el enfoque OSD. Esperábamos que las organizaciones de OSD tuvieran un tiempo de respuesta promedio más rápido y enviaran menos mensajes porque los agentes de la organización OSD no están perdiendo tiempo y mensajes que envían solicitudes de ofertas y respondiendo a las ofertas. La calidad adquirida en las tareas depende directamente de los criterios/apuesta heurística TF MR RAND Número de agentes 572 567 100 139 No-ORG-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Coste de recursos 346 418 337 66Tareas Completadas 427 560 154 166 Qualidad promedio 367 492 298 339 Tiempo de respuesta promedio 356 321 370 283 RUNE ADRUME 543 323 74 116 Tiempo promedio de vigilancia 560 314 74 126 Tabla 1: El número de veces que cada heurística realizó realizados realizadoslo mejor o estadísticamente equivalente a lo mejor para cada uno de los criterios de rendimiento. Clave heurística: BET es equilibrar el tiempo de ejecución, TF es el más alto primero, MR está minimizando los recursos y Rand es una estrategia de asignación aleatoria, en la que cada nodo Tæms tiene una probabilidad uniforme de ser seleccionado para la asignación.Número de tareas completadas, por lo tanto, cuanto más se completen el número de tareas, mayor calidad promedio. Los resultados de la prueba de la primera hipótesis fueron un poco más sorprendentes. Parece que debido a la ineficiencia inherente del protocolo neto del contrato en la licitación para cada instancia de tareas, se necesita un mayor número de agentes para completar un número igual de tareas. A continuación, evaluamos el rendimiento de las tres heurísticas para asignar tareas. Algunos experimentos preliminares (que no se informan aquí debido a limitaciones de espacio) demostraron la falta de un claro ganador entre las tres heurísticas para la mayoría de los criterios de rendimiento que evaluamos. Sospechamos que este es el caso porque diferentes heurísticas son mejores para diferentes estructuras de tareas y condiciones ambientales, y dado que cada experimento comienza con una estructura de tareas aleatorias diferente, no pudimos encontrar una estrategia de asignación que siempre dominara al otro para todos los criterios de rendimiento. Para determinar qué heurística realiza el mejor, dado un conjunto de estructuras de tareas, condiciones ambientales y criterios de rendimiento, realizamos una serie de experimentos que se controlaron utilizando las siguientes cinco variables: • La profundidad de la estructura de la tarea varió de 3 a 5.• El factor de ramificación se varió de 3 a 5. • La probabilidad de que cualquier nodo de tarea dado que tenga un CAF min se varió de 0.0 a 1.0 en incrementos de 0.2. La probabilidad de que cualquier nodo tuviera un CAF de suma se modificó a su vez para garantizar que las probabilidades suman 14.• La tasa de llegada: de 10 a 40 ciclos en incrementos de 10. • La fecha límite: de 5 a 15 en incrementos de 5. Cada experimento se repitió 20 veces, con una nueva estructura de tareas generada cada vez: estos 20 experimentos formaron un conjunto experimental. Por lo tanto, todos los experimentos en un conjunto experimental tenían los mismos valores para las variables exógenas que se usaron para controlar el experimento. Tenga en cuenta que se utilizó un entorno estático en cada uno de estos experimentos, ya que queríamos ver el rendimiento de la tasa de llegada y la floja de la fecha límite en cada una de las tres heurísticas. También los resultados de cualquier experimento en el que la organización OSD consistiera en un solo agente de agente seleccionado de los resultados. Del mismo modo, 4 Dado que nuestro análisis preliminar lideró es creer que el número de max y exactamente un CAFS en una estructura de tareas tienen un efecto mínimo en el rendimiento de las estrategias de asignación que se evalúan, establecemos las probabilidades del máximo y exactamente un CAFS0 Para reducir la explosión combinatoria del diseño experimental factorial completo. El sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 1233 experimentos en los que las estructuras de tareas generadas eran insatisfactorias (dadas las limitaciones de la fecha límite), se eliminaron de los resultados finales. Si algún conjunto experimental tenía más de 15 experimentos, así eliminado, se ignoró todo el conjunto para realizar la evaluación. La evaluación final se realizó en 673 conjuntos experimentales. Probamos el potencial de estas tres heurísticas sobre los siguientes criterios de rendimiento: 1. El número promedio de agentes utilizados.2. El número total de cambios organizacionales.3. Los mensajes totales enviados por todos los agentes.4. El costo total de recursos de la organización.5. El número de tareas completadas.6. La calidad promedio acumulada. La calidad promedio se define como la calidad total acumulada durante la ejecución experimental dividida por la suma del número de tareas completadas y el número de tareas falló.7. El tiempo de respuesta promedio de la organización. El tiempo de respuesta de una tarea se define como la diferencia entre el momento en que cualquier agente en la organización comienza a trabajar en la tarea (la hora de inicio) y el momento en que se generó la tarea (el tiempo de generación). Por lo tanto, el tiempo de respuesta es equivalente al tiempo de espera. Para las tareas que nunca se intentan/inician, el tiempo de respuesta se establece en el tiempo de ejecución final menos el tiempo de generación.8. El tiempo de ejecución promedio de las tareas intentadas por la organización. Este tiempo se define como la diferencia entre el momento en que la tarea completó o falló y la hora de inicio. Para las tareas que nunca se declararon, esta vez se establece en cero.9. El tiempo de respuesta se define como la suma del tiempo de respuesta y el tiempo de ejecución de una tarea. Excepto por el número de tareas completadas y la calidad promedio acumulada, los valores más bajos para los diversos criterios de rendimiento indican un mejor rendimiento. Nuevamente realizamos las pruebas de rango firmado de pares de par de pares de Wilcoxon en los experimentos en cada uno de los conjuntos experimentales. La hipótesis nula en cada caso fue que no hay diferencia entre el par de heurísticas para los criterios de rendimiento bajo consideración. Estábamos interesados en los casos en los que podríamos rechazar la hipótesis nula con una confianza del 95% (P <0.05). Notamos la cantidad de veces que una heurística funcionó mejor o estaba en un grupo que funcionó estadísticamente mejor que el resto. Estos recuentos se dan en las Tablas 1 y 2. El número de conjuntos experimentales en los que cada heurística realizó el mejor o estadísticamente equivalente a los mejores se muestra en la Tabla 1. La ruptura de estos números en (1) el número de veces que cada heurística funcionó mejor que todas las demás heurísticas y (2) el número de veces que cada heurística era estadísticamente equivalente a otro grupo de heurística, todos los cuales funcionaban mejor, IS.se muestra en la Tabla 2. Ambas tablas nos permiten obtener información importante sobre el rendimiento de las tres heurísticas. Particularmente interesantes fueron los siguientes resultados: • Mientras que el tiempo de ejecución de equilibrio (BET) utilizó el menor número de agentes en el mayor número de conjuntos experimentales (572), en la mayoría de estos casos (337 conjuntos experimentales) fue estadísticamente equivalente primero (TF (TF TF). Cuando estas dos heurísticas no funcionaron por igual, hubo una división casi uniforme entre el número de conjuntos experimentales en los que uno superó al otro. Creemos que este fue el caso porque BET siempre bifurca a los agentes en dos agentes que tienen una carga de tareas más o menos igual. Esto a menudo resulta en organizaciones que tienen una Figura 2: Graph que demuestra la robustez del enfoque ciudadano. La línea de base muestra el número de tareas completadas en ausencia de cualquier falla.Número de agentes, ninguno de los cuales es lo suficientemente pequeño como para combinar en un agente más grande. Con TF, por otro lado, un gran agente puede generar sucesivamente agentes más pequeños hasta que los agentes desovados son lo suficientemente pequeños como para completar sus tareas antes de los plazos, esto a menudo resulta en organizaciones con un número impar de agentes que son menores que losutilizado por BET.• Como se esperaba, BET logró el menor número de cambios organizacionales en el mayor número de conjuntos experimentales. De hecho, fue más de diez veces más bueno que su segundo mejor competidor (TF). Esto muestra que si los agentes son conscientes en su asignación de tareas inicial, existe una menor necesidad de cambio organizacional más adelante, especialmente para entornos estáticos.• Un resultado particularmente interesante, pero fácilmente explicable, fue el del tiempo de respuesta promedio. ¡Descubrimos que la heurística de recursos de minimización (MR) funcionó mejor cuando se trataba de minimizar el tiempo de respuesta promedio! Esto puede explicarse por el hecho de que el Sr. Heuristic es extremadamente codicioso y prefiere desovar pequeños agentes que tienen una pequeña huella de recursos (para minimizar el aumento total en el costo de los recursos para la organización en el momento del desove). Mientras que la mayoría de estos pequeños agentes pueden componer con otros agentes con el tiempo, la presencia de un solo agente pequeño es suficiente para reducir el tiempo de respuesta. De hecho, la heurística del Sr. no es la heurística más efectiva cuando se trata de minimizar el costo de recursos de la organización; de hecho, solo supera una asignación de tarea/recursos aleatorias. Creemos que esto se debe en parte a la naturaleza codiciosa de esta heurística y en parte debido al hecho de que todas las operaciones de desove y composición solo usan información local. Creemos que usar información no local sobre la asignación de recursos podría ayudar a tomar mejores decisiones, algo que planeamos ver en el futuro. Finalmente evaluamos el desempeño del enfoque de la robustez de los ciudadanos aplicados a nuestro mecanismo OSD (Figura 2). Como se esperaba, a medida que aumenta la probabilidad de falla, el número de agentes que fallan durante una ejecución también aumenta. Esto da como resultado una ligera disminución en el número de tareas completadas, lo que puede explicarse por el hecho de que cada vez que un agente falla, pierde el trabajo que estaba haciendo en ese momento. El agente recién creado que se complete para los 5 fallidos para esta discusión, los pequeños agentes son agentes que tienen una baja duración esperada para sus roles locales (calculado por el algoritmo 4).1234 El sexto intl. Conf.sobre agentes autónomos y sistemas de múltiples agentes (AAMAS 07) Criterios/Heuristic BET TF MR RAND BET+TF BET+RAND MR+RAND TF+MR BET+TF+MR Todos los agentes 94 88 3 7 337 2 0 0 12 85No-ORG-Changes 480 0 0 0 29 16 113 0 0 0 0 5 Messages Total-Sent 170 85 0 2 399 1 0 0 7 5 Coste de recursos 26 100 170 42 167 0 7 6 128 15 Tasks Completed 77 197 4 28 28184 1 3 9 36 99 Calidad promedio 38 147 26 104 76 0 11 11 34 208 Tiempo de respuesta promedio 104 74 162 43 31 20 16 8 7 169 RUNTIME promedio 322 110 0 12 121 13 1 1 69 Promedio de cambio-Time 318 94 1 11 125 26 1 0 7 64 Tabla 2: Tabla que muestra el número de veces que cada heurística individual realizó lo mejor y el número de veces que un cierto grupo de heurísticas estadísticamente equivalentes tuvo el mejor rendimiento. Solo se muestran las agrupaciones heurísticas más interesantes. Todo muestra el número de conjuntos experimentales en los que no hubo diferencia estadística entre las tres heurísticas y una estrategia de asignación aleatoria, uno debe rehacer el trabajo, perdiendo así un tiempo precioso que podría no estar disponible cerca de una fecha límite. Como parte de nuestra futura investigación, deseamos, en primer lugar, evaluar el enfoque de supervivencia de la robustez. El enfoque de supervivencia podría ser mejor que el enfoque ciudadano para las probabilidades más altas de la falla del agente, ya que los agentes replicados pueden estar procesando las estructuras de tareas en paralelo y pueden tomar el momento en que los agentes originales fallan, ahorrando el tiempo en torno a los plazos ajustados. Además, creemos firmemente que la estructura organizacional óptima puede variar, dependiendo de la probabilidad de falla y el nivel deseado de robustez. Por ejemplo, una forma de lograr un mayor nivel de robustez en el enfoque de supervivencia, dado un gran número de fallas de agentes, sería relajar los plazos de tareas. Sin embargo, tal relajación daría como resultado que el sistema use menos agentes para conservar los recursos, lo que a su vez tendría un efecto perjudicial en la robustez. Por lo tanto, con este fin, hemos comenzado a explorar las propiedades de robustez de las estructuras de tareas y las formas en que el diseño organizacional puede modificarse para tener en cuenta tales propiedades.7. Conclusión En este documento, hemos presentado un enfoque de organización en el tiempo de ejecución en el que los agentes usan el auto-diseño organizacional para crear una estructura organizativa adecuada. También hemos evaluado el desempeño de las organizaciones generadas por los agentes que siguen nuestro enfoque con la formación de la organización a medida que tiene lugar en el protocolo NET del contrato y hemos demostrado que nuestro enfoque es mejor que el enfoque neto del contrato como es evidente por la mayor cantidad de tareasCompletado, mayor calidad alcanzada y tiempo de respuesta más bajo. Finalmente, probamos el rendimiento de tres heurísticas de asignación de recursos diferentes sobre diversas métricas de rendimiento y también evaluamos la solidez de nuestro enfoque.8. Referencias [1] K. S. Barber y C. E. Martin. Reorganización dinámica de grupos de toma de decisiones. En Agentes 01, páginas 513-520, Nueva York, NY, EE. UU., 2001. [2] K. M. Carley y L. Gasser. Teoría de la organización computacional. En G. Wiess, editor, Sistemas Multiagentes: un enfoque moderno para la inteligencia artificial distribuida, páginas 299-330, MIT Press, 1999. [3] W. Chen y K. S. Decker. El análisis de la coordinación en una aplicación del sistema de información: servicios médicos de emergencia. En Notas de conferencia en informática (LNC), número 3508, páginas 36-51. Springer-Verlag, mayo de 2005. [4] D. Corkill y V. Lesser. El uso del control de nivel meta para la coordinación en una red de resolución de problemas distribuida. Actas de la Octava Conferencia Internacional Conjunta sobre Inteligencia Artificial, páginas 748-756, agosto de 1983. [5] K. S. Decker. Análisis centrado en el medio ambiente y diseño de mecanismos de coordinación. Doctor.Tesis, Departamento de Comp. Science, Universidad de Massachusetts, Amherst, mayo de 1995. [6] K. S. Decker y J. Li. Coordinar recursos mutuamente excluyentes utilizando GPGP. Agentes autónomos y sistemas de múltiples agentes, 3 (2): 133-157, 2000. [7] C. Dellarocas y M. Klein. Una evaluación experimental de los servicios de manejo de fallas independientes del dominio en sistemas abiertos de múltiples agentes. Actas de la Conferencia Internacional sobre Sistemas de Multi-Agentes (ICMAS-2000), julio de 2000. [8] V. Dignum, F. Dignum y L. Sonenberg. Hacia la reorganización dinámica de las sociedades de los agentes. En Actas de CEAS: Taller sobre coordinación en sociedades de agentes emergentes en ECAI, páginas 22-27, Valencia, España, septiembre de 2004. [9] B. Horling, B. Benyo y V. Lesser. Uso de autodiagnóstico para adaptar las estructuras organizacionales. En Agentes 01, páginas 529-536, Nueva York, NY, EE. UU., 2001. ACM Press.[10] T. Ishida, L. Gasser y M. Yokoo. Organización Autodeseño de los sistemas de producción distribuidos. Transacciones IEEE sobre conocimiento e ingeniería de datos, 4 (2): 123-134, 1992. [11] V. R. Lesser et.Alabama. Evolución del marco de coordinación independiente del dominio GPGP/Tæms. Agentes autónomos y sistemas de múltiples agentes, 9 (1-2): 87-143, 2004. [12] O. Marin, P. Sens, J. Briot y Z. Adivesum. Hacia la tolerancia adaptativa de fallas para sistemas distribuidos de agentes múltiples. Actas de Ersads 2001, mayo de 2001. [13] O. Shehory, K. Sycara, et.Alabama. Clonación de agentes: un enfoque para la movilidad del agente y la asignación de recursos. IEEE Communications Magazine, 36 (7): 58-67, 1998. [14] Y. Entonces y E. Durfee. Un modelo de autoinicio organizacional para el cambio organizacional. En el taller de AAAI-93 sobre IA y teorías de grupos y organizaciones, páginas 8-15, Washington, D.C., julio de 1993. [15] T. Wagner. Asistentes de apoyo a la decisión de coordinación (coordinadores). Informe técnico 04-29, BAA, 2004. [16] T. Wagner y V. Lesser. Programación de diseño a criterios: control de agentes en tiempo real. Proc.del Simposio de primavera AAAAI 2000 sobre sistemas autónomos en tiempo real, 89-96. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 1235",
    "original_sentences": [
        "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
        "However, there is no best way to organize and all ways of organizing are not equally effective.",
        "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
        "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
        "This precludes the use of static, design-time generated, organizational structures in such systems.",
        "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
        "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
        "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization.",
        "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
        "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
        "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
        "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
        "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
        "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
        "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
        "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
        "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
        "In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
        "We use TÆMS as the underlying representation for our problem solving requests.",
        "TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
        "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
        "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
        "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
        "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
        "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
        "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
        "The main contributions of this paper are as follows: 1.",
        "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
        "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
        "We model the use of resources other than only processor resources. 3.",
        "We incorporate robustness into the organizational structures. 2.",
        "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
        "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
        "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
        "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
        "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition.",
        "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
        "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
        "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
        "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
        "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
        "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
        "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
        "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
        "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
        "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
        "Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach.",
        "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
        "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
        "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
        "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
        "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
        "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
        "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
        "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
        "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
        "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
        "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
        "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
        "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
        "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
        "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
        "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
        "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
        "See [5] for formal definitions. • E is the set of (non-local) effects.",
        "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
        "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
        "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
        "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
        "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
        "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
        "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
        "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
        "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
        "All resources are non-consumable. 4.",
        "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
        "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
        "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
        "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
        "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
        "We define a role as a TÆMS subtree rooted at a particular node.",
        "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
        "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
        "Hence, we will use the terms role, task node and task interchangeably.",
        "We, also, differentiate between local and managed (non-local) roles.",
        "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
        "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
        "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
        "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
        "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition.",
        "These two primitives result in a change in the assignment of roles to the agents.",
        "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
        "Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
        "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
        "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
        "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
        "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
        "For a local role, all the descendent nodes of that role will be local.",
        "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
        "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
        "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
        "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
        "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
        "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
        "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
        "At the 1230 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
        "Similarly, the newly spawned agent will only know of its just assigned local roles.",
        "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
        "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
        "Care is taken to preserve the organizational invariant rules 1 and 4.",
        "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
        "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
        "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
        "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
        "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
        "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
        "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
        "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
        "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
        "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
        "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
        "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
        "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
        "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
        "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
        "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
        "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
        "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
        "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
        "The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below.",
        "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
        "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
        "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
        "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
        "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
        "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
        "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
        "ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
        "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
        "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement.",
        "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
        "Rather a thorough empirical evaluation of both approaches would be required.",
        "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
        "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
        "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
        "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
        "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
        "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
        "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
        "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
        "The details are beyond the scope of this paper. 6.",
        "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
        "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
        "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
        "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
        "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
        "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
        "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
        "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
        "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
        "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
        "The runtime of all the experiments was 2500 cycles.",
        "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
        "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
        "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
        "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
        "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
        "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
        "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
        "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
        "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
        "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
        "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
        "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
        "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
        "These results make intuitive sense given our goals for the OSD approach.",
        "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
        "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
        "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
        "The results of testing the first hypothesis were slightly more surprising.",
        "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
        "Next, we evaluated the performance of the three heuristics for allocating tasks.",
        "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
        "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
        "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
        "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
        "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
        "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
        "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
        "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
        "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
        "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
        "The final evaluation was done on 673 experimental sets.",
        "We tested the potential of these three heuristics on the following performance criteria: 1.",
        "The average number of agents used. 2.",
        "The total number of organizational changes. 3.",
        "The total messages sent by all the agents. 4.",
        "The total resource cost of the organization. 5.",
        "The number of tasks completed. 6.",
        "The average quality accrued.",
        "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
        "The average response time of the organization.",
        "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
        "Hence, the response time is equivalent to the wait time.",
        "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
        "The average runtime of the tasks attempted by the organization.",
        "This time is defined as the difference between the time at which the task completed or failed and the start time.",
        "For tasks that were never stated, this time is set to zero. 9.",
        "The turnaround time is defined as the sum of the response time and runtime of a task.",
        "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
        "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
        "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
        "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
        "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
        "These counts are given in Tables 1 and 2.",
        "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
        "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
        "Both of these tables allow us to glean important information about the performance of the three heuristics.",
        "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
        "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
        "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
        "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
        "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
        "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
        "In fact, it was over ten times as good as its second best competitor (TF).",
        "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
        "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
        "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
        "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
        "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
        "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
        "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
        "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
        "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
        "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
        "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
        "Only the more interesting heuristic groupings are shown.",
        "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
        "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
        "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
        "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness.",
        "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
        "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
        "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
        "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable organizational structure.",
        "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
        "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
        "REFERENCES [1] K. S. Barber and C. E. Martin.",
        "Dynamic reorganization of decision-making groups.",
        "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
        "Computational organization theory.",
        "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
        "The analysis of coordination in an information system application - emergency medical services.",
        "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
        "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
        "The use of meta-level control for coordination in a distributed problem solving network.",
        "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
        "Environment centered analysis and design of coordination mechanisms.",
        "Ph.D. Thesis, Dept. of Comp.",
        "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
        "Coordinating mutually exclusive resources using GPGP.",
        "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
        "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
        "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
        "Towards Dynamic Reorganization of Agent Societies.",
        "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
        "Using self-diagnosis to adapt organizational structures.",
        "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
        "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
        "Organization self-design of distributed production systems.",
        "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
        "Evolution of the gpgp/tæms domain-independent coordination framework.",
        "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
        "Towards adaptive fault tolerance for distributed multi-agent systems.",
        "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
        "Agent cloning: an approach to agent mobility and resource allocation.",
        "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
        "So and E. Durfee.",
        "An organizational self-design model for organizational change.",
        "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
        "Coordination decision support assistants (coordinators).",
        "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
        "Design-to-criteria scheduling: Real-time agent control.",
        "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
    ],
    "error_count": 0,
    "keys": {
        "organizational self-design": {
            "translated_key": "autodiseño organizacional",
            "is_in_text": true,
            "original_annotated_sentences": [
                "<br>organizational self-design</br> in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
                "<br>organizational self-design</br> (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate robustness into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
                "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
                "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
                "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
                "ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the organization. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the organization.",
                "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the organization.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness.",
                "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
                "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use <br>organizational self-design</br> to come up with a suitable organizational structure.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational organization theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of coordination in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for coordination in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of coordination mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "Organization self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent coordination framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An <br>organizational self-design</br> model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "Coordination decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "\"Diseño organizacional\" en entornos semi-dinámicos Sachin Kamboj ∗ y Keith S. Departamento de Ciencias de la Información e Información de la Universidad de Delaware Newark, DE 19716 {kamboj, deckerh / udel.edu organizaciones abstractasCoordinación en sistemas multiagentes.",
                "El \"autodesigno organizacional\" (OSD) [4, 10] se ha propuesto como un enfoque para diseñar organizaciones en tiempo de ejecución en el que los agentes son responsables de generar sus propias estructuras organizativas.",
                "Conclusión En este documento, hemos presentado un enfoque de organización en tiempo de ejecución en el que los agentes usan el \"autodesignación organizacional\" para crear una estructura organizativa adecuada.",
                "Un modelo de \"autodesignación organizacional\" para el cambio organizacional."
            ],
            "translated_text": "",
            "candidates": [
                "autodesignación de la organización",
                "Diseño organizacional",
                "autodesignación de la organización",
                "autodesigno organizacional",
                "autodesignación de la organización",
                "autodesignación organizacional",
                "autodesignación de la organización",
                "autodesignación organizacional"
            ],
            "error": []
        },
        "organization": {
            "translated_key": "organización",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the <br>organization</br>.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
                "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate robustness into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit <br>organization</br> formation and the coordination of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the <br>organization</br> is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the <br>organization</br>. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
                "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 <br>organization</br> Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an <br>organization</br>, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an <br>organization</br> along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the <br>organization</br> to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant <br>organization</br> on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the <br>organization</br> from being too sluggish in its reaction to environmental change.",
                "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
                "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
                "<br>organization</br> AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the <br>organization</br> and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the <br>organization</br> and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD <br>organization</br> against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD <br>organization</br> requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net <br>organization</br>: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD <br>organization</br> is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD <br>organization</br> with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD <br>organization</br> are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD <br>organization</br> consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the <br>organization</br>. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the <br>organization</br>.",
                "The response time of a task is defined as the difference between the time at which any agent in the <br>organization</br> starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the <br>organization</br>.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the <br>organization</br> at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the <br>organization</br> - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness.",
                "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
                "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to <br>organization</br> in which the agents use Organizational Self-Design to come up with a suitable organizational structure.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke <br>organization</br> formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational <br>organization</br> theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of coordination in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for coordination in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of coordination mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "<br>organization</br> self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent coordination framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An organizational self-design model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "Coordination decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Extendemos el enfoque de OSD existente para incluir dominios digitados, modelar otros recursos además de solo recursos del procesador y incorporar la robustez en la \"organización\".",
                "Por lo tanto, nuestro enfoque también se ocupa de la formación explícita de \"organización\" y la coordinación de las tareas de los agentes que no son manejadas por su enfoque.",
                "Para nuestra comodidad, definimos dos subtareas de funciones (tarea): t → P (t ∪ m) y supertasks (nodo tæms): t ∪ m → p (t), que devuelven las subtareas y supertasks de un nodo Tæms respectivamente 2.• τ ∈ T, es la raíz de la estructura de tareas, es decir, el objetivo de nivel más alto que la \"organización\" está tratando de lograr.",
                "Además, suponemos que cada agente debe poseer el conjunto de recursos que necesita, aunque la propiedad de los recursos puede cambiar durante la evolución de la \"organización\".4.",
                "Formalmente, si el tipo de función (agente, nodo Tæms): a × (t ∪ m) → {local, administrado, sin asignar}, devuelve el tipo de responsabilidad del agente hacia el rol especificado, entonces escriba (a, r)= Local ⇐⇒ ∀ri∈Subtasks (r) tipo (a, ri) = tipo local (a, r) = gestionado ⇐⇒ [∃a1∃r1 (r1 ∈ Subtareas (r)) ∧ (tipo (a1, r1)= Administrado)] ∨ [∃a2∃a3∃r2∃r3 (a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ Subtareas (r)) ∧ (r3 ∈ Subtareas (r)) ∧ (tipo (a2, r2) = Local) ∧ (tipo (A3, R3) = local)] 4.2 Formación y adaptación de \"organización\" para formar o adaptar su estructura organizacional, los agentes usan dos primitivas organizacionales: desove de agentes y composición.",
                "Para participar en la formación y adaptación de una \"organización\", los agentes deben representar explícitamente y razonar sobre las asignaciones de roles.",
                "Seleccionamos esta heurística porque (a) es el más simple de implementar, (b) más rápido de ejecutar (la asignación de roles se puede hacer en tiempo constante sin la necesidad de una búsqueda a través de la estructura de tareas) y (c) tiene sentido desdeUna perspectiva de organización humana como heurística corresponde a dividir una \"organización\" a lo largo de líneas funcionales.",
                "Minimización de recursos totales: esta heurística intenta minimizar el costo total de los recursos que necesitan los agentes en la \"organización\" para ejecutar sus roles.",
                "Formalmente, si r es las roles locales del agente de desove y R ser el subconjunto de roles que se evalúan para la asignación al agente recién generado, entonces la función de costo para esta heurística viene dada por: Costo (R, R) ← | GetEppectedDuration (R - r) -getEppectedDuration (r) |Para evaluar estas heurísticas, realizamos una serie de experimentos que probaron el rendimiento de la \"organización\" resultante en estructuras de tareas generadas aleatoriamente.",
                "Tenga en cuenta que el valor de P se limita a un cierto umbral para evitar que la \"organización\" sea demasiado lenta en su reacción al cambio ambiental.",
                "\"Organización\" y robustez Hay dos enfoques comúnmente utilizados para lograr la robustez en los sistemas multiagentes: 1. El enfoque de supervivencia [12], que implica replicar los agentes de dominio para permitir que las réplicas se hagan cargo si los agentes originales falla;y 2. El enfoque ciudadano [7], que implica el uso de agentes de monitoreo especiales (llamados agentes centinela) para detectar la falla del agente e iniciar dinámicamente nuevos agentes en lugar de los fallidos.",
                "La ventaja del enfoque de supervivencia es que la recuperación es relativamente rápida, ya que las réplicas son preexistentes en la \"organización\" y pueden hacerse cargo tan pronto como se detecta una falla.",
                "Durante el curso del experimento, una serie de instancias de tareas (problemas) llegan a la \"organización\" y deben ser completadas por los agentes antes de sus plazos especificados.",
                "Los dos gráficos en la Figura 1 muestran el rendimiento promedio de la \"organización\" de OSD contra las organizaciones de redes contractuales con 8, 10, 12 y 14 agentes.",
                "La hipótesis probada es: la \"organización\" de OSD requiere que menos agentes completen un número igual o mayor de tareas en comparación con la \"organización\" de la red de contrato: para probar esta hipótesis, probamos la hipótesis nula más fuerte que establece que los agentes de las redes contractualescompletar más tareas.",
                "Para las grandes organizaciones de redes contractuales, el número de tareas completadas es estadísticamente equivalente al número completado por los agentes de OSD, sin embargo, el número de agentes utilizados por la \"organización\" de OSD es menor: 9.59 agentes (en el caso estático) y 7.38 agentes ((En el caso dinámico) versus 14 agentes netos de contrato3.",
                "Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) Figura 1: Gráfico comparando el rendimiento promedio de la \"organización\" de OSD con las organizaciones de redes contractuales (con 8, 10, 12 y 14 agentes).",
                "Esperábamos que las organizaciones de OSD tuvieran un tiempo de respuesta promedio más rápido y enviaran menos mensajes porque los agentes de la \"organización\" de OSD no están perdiendo tiempo y mensajes que envían solicitudes de ofertas y respondiendo a ofertas.",
                "También los resultados de cualquier experimento en el que la \"organización\" de OSD consistiera en un solo agente de agente seleccionado de los resultados.",
                "El costo total de recursos de la \"organización\".5.",
                "El tiempo de respuesta promedio de la \"organización\".",
                "El tiempo de respuesta de una tarea se define como la diferencia entre el momento en que cualquier agente en la \"organización\" comienza a trabajar en la tarea (la hora de inicio) y el momento en que se generó la tarea (el tiempo de generación).",
                "El tiempo de ejecución promedio de las tareas intentadas por la \"organización\".",
                "Esto puede explicarse por el hecho de que el Sr. Heuristic es extremadamente codicioso y prefiere desovar pequeños agentes que tienen una pequeña huella de recursos (para minimizar el aumento total en el costo de recursos para la \"organización\" en el momento de la despaba).",
                "De hecho, la heurística del Sr. no es la heurística más efectiva cuando se trata de minimizar el costo de recursos de la \"organización\"; de hecho, solo supera una asignación de tareas/recursos aleatorias.",
                "Conclusión En este documento, hemos presentado un enfoque de tiempo de ejecución de \"organización\" en el que los agentes usan el autoinicio organizacional para crear una estructura organizativa adecuada.",
                "También hemos evaluado el desempeño de las organizaciones generadas por los agentes que siguen nuestro enfoque con la formación de \"organización\" a medida que tiene lugar en el protocolo neto del contrato y ha demostrado que nuestro enfoque es mejor que el enfoque neto del contrato como es evidente por el número más grande.de tareas completadas, mayor calidad alcanzada y tiempo de respuesta más bajo.",
                "Teoría computacional de \"organización\".",
                "\"Organización\" autodesignado de sistemas de producción distribuidos."
            ],
            "translated_text": "",
            "candidates": [
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "Organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "Organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "Organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "organización",
                "Organización"
            ],
            "error": []
        },
        "coordination": {
            "translated_key": "coordinación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for <br>coordination</br> in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the <br>coordination</br> between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
                "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate robustness into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit organization formation and the <br>coordination</br> of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with <br>coordination</br> decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for <br>coordination</br>).",
                "The relationships between the roles are the <br>coordination</br> relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing <br>coordination</br> mechanisms (such as GPGP [11]) can be used to achieve this <br>coordination</br>.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
                "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
                "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
                "ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and <br>coordination</br> protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the organization. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the organization.",
                "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the organization.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness.",
                "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
                "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable organizational structure.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational organization theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of <br>coordination</br> in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for <br>coordination</br> in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of <br>coordination</br> mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on <br>coordination</br> in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "Organization self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent <br>coordination</br> framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An organizational self-design model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "<br>coordination</br> decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Diseño de la organización en entornos semi-dinámicos Sachin Kamboj ∗ y Keith S. Decker Departamento de Ciencias de la Computación e Información Universidad de Delaware Newark, DE 19716 {Kamboj, decker, organizaciones abstractas abstractas son una base importante para la \"coordinación\"\"En sistemas multiagentes.",
                "Introducción En este documento, estamos interesados principalmente en el diseño organizacional de un sistema multiagente: los roles promulgados por los agentes, ∗ El autor principal es un estudiante la \"coordinación\" entre los roles y el número y la asignación de roles y recursos individualesagentes.",
                "Por lo tanto, nuestro enfoque también trata con la formación explícita de la organización y la \"coordinación\" de las tareas de los agentes que no son manejadas por su enfoque.",
                "Otros enfoques para OSD incluyen el trabajo de SO y Durfee [14], quienes describen un modelo de arriba hacia abajo de OSD en el contexto de la resolución cooperativa de problemas distributivos (CDP) y Barber y Martin [1], que describen un marco de toma de decisiones adaptativoen el que los agentes pueden reorganizar los grupos de toma de decisiones cambiando dinámicamente (1) quién toma las decisiones para un objetivo particular y (2) que deben llevar a cabo estas decisiones. Este último trabajo se ocupa principalmente de las decisiones de \"coordinación\" y puede serSe utiliza para complementar nuestro trabajo de OSD, que se ocupa principalmente de la asignación de tareas y recursos.3.",
                "Se pueden considerar los roles como las partes que juegan los agentes que promulgan los roles en la solución al problema y reflejan los compromisos a largo plazo hechos por los agentes en cuestión a un cierto curso de acción (que incluye la responsabilidad de la tarea, la autoridad ymecanismos para \"coordinación\").",
                "Las relaciones entre los roles son las relaciones de \"coordinación\" que existen entre las subparte de un problema.",
                "Cualquiera de los mecanismos existentes de \"coordinación\" (como GPGP [11]) puede usarse para lograr esta \"coordinación\".",
                "Las ventajas del enfoque ciudadano son que requiere menos recursos, poca modificación a la estructura organizacional existente y el protocolo de \"coordinación\" y es más simple de implementar.",
                "El análisis de la \"coordinación\" en una aplicación del sistema de información: servicios médicos de emergencia.",
                "El uso del control de nivel meta para la \"coordinación\" en una red de resolución de problemas distribuida.",
                "Análisis centrado en el medio ambiente y diseño de mecanismos de \"coordinación\".",
                "En Actas de CEAS: Taller sobre \"Coordinación\" en sociedades de agentes emergentes en ECAI, páginas 22-27, Valencia, España, septiembre de 2004. [9] B. Horling, B. Benyo y V. Lesser.",
                "Evolución del marco de \"coordinación\" independiente del dominio GPGP/Tæms.",
                "Asistentes de apoyo a la decisión de \"coordinación\" (coordinadores)."
            ],
            "translated_text": "",
            "candidates": [
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "Coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "Coordinación",
                "coordinación",
                "coordinación",
                "coordinación",
                "coordinación"
            ],
            "error": []
        },
        "multiagent system": {
            "translated_key": "sistema multiagente",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a <br>multiagent system</br> - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
                "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate robustness into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
                "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
                "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
                "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
                "ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the organization. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the organization.",
                "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the organization.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness.",
                "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
                "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable organizational structure.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational organization theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of coordination in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for coordination in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of coordination mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "Organization self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent coordination framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An organizational self-design model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "Coordination decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Introducción En este documento, estamos interesados principalmente en el diseño organizacional de un \"sistema multiagente\": los roles promulgados por los agentes, ∗ El autor principal es un estudiante la coordinación entre los roles y el número y la asignación de roles y recursos individualesagentes."
            ],
            "translated_text": "",
            "candidates": [
                "sistema multiagente",
                "sistema multiagente"
            ],
            "error": []
        },
        "organizational structure": {
            "translated_key": "estructura organizativa",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an <br>organizational structure</br> depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal <br>organizational structure</br> depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static <br>organizational structure</br>.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke <br>organizational structure</br> for every problem instance.",
                "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate robustness into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The <br>organizational structure</br> is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
                "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their <br>organizational structure</br>, the agents use two organizational primitives: agent spawning and composition.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable <br>organizational structure</br> that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the <br>organizational structure</br> only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing <br>organizational structure</br>.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing <br>organizational structure</br> is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
                "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
                "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing <br>organizational structure</br>, is low. 5.",
                "ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing <br>organizational structure</br> and coordination protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the organization. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the organization.",
                "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the organization.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal <br>organizational structure</br> may vary, depending on the probability of failure and the desired level of robustness.",
                "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
                "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable <br>organizational structure</br>.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational organization theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of coordination in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for coordination in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of coordination mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "Organization self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent coordination framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An organizational self-design model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "Coordination decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Intentar optimizar una \"estructura organizativa\" depende en gran medida de las características ambientales, incluidas las características del problema, los recursos disponibles y las capacidades de los agentes.",
                "En cambio, la \"estructura organizativa\" óptima depende tanto del problema como de las condiciones ambientales bajo las cuales el problema debe resolverse.",
                "Las condiciones ambientales pueden no ser conocidas a priori, o pueden cambiar con el tiempo, lo que impediría el uso de una \"estructura organizativa\" estática.",
                "Por otro lado, todas las instancias problemáticas y las condiciones ambientales no siempre son únicos, lo que haría ineficiente el uso de una nueva \"estructura organizativa\" a medida para cada instancia de problemas.",
                "Auto diseño organizacional 4.1 Roles de agentes y relaciones La \"estructura organizacional\" está compuesta principalmente por roles y las relaciones entre los roles.",
                "Formalmente, si el tipo de función (agente, nodo Tæms): a × (t ∪ m) → {local, administrado, sin asignar}, devuelve el tipo de responsabilidad del agente hacia el rol especificado, entonces escriba (a, r)= Local ⇐⇒ ∀ri∈Subtasks (r) tipo (a, ri) = tipo local (a, r) = gestionado ⇐⇒ [∃a1∃r1 (r1 ∈ Subtareas (r)) ∧ (tipo (a1, r1)= Administrado)] ∨ [∃a2∃a3∃r2∃r3 (a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ Subtareas (r)) ∧ (r3 ∈ Subtareas (r)) ∧ (tipo (a2, r2) = Local) ∧ (tipo (A3, R3) = local)] 4.2 Formación y adaptación de la organización para formar o adaptar su \"estructura organizacional\", los agentes usan dos primitivas organizacionales: desove de agentes y composición.",
                "Los resultados se dan en la Sección 6. 4.3 Razones para el cambio organizacional como cambio organizacional es costoso (requiere ciclos de reloj, asignación/desacuerdo de recursos, etc.) Queremos una \"estructura organizativa\" estable que se adapte a la tarea y las condiciones ambientales enmano.",
                "Por lo tanto, deseamos cambiar la \"estructura organizativa\" solo si la estructura de tareas y/o las condiciones ambientales cambian.",
                "Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 1231 en una \"estructura organizativa\" existente.",
                "De esta fórmula, si T es grande, P, o la probabilidad de mantener la \"estructura organizativa\" existente es grande.",
                "Si el agente ha estado inactivo durante un largo período de tiempo, ΔE es grande, lo que implica que P, la probabilidad de mantener la \"estructura organizativa\" existente, es baja.5.",
                "Las ventajas del enfoque ciudadano son que requiere menos recursos, poca modificación a la \"estructura organizativa\" existente y el protocolo de coordinación y es más simple de implementar.",
                "Además, creemos firmemente que la \"estructura organizativa\" óptima puede variar, dependiendo de la probabilidad de falla y el nivel deseado de robustez.",
                "Conclusión En este documento, hemos presentado un enfoque de organización en el tiempo de ejecución en el que los agentes usan el auto-diseño organizacional para crear una \"estructura organizativa\" adecuada."
            ],
            "translated_text": "",
            "candidates": [
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizacional",
                "estructura organizativa",
                "estructura organizacional",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "Estructura organizacional",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa",
                "estructura organizativa"
            ],
            "error": []
        },
        "agent spawning": {
            "translated_key": "generación de agentes",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
                "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - <br>agent spawning</br> and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate robustness into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for <br>agent spawning</br> and composition.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to <br>agent spawning</br> in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
                "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: <br>agent spawning</br> and composition.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "<br>agent spawning</br> is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent composition, on the other hand, is orthogonal to <br>agent spawning</br> and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for <br>agent spawning</br> than for agent composition and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
                "To compute if <br>agent spawning</br> is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate <br>agent spawning</br> will occur without use of the annealing equation.",
                "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
                "ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the organization. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the organization.",
                "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the organization.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness.",
                "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
                "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable organizational structure.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational organization theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of coordination in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for coordination in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of coordination mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "Organization self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent coordination framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An organizational self-design model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "Coordination decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "En nuestro enfoque (como en [10]), definimos dos operadores para OSD - \"agente desove\" y composición - cuando un agente se sobrecarga, genera un nuevo agente para manejar parte de su carga/responsabilidad;Cuando un agente está inactivo durante un período prolongado de tiempo, puede decidir componer con otro agente.",
                "En su enfoque, definen dos primitivas organizacionales: composición y descomposición, que son similares a nuestras primitivas organizacionales para el \"desove de agentes\" y la composición.",
                "Por lo tanto, la clonación del agente puede considerarse como como \"agente desove\" en nuestro enfoque.",
                "Formalmente, si el tipo de función (agente, nodo Tæms): a × (t ∪ m) → {local, administrado, sin asignar}, devuelve el tipo de responsabilidad del agente hacia el rol especificado, entonces escriba (a, r)= Local ⇐⇒ ∀ri∈Subtasks (r) tipo (a, ri) = tipo local (a, r) = gestionado ⇐⇒ [∃a1∃r1 (r1 ∈ Subtareas (r)) ∧ (tipo (a1, r1)= Administrado)] ∨ [∃a2∃a3∃r2∃r3 (a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ Subtareas (r)) ∧ (r3 ∈ Subtareas (r)) ∧ (tipo (a2, r2) = Local) ∧ (tipo (A3, R3) = local)] 4.2 Formación y adaptación de la organización para formar o adaptar su estructura organizacional, los agentes usan dos primitivas organizacionales: \"desove de agente\" y composición.",
                "El \"agente desove\" es la generación de un nuevo agente para manejar un subconjunto de los roles del agente de desove.",
                "La composición del agente, por otro lado, es ortogonal para el \"desove del agente\" e implica la fusión de dos o más agentes juntos: el agente combinado es responsable de promulgar todos los roles de los agentes que se fusionan.",
                "El mecanismo de calcular ΔE es diferente para el \"desove de los agentes\" que para la composición del agente y se describe a continuación.",
                "Para calcular si es necesario \"desove de agente\", usamos la ecuación de recocido con ΔE = 1 α α ∗ donde α es una constante y la holgura es la diferencia entre el tiempo total disponible para completar las tareas pendientes y la suma del tiempo esperadorequerido para completar cada tarea en la cola de tareas.",
                "Además, si la cantidad de holgura es negativa, se producirá un \"desove de agente\" inmediato sin el uso de la ecuación de recocido."
            ],
            "translated_text": "",
            "candidates": [
                "agente desove",
                "agente desove",
                "agente desove",
                "desove de agentes",
                "agente desove",
                "agente desove",
                "agente desove",
                "desove de agente",
                "agente desove",
                "agente desove",
                "agente desove",
                "desove del agente",
                "agente desove",
                "desove de los agentes",
                "agente desove",
                "desove de agente",
                "agente desove",
                "desove de agente"
            ],
            "error": []
        },
        "composition": {
            "translated_key": "composición",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
                "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - agent spawning and <br>composition</br> - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate robustness into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - <br>composition</br> and decomposition, which are similar to our organizational primitives for agent spawning and <br>composition</br>.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
                "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and <br>composition</br>.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent <br>composition</br>, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for agent spawning than for agent <br>composition</br> and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
                "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
                "To calculate if agent <br>composition</br> is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
                "ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and <br>composition</br> operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the organization. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the organization.",
                "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the organization.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and <br>composition</br> operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness.",
                "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
                "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable organizational structure.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational organization theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of coordination in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for coordination in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of coordination mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "Organization self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent coordination framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An organizational self-design model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "Coordination decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "En nuestro enfoque (como en [10]), definimos dos operadores para OSD - agente desove y \"composición\" - cuando un agente se sobrecarga, se desgrega un nuevo agente para manejar parte de su carga/responsabilidad;Cuando un agente está inactivo durante un período prolongado de tiempo, puede decidir componer con otro agente.",
                "En su enfoque, definen dos primitivas organizacionales: \"composición\" y descomposición, que son similares a nuestras primitivas organizacionales para el desove y \"composición\" de los agentes.",
                "Formalmente, si el tipo de función (agente, nodo Tæms): a × (t ∪ m) → {local, administrado, sin asignar}, devuelve el tipo de responsabilidad del agente hacia el rol especificado, entonces escriba (a, r)= Local ⇐⇒ ∀ri∈Subtasks (r) tipo (a, ri) = tipo local (a, r) = gestionado ⇐⇒ [∃a1∃r1 (r1 ∈ Subtareas (r)) ∧ (tipo (a1, r1)= Administrado)] ∨ [∃a2∃a3∃r2∃r3 (a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ Subtareas (r)) ∧ (r3 ∈ Subtareas (r)) ∧ (tipo (a2, r2) = Local) ∧ (tipo (A3, R3) = local)] 4.2 Formación y adaptación de la organización para formar o adaptar su estructura organizacional, los agentes usan dos primitivas organizacionales: desove de agentes y \"composición\".",
                "El agente \"composición\", por otro lado, es ortogonal al desove de agente e implica la fusión de dos o más agentes juntos: el agente combinado es responsable de promulgar todos los roles de los agentes que se fusionan.",
                "El mecanismo de calcular ΔE es diferente para el desove de los agentes que para la \"composición\" del agente y se describe a continuación.",
                "Para calcular si es necesaria la \"composición\" del agente, nuevamente usamos la ecuación de recocido simulada.",
                "Por ejemplo, para deducir el conocimiento organizacional, los agentes de monitoreo deben realizar un seguimiento de los mensajes de desove y componer los agentes enviados por los agentes para desencadenar las operaciones de desove y \"composición\", respectivamente.",
                "Creemos que esto se debe en parte a la naturaleza codiciosa de esta heurística y en parte debido al hecho de que todas las operaciones de desove y \"composición\" solo usan información local."
            ],
            "translated_text": "",
            "candidates": [
                "composición",
                "composición",
                "composición",
                "composición",
                "composición",
                "composición",
                "composición",
                "composición",
                "composición",
                "composición",
                "composición",
                "composición",
                "composición",
                "composición",
                "composición",
                "composición",
                "composición"
            ],
            "error": []
        },
        "task analysis": {
            "translated_key": "análisis de tareas",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
                "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (<br>task analysis</br>, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate robustness into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
                "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
                "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
                "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
                "ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the organization. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the organization.",
                "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the organization.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness.",
                "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
                "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable organizational structure.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational organization theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of coordination in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for coordination in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of coordination mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "Organization self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent coordination framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An organizational self-design model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "Coordination decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Tæms [11] (\"Análisis de tareas\", modelado y simulación de entorno) es un marco computacional para representar y razonar sobre entornos de tareas complejos en los que se representan las tareas (problemas) utilizando estructuras de tareas jerárquicas extendidas [3]."
            ],
            "translated_text": "",
            "candidates": [
                "análisis de tareas",
                "Análisis de tareas"
            ],
            "error": []
        },
        "environment modeling": {
            "translated_key": "modelado del entorno",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
                "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (Task Analysis, <br>environment modeling</br> and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate robustness into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
                "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
                "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
                "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
                "ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the organization. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the organization.",
                "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the organization.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness.",
                "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
                "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable organizational structure.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational organization theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of coordination in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for coordination in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of coordination mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "Organization self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent coordination framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An organizational self-design model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "Coordination decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Tæms [11] (análisis de tareas, \"modelado de entorno\" y simulación) es un marco computacional para representar y razonar sobre entornos de tareas complejos en los que se representan las tareas (problemas) utilizando estructuras de tareas jerárquicas extendidas [3]."
            ],
            "translated_text": "",
            "candidates": [
                "modelado del medio ambiente",
                "modelado de entorno"
            ],
            "error": []
        },
        "simulation": {
            "translated_key": "simulación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
                "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (Task Analysis, Environment Modeling and <br>simulation</br>) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate robustness into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
                "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
                "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
                "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
                "ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the organization. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the organization.",
                "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the organization.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness.",
                "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
                "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable organizational structure.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational organization theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of coordination in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for coordination in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of coordination mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "Organization self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent coordination framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An organizational self-design model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "Coordination decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Tæms [11] (análisis de tareas, modelado de entorno y \"simulación\") es un marco computacional para representar y razonar sobre entornos de tareas complejos en los que se representan las tareas (problemas) utilizando estructuras de tareas jerárquicas extendidas [3]."
            ],
            "translated_text": "",
            "candidates": [
                "simulación",
                "simulación"
            ],
            "error": []
        },
        "extended hierarchical task structure": {
            "translated_key": "Estructura de tareas jerárquicas extendidas",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
                "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using <br>extended hierarchical task structure</br>s [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate robustness into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
                "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
                "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
                "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
                "ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the organization. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the organization.",
                "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the organization.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness.",
                "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
                "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable organizational structure.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational organization theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of coordination in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for coordination in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of coordination mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "Organization self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent coordination framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An organizational self-design model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "Coordination decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Tæms [11] (análisis de tareas, modelado y simulación de entorno) es un marco computacional para representar y razonar sobre entornos de tareas complejos en los que las tareas (problemas) se representan utilizando \"estructura de tareas jerárquicas extendidas\" S [3]."
            ],
            "translated_text": "",
            "candidates": [
                "Estructura de tareas jerárquicas extendidas",
                "estructura de tareas jerárquicas extendidas"
            ],
            "error": []
        },
        "robustness": {
            "translated_key": "robustez",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in <br>robustness</br> into the organization.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
                "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate <br>robustness</br> into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
                "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
                "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
                "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
                "ORGANIZATION AND <br>robustness</br> There are two approaches commonly used to achieve <br>robustness</br> in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve <br>robustness</br> in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the organization. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the organization.",
                "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the organization.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the <br>robustness</br> of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to <br>robustness</br> as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to <br>robustness</br>.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of <br>robustness</br>.",
                "For example, one way of achieving a higher level of <br>robustness</br> in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the <br>robustness</br>.",
                "Therefore, towards this end, we have begun exploring the <br>robustness</br> properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable organizational structure.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the <br>robustness</br> of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational organization theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of coordination in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for coordination in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of coordination mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "Organization self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent coordination framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An organizational self-design model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "Coordination decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Extendemos el enfoque de OSD existente para incluir dominios digitados, modelar otros recursos además de solo recursos del procesador y incorporar la \"robustez\" en la organización.",
                "Incorporamos \"robustez\" en las estructuras organizacionales.2.",
                "Organización y \"robustez\" Hay dos enfoques comúnmente utilizados para lograr la \"robustez\" en los sistemas múltiples: 1. El enfoque de supervivencia [12], que implica replicar agentes de dominio para permitir que las réplicas se hagan cargo si los agentes originales fallan;y 2. El enfoque ciudadano [7], que implica el uso de agentes de monitoreo especiales (llamados agentes centinela) para detectar la falla del agente e iniciar dinámicamente nuevos agentes en lugar de los fallidos.",
                "Ambos enfoques se pueden aplicar para lograr la \"robustez\" en nuestros agentes de OSD y no está claro qué enfoque sería mejor.",
                "Esto a menudo resulta en organizaciones que tienen una Figura 2: Graph que demuestra la \"robustez\" del enfoque ciudadano.",
                "Finalmente evaluamos el desempeño del enfoque de los ciudadanos de la \"robustez\" aplicada a nuestro mecanismo OSD (Figura 2).",
                "Como parte de nuestra futura investigación, deseamos, en primer lugar, evaluar el enfoque de supervivencia de la \"robustez\".",
                "Además, creemos firmemente que la estructura organizacional óptima puede variar, dependiendo de la probabilidad de falla y el nivel deseado de \"robustez\".",
                "Por ejemplo, una forma de lograr un mayor nivel de \"robustez\" en el enfoque de supervivencia, dado un gran número de fallas de agentes, sería relajar los plazos de las tareas.",
                "Sin embargo, tal relajación daría como resultado que el sistema use menos agentes para conservar los recursos, lo que a su vez tendría un efecto perjudicial en la \"robustez\".",
                "Por lo tanto, con este fin, hemos comenzado a explorar las propiedades de \"robustez\" de las estructuras de tareas y las formas en que el diseño organizacional puede modificarse para tener en cuenta tales propiedades.7.",
                "Finalmente, probamos el rendimiento de tres heurísticas de asignación de recursos diferentes en diversas métricas de rendimiento y también evaluamos la \"robustez\" de nuestro enfoque.8."
            ],
            "translated_text": "",
            "candidates": [
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "robustez",
                "Robustez",
                "robustez",
                "Robustez",
                "robustez"
            ],
            "error": []
        },
        "organizational-self design": {
            "translated_key": "diseño de la organización",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "<br>organizational-self design</br> (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
                "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate robustness into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with task and resource allocation. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
                "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
                "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
                "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
                "ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the organization. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the organization.",
                "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the organization.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness.",
                "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
                "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable organizational structure.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational organization theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of coordination in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for coordination in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of coordination mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "Organization self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent coordination framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An organizational self-design model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "Coordination decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "El \"diseño de la organización\" (OSD) se ha propuesto como un enfoque para construir estructuras organizacionales adecuadas en tiempo de ejecución."
            ],
            "translated_text": "",
            "candidates": [
                "diseño de la organización",
                "diseño de la organización"
            ],
            "error": []
        },
        "task and resource allocation": {
            "translated_key": "Asignación de tareas y recursos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Organizational Self-Design in Semi-dynamic Environments Sachin Kamboj ∗ and Keith S. Decker Department of Computer and Information Sciences University of Delaware Newark, DE 19716 {kamboj, decker}@cis.udel.edu ABSTRACT Organizations are an important basis for coordination in multiagent systems.",
                "However, there is no best way to organize and all ways of organizing are not equally effective.",
                "Attempting to optimize an organizational structure depends strongly on environmental features including problem characteristics, available resources, and agent capabilities.",
                "If the environment is dynamic, the environmental conditions or the problem task structure may change over time.",
                "This precludes the use of static, design-time generated, organizational structures in such systems.",
                "On the other hand, for many real environments, the problems are not totally unique either: certain characteristics and conditions change slowly, if at all, and these can have an important effect in creating stable organizational structures.",
                "Organizational-Self Design (OSD) has been proposed as an approach for constructing suitable organizational structures at runtime.",
                "We extend the existing OSD approach to include worthoriented domains, model other resources in addition to only processor resources and build in robustness into the organization.",
                "We then evaluate our approach against the contract-net approach and show that our OSD agents perform better, are more efficient, and more flexible to changes in the environment.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Design, Performance, Experimentation 1.",
                "INTRODUCTION In this paper, we are primarily interested in the organizational design of a multiagent system - the roles enacted by the agents, ∗Primary author is a student the coordination between the roles and the number and assignment of roles and resources to the individual agents.",
                "The organizational design is complicated by the fact that there is no best way to organize and all ways of organizing are not equally effective [2].",
                "Instead, the optimal organizational structure depends both on the problem at hand and the environmental conditions under which the problem needs to be solved.",
                "The environmental conditions may not be known a priori, or may change over time, which would preclude the use of a static organizational structure.",
                "On the other hand, all problem instances and environmental conditions are not always unique, which would render inefficient the use of a new, bespoke organizational structure for every problem instance.",
                "Organizational Self-Design (OSD) [4, 10] has been proposed as an approach to designing organizations at run-time in which the agents are responsible for generating their own organizational structures.",
                "We believe that OSD is especially suited to the above scenario in which the environment is semi-dynamic as the agents can adapt to changes in the task structures and environmental conditions, while still being able to generate relatively stable organizational structures that exploit the common characteristics across problem instances.",
                "In our approach (as in [10]), we define two operators for OSD - agent spawning and composition - when an agent becomes overloaded, it spawns off a new agent to handle part of its task load/responsibility; when an agent lies idle for an extended period of time, it may decide to compose with another agent.",
                "We use TÆMS as the underlying representation for our problem solving requests.",
                "TÆMS [11] (Task Analysis, Environment Modeling and Simulation) is a computational framework for representing and reasoning about complex task environments in which tasks (problems) are represented using extended hierarchical task structures [3].",
                "The root node of the task structure represents the high-level goal that the agent is trying to achieve.",
                "The sub-nodes of a node represent the subtasks and methods that make up the highlevel task.",
                "The leaf nodes are at the lowest level of abstraction and represent executable methods - the primitive actions that the agents can perform.",
                "The executable methods, themselves, may have multiple outcomes, with different probabilities and different characteristics such as quality, cost and duration.",
                "TÆMS also allows various mechanisms for specifying subtask variations and alternatives, i.e. each node in TÆMS is labeled with a characteristic accumulation function that describes how many or which subgoals or sets of subgoals need to be achieved in order to achieve a particular higherlevel goal.",
                "TÆMS has been used to model many different problemsolving environments including distributed sensor networks, information gathering, hospital scheduling, EMS, and military planning. [5, 6, 3, 15].",
                "The main contributions of this paper are as follows: 1.",
                "We extend existing OSD approaches to use TÆMS as the underlying problem representation, which allows us to model and use OSD for worth-oriented domains.",
                "This in turn allows us to reason about (1) alternative task and role assignments that make different quality/cost tradeoffs and generate different organizational structures and (2) uncertainties in the execution of tasks. 2.",
                "We model the use of resources other than only processor resources. 3.",
                "We incorporate robustness into the organizational structures. 2.",
                "RELATED WORK The concept of OSD is not new and has been around since the work of Corkill and Lesser on the DVMT system[4], even though the concept was not fully developed by them.",
                "More recently Dignum et. al. [8] have described OSD in the context of the reorganization of agent societies and attempt to classify the various kinds of reorganization possible according to the the reason for reorganization, the type of reorganization and who is responsible for the reorganization decision.",
                "According to their scheme, the type of reorganization done by our agents falls into the category of structural changes and the reorganization decision can be described as shared command.",
                "Our research primarily builds on the work done by Gasser and Ishida [10], in which they use OSD in the context of a production system in order to perform adaptive work allocation and load balancing.",
                "In their approach, they define two organizational primitives - composition and decomposition, which are similar to our organizational primitives for agent spawning and composition.",
                "The main difference between their work and our work is that we use TÆMS as the underlying representation for our problems, which allows, firstly, the representation of a larger, more general class of problems and, secondly, quantitative reasoning over task structures.",
                "The latter also allows us to incorporate different design-to-criteria schedulers [16].",
                "Horling and Lesser [9] present a different, top-down approach to OSD that also uses TÆMS as the underlying representation.",
                "However, their approach assumes a fixed number of agents with designated (and fixed) roles.",
                "OSD is used in their work to change the interaction patterns between the agents and results in the agents using different subtasks or different resources to achieve their goals.",
                "We also extend on the work done by Sycara et. al.,[13] on Agent Cloning, which is another approach to resource allocation and load balancing.",
                "In this approach, the authors present agent cloning as a possible response to agent overload - if an agent detects that it is overloaded and that there are spare (unused) resources in the system, the agent clones itself and gives its clone some part of its task load.",
                "Hence, agent cloning can be thought of as akin to agent spawning in our approach.",
                "However, the two approaches are different in that there is no specialization of the agents in the formerthe cloned agents are perfect replicas of the original agents and fulfill the same roles and responsibilities as the original agents.",
                "In our approach, on the other hand, the spawned agents are specialized on a subpart of the spawning agents task structure, which is no longer the responsibility of the spawning agent.",
                "Hence, our approach also deals with explicit organization formation and the coordination of the agents tasks which are not handled by their approach.",
                "Other approaches to OSD include the work of So and Durfee [14], who describe a top-down model of OSD in the context of Cooperative Distributive Problem Solving (CDPS) and Barber and Martin [1], who describe an adaptive decision making framework in which agents are able to reorganize decision-making groups by dynamically changing (1) who makes the decisions for a particular goal and (2) who must carry out these decisions.The latter work is primarily concerned with coordination decisions and can be used to complement our OSD work, which primarily deals with <br>task and resource allocation</br>. 3.",
                "TASK AND RESOURCE MODEL To ground our discussion of OSD, we now formally describe our task and resource model.",
                "In our model, the primary input to the multi-agent system (MAS) is an ordered set of problem solving requests or task instances, < P1, P2, P3, ..., Pn >, where each problem solving request, Pi, can be represented using the tuple < ti, ai, di >.",
                "In this scheme, ti is the underlying TÆMS task structure, ai ∈ N+ is the arrival time and di ∈ N+ is the deadline of the ith task instance1 .",
                "The MAS has no prior knowledge about the task ti before the arrival time, ai.",
                "In order for the MAS to accrue quality, the task ti must be completed before the deadline, di.",
                "Furthermore, every underlying task structure, ti, can be represented using the tuple < T, τ, M, Q, E, R, ρ, C >, where: • T is the set of tasks.",
                "The tasks are non-leaf nodes in a TÆMS task structure and are used to denote goals that the agents must achieve.",
                "Tasks have a characteristic accumulation function (see below) and are themselves composed of other subtasks and/or methods that need to be achieved in order to achieve the goal represented by that task.",
                "Formally, each task Tj can be represented using the pair (qj, sj), where qj ∈ Q and sj ⊂ (T ∪ M).",
                "For our convenience, we define two functions SUBTASKS(Task) : T → P(T ∪ M) and SUPERTASKS(TÆMS node) : T ∪ M → P(T), that return the subtasks and supertasks of a TÆMS node respectively2 . • τ ∈ T, is the root of the task structure, i.e. the highest level goal that the organization is trying to achieve.",
                "The quality accrued on a problem is equal to the quality of task τ. • M is the set executable methods, i.e., M = {m1, m2, ..., mn}, where each method, mk, is represented using the outcome distribution, {(o1, p1), (o2, p2), ..., (om, pm)}.",
                "In the pair (ol, pl), ol is an outcome and pl is the probability that executing mk will result in the outcome ol.",
                "Furthermore, each outcome, ol is represented using the triple (ql, cl, dl), where ql is the quality distribution, cl is the cost distribution and dl is the duration distribution of outcome ol.",
                "Each discrete distribution is itself a set of pairs, {(n1, p1), (n2, p2), ..., (nn, pn)}, where pi ∈ + is the probability that the outcome will have a quality/cost/duration of nl ∈ N depending on the type of distribution and Pm i=1 pl = 1. • Q is the set of quality/characteristic accumulation functions (CAFs).",
                "The CAFs determine how a task group accrues quality given the quality accrued by its subtasks/methods.",
                "For our research, we use four CAFs: MIN, MAX, SUM and EXACTLY ONE.",
                "See [5] for formal definitions. • E is the set of (non-local) effects.",
                "Again, see [5] for formal definitions. • R is the set of resources. • ρ is a mapping from an executable method and resource to the quantity of that resource needed (by an agent) to schedule/execute that method.",
                "That is ρ(method, resource) : M × R → N. 1 N is the set of natural numbers including zero and N+ is the set of positive natural numbers excluding zero. 2 P is the power set of set, i.e., the set of all subsets of a set The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1229 • C is a mapping from a resource to the cost of that resource, that is C(resource) : R → N+ We also make the following set of assumptions in our research: 1.",
                "The agents in the MAS are drawn from the infinite set A = {a1, a2, a3, ...}.",
                "That is, we do not assume a fixed set of agents - instead agents are created (spawned) and destroyed (combined) as needed. 2.",
                "All problem solving requests have the same underlying task structure, i.e. ∃t∀iti = t, where t is the task structure of the problem that the MAS is trying to solve.",
                "We believe that this assumption holds for many of the practical problems that we have in mind because TÆMS task structures are basically high-level plans for achieving some goal in which the steps required for achieving the goal-as well as the possible contingency situations-have been pre-computed offline and represented in the task structure.",
                "Because it represents many contingencies, alternatives, uncertain characteristics and runtime flexible choices, the same underlying task structure can play out very differently across specific instances. 3.",
                "All resources are exclusive, i.e., only one agent may use a resource at any given time.",
                "Furthermore, we assume that each agent has to own the set of resources that it needseven though the resource ownership can change during the evolution of the organization. 4.",
                "All resources are non-consumable. 4.",
                "ORGANIZATIONAL SELF DESIGN 4.1 Agent Roles and Relationships The organizational structure is primarily composed of roles and the relationships between the roles.",
                "One or more agents may enact a particular role and one or more roles must be enacted by every agent.",
                "The roles may be thought of as the parts played by the agents enacting the roles in the solution to the problem and reflect the long-term commitments made by the agents in question to a certain course of action (that includes task responsibility, authority, and mechanisms for coordination).",
                "The relationships between the roles are the coordination relationships that exist between the subparts of a problem.",
                "In our approach, the organizational design is directly contingent on the task structure and the environmental conditions under which the problems need to be solved.",
                "We define a role as a TÆMS subtree rooted at a particular node.",
                "Hence, the set (T ∪ M) encompasses the space of all possible roles.",
                "Note, by definition, a role may consist of one or more other (sub-) roles as a particular TÆMS node may itself be made up of one or more subtrees.",
                "Hence, we will use the terms role, task node and task interchangeably.",
                "We, also, differentiate between local and managed (non-local) roles.",
                "Local roles are roles that are the sole responsibility of a single agent, that is, the agent concerned is responsible for solving all the subproblems of the tree rooted at that node.",
                "For such roles, the agent concerned can do one or more subtasks, solely at its discretion and without consultation with any other agent.",
                "Managed roles, on the other hand, must be coordinated between two or more agents as such roles will have two or more descendent local roles that are the responsibility of two or more separate agents.",
                "Any of the existing coordination mechanisms (such as GPGP [11]) can be used to achieve this coordination.",
                "Formally, if the function TYPE(Agent, TÆMS Node) : A×(T ∪ M) → {Local, Managed, Unassigned}, returns the type of the responsibility of the agent towards the specified role, then TYPE(a, r) = Local ⇐⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local TYPE(a, r) = Managed ⇐⇒ [∃a1∃r1(r1 ∈ SUBTASKS(r)) ∧ (TYPE(a1, r1) = Managed)] ∨ [∃a2∃a3∃r2∃r3(a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ SUBTASKS(r)) ∧ (r3 ∈ SUBTASKS(r)) ∧ (TYPE(a2, r2) = Local) ∧ (TYPE(a3, r3) = Local)] 4.2 Organization Formation and Adaptation To form or adapt their organizational structure, the agents use two organizational primitives: agent spawning and composition.",
                "These two primitives result in a change in the assignment of roles to the agents.",
                "Agent spawning is the generation of a new agent to handle a subset of the roles of the spawning agent.",
                "Agent composition, on the other hand, is orthogonal to agent spawning and involves the merging of two or more agents together - the combined agent is responsible for enacting all the roles of the agents being merged.",
                "In order to participate in the formation and adaption of an organization, the agents need to explicitly represent and reason about the role assignments.",
                "Hence, as a part of its organizational knowledge, each agent keeps a list of the local roles that it is enacting and the non-local roles that it is managing.",
                "Note that each agent only has limited organizational knowledge and is individually responsible for spawning off or combining with another agent, as needed, based on its estimate of its performance so far.",
                "To see how the organizational primitives work, we first describe four rules that can be thought of as the organizational invariants which will always hold before and after any organizational change: 1.",
                "For a local role, all the descendent nodes of that role will be local.",
                "TYPE(a, r) = Local =⇒ ∀ri∈SUBTASKS(r)TYPE(a, ri) = Local 2.",
                "Similarly, for a managed (non-local) role, all the ascendent nodes of that role will be managed.",
                "TYPE(a, r) = Managed =⇒ ∀ri∈SUPERTASKS(r)∃ai(ai ∈ A) ∧ (TYPE(ai, ri) = Managed) 3.",
                "If two local roles that are enacted by two different agents share a common ancestor, that ancestor will be a managed role. (TYPE(a1, r1) = Local) ∧ (TYPE(a2, r2) = Local)∧ (a1 = a2) ∧ (r1 = r2) =⇒ ∀ri∈(SUPERTASKS(r1)∩SUPERTASKS(r2))∃ai(ai ∈ A)∧ (TYPE(ai, ri) = Managed) 4.",
                "If all the direct descendants of a role are local and the sole responsibility of a single agent, that role will be a local role. ∃a∃r∀ri∈SUBTASKS(r)(a ∈ A) ∧ (r ∈ (T ∪ M))∧ (TYPE(a, ri) = Local) =⇒ (TYPE(a, r) = Local) When a new agent is spawned, the agent doing the spawning will assign one or more of its local roles to the newly spawned agent (Algorithm 1).",
                "To preserve invariant rules 2 and 3, the spawning agent will change the type of all the ascendent roles of the nodes assigned to the newly spawned agent from local to managed.",
                "Note that the spawning agent is only changing its local organizational knowledge and not the global organizational knowledge.",
                "At the 1230 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) same time, the spawning agent is taking on the task of managing the previously local roles.",
                "Similarly, the newly spawned agent will only know of its just assigned local roles.",
                "When an agent (the composing agent) decides to compose with another agent (the composed agent), the organizational knowledge of the composing agent is merged with the organizational knowledge of the composed agent.",
                "To do this, the composed agent takes on the roles of all the local and managed tasks of the composing agent.",
                "Care is taken to preserve the organizational invariant rules 1 and 4.",
                "Algorithm 1 SpawnAgent(SpawningAgent) : A → A 1: LocalRoles ← {r ⊆ (T ∪ M) | TYPE(SpawningAgent, r)= Local} 2: NewAgent ← CREATENEWAGENT() 3: NewAgentRoles ← FINDROLESFORSPAWNEDAGENT (LocalRoles) 4: for role in NewAgentRoles do 5: TYPE(NewAgent, role) ← Local 6: TYPE(SpawningAgent, role) ← Unassigned 7: PRESERVEORGANIZATIONALINVARIANTS() 8: return NewAgent Algorithm 2 FINDROLESFORSPAWNEDAGENT (SpawningAgentRoles) : (T ∪ M) → (T ∪ M) 1: R ← SpawningAgentRoles 2: selectedRoles ← nil 3: for roleSet in [P(R) − {φ, R}] do 4: if COST(R, roleSet) < COST(R, selectedRoles) then 5: selectedRoles ← roleSet 6: return selectedRoles Algorithm 3 GETRESOURCECOST(Roles) : (T ∪ M) → 1: M ← (Roles ∩ M) 2: cost ← 0 3: for resource in R do 4: maxResourceUsage ← 0 5: for method in M do 6: if ρ(method, resource) > maxResourceUsage then 7: max ← ρ(method, resource) 8: cost ← cost + [C(resource) × maxResourceUsage] 9: return cost 4.2.1 Role allocation during spawning One of the key questions that the agent doing the spawning needs to answer is - which of its local-roles should it assign to the newly spawned agent and which of its local roles should it keep to itself?",
                "The onus of answering this question falls on the FINDROLESFORSPAWNEDAGENT() function, shown in Algorithm 2 above.",
                "This function takes the set of local roles that are the responsibility of the spawning agent and returns a subset of those roles for allocation to the newly spawned agent.",
                "This subset is selected based on the results of a cost function as is evident from line 4 of the algorithm.",
                "Since the use of different cost functions will result in different organizational structures and since we have no a priori reason to believe that one cost function will out-perform the other, we evaluated the performance of three different cost functions based on the following three different heuristics: Algorithm 4 GETEXPECTEDDURATION(Roles) : (T ∪ M) → N+ 1: M ← (Roles ∩ M) 2: exptDuration ← 0 3: for [outcome =< (q, c, d), outcomeProb >] in M do 4: exptOutcomeDuration ← 0 5: for (n,p) in d do 6: exptOutcomeDuration ← n × p 7: exptDuration ← exptDuration + [exptOutcomeDuration × outcomeProb] 8: return exptDuration Allocating top-most roles first: This heuristic always breaks up at the top-most nodes first.",
                "That is, if the nodes of a task structure were numbered, starting from the root, in a breadth-first fashion, then this heuristic would select the local-role of the spawning agent that had the lowest number and breakup that node (by allocating one of its subtasks to the newly spawned agent).",
                "We selected this heuristic because (a) it is the simplest to implement, (b) fastest to run (the role allocation can be done in constant time without the need of a search through the task structure) and (c) it makes sense from a human-organizational perspective as this heuristic corresponds to dividing an organization along functional lines.",
                "Minimizing total resources: This heuristic attempts to minimize the total cost of the resources needed by the agents in the organization to execute their roles.",
                "If R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, the cost function for this heuristic is given by: COST(R, R ) ← GETRESOURCECOST(R − R )+GETRESOURCECOST(R ) Balancing execution time: This heuristic attempts to allocate roles in a way that tries to ensure that each agent has an equal amount of work to do.",
                "For each potential role allocation, this heuristic works by calculating the absolute value of the difference between the expected duration of its own roles after spawning and the expected duration of the roles of the newly spawned agent.",
                "If this difference is close to zero, then the both the agents have roughly the same amount of work to do.",
                "Formally, if R be the local roles of the spawning agent and R be the subset of roles being evaluated for allocation to the newly spawned agent, then the cost function for this heuristic is given by: COST(R, R ) ← |GETEXPECTEDDURATION(R−R )−GETEXPECTEDDURATION(R )| To evaluate these heuristics, we ran a series of experiments that tested the performance of the resultant organization on randomly generated task structures.",
                "The results are given in Section 6. 4.3 Reasons for Organizational Change As organizational change is expensive (requiring clock cycles, allocation/deallocation of resources, etc.) we want a stable organizational structure that is suited to the task and environmental conditions at hand.",
                "Hence, we wish to change the organizational structure only if the task structure and/or environmental conditions change.",
                "Also to allow temporary changes to the environmental conditions to be overlooked, we want the probability of an organizational change to be inversely proportional to the time since the last organizational change.",
                "If this time is relatively short, the agents are still adjusting to the changes in the environment - hence the probability of an agent initiating an organizational change should be high.",
                "Similarly, if the time since the last organizational change is relatively large, we wish to have a low probability of organizational change.",
                "To allow this variation in probability of organizational change, we use simulated annealing to determine the probability of keepThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1231 ing an existing organizational structure.",
                "This probability is calculated using the annealing formula: p = e− ΔE kT where ΔE is the amount of overload/underload, T is the time since the last organizational change and k is a constant.",
                "The mechanism of computing ΔE is different for agent spawning than for agent composition and is described below.",
                "From this formula, if T is large, p, or the probability of keeping the existing organizational structure is large.",
                "Note that the value of p is capped at a certain threshold in order to prevent the organization from being too sluggish in its reaction to environmental change.",
                "To compute if agent spawning is necessary, we use the annealing equation with ΔE = 1 α∗Slack where α is a constant and Slack is the difference between the total time available for completion of the outstanding tasks and the sum of the expected time required for completion of each task on the task queue.",
                "Also, if the amount of Slack is negative, immediate agent spawning will occur without use of the annealing equation.",
                "To calculate if agent composition is necessary, we again use the simulated annealing equation.",
                "However, in this case, ΔE = β ∗ Idle Time, where β is a constant and Idle Time is the amount of time for which the agent was idle.",
                "If the agent has been sitting idle for a long period of time, ΔE is large, which implies that p, the probability of keeping the existing organizational structure, is low. 5.",
                "ORGANIZATION AND ROBUSTNESS There are two approaches commonly used to achieve robustness in multiagent systems: 1. the Survivalist Approach [12], which involves replicating domain agents in order to allow the replicas to take over should the original agents fail; and 2. the Citizen Approach [7], which involves the use of special monitoring agents (called Sentinel Agents) in order to detect agent failure and dynamically startup new agents in lieu of the failed ones.",
                "The advantage of the survivalist approach is that recovery is relatively fast, since the replicas are pre-existing in the organization and can take over as soon as a failure is detected.",
                "The advantages of the citizen approach are that it requires fewer resources, little modification to the existing organizational structure and coordination protocol and is simpler to implement.",
                "Both of these approaches can be applied to achieve robustness in our OSD agents and it is not clear which approach would be better.",
                "Rather a thorough empirical evaluation of both approaches would be required.",
                "In this paper, we present the citizen approach as it has been shown by [7], to have a better performance than the survivalist approach in the Contract Net protocol, and leave the presentation and evaluation of the survivalist approach to a future paper.",
                "To implement the citizen approach, we designed special monitoring agents, that periodically poll the domain agents by sending them are you alive messages that the agents must respond to.",
                "If an agent fails, it will not respond to such messages - the monitoring agents can then create a new agent and delegate the responsibilities of the dead agent to the new agent.",
                "This delegation of responsibilities is non-trivial as the monitoring agents do not have access to the internal state of the domain agents, which is itself composed of two components - the organizational knowledge and the task information.",
                "The former consists of the information about the local and managerial roles of the agent while the latter is composed of the methods that are being scheduled and executed and the tasks that have been delegated to other agents.",
                "This state information can only be deduced by monitoring and recording the messages being sent and received by the domain agents.",
                "For example, in order to deduce the organizational knowledge, the monitoring agents need to keep a track of the spawn and compose messages sent by the agents in order to trigger the spawning and composition operations respectively.",
                "The deduction process is particularly complicated in the case of the task information as the monitoring agents do not have access to the private schedules of the domain agents.",
                "The details are beyond the scope of this paper. 6.",
                "EVALUATION To evaluate our approach, we ran a series of experiments that simulated the operation of both the OSD agents and the Contract Net agents on various task structures with varied arrival rates and deadlines.",
                "At the start of each experiment, a random TÆMS task structure was generated with a specified depth and branching factor.",
                "During the course of the experiment, a series of task instances (problems) arrive at the organization and must be completed by the agents before their specified deadlines.",
                "To directly compare the OSD approach with the Contract Net approach, each experiment was repeated several times - using OSD agents on the first run and a different number of Contract Net agents on each subsequent run.",
                "We were careful to use the same task structure, task arrival times, task deadlines and random numbers for each of these trials.",
                "We divided the experiments into two groups: experiments in which the environment was static (fixed task arrival rates and deadlines) and experiments in which the environment was dynamic (varying arrival rates and/or deadlines).",
                "The two graphs in Figure 1, show the average performance of the OSD organization against the Contract Net organizations with 8, 10, 12 and 14 agents.",
                "The results shown are the averages of running 40 experiments. 20 of those experiments had a static environment with a fixed task arrival time of 15 cycles and a deadline window of 20 cycles.",
                "The remaining 20 experiments had a varying task arrival rate - the task arrival rate was changed from 15 cycles to 30 cycles and back to 15 cycles after every 20 tasks.",
                "In all the experiments, the task structures were randomly generated with a maximum depth of 4 and a maximum branching factor of 3.",
                "The runtime of all the experiments was 2500 cycles.",
                "We tested several hypotheses relating to the comparative performance of our OSD approach using the Wilcoxon Matched-Pair Signed-Rank tests.",
                "Matched-Pair signifies that we are comparing the performance of each system on precisely the same randomized task set within each separate experiment.",
                "The tested hypothesis are: The OSD organization requires fewer agents to complete an equal or larger number of tasks when compared to the Contract Net organization: To test this hypothesis, we tested the stronger null hypothesis that states that the contract net agents complete more tasks.",
                "This null hypothesis is rejected for all contract net organizations with less than 14 agents (static: p < 0.0003; dynamic: p < 0.03).",
                "For large contract net organizations, the number of tasks completed is statistically equivalent to the number completed by the OSD agents, however the number of agents used by the OSD organization is smaller: 9.59 agents (in the static case) and 7.38 agents (in the dynamic case) versus 14 contract net agents3 .",
                "Thus the original hypothesis, that OSD requires fewer agents to 3 These values should not be construed as an indication of the scalability of our approach.",
                "We have tested our approach on organizations with more than 300 agents, which is significantly greater than the number of agents needed for the kind of applications that we have in mind (i.e. web service choreography, efficient dynamic use of grid computing, distributed information gathering, etc.). 1232 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 1: Graph comparing the average performance of the OSD organization with the Contract Net organizations (with 8, 10, 12 and 14 agents).",
                "The error bars show the standard deviations. complete an equal or larger number of tasks, is upheld.",
                "The OSD organizations achieve an equal or greater average quality than the Contract Net organizations: The null hypothesis is that the Contract Net agents achieve a greater average quality.",
                "We can reject the null hypothesis for contract net organizations with less than 12 agents (static: p < 0.01; dynamic: p < 0.05).",
                "For larger contract net organizations, the average quality is statistically equivalent to that achieved by OSD.",
                "The OSD agents have a lower average response time as compared to the Contract Net agents: The null hypothesis that OSD has the same or higher response time is rejected for all contract net organizations (static: p < 0.0002; dynamic: p < 0.0004).",
                "The OSD agents send less messages than the Contract Net Agents: The null hypothesis that OSD sends the same or more messages is rejected for all contract net organizations (p < .0003 in all cases except 8 contract net agents in a static environment where p < 0.02) Hence, as demonstrated by the above tests, our agents perform better than the contract net agents as they complete a larger number of tasks, achieve a greater quality and also have a lower response time and communication overhead.",
                "These results make intuitive sense given our goals for the OSD approach.",
                "We expected the OSD organizations to have a faster average response time and to send less messages because the agents in the OSD organization are not wasting time and messages sending bid requests and replying to bids.",
                "The quality gained on the tasks is directly dependent on the Criteria/Heuristic BET TF MR Rand Number of Agents 572 567 100 139 No-Org-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Resource-Cost 346 418 337 66 Tasks-Completed 427 560 154 166 Average-Quality 367 492 298 339 Average-Response-Time 356 321 370 283 Average-Runtime 543 323 74 116 Average-Turnaround-Time 560 314 74 126 Table 1: The number of times that each heuristic performed the best or statistically equivalent to the best for each of the performance criteria.",
                "Heuristic Key: BET is Balancing Execution Time, TF is Topmost First, MR is Minimizing Resources and Rand is a random allocation strategy, in which every TÆMS node has a uniform probability of being selected for allocation. number of tasks completed, hence the more the number of tasks completed, the greater average quality.",
                "The results of testing the first hypothesis were slightly more surprising.",
                "It appears that due to the inherent inefficiency of the contract net protocol in bidding for each and every task instance, a greater number of agents are needed to complete an equal number of tasks.",
                "Next, we evaluated the performance of the three heuristics for allocating tasks.",
                "Some preliminary experiments (that are not reported here due to space constraints) demonstrated the lack of a clear winner amongst the three heuristics for most of the performance criteria that we evaluated.",
                "We suspected this to be the case because different heuristics are better for different task structures and environmental conditions, and since each experiment starts with a different random task structure, we couldnt find one allocation strategy that always dominated the other for all the performance criteria.",
                "To determine which heuristic performs the best, given a set of task structures, environmental conditions and performance criteria, we performed a series of experiments that were controlled using the following five variables: • The depth of the task structure was varied from 3 to 5. • The branching factor was varied from 3 to 5. • The probability of any given task node having a MIN CAF was varied from 0.0 to 1.0 in increments of 0.2.",
                "The probability of any node having a SUM CAF was in turn modified to ensure that the probabilities add up to 14 . • The arrival rate: from 10 to 40 cycles in increments of 10. • The deadline slack: from 5 to 15 in increments of 5.",
                "Each experiment was repeated 20 times, with a new task structure being generated each time - these 20 experiments formed an experimental set.",
                "Hence, all the experiments in an experimental set had the same values for the exogenous variables that were used to control the experiment.",
                "Note that a static environment was used in each of these experiments, as we wanted to see the performance of the arrival rate and deadline slack on each of the three heuristics.",
                "Also the results of any experiment in which the OSD organization consisted of a single agent ware culled from the results.",
                "Similarly, 4 Since our preliminary analysis led is to believe that the number of MAX and EXACTLY ONE CAFs in a task structure have a minimal effect on the performance of the allocation strategies being evaluated, we set the probabilities of the MAX and EXACTLY ONE CAFs to 0 in order to reduce the combinatorial explosion of the full factorial experimental design.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1233 experiments in which the generated task structures were unsatisfiable (given the deadline constraints), were removed from the final results.",
                "If any experimental set had more than 15 experiments thus removed, the whole set was ignored for performing the evaluation.",
                "The final evaluation was done on 673 experimental sets.",
                "We tested the potential of these three heuristics on the following performance criteria: 1.",
                "The average number of agents used. 2.",
                "The total number of organizational changes. 3.",
                "The total messages sent by all the agents. 4.",
                "The total resource cost of the organization. 5.",
                "The number of tasks completed. 6.",
                "The average quality accrued.",
                "The average quality is defined as the total quality accrued during the experimental run divided by the sum of the number of tasks completed and the number of tasks failed. 7.",
                "The average response time of the organization.",
                "The response time of a task is defined as the difference between the time at which any agent in the organization starts working on the task (the start time) and the time at which the task was generated (the generation time).",
                "Hence, the response time is equivalent to the wait time.",
                "For tasks that are never attempted/started, the response time is set at final runtime minus the generation time. 8.",
                "The average runtime of the tasks attempted by the organization.",
                "This time is defined as the difference between the time at which the task completed or failed and the start time.",
                "For tasks that were never stated, this time is set to zero. 9.",
                "The turnaround time is defined as the sum of the response time and runtime of a task.",
                "Except for the number of tasks completed and the average quality accrued, lower values for the various performance criteria indicate better performance.",
                "Again we ran the Wilcoxon Matched-Pair Signed-Rank tests on the experiments in each of the experimental sets.",
                "The null hypothesis in each case was that there is no difference between the pair of heuristics for the performance criteria under consideration.",
                "We were interested in the cases in which we could reject the null hypothesis with 95% confidence (p < 0.05).",
                "We noted the number of times that a heuristic performed the best or was in a group that performed statistically better than the rest.",
                "These counts are given in Tables 1 and 2.",
                "The number of experimental sets in which each heuristic performed the best or statistically equivalent to the best is shown in Table 1.",
                "The breakup of these numbers into (1) the number of times that each heuristic performed better than all the other heuristics and (2) the number of times each heuristic was statistically equivalent to another group of heuristics, all of which performed the best, is shown in Table 2.",
                "Both of these tables allow us to glean important information about the performance of the three heuristics.",
                "Particularly interesting were the following results: • Whereas Balancing Execution Time (BET) used the lowest number of agents in largest number of experimental sets (572), in most of these cases (337 experimental sets) it was statistically equivalent to Topmost First (TF).",
                "When these two heuristics didnt perform equally, there was an almost even split between the number of experimental sets in which one outperformed the other.",
                "We believe this was the case because BET always bifurcates the agents into two agents that have a more or less equal task load.",
                "This often results in organizations that have an even Figure 2: Graph demonstrating the robustness of the citizen approach.",
                "The baseline shows the number of tasks completed in the absence of any failure. number of agents - none of which are small5 enough to combine into a larger agent.",
                "With TF, on the other hand, a large agent can successively spawn off smaller agents until it and the spawned agents are small enough to complete their tasks before the deadlines - this often results in organizations with an odd number of agents that is less than those used by BET. • As expected, BET achieved the lowest number of organizational changes in the largest number of experimental sets.",
                "In fact, it was over ten times as good as its second best competitor (TF).",
                "This shows that if the agents are conscientious in their initial task allocation, there is a lesser need for organizational change later on, especially for static environments. • A particularly interesting, yet easily explainable, result was that of the average response time.",
                "We found that the Minimizing Resources (MR) heuristic performed the best when it came to minimizing the average response time!",
                "This can be explained by the fact the MR heuristic is extremely greedy and prefers to spawn off small agents that have a tiny resource footprint (so as to minimize the total increase in the resource cost to the organization at the time of spawning).",
                "Whereas most of these small agents might compose with other agents over time, the presence of a single small agent is sufficient to reduce the response time.",
                "In fact the MR heuristic is not the most effective heuristic when it comes to minimizing the resource-cost of the organization - in fact, it only outperforms a random task/resource allocation.",
                "We believe this is in part due to the greedy nature of this heuristic and in part because of the fact that all spawning and composition operations only use local information.",
                "We believe that using some non-local information about the resource allocation might help in making better decisions, something that we plan to look at in the future.",
                "Finally we evaluated the performance of the citizens approach to robustness as applied to our OSD mechanism (Figure 2).",
                "As expected, as the probability of failure increases, the number of agents failing during a run also increases.",
                "This results in a slight decrease in the number of tasks completed, which can be explained by the fact that whenever an agent fails, its looses whatever work it was doing at the time.",
                "The newly created agent that fills in for the failed 5 For this discussion small agents are agents that have a low expected duration for their local roles (as calculated by Algorithm 4). 1234 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Criteria/Heuristic BET TF MR Rand BET+TF BET+Rand MR+Rand TF+MR BET+TF+MR All Number of Agents 94 88 3 7 337 2 0 0 12 85 No-Org-Changes 480 0 0 29 16 113 0 0 0 5 Total-Messages-Sent 170 85 0 2 399 1 0 0 7 5 Resource-Cost 26 100 170 42 167 0 7 6 128 15 Tasks-Completed 77 197 4 28 184 1 3 9 36 99 Average-Quality 38 147 26 104 76 0 11 11 34 208 Average-Response-Time 104 74 162 43 31 20 16 8 7 169 Average-Runtime 322 110 0 12 121 13 1 1 1 69 Average-Turnaround-Time 318 94 1 11 125 26 1 0 7 64 Table 2: Table showing the number of times that each individual heuristic performed the best and the number of times that a certain group of statistically equivalent heuristics performed the best.",
                "Only the more interesting heuristic groupings are shown.",
                "All shows the number of experimental sets in which there was no statistical difference between the three heuristics and a random allocation strategy one must redo the work, thus wasting precious time which might not be available close to a deadline.",
                "As a part of our future research, we wish to, firstly, evaluate the survivalist approach to robustness.",
                "The survivalist approach might actually be better than the citizen approach for higher probabilities of agent failure, as the replicated agents may be processing the task structures in parallel and can take over the moment the original agents fail - thus saving time around tight deadlines.",
                "Also, we strongly believe that the optimal organizational structure may vary, depending on the probability of failure and the desired level of robustness.",
                "For example, one way of achieving a higher level of robustness in the survivalist approach, given a large numbers of agent failures, would be to relax the task deadlines.",
                "However, such a relaxation would result in the system using fewer agents in order to conserve resources, which in turn would have a detrimental effect on the robustness.",
                "Therefore, towards this end, we have begun exploring the robustness properties of task structures and the ways in which the organizational design can be modified to take such properties into account. 7.",
                "CONCLUSION In this paper, we have presented a run-time approach to organization in which the agents use Organizational Self-Design to come up with a suitable organizational structure.",
                "We have also evaluated the performance of the organizations generated by the agents following our approach with the bespoke organization formation that takes place in the Contract Net protocol and have demonstrated that our approach is better than the Contract Net approach as evident by the larger number of tasks completed, larger quality achieved and lower response time.",
                "Finally, we tested the performance of three different resource allocation heuristics on various performance metrics and also evaluated the robustness of our approach. 8.",
                "REFERENCES [1] K. S. Barber and C. E. Martin.",
                "Dynamic reorganization of decision-making groups.",
                "In AGENTS 01, pages 513-520, New York, NY, USA, 2001. [2] K. M. Carley and L. Gasser.",
                "Computational organization theory.",
                "In G. Wiess, editor, Multiagent Systems: A Modern Approach to Distributed Artificial Intelligence, pages 299-330, MIT Press, 1999. [3] W. Chen and K. S. Decker.",
                "The analysis of coordination in an information system application - emergency medical services.",
                "In Lecture Notes in Computer Science (LNCS), number 3508, pages 36-51.",
                "Springer-Verlag, May 2005. [4] D. Corkill and V. Lesser.",
                "The use of meta-level control for coordination in a distributed problem solving network.",
                "Proceedings of the Eighth International Joint Conference on Artificial Intelligence, pages 748-756, August 1983. [5] K. S. Decker.",
                "Environment centered analysis and design of coordination mechanisms.",
                "Ph.D. Thesis, Dept. of Comp.",
                "Science, University of Massachusetts, Amherst, May 1995. [6] K. S. Decker and J. Li.",
                "Coordinating mutually exclusive resources using GPGP.",
                "Autonomous Agents and Multi-Agent Systems, 3(2):133-157, 2000. [7] C. Dellarocas and M. Klein.",
                "An experimental evaluation of domain-independent fault handling services in open multi-agent systems.",
                "Proceedings of the International Conference on Multi-Agent Systems (ICMAS-2000), July 2000. [8] V. Dignum, F. Dignum, and L. Sonenberg.",
                "Towards Dynamic Reorganization of Agent Societies.",
                "In Proceedings of CEAS: Workshop on Coordination in Emergent Agent Societies at ECAI, pages 22-27, Valencia, Spain, September 2004. [9] B. Horling, B. Benyo, and V. Lesser.",
                "Using self-diagnosis to adapt organizational structures.",
                "In AGENTS 01, pages 529-536, New York, NY, USA, 2001.",
                "ACM Press. [10] T. Ishida, L. Gasser, and M. Yokoo.",
                "Organization self-design of distributed production systems.",
                "IEEE Transactions on Knowledge and Data Engineering, 4(2):123-134, 1992. [11] V. R. Lesser et. al.",
                "Evolution of the gpgp/tæms domain-independent coordination framework.",
                "Autonomous Agents and Multi-Agent Systems, 9(1-2):87-143, 2004. [12] O. Marin, P. Sens, J. Briot, and Z. Guessoum.",
                "Towards adaptive fault tolerance for distributed multi-agent systems.",
                "Proceedings of ERSADS 2001, May 2001. [13] O. Shehory, K. Sycara, et. al.",
                "Agent cloning: an approach to agent mobility and resource allocation.",
                "IEEE Communications Magazine, 36(7):58-67, 1998. [14] Y.",
                "So and E. Durfee.",
                "An organizational self-design model for organizational change.",
                "In AAAI-93 Workshop on AI and Theories of Groups and Organizations, pages 8-15, Washington, D.C., July 1993. [15] T. Wagner.",
                "Coordination decision support assistants (coordinators).",
                "Technical Report 04-29, BAA, 2004. [16] T. Wagner and V. Lesser.",
                "Design-to-criteria scheduling: Real-time agent control.",
                "Proc. of AAAI 2000 Spring Symposium on Real-Time Autonomous Systems, 89-96.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 1235"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Otros enfoques para OSD incluyen el trabajo de SO y Durfee [14], quienes describen un modelo de arriba hacia abajo de OSD en el contexto de la resolución cooperativa de problemas distributivos (CDP) y Barber y Martin [1], que describen un marco de toma de decisiones adaptativoen el que los agentes pueden reorganizar los grupos de toma de decisiones cambiando dinámicamente (1) quién toma las decisiones para un objetivo particular y (2) que deben llevar a cabo estas decisiones. Este último trabajo se ocupa principalmente de las decisiones de coordinación y se puede utilizarComplementa nuestro trabajo de OSD, que trata principalmente de \"asignación de tareas y recursos\".3."
            ],
            "translated_text": "",
            "candidates": [
                "Asignación de tareas y recursos",
                "asignación de tareas y recursos"
            ],
            "error": []
        }
    }
}