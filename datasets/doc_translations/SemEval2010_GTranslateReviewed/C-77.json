{
    "id": "C-77",
    "original_text": "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation). An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order. So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation. This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors. The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes). In that sense, this family defines message size-efficient IPT protocols. According to the way the general condition is implemented, different IPT protocols can be obtained. Two of them are exhibited. Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1. INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal. A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network. Moreover, message transfer delays are finite but unpredictable. This computation model defines what is known as the asynchronous distributed system model. It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads. Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general. Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18]. More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other. The causal past of an event e is the set of events from which e is causally dependent. Events that are not causally dependent are said to be concurrent. Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce. The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process. In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not. Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]). It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15]. In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant. In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation. Being a strict partial order, the causality relation is transitive. As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors. This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors. Those applications are mainly related to the analysis of distributed computations. Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16]. It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice. More generally, these applications are interested in the very structure of the causal past. In this context, the determination of the immediate predecessors becomes a major issue [6]. Additionally, in some circumstances, this determination has to satisfy behavior constraints. If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages. When the immediate predecessors are used to monitor the computation, it has to be done on the fly. We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events. This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation. Solving this problem requires tracking causality, hence using vector clocks. Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events. Their aim was to reduce the size of timestamps attached to messages. An efficient vector clock implementation suited to systems with fifo channels is proposed in [19]. Another efficient implementation that does not depend on channel ordering property is described in [11]. The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast. However, none of these papers considers the IPT problem. This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof. Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?. This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols. From a methodological point of view the paper uses a top-down approach. It states abstract properties from which more concrete properties and protocols are derived. The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system). In that sense, this family defines low cost IPT protocols when we consider the message size. In addition to efficiency, the proposed approach has an interesting design property. Namely, the family is incrementally built in three steps. The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events. Then, a general condition is stated to reduce the size of the control information carried by messages. Finally, according to the way this condition is implemented, three IPT protocols are obtained. The paper is composed of seven sections. Sections 2 introduces the computation model, vector clocks and the notion of relevant events. Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes). Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition. Section 6 provides a simulation study comparing the behaviors of the proposed protocols. Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted. They can be found in [1].) 2. MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages. A distributed computation describes the execution of a distributed program. The execution of a local program gives rise to a sequential process. Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation. Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj. We assume that each message is unique and a process does not send messages to itself1 . Message transmission delays are finite but unpredictable. Moreover, channels are not necessarily fifo. Process speeds are positive but arbitrary. In other words, the underlying computation model is asynchronous. The local program associated with Pi can include send, receive and internal statements. The execution of such a statement produces a corresponding send/receive/internal event. These events are called primitive events. Let ex i be the x-th event produced by process Pi. The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi. Let H = âªn i=1Hi be the set of events produced by a distributed computation. This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered. It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j . Clearly the restriction of hb â to Hi, for a given i, is a total order. Thus we will use the notation ex i < ey i iff x < y. Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi. If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15]. An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15]. In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate. Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20]. The left part of Figure 1 depicts a distributed computation using the classical space-time diagram. In this figure, only relevant events are represented. The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events. Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f). The poset (R, â) constitutes an abstraction of the distributed computation [7]. In the following we consider a distributed computation at such an abstraction level. Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred). Each relevant event is identified by a pair (process id, sequence number) (see Figure 1). Definition 1. The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e). We have â (e) = {f â R | f hb â e}. Note that, if e â R then â (e) = {f â R | f â e}. In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}. The following properties are immediate consequences of the previous definitions. Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events. Definition 2. Let e â Hi. For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}. When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event). Let us consider the event e identified (2,2) in Figure 1. We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1). The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â. These properties follow directly from the definitions. Let e â Hi. LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j). LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16]. A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first). More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi. Note that V Ci[i] counts the number of relevant events produced so far by Pi. When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci. Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2). Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0]. VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci. VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci. Let m.V C denote this value. VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3. IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1). Then, some technical properties of immediate predecessors are stated and proved (Section 3.2). These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3). This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency). Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3. The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors. Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation). As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not. First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event. Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4. Let e â Hi. The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)). It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e). When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ). The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â. They will be used to design and prove the protocols solving the IPT problem. To ease the reading of the paper, their proofs are presented in Appendix A. The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1). So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1. If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events. If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2. Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j). The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process. So, the immediate predecessors of e are either those of pred(e) or those of send(m). On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m). Lemma 3. Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors. From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)). Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â). To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e). More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e). As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci. Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1. It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi. It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m). More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j). So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2. Moreover, IPi must be updated upon the occurrence of each event. In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi. In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not. Thus, the value of IPi just after the occurrence of event e must keep track of this event. The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2). The timestamp associated with a relevant event e is denoted e.TS. R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0]. R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP). R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3. Theorem 1. The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4. A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?. First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1). It is then shown (Section 4.2) that this condition is both sufficient and necessary. However, this general condition cannot be locally evaluated by a process that is about to send a message. Thus, locally evaluable approximations of this general condition must be defined. To each approximation corresponds a protocol, implemented with additional local data structures. In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem. This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3). Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k]. In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj. Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj. This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary). Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0). These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5. K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj. A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]). Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k]. Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k]. Theorem 2. When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5. A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k). Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]). But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible. Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k). Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k). Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur. Hence the idea to define evaluable approximations of the general condition. Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K . Hence, the definition of a correct evaluable approximation: Definition 6. A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k). This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2. Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false. This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector). The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions. Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot. More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not. But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0. So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]. To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk). Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1). Let us now examine the design of such a predicate (denoted ci). First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself. Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j]. Thus, âj = i : ci(j, j) must be true. Now, let us consider the case where j = i and j = k (Figure 2). Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]). As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true. In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]). Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k]. In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k). It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0. M2 When Pi sends a message: no update of Mi occurs. M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3. The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].) Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k]. Theorem 3. Let m be a message sent by Pi to Pj . Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)). We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows. RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1. RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0. RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}. RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update. In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3). But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi. So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event. Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0). Let us first observe that the management of IPi[k] is governed by the application program. More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k]. Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]). The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1. This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples. We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors. The previous IPT matrix-based protocol (Section 5.2) is modified in the following way. The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi). RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}. RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0. The reader can easily verify that this setting correctly implements the matrix. Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information. More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi. In contrast, the protocol described in Section 5.2 used only a direct transmission of this information. In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ). The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one. It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked. It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6. EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols. This comparison is done with a simulation study. IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false). IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples. Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors. This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors. To this end, it compares IPT2 and IPT3 with regard to IPT1. More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1. For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples. The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features. These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events. Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed. Internal events have not been considered. Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions). The senders of messages are chosen according to a random law. To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator. Message transmission delays follow a standard normal distribution. Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting. We set to 10 the number of processes participating to a distributed computation. The number of communication events during the simulation has been set to 10 000. The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation. With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events. The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment. As noted previously, the simulator can be fed with a given scenario. This allows to analyze the worst case scenarios for IPT2 and IPT3. These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event). Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d. These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis). From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d). Let us consider the worst scenario. In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0. In that case, the condition âk : K(m, k) is satisfied. As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied. Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep. The same occurs in Figure 3.d (that depicts the worst case scenario). Then the slope of these curves decreases and remains constant until the end of the simulation. In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0). Figure 3.b displays an interesting feature. It considers Î» = 100. As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures. The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages. This shows the importance of matrix Mi. Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions. The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%. Finally, Figure 3.c underlines even more the importance 217 of matrix Mi. When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient. Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results. IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1. The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi. Its use is quite significant but mainly depends on the time distribution followed by the relevant events. On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples. However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken. In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information. This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1. Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%. On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved. This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken. Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved. With n = 10, adding 10 booleans to a triple does not substantially increases its size. The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7. CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem. It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors. The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes). In that sense, this family defines message size-efficient IPT protocols. According to the way the general condition is implemented, different IPT protocols can be obtained. Three of them have been described and analyzed with simulation experiments. Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events. Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi). The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned. Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8. REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations. Res. Report #1344, IRISA, Univ. Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting. Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc. TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations. Proc. ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations. Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols. Proc. SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints. IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations. IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System. Comm. ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties. Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems. Proc. Int. Conf. Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment. JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems. IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks. IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints. IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219",
    "original_translation": "Seguimiento de los predecesores inmediatos en los cÃ¡lculos distribuidos Emmanuelle Anceaume Jean-Michel HÂ´Eltary Michel Raynal Irisa, Campus Beaulieu 35042 Rennes Cedex, France FirstName.lastname@irisa.fr Aver Ractation A Guhal se modela como un conjunto parcialmente ordenado de eventos relevantes (el relevanteLos eventos son un subconjunto de los eventos primitivos producidos por el cÃ¡lculo). Un importante problema de computaciÃ³n distribuida relacionada con la causalidad, que llamamos al problema de seguimiento de predecesores inmediatos (IPT), consiste en asociar con cada evento relevante, sobre la marcha y sin usar mensajes de control adicionales, el conjunto de eventos relevantes que son sus predecesores inmediatos enel orden parcial. Entonces, IPT es el cÃ¡lculo sobre la marcha de la reducciÃ³n transitiva (es decir, diagrama de Hasse) de la relaciÃ³n de causalidad definida por un cÃ¡lculo distribuido. Este documento aborda el problema IPT: presenta una familia de protocolos que proporciona a cada evento relevante una marca de tiempo que identifica exactamente a sus predecesores inmediatos. La familia se define mediante una condiciÃ³n general que permite que los mensajes de aplicaciÃ³n sean informaciÃ³n de control de pildo cuyo tamaÃ±o puede ser menor que n (el nÃºmero de procesos). En ese sentido, esta familia define los protocolos IPT del tamaÃ±o del tamaÃ±o del mensaje. SegÃºn la forma en que se implementa la condiciÃ³n general, se pueden obtener diferentes protocolos IPT. Dos de ellos se exhiben. CategorÃ­as y descriptores de sujetos C.2.4 [Sistemas distribuidos]: TÃ©rminos generales de cÃ¡lculos distribuidos asÃ­ncronos 1. IntroducciÃ³n Un cÃ¡lculo distribuido consiste en un conjunto de procesos que cooperan para lograr un objetivo comÃºn. Una caracterÃ­stica principal de estos cÃ¡lculos radica en el hecho de que los procesos no comparten una memoria global comÃºn y se comunican solo intercambiando mensajes a travÃ©s de una red de comunicaciÃ³n. AdemÃ¡s, los retrasos en la transferencia de mensajes son finitos pero impredecibles. Este modelo de cÃ¡lculo define lo que se conoce como el modelo de sistema distribuido asÃ­ncrono. Es particularmente importante ya que incluye sistemas que abarcan grandes Ã¡reas geogrÃ¡ficas y sistemas que estÃ¡n sujetos a cargas impredecibles. En consecuencia, los conceptos, herramientas y mecanismos desarrollados para sistemas distribuidos asincrÃ³nicos revelan que son importantes y generales. La causalidad es un concepto clave para comprender y dominar el comportamiento de los sistemas distribuidos asincrÃ³nicos [18]. MÃ¡s precisamente, dados dos eventos E y F de un cÃ¡lculo distribuido, un problema crucial que debe resolverse en muchas aplicaciones distribuidas es saber si estÃ¡n causalmente relacionados, es decir, si la ocurrencia de una de ellas es una consecuencia dela apariciÃ³n del otro. El pasado causal de un evento E es el conjunto de eventos de los que E depende causalmente. Se dice que los eventos que no son causalmente dependientes son concurrentes. Se han introducido relojes vectoriales [5, 16] para permitir que los procesos rastreen la causalidad (y la concurrencia) entre los eventos que producen. La marca de tiempo de un evento producido por un proceso es el valor actual del reloj vectorial del proceso correspondiente. De esa manera, al asociar las marcas de tiempo del vector con eventos, es posible decidir de forma segura si dos eventos estÃ¡n causalmente relacionados o no. Por lo general, de acuerdo con el problema en el que se enfoca, un diseÃ±ador solo estÃ¡ interesado en un subconjunto de los eventos producidos por una ejecuciÃ³n distribuida (por ejemplo, solo los eventos de punto de control son significativos cuando uno estÃ¡ interesado en determinar los puntos de control globales consistentes [12]). Se deduce que la detecciÃ³n de dependencias causales (o concurrencia) de todos los eventos del cÃ¡lculo distribuido no es deseable en todas las aplicaciones [7, 15]. En otras palabras, entre todos los eventos que pueden ocurrir en un cÃ¡lculo distribuido, solo un subconjunto de ellos es relevante. En este artÃ­culo, estamos interesados en la restricciÃ³n de la relaciÃ³n de causalidad con el subconjunto de eventos definidos como los eventos relevantes del cÃ¡lculo. Al ser un orden parcial estricto, la relaciÃ³n de causalidad es transitiva. Como consecuencia, entre todos los eventos relevantes que preceden causalmente a un evento relevante dado, solo un subconjunto son sus predecesores inmediatos: esos son los eventos F de modo que no hay un evento relevante en ningÃºn camino causal de F a E.Desafortunadamente, dada solo la marca de tiempo del vector asociado con un evento, no es posible determinar quÃ© eventos de su pasado causal son sus predecesores inmediatos. Esto proviene del hecho de que la marca de tiempo del vector asociada con E determina, para cada proceso, el Ãºltimo evento relevante pertenece al pasado causal de E, pero dicho evento no es necesariamente un predecesor inmediato de e.Sin embargo, algunas aplicaciones [4, 6] requieren asociarse con cada evento relevante solo el conjunto de sus predecesores inmediatos. Esas aplicaciones estÃ¡n relacionadas principalmente con el anÃ¡lisis de cÃ¡lculos distribuidos. Algunos de esos anÃ¡lisis requieren la construcciÃ³n de la red de cortes consistentes producidos por el cÃ¡lculo [15, 16]. Se muestra en [4] que el seguimiento de predecesores inmediatos permite un eficiente en la construcciÃ³n de la mosca de esta red. En tÃ©rminos mÃ¡s generales, estas aplicaciones estÃ¡n interesadas en la estructura misma del pasado causal. En este contexto, la determinaciÃ³n de los predecesores inmediatos se convierte en un problema importante [6]. AdemÃ¡s, en algunas circunstancias, esta determinaciÃ³n tiene que satisfacer las limitaciones de comportamiento. Si el patrÃ³n de comunicaciÃ³n del cÃ¡lculo distribuido no puede modificarse, la determinaciÃ³n debe hacerse sin agregar mensajes de control. Cuando los predecesores inmediatos se utilizan para monitorear el cÃ¡lculo, debe hacerse en la marcha. Llamamos al seguimiento del predecesor inmediato (IPT) el problema que consiste en determinar sobre la mosca y sin mensajes adicionales, los predecesores inmediatos de los eventos relevantes. Este problema consiste en realidad para determinar la reducciÃ³n transitiva (diagrama de HASSE) del grÃ¡fico de causalidad generado por los eventos relevantes del cÃ¡lculo. Resolver este problema requiere un seguimiento de la causalidad, por lo tanto, utilizando relojes vectoriales. Los trabajos anteriores han abordado la implementaciÃ³n eficiente de los relojes vectoriales para rastrear la dependencia causal de los eventos relevantes. Su objetivo era reducir el tamaÃ±o de las marcas de tiempo adjuntas a los mensajes. En [19] se propone una implementaciÃ³n eficiente de reloj vectorial adecuado para sistemas con canales FIFO. Otra implementaciÃ³n eficiente que no depende de la propiedad de ordenamiento de canales se describe en [11]. La nociÃ³n de barrera causal se introduce en [2, 17] para reducir el tamaÃ±o de la informaciÃ³n de control requerida para implementar multidifusiÃ³n causal. Sin embargo, ninguno de estos documentos considera el problema IPT. Este problema se ha abordado por primera vez (hasta donde sabemos) en [4, 6] donde se describe un protocolo IPT, pero sin prueba de correcciÃ³n. AdemÃ¡s, en este protocolo, las marcas de tiempo adjuntas a los mensajes son de tamaÃ±o n.Esto plantea la siguiente pregunta que, hasta donde sabemos, nunca ha sido respondida: Â¿hay tÃ©cnicas eficientes de implementaciÃ³n del reloj vectorial que sean adecuadas para el problema IPT? Este documento tiene tres contribuciones principales: (1) una respuesta positiva a la pregunta abierta anterior, (2) el diseÃ±o de una familia de protocolos IPT eficientes y (3) una prueba de correcciÃ³n formal de los protocolos asociados. Desde un punto de vista metodolÃ³gico, el documento utiliza un enfoque de arriba hacia abajo. Establece propiedades abstractas de las cuales se derivan mÃ¡s propiedades y protocolos de concreto. La familia de protocolos IPT se define mediante una condiciÃ³n general que permite que los mensajes de aplicaciÃ³n sean informaciÃ³n de control de respaldo cuyo tamaÃ±o puede ser mÃ¡s pequeÃ±o que el tamaÃ±o del sistema (es decir, menor que el nÃºmero de procesos que componen el sistema). En ese sentido, esta familia define protocolos IPT de bajo costo cuando consideramos el tamaÃ±o del mensaje. AdemÃ¡s de la eficiencia, el enfoque propuesto tiene una propiedad de diseÃ±o interesante. A saber, la familia se construye incrementalmente en tres pasos. El protocolo bÃ¡sico de reloj vectorial se enriquece primero al agregar a cada proceso un vector booleano cuya gestiÃ³n permite que los procesos rastreen los eventos predecesor inmediatos. Luego, se establece una condiciÃ³n general para reducir el tamaÃ±o de la informaciÃ³n de control llevada por los mensajes. Finalmente, de acuerdo con la forma en que se implementa esta condiciÃ³n, se obtienen tres protocolos IPT. El documento estÃ¡ compuesto por siete secciones. Las secciones 2 introducen el modelo de cÃ¡lculo, los relojes vectoriales y la nociÃ³n de eventos relevantes. La SecciÃ³n 3 presenta el primer paso de la construcciÃ³n que da como resultado un protocolo IPT en el que cada mensaje lleva un reloj vectorial y una matriz booleana, ambos de tamaÃ±o N (el nÃºmero de procesos). La SecciÃ³n 4 mejora este protocolo al proporcionar la condiciÃ³n general que permite que un mensaje lleve la informaciÃ³n de control cuyo tamaÃ±o puede ser menor que n.La SecciÃ³n 5 proporciona instanciaciones de esta condiciÃ³n. La SecciÃ³n 6 proporciona un estudio de simulaciÃ³n que compara los comportamientos de los protocolos propuestos. Finalmente, la SecciÃ³n 7 concluye el documento.(Debido a limitaciones de espacio, se omiten pruebas de lemas y teoremas. Se pueden encontrar en [1].) 2. Modelo y reloj Vector 2.1 CÃ¡lculo distribuido Un programa distribuido estÃ¡ compuesto por programas locales secuenciales que se comunican y sincronizan solo al intercambiar mensajes. Un cÃ¡lculo distribuido describe la ejecuciÃ³n de un programa distribuido. La ejecuciÃ³n de un programa local da lugar a un proceso secuencial. Sea {P1, P2 ,..., Pn} serÃ¡ el conjunto finito de procesos secuenciales del cÃ¡lculo distribuido. Cada par ordenado de procesos de comunicaciÃ³n (PI, PJ) estÃ¡ conectado por un canal confiable CIJ a travÃ©s del cual PI puede enviar mensajes a PJ. Suponemos que cada mensaje es Ãºnico y que un proceso no envÃ­a mensajes a sÃ­ mismo1. Los retrasos en la transmisiÃ³n de mensajes son finitos pero impredecibles. AdemÃ¡s, los canales no son necesariamente FIFO. Las velocidades de proceso son positivas pero arbitrarias. En otras palabras, el modelo de cÃ¡lculo subyacente es asÃ­ncrono. El programa local asociado con PI puede incluir declaraciones de envÃ­o, recepciÃ³n y internas. La ejecuciÃ³n de dicha declaraciÃ³n produce un evento de envÃ­o/recepciÃ³n/interno correspondiente. Estos eventos se llaman eventos primitivos. Let Ex I Be the X-Th Event producido por Process Pi. La secuencia HI = E1 I E2 i...ex i...constituye la historia de Pi, denotada HI. Sea h = âªn i = 1hi el conjunto de eventos producidos por un cÃ¡lculo distribuido. Este conjunto estÃ¡ estructurado como un orden parcial por Lamports ocurriÃ³ antes de la relaciÃ³n [14] (denotado Hb â) y se define de la siguiente manera: Ex I Hb â Ey J si y solo si (i = j â§ x + 1 = y) (precedencia local) â¨ (âm: ex i = enviar (m) â§ ey j = recibir (m)) (msg prec.) â¨ (â ez k: ex i hb â ez k â§ e z k hb â ey j) (cierre transitivo).Max (Ex I, EY J) es una funciÃ³n parcial definida solo cuando se ordenan Ex I y Ey J. Se define de la siguiente manera: max (ex i, ey j) = ex i si ey j hb â ex i, max (ex i, ey j) = ey i if ex i hb â ey j. Claramente, la restricciÃ³n de HB â a HI, para un dado I, es un orden total. Por lo tanto, usaremos la notaciÃ³n ex i <ey i iff x <y. A lo largo del documento, utilizaremos la siguiente notaciÃ³n: si E â Hi no es el primer evento producido por PI, entonces Pred (E) denota el evento inmediatamente anterior a E en la secuencia HI. Si E es el primer evento producido por PI, entonces Pred (e) se denota por â¥ (lo que significa que no hay tal evento), y âe â Hi: â¥ <e.El orden parcial BH = (H, Hb â) constituye un modelo formal del cÃ¡lculo distribuido con el que se asocia.1 Esta suposiciÃ³n es solo para obtener protocolos simples.211 p1 p2 p3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3) (1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1](1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figura 1: Eventos relevantes y grÃ¡fico de predecesores inmediatos.(Diagrama de Hasse) 2.2 Eventos relevantes para un observador dado de un cÃ¡lculo distribuido, solo algunos eventos son relevantes2 [7, 9, 15]. Un ejemplo interesante de lo que es una observaciÃ³n es la detecciÃ³n de predicados en estados globales consistentes de un cÃ¡lculo distribuido [3, 6, 8, 9, 13, 15]. En ese caso, un evento relevante corresponde a la modificaciÃ³n de una variable local involucrada en el predicado global. Otro ejemplo es el problema del punto de control donde un evento relevante es la definiciÃ³n de un punto de control local [10, 12, 20]. La parte izquierda de la Figura 1 muestra un cÃ¡lculo distribuido utilizando el diagrama clÃ¡sico de espacio-tiempo. En esta figura, solo se representan eventos relevantes. La secuencia de eventos relevantes producidos por el proceso Pi se denota por RI, y r = âªn i = 1ri â h denota el conjunto de todos los eventos relevantes. Sea â la relaciÃ³n en r definida de la siguiente manera: â (e, f) â R Ã R: (E â F) â (E Hb â F). El POSET (R, â) constituye una abstracciÃ³n del cÃ¡lculo distribuido [7]. A continuaciÃ³n, consideramos un cÃ¡lculo distribuido a tal nivel de abstracciÃ³n. AdemÃ¡s, sin pÃ©rdida de generalidad, consideramos que el conjunto de eventos relevantes es un subconjunto de los eventos internos (si se debe observar un evento de comunicaciÃ³n, se puede generar un evento interno relevante justo antes de un envÃ­o y justo despuÃ©s de que ocurriera un evento de comunicaciÃ³n de recibir). Cada evento relevante se identifica mediante un par (ID de proceso, nÃºmero de secuencia) (ver Figura 1). DefiniciÃ³n 1. El pasado causal relevante de un evento e â H es el subconjunto (parcialmente ordenado) de eventos relevantes f tal que f hb â e.Se denota â (e). Tenemos â (e) = {f â R |F Hb â E}. Tenga en cuenta que, si e â R entonces â (e) = {f â R |F â E}. En el cÃ¡lculo descrito en la Figura 1, tenemos, para el evento E identificado (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}. Las siguientes propiedades son consecuencias inmediatas de las definiciones anteriores. Sea e â H. cp1 si e no es un evento de recepciÃ³n, entonces â (e) = 8 <: â if pred (e) = â¥, â (pred (e)) âª {pred (e)} si pred (e)â R, â (pred (e)) si pred (e) â R. cp2 si e es un evento de recepciÃ³n (de un mensaje m), entonces â (e) = 8 >> <>>: â (enviar (m)) si pred (e) = â¥, â (pred (e)) âª â (enviar (m)) âª {pred (e)} si pred (e) â R, â (pred (e)) âª â (enviar(m)) Si pred (e) â R. 2, esos eventos a veces se llaman eventos observables. DefiniciÃ³n 2. Deje e â HI. Para cada j tal que â (e) â© rj = â, el Ãºltimo evento relevante de PJ con respecto a E es: LASTR (E, J) = Max {f |f â â (e) â© rj}. Cuando â (e) â© rj = â, lastr (e, j) se denota por â¥ (lo que significa que no hay tal evento). Consideremos el evento E identificado (2,2) en la Figura 1. Tenemos LASTR (E, 1) = (1, 2), LASTR (E, 2) = (2, 1), LASTR (E, 3) = (3, 1). Las siguientes propiedades relacionan los eventos LASTR (E, J) y LASTR (F, J) para todos los predecesores F de E en la relaciÃ³n Hb â. Estas propiedades siguen directamente de las definiciones. Deje e â HI. Lr0 âe â Hi: Lastre, i) = 8 <: â¥ if pred (e) = â¥, pred (e) si pred (e) â R, lastrre (pred (e), i) si pred (e) âR. LR1 Si E no es un evento de recibo: âj = I: LASTR (E, J) = LASTR (PRED (E), J). LR2 Si E es un evento de recepciÃ³n de M: âj = I: LASTR (E, J) = Max (LASTR (Pred (E), J), LASTR (SEND (M), J)).2.3 DefiniciÃ³n del sistema de reloj vectorial como un concepto fundamental asociado con la teorÃ­a de la causalidad, los relojes vectoriales se han introducido en 1988, simultÃ¡neamente e independientemente por Fidge [5] y Mattern [16]. Un sistema de reloj vectorial es un mecanismo que asocia las marcas de tiempo con eventos de tal manera que la comparaciÃ³n de sus marcas de tiempo indica si los eventos correspondientes estÃ¡n o no relacionados causalmente (y, si lo son, cuÃ¡l es el primero). MÃ¡s precisamente, cada proceso PI tiene un vector de enteros v Ci [1..n] de tal manera que v ci [j] es el nÃºmero de eventos relevantes producidos por PJ, que pertenecen al pasado causal relevante actual de PI. Tenga en cuenta que v Ci [i] cuenta el nÃºmero de eventos relevantes producidos hasta ahora por PI. Cuando un proceso PI produce un evento E (relevante) E, se asocia con una marca de tiempo vectorial cuyo valor (denotado e.v c) es igual al valor actual de v Ci. ImplementaciÃ³n del reloj vectorial La siguiente implementaciÃ³n de los relojes vectoriales [5, 16] se basa en la observaciÃ³n de que âi, âe â Hi, âj: e.v ci [j] = y â lastr (e, j) = ey j where e.vCI es el valor de V Ci justo despuÃ©s de la apariciÃ³n de E (esta relaciÃ³n resulta directamente de las propiedades LR0, LR1 y LR2). Cada proceso PI administra su reloj vector V CI [1..n] de acuerdo con las siguientes reglas: VC0 v Ci [1..n] se inicializa a [0 ,..., 0]. VC1 cada vez que produce un evento relevante E, PI incrementa su entrada de reloj Vector v Ci [i] (v Ci [i]: = v ci [i] + 1) a 212 indica que ha producido un evento mÃ¡s relevante, luego PiAsociado con E la marca de tiempo E.V C = V CI. VC2 Cuando un proceso Pi envÃ­a un mensaje m, se adjunta a M el valor actual de v Ci. Deje que M.V C denote este valor. VC3 Cuando Pi recibe un mensaje M, actualiza su reloj vectorial de la siguiente manera: âK: V Ci [k]: = max (v ci [k], m.v c [k]).3. Predecesores inmediatos En esta secciÃ³n, se establece el problema de seguimiento del predecesor inmediato (IPT) (SecciÃ³n 3.1). Luego, algunas propiedades tÃ©cnicas de los predecesores inmediatos se declaran y proban (SecciÃ³n 3.2). Estas propiedades se utilizan para diseÃ±ar el protocolo IPT bÃ¡sico y demostrar su correcciÃ³n (SecciÃ³n 3.3). Este protocolo IPT, previamente presentado en [4] sin prueba, se construye a partir de un protocolo de reloj vectorial agregando la gestiÃ³n de una matriz booleana local en cada proceso.3.1 El problema IPT como se indica en la introducciÃ³n, algunas aplicaciones (por ejemplo, anÃ¡lisis de ejecuciones distribuidas [6], la detecciÃ³n de propiedades distribuidas [7]) requieren determinar (sobre la marcha y sin mensajes adicionales) la reducciÃ³n transitiva de larelaciÃ³n â (es decir, no debemos considerar la dependencia causal transitiva). Dados dos eventos relevantes F y E, decimos que F es un predecesor inmediato de E If F â E y no hay un evento relevante G tal que F â G â E.DefiniciÃ³n 3. El problema de seguimiento del predecesor inmediato (IPT) consiste en asociarse con cada evento relevante E El conjunto de eventos relevantes que son sus predecesores inmediatos. AdemÃ¡s, esto debe hacerse en la mosca y sin un mensaje de control adicional (es decir, sin modificar el patrÃ³n de comunicaciÃ³n del cÃ¡lculo). Como se seÃ±alÃ³ en la introducciÃ³n, el problema IPT es el cÃ¡lculo del diagrama HASSE asociado con el conjunto parcialmente ordenado de los eventos relevantes producidos por un cÃ¡lculo distribuido.3.2 Propiedades formales de IPT Para diseÃ±ar un protocolo que resuelva el problema IPT, es Ãºtil considerar la nociÃ³n de predecesor relevante inmediato de cualquier evento, ya sea relevante o no. Primero, observamos que, por definiciÃ³n, el predecesor inmediato en PJ de un evento E es necesariamente el evento LASTR (E, J). Segundo, para que LASTR (E, J) sea predecesor inmediato de E, no debe haber otro evento LASTR (E, K) en un camino entre LASTR (E, J) y E.Estas observaciones se formalizan en la siguiente definiciÃ³n: DefiniciÃ³n 4. Deje e â HI. El conjunto de predecesores relevantes inmediatos de E (IP denotado (e)), es el conjunto de eventos relevantes LASTR (E, J) (J = 1, ..., N) de tal manera que âK: LASTR (E, J) â â (lastr (e, k)). De esta definiciÃ³n se deduce que ip (e) â {lastr (e, j) | j = 1 ,..., n} â â (e). Cuando consideramos la Figura 1, el grÃ¡fico representado en su parte derecha describe los predecesores inmediatos de los eventos relevantes del cÃ¡lculo definido en su parte izquierda, mÃ¡s precisamente, un borde dirigido (E, F) significa que el evento relevante es inmediatopredecesor del evento relevante F (3). Los siguientes lemas muestran cÃ³mo el conjunto de predecesores inmediatos de un evento estÃ¡ relacionado con los de sus predecesores en la relaciÃ³n Hb â. Se utilizarÃ¡n para diseÃ±ar y demostrar que los protocolos resuelven el problema IPT. Para aliviar la lectura del documento, sus pruebas se presentan en el ApÃ©ndice A. El significado intuitivo del primer lema es el siguiente: si E no es un evento de recepciÃ³n, todas las rutas causales que llegan a E tienen pred (e) como evento siguiente (ver CP1). Entonces, si Pred (e) es un evento relevante, todos los eventos relevantes que pertenecen a su pasado causal relevante se separan de E por pred (e), y Pred (e) se convierte en el Ãºnico predecesor inmediato de e.En otras palabras, el evento pred (e) constituye un restablecimiento de W.R.T.El conjunto de predecesores inmediatos de e.Por otro lado, si el pred (e) no es relevante, no separa su pasado causal relevante de e.Lema 1. Si E no es un evento de recibir, IP (e) es igual a: â if pred (e) = â¥, {pred (e)} if pred (e) â R, ip (pred (e)) si pred (e) â R. El significado intuitivo de la prÃ³xima lema es el siguiente: si E es un evento de recepciÃ³n Recibe (m), las rutas causales que llegan a E tienen pred (e) o envÃ­an (m) como eventos siguientes. Si Pred (e) es relevante, como se explica en el lema anterior, este evento se esconde de E todo su pasado causal relevante y se convierte en un predecesor inmediato de E.Con respecto a los Ãºltimos predecesores relevantes de SEND (M), solo aquellos que no son predecesores de Pred (E) siguen siendo predecesores inmediatos de E.Lema 2. Sea e â Hi sea el evento de recepciÃ³n de un mensaje m.If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m), j), ip (enviar (m)) â© rj if lastr (pred (e), j) <lastr (send (m), j). El significado intuitivo de la prÃ³xima lema es el siguiente: si E es un evento de recepciÃ³n de recepciÃ³n (m), y Pred (e) no es relevante, los Ãºltimos eventos relevantes en el pasado causal relevante de E se obtienen fusionando los de Pred (e) y los de enviar (m) y tomando lo Ãºltimo en cada proceso. Entonces, los predecesores inmediatos de E son los de Pred (E) o los de Send (M). En un proceso en el que los Ãºltimos eventos relevantes de Pred (e) y Send (m) son el mismo evento F, ninguno de los caminos de F a E debe contener otro evento relevante y, por lo tanto, F debe ser predecesor inmediato de ambos eventospred (e) y enviar (m). Lema 3. Sea e â Hi sea el evento de recepciÃ³n de un mensaje m.Si pred (e) â Ri, entonces, âj, ip (e) â© rj es igual a: ip (pred (e)) â© rj if lastr (pred (e), j)> lastr (send (m),j), ip (send (m)) â© rj if lastr (pred (e), j) <lastr (send (m), j) ip (pred (e)) â©ip (send (m)) â©rj ifLASTR (Pred (E), J) = LASTR (SEND (M), J).3.3 Un protocolo IPT bÃ¡sico El protocolo bÃ¡sico propuesto aquÃ­ se asocia con cada evento relevante E, un atributo que codifica el conjunto IP (e) de sus predecesores inmediatos. De los lemas anteriores, el conjunto 3 en realidad, este grÃ¡fico es el diagrama de Hasse del orden parcial asociado con el cÃ¡lculo distribuido.213 IP (e) de cualquier evento E depende de los conjuntos IP de los eventos pred (e) y/o envÃ­an (m) (cuando e = recibir (m)). De ahÃ­ la idea de introducir una estructura de datos que permita administrar los conjuntos IP inductivamente en el POSET (H, Hb â). Para tener en cuenta la informaciÃ³n de Pred (E), cada proceso administra una matriz booleana IPI de tal manera que, âe â Hi El valor de IPI cuando ocurre E (denotado e.IPI) es la representaciÃ³n de la matriz booleana del conjunto de ip (e). MÃ¡s precisamente, âj: ipi [j] = 1 â lastr (e, j) â Ip (e). Como se recordÃ³ en la SecciÃ³n 2.3, el conocimiento de LASTR (E, J) (para cada E y cada J) se basa en la gestiÃ³n de los vectores v CI. Por lo tanto, el set ip (e) se determina de la siguiente manera: ip (e) = {ey j |e.v ci [j] = y â§ e.ipi [j] = 1, j = 1 ,..., n} Cada proceso PI actualiza IPI de acuerdo con los Lemmas 1, 2 y 3: 1. Resulta de Lemma 1 que, si E no es un evento de recepciÃ³n, el valor actual de IPI es suficiente para determinar E.IPI. Resulta de Lemmas 2 y 3 que, si E es un evento de recepciÃ³n (e = recibir (m)), entonces la determinaciÃ³n de E.IPI implica informaciÃ³n relacionada con el envÃ­o del evento (m). MÃ¡s precisamente, esta informaciÃ³n involucra IP (Send (M)) y la marca de tiempo de Send (M) (necesaria para comparar los eventos LASTR (SEND (M), J) y LASTR (Pred (E), J), para cada J). Entonces, ambos vectores envÃ­an (m) .v cj y envÃ­an (m) .ipj (suponiendo que envÃ­e (m) producido por PJ) se adjuntan al mensaje m.2. AdemÃ¡s, IPI debe actualizarse sobre la ocurrencia de cada evento. De hecho, el valor de IPI justo despuÃ©s de un evento E se usa para determinar el valor succ (e) .IPI. En particular, como se indica en los lemas, la determinaciÃ³n de succ (e) .IPI depende de si E es relevante o no. Por lo tanto, el valor de IPI justo despuÃ©s de la ocurrencia del evento E debe realizar un seguimiento de este evento. El siguiente protocolo, presentado previamente en [4] sin prueba, garantiza la gestiÃ³n correcta de las matrices v CI (como en la SecciÃ³n 2.3) y IPI (segÃºn los lemas de la SecciÃ³n 3.2). La marca de tiempo asociada con un evento relevante E se denota E.Ts. InicializaciÃ³n R0: tanto V Ci [1..N] como IPI [1..n] se inicializan a [0 ,..., 0]. R1 cada vez que produce un evento relevante e: - Pi Associates con E la marca de tiempo E.TS definido de la siguiente manera e.ts = {(k, v ci [k]) |Ipi [k] = 1}, - Pi incrementa su entrada de reloj vector V Ci [i] (es decir, ejecuta v Ci [i]: = v Ci [i] + 1), - Pi restablece IPI: â = i: IPI[]: = 0;Ipi [i]: = 1. R2 Cuando Pi envÃ­a un mensaje M a PJ, se adjunta a M los valores actuales de V CI (denotado M.V C) y la matriz booleana IPI (denotada M.IP). R3 Cuando recibe un mensaje M de PJ, Pi ejecuta las siguientes actualizaciones: âk â [1..N]: Caso V Ci [K] <M.V C [K] entoncesv Ci [K]: = M.V C [K];Ipi [k]: = m.ip [k] v ci [k] = m.v c [k] y luego ipi [k]: = min (ipi [k], m.ip [k]) v ci [k]>M.V C [K] Luego omita el final de la prueba del siguiente teorema que se deduce directamente de Lemmas 1, 2 y 3. Teorema 1. El protocolo descrito en la SecciÃ³n 3.3 resuelve el problema IPT: para cualquier evento relevante E, la marca de tiempo E.TS contiene los identificadores de todos sus predecesores inmediatos y ningÃºn otro identificador de eventos.4. Una condiciÃ³n general que esta secciÃ³n aborda un problema previamente abierto, a saber, Â¿cÃ³mo resolver el problema IPT sin requerir que cada mensaje de aplicaciÃ³n tenga un reloj de vector completo y una matriz booleana completa? Primero, se puede omitir una condiciÃ³n general que caracteriza quÃ© entradas de vectores V CI y IPI se pueden omitir a partir de la informaciÃ³n de control adjunta a un mensaje enviado en el cÃ¡lculo (SecciÃ³n 4.1). Luego se muestra (SecciÃ³n 4.2) que esta condiciÃ³n es suficiente y necesaria. Sin embargo, esta condiciÃ³n general no puede evaluarse localmente mediante un proceso que estÃ© a punto de enviar un mensaje. Por lo tanto, se deben definir aproximaciones localmente evaluables de esta condiciÃ³n general. A cada aproximaciÃ³n corresponde un protocolo, implementado con estructuras de datos locales adicionales. En ese sentido, la condiciÃ³n general define una familia de protocolos IPT, que resuelven el problema previamente abierto. Este problema se aborda en la SecciÃ³n 5. 4.1 para transmitir o no transmitir informaciÃ³n de control, consideremos el protocolo IPT anterior (SecciÃ³n 3.3). La regla R3 muestra que un proceso PJ no actualiza sistemÃ¡ticamente cada entrada v CJ [k] cada vez que recibe un mensaje M de un proceso PI: no hay actualizaciÃ³n de V CJ [K] cuando v CJ [K] â¥ M.V C [K]. En tal caso, el valor M.V C [k] es inÃºtil y podrÃ­a omitirse a partir de la informaciÃ³n de control transmitida con M por PI a PJ. Del mismo modo, algunas entradas IPJ [k] no se actualizan cuando PI recibe un mensaje M de PI. Esto ocurre cuando 0 <v cj [k] = m.v c [k] â§ m.ip [k] = 1, o cuando v cj [k]> m.v c [k], o cuando m.v c [k] = 0 (En el Ãºltimo caso, como M.IP [k] = ipi [k] = 0, entonces no es necesaria actualizaciÃ³n de IPJ [k]). De manera diferente, algunas otras entradas se restablecen sistemÃ¡ticamente a 0 (esto ocurre cuando 0 <v Cj [k] = m.v c [k] â§ m.ip [k] = 0). Estas observaciones conducen a la definiciÃ³n de la condiciÃ³n k (m, k) que caracteriza quÃ© entradas de vectores v Ci y IPI pueden omitirse a partir de la informaciÃ³n de control adjunta a un mensaje M enviado por un proceso PI a un proceso PJ: DefiniciÃ³n 5. K (m, k) â¡ (enviar (m) .v ci [k] = 0) â¨ (enviar (m) .v ci [k] <pred (recibo (m)). V cj [k]) â¨;(Enviar (m) .v Ci [k] = pred (recibir (m)). V CJ [k]) â§ (enviar (m) .ipi [k] = 1).4.2 Una condiciÃ³n necesaria y suficiente, mostramos aquÃ­ que la condiciÃ³n k (m, k) es necesaria y suficiente para decidir quÃ© triples de la forma (k, envÃ­a (m) .v ci [k], send (m) .ipi[k]) se puede omitir en un mensaje saliente m enviado por PI a PJ. TambiÃ©n se denotarÃ¡ un triple adjunto a M (K, M.V C [K], M.IP [K]). Debido a las limitaciones de espacio, las pruebas de Lemma 4 y Lemma 5 se dan en [1].(La prueba del teorema 2 sigue directamente de estos lemas.) 214 LEMMA 4. (suficiencia) Si K (M, K) es verdadinÃºtil con respecto a la gestiÃ³n correcta de IPJ [K] y V CJ [k]. Lema 5. (necesidad) Si K (M, K) es falso, entonces el triple (K, M.V C [K], M.IP [K]) es necesario para garantizar la gestiÃ³n correcta de IPJ [K] y V CJ[K]. Teorema 2. Cuando un proceso PI envÃ­a M a un proceso PJ, la condiciÃ³n k (m, k) es necesaria y suficiente para no transmitir el triple (k, enviar (m) .v ci [k], enviar (m) .ipi [k]).5. Una familia de protocolos IPT basados en condiciones evaluables que resulta del teorema anterior que, si Pi podrÃ­a evaluar K (M, K) cuando envÃ­a M a PJ, esto nos permitirÃ­a mejorar el protocolo IPT anterior de la siguiente manera: en la reglaR2, el triple (k, v ci [k], ipi [k]) se transmite con m solo si Â¬k (m, k). AdemÃ¡s, la regla R3 se modifica adecuadamente para considerar solo los triples llevados por m.Sin embargo, como se mencionÃ³ anteriormente, Pi no puede evaluar localmente K (M, K) cuando estÃ¡ a punto de enviar m.MÃ¡s precisamente, cuando Pi envÃ­a M a PJ, Pi conoce los valores exactos de enviar (m) .v Ci [k] y enviar (m) .ipi [k] (son los valores actuales de v ci [k] e ipi[k]). Pero, en lo que respecta al valor de Pred (recibir (M)). V CJ [K], son posibles dos casos. Caso (i): si Pred (recibir (M)) Hb â Enviar (M), entonces PI puede saber el valor de Pred (recibir (M)). V CJ [K] y, en consecuencia, puede evaluar K (M, K). Caso (ii): si Pred (recibir (M)) y enviar (M) son concurrentes, PI no puede saber el valor de Pred (recibir (M)). V CJ [K] y, en consecuencia, no puede evaluar K (M, K). AdemÃ¡s, cuando envÃ­a M a PJ, sea cual sea el caso (i o II) que realmente ocurra, Pi no tiene forma de saber quÃ© caso ocurre. De ahÃ­ la idea de definir aproximaciones evaluables de la condiciÃ³n general. Sea K (M, K) una aproximaciÃ³n de K (M, K), que puede evaluarse mediante un proceso PI cuando envÃ­a un mensaje m.Para ser correctos, la CondiciÃ³n K debe asegurarse de que, cada vez que Pi deba transmitir un triple (k, v ci [k], ipi [k]) de acuerdo con el teorema 2 (es decir, cada vez Â¬k (m, k)),Entonces Pi transmite este triple cuando usa la condiciÃ³n k. Por lo tanto, la definiciÃ³n de una aproximaciÃ³n evaluable correcta: definiciÃ³n 6. Una condiciÃ³n k, localmente evaluable por un proceso cuando envÃ­a un mensaje m a otro proceso, es correcta si â (m, k): Â¬k (m, k) â Â¬k (m, k) o, de manera equivalente, â ((m, k): k (m, k) â k (m, k). Esta definiciÃ³n significa que un protocolo que evalÃºa K para decidir quÃ© triples debe adjuntarse a los mensajes, no se pierde los triples cuya transmisiÃ³n es requerida por el Teorema 2. Consideremos la condiciÃ³n constante (denotada K1), que siempre es falso, es decir, â (m, k): k1 (m, k) = falso. Esta aproximaciÃ³n trivialmente correcta de K en realidad corresponde al protocolo IPT particular descrito en la SecciÃ³n 3 (en el que cada mensaje lleva un reloj de vector completo y un vector booleano completo). La siguiente secciÃ³n presenta una mejor aproximaciÃ³n de K (denotÃ³ K2).5.1 Una condiciÃ³n evaluable basada en la matriz booleana K2 se basa en la observaciÃ³n de que la condiciÃ³n K estÃ¡ compuesta por subcondiciones. Algunos de ellos pueden ser pj envÃ­an (m) pi v ci [k] = x ipi [k] = 1 v cj [k] â¥ x recibir (m) Figura 2: la condiciÃ³n evaluable K2 evaluada localmente mientras que los demÃ¡s no pueden. MÃ¡s precisamente, k â¡ a â¨ Î± â¨ (Î² â§ b), donde a â¡ enviar (m) .v ci [k] = 0 y b â¡ enviar (m) .ipi [k] = 1 son localmente evaluables, mientras que Î±â¡ enviar (m) .v ci [k] <pred (recibir (m)). V cj [k] y Î² â¡ send (m) .v ci [k] = pred (recibir (m)). V CJ [k] no lo son. Pero, desde el cÃ¡lculo booleano fÃ¡cil, Aâ¨ ((Î±â¨Î²) â§b) = â Aâ¨Î±â¨ (Î² â§ B) â¡ K. Esto conduce a la condiciÃ³n K â¡ A â¨ (Î³ â§ B), donde Î³ = Î±â¨ Î² â¡ enviar (m) .v Ci [k] â¤ pred (recibir (m)). V CJ [K], es decir, k â¡ (enviar (m) .v Ci [k] â¤ pred (recibir (m)) .V cj [k] â§ enviar (m) .ipi [k] = 1) â¨ Enviar (m) .v ci [k] = 0. Entonces, Pi necesita aproximar el predicado envÃ­o (m) .v Ci [k] â¤ pred (recibir (m)). V CJ [K]. Para ser correctos, esta aproximaciÃ³n debe ser un CI de predicado localmente evaluable (J, k) de modo que, cuando Pi estÃ¡ a punto de enviar un mensaje M a PJ, CI (J, K) â (Envir (M) .V Ci [k] â¤ pred (recibir (m)). V CJ [k]). Informalmente, eso significa que, cuando CI (J, K) se mantenga, el contexto local de Pi permite deducir que la recepciÃ³n de M por PJ no conducirÃ¡ a la actualizaciÃ³n V CJ [K] (PJ sabe tanto como PI sobre PK). Por lo tanto, la condiciÃ³n de concreto K2 es la siguiente: k2 â¡ enviar (m) .v ci [k] = 0 â¨ (ci (j, k) â§ enviar (m) .ipi [k] = 1). Examinemos ahora el diseÃ±o de dicho predicado (IC denotado). Primero, el caso j = puedo ser ignorado, ya que se supone (SecciÃ³n 2.1) que un proceso nunca se envÃ­a un mensaje a sÃ­ mismo. Segundo, en el caso j = k, la relaciÃ³n envÃ­a (m) .v ci [j] â¤ pred (recibir (m)). V CJ [J] siempre es verdadero, porque la recepciÃ³n de M por PJ no puede actualizar V CJ[J]. Por lo tanto, âj = i: ci (j, j) debe ser verdad. Ahora, consideremos el caso donde J = I y J = K (Figura 2). Supongamos que existe un evento e = recibir (m) con e <send (m), m enviado por PJ y pidgybacking the triple (k, m .v c [k], m .ip [k]) y m .v C C[k] â¥ v ci [k] (de ahÃ­ m .v c [k] = recibir (m) .v ci [k]). Como V CJ [K] no puede disminuir, esto significa que, mientras v Ci [k] no aumente, por cada mensaje m enviado por PI a PJ tenemos lo siguiente: Enviar (m) .v ci [k] = recibir(m) .v Ci [k] = send (m) .v cj [k] â¤ recibir (m) .v cj [k], es decir, ci (j, k) debe seguir siendo verdadero. En otras palabras, una vez que Ci (J, K) es verdadero, el Ãºnico evento de Pi que podrÃ­a restablecerlo a Falso es la recepciÃ³n de un mensaje que aumenta v ci [k] o, si k = i, la ocurrencia de unevento relevante (que aumenta v Ci [i]). Del mismo modo, una vez que CI (J, K) es falso, el Ãºnico evento que puede establecerlo en verdadero es la recepciÃ³n de un mensaje M de PJ, Pidgybacking the Triple (k, m .v c [k], m .ip [k]) con m .v c [k] â¥ v ci [k]. Para implementar los predicados locales CI (J, K), cada proceso PI estÃ¡ equipado con una matriz booleana MI (como en [11]) de modo que M [J, K] = 1 â Ci (J, K). De la discusiÃ³n anterior se deduce que esta matriz se gestiona de acuerdo con las siguientes reglas (tenga en cuenta que su lÃ­nea I-Th no es significativa (caso J = I), y que su diagonal siempre es igual a 1): InicializaciÃ³n M0: â ((J, K): Mi [J, K] se inicializa a 1. 215 m1 cada vez que produce un evento relevante e: PI restablece4 la columna Ã©sica de su matriz: âj = i: mi [j, i]: = 0. M2 Cuando Pi envÃ­a un mensaje: no se produce una actualizaciÃ³n de MI. M3 Cuando recibe un mensaje m de PJ, Pi ejecuta las siguientes actualizaciones: â k â [1..n]: Caso V Ci [K] <M.V C [K] Entonces â = I, J, K: Mi [,k]: = 0;Mi [j, k]: = 1 v ci [k] = m.v c [k] Entonces mi [j, k]: = 1 v ci [k]> m.v c [k] Luego omita el final de los siguientes resultados de lema de las reglasM0-M3. El teorema que sigue muestra que la condiciÃ³n K2 (M, K) es correcta.(Ambos se prueban en [1].) Lemma 6. âi, âm enviado por Pi a PJ, âK, tenemos: Enviar (M) .Mi [J, K] = 1 â Send (M) .V Ci [K] â¤ Pred (recibir (M)). V CJ [K]. Teorema 3. Sea m un mensaje enviado por Pi a PJ. Sea k2 (m, k) â¡ ((enviar (m) .mi [j] = 1) â§ (enviar (m) .ipi [k] = 1) â¨ (enviar (m) .v ci [k]= 0)). Tenemos: K2 (M, K) â K (M, K).5.2 Protocolo IPT resultante El texto completo del protocolo IPT basado en la discusiÃ³n anterior sigue. InicializaciÃ³n RM0: - Tanto V Ci [1..N] como IPI [1..n] estÃ¡n configurados en [0 ,..., 0], y â (J, K): Mi [J, K] se establece en 1. RM1 Cada vez que produce un evento relevante e: - Pi asocia con E la marca de tiempo E.TS definido de la siguiente manera: e.ts = {(k, v ci [k]) |Ipi [k] = 1}, - Pi incrementa su entrada de reloj vector V Ci [i] (a saber, se ejecuta v Ci [i]: = v ci [i] + 1), - Pi restablece IPI: â = i:Ipi []: = 0;Ipi [i]: = 1. - Pi restablece la columna Ã©sima de su matriz booleana: âj = i: mi [j, i]: = 0. RM2 Cuando Pi envÃ­a un mensaje M a PJ, se adjunta a M el conjunto de triples (cada uno compuesto por una identificaciÃ³n de proceso, un entero y un booleano): {(k, v ci [k], ipi [k]) |(Mi [j, k] = 0 â¨ ipi [k] = 0) â§ (v ci [k]> 0)}. RM3 Cuando Pi recibe un mensaje M de PJ, ejecuta las siguientes actualizaciones: â (k, m.v c [k], m.ip [k]) transportado por m: caso v ci [k] <m.v c [k] entoncesV ci [k]: = m.v c [k];Ipi [k]: = m.ip [k];â = i, j, k: mi [, k]: = 0;4 En realidad, el valor de esta columna permanece constante despuÃ©s de su primera actualizaciÃ³n. De hecho, âj, mi [j, i] se puede establecer en 1 solo al recibir un mensaje de PJ, llevando el valor v cj [i] (ver R3). Pero, como mj [i, i] = 1, PJ no envÃ­a v Cj [i] a pi. Por lo tanto, es posible mejorar el protocolo ejecutando este reinicio de la columna MI [â, i] solo cuando PI produce su primer evento relevante. Mi [j, k]: = 1 v ci [k] = m.v c [k] y luego ipi [k]: = min (ipi [k], m.ip [k]);Mi [j, k]: = 1 v ci [k]> m.v c [k] Luego omita el endcase 5.3 a compensaciÃ³n de la condiciÃ³n k2 (m, k) muestra que un triple no debe transmitirse cuando (mi [j, k] = 1 â§ ipi [k] = 1) â¨ (v ci [k]> 0). Primero observemos que la gestiÃ³n de IPI [k] se rige por el programa de aplicaciones. MÃ¡s precisamente, el protocolo IPT no define cuÃ¡les son los eventos relevantes, solo tiene que garantizar una gestiÃ³n correcta de IPI [k]. De manera diferente, la matriz MI no pertenece a la especificaciÃ³n del problema, es una variable auxiliar del protocolo IPT, que lo administra para satisfacer la siguiente implicaciÃ³n cuando Pi envÃ­a M a PJ: (mi [j, k] = 1)â (Pred (recibir (M)). V CJ [K] â¥ Enviar (M) .V CI [K]). El hecho de que la gestiÃ³n de MI se rige por el protocolo y no por el programa de aplicaciÃ³n deja abierta la posibilidad de diseÃ±ar un protocolo donde mÃ¡s entradas de MI son iguales a 1. Esto puede hacer que la condiciÃ³n K2 (M, K) sea mÃ¡s a menudo satisfecha y, en consecuencia, puede permitir que el protocolo transmita menos triples. Mostramos aquÃ­ que es posible transmitir menos triples al precio de transmitir algunos vectores booleanos adicionales. El protocolo basado en matriz IPT anterior (SecciÃ³n 5.2) se modifica de la siguiente manera. Las reglas RM2 y RM3 se reemplazan con las reglas modificadas RM2 y RM3 (MI [â, K] denota la columna KTH de MI). RM2 Cuando Pi envÃ­a un mensaje M a PJ, se adjunta a M el siguiente conjunto de 4-Sples (cada uno compuesto por una identificaciÃ³n de proceso, un entero, un vector booleano y booleano): {(k, v ci [k], Ipi [k], mi [â, k]) |(Mi [j, k] = 0 â¨ ipi [k] = 0) â§ v ci [k]> 0}. RM3 Cuando Pi recibe un mensaje M de PJ, ejecuta las siguientes actualizaciones: â (K, M.V C [K], M.IP [K], M.M [1..N, K]) transportada por M: Caso V CI[k] <M.V C [k] entonces v ci [k]: = m.v c [k];Ipi [k]: = m.ip [k];â = i: mi [, k]: = m.m [, k] v ci [k] = m.v c [k] y luego ipi [k]: = min (ipi [k], m.ip [k]);â = i: mi [, k]: = max (mi [, k], m.m [, k]) v ci [k]> m.v c [k] y luego omita el final de manera similar a las pruebas descritas en [1],es posible demostrar que el protocolo anterior aÃºn satisface la propiedad probada en Lemma 6, a saber, âi, âm enviado por Pi a PJ, âK tenemos (envÃ­o (M) .mi [J] = 1) â(Enviar (M) .v Ci [K] â¤ Pred (recibir (M)). V CJ [K]).5 Consideremos el protocolo descrito anteriormente (SecciÃ³n 5.2) donde el valor de cada entrada de matriz Mi [J, K] siempre es igual a 0. El lector puede verificar fÃ¡cilmente que esta configuraciÃ³n implementa correctamente la matriz. AdemÃ¡s, K2 (M, K) siempre es falso: en realidad coincide con K1 (k, m) (que corresponde al caso donde los vectores completos deben transmitirse con cada mensaje).216 Intuitivamente, el hecho de que algunas columnas de matrices m se adjunten a los mensajes de aplicaciÃ³n permiten una transmisiÃ³n transitiva de informaciÃ³n. MÃ¡s precisamente, la historia relevante de PK conocida por PJ se transmite a un proceso PI a travÃ©s de una secuencia causal de mensajes de PJ a PI. En contraste, el protocolo descrito en la SecciÃ³n 5.2 utilizÃ³ solo una transmisiÃ³n directa de esta informaciÃ³n. De hecho, como se explicÃ³ la SecciÃ³n 5.1, el predicado C (implementado localmente por la matriz m) se basÃ³ en la existencia de un mensaje M enviado por PJ a Pi, pidgybacking the Triple (k, m .v c [k], m .ip.[k]), y m .v c [k] â¥ v ci [k], es decir, sobre la existencia de una transmisiÃ³n directa de informaciÃ³n (por el mensaje m). El protocolo IPT resultante (definido por las reglas RM0, RM1, RM2 y RM3) utiliza la misma condiciÃ³n K2 (M, K) que la anterior. Muestra una compensaciÃ³n interesante entre el nÃºmero de triples (K, V Ci [K], IPI [k]) cuya transmisiÃ³n se guarda y el nÃºmero de vectores booleanos que tambiÃ©n deben ser abarrotados. Es interesante notar que el tamaÃ±o de esta informaciÃ³n adicional estÃ¡ limitada, mientras que cada triple incluye un entero no unido (es decir, un valor de reloj vectorial).6. Estudio experimental Esta secciÃ³n compara los comportamientos de los protocolos anteriores. Esta comparaciÃ³n se realiza con un estudio de simulaciÃ³n. IPT1 denota el protocolo presentado en la SecciÃ³n 3.3 que usa la condiciÃ³n K1 (m, k) (que siempre es igual a falso). IPT2 denota el protocolo presentado en la SecciÃ³n 5.2 que utiliza la condiciÃ³n K2 (m, k) donde los mensajes llevan triples. Finalmente, IPT3 denota el protocolo presentado en la SecciÃ³n 5.3 que tambiÃ©n usa la condiciÃ³n K2 (M, K) pero donde los mensajes llevan vectores booleanos adicionales. Esta secciÃ³n no tiene como objetivo proporcionar un estudio de simulaciÃ³n en profundidad de los protocolos, sino que presenta una opiniÃ³n general sobre los comportamientos de protocolo. Con este fin, compara IPT2 e IPT3 con respecto a IPT1. MÃ¡s precisamente, para IPT2, el objetivo era evaluar la ganancia en tÃ©rminos de triples (k, v ci [k], ipi [k]) no transmitidos con respecto a la transmisiÃ³n sistemÃ¡tica de vectores completos como se realiza en IPT1. Para IPT3, el objetivo era evaluar la compensaciÃ³n entre los vectores booleanos adicionales transmitidos y el nÃºmero de triples guardados. El comportamiento de cada protocolo se analizÃ³ en un conjunto de programas.6.1 ParÃ¡metros de simulaciÃ³n El simulador proporciona diferentes parÃ¡metros que permiten ajustar tanto la comunicaciÃ³n como las caracterÃ­sticas de los procesos. Estos parÃ¡metros permiten establecer el nÃºmero de procesos para el cÃ¡lculo simulado, variar la tasa de comunicaciÃ³n (enviar/recibir) eventos y alterar la duraciÃ³n del tiempo entre dos eventos relevantes consecutivos. AdemÃ¡s, para ser independiente de una topologÃ­a particular de la red subyacente, se supone una red totalmente conectada. Los eventos internos no han sido considerados. Dado que la presencia de los triples (k, v ci [k], ipi [k]) alcanzado por un mensaje depende en gran medida de la frecuencia en que los eventos relevantes son producidos por un proceso, se han implementado distribuciones de tiempo diferentes entre dos eventos relevantes consecutivos(por ejemplo, distribuciones normales, uniformes y de Poisson). Los remitentes de mensajes se eligen de acuerdo con una ley aleatoria. Para exhibir configuraciones particulares de un cÃ¡lculo distribuido, se puede proporcionar un escenario dado al simulador. Los retrasos en la transmisiÃ³n de mensajes siguen una distribuciÃ³n normal estÃ¡ndar. Finalmente, el Ãºltimo parÃ¡metro del simulador es el nÃºmero de eventos de envÃ­o que ocurrieron durante una simulaciÃ³n.6.2 ConfiguraciÃ³n de parÃ¡metros Para comparar el comportamiento de los tres protocolos IPT, realizamos una gran cantidad de simulaciones utilizando diferentes parÃ¡metros. Establecimos en 10 el nÃºmero de procesos que participan en un cÃ¡lculo distribuido. El nÃºmero de eventos de comunicaciÃ³n durante la simulaciÃ³n se ha establecido en 10 000. Se ha establecido el parÃ¡metro Î» de la distribuciÃ³n de tiempo de Poisson (Î» es el nÃºmero promedio de eventos relevantes en un intervalo de tiempo dado) para que los eventos relevantes se generen al comienzo de la simulaciÃ³n. Con la distribuciÃ³n de tiempo uniforme, se genera un evento relevante (en promedio) cada 10 eventos de comunicaciÃ³n. El parÃ¡metro de ubicaciÃ³n de la distribuciÃ³n de tiempo normal estÃ¡ndar se ha establecido para que la ocurrencia de eventos relevantes se cambie alrededor de la tercera parte del experimento de simulaciÃ³n. Como se seÃ±alÃ³ anteriormente, el simulador se puede alimentar con un escenario dado. Esto permite analizar los peores escenarios para IPT2 e IPT3. Estos escenarios corresponden al caso en el que los eventos relevantes se generan a la frecuencia mÃ¡xima (es decir, cada vez que un proceso envÃ­a o recibe un mensaje, produce un evento relevante). Finalmente, los tres protocolos IPT se analizan con los mismos parÃ¡metros de simulaciÃ³n.6.3 Resultados de simulaciÃ³n Los resultados se muestran en las Figuras 3.A-3.D. Estas cifras trazan la ganancia de los protocolos en tÃ©rminos del nÃºmero de triples que no se transmiten (eje y) con respecto al nÃºmero de eventos de comunicaciÃ³n (eje x). A partir de estas cifras, observamos que, sea cual sea la distribuciÃ³n del tiempo seguida de los eventos relevantes, tanto IPT2 como IPT3 exhiben un comportamiento mejor que IPT1 (es decir, el nÃºmero total de triples de piggyback es menor en IPT2 e IPT3 que en IPT1), incluso enEl peor de los casos (ver Figura 3.D). Consideremos el peor escenario. En ese caso, la ganancia se obtiene al comienzo de la simulaciÃ³n y dura mientras exista un proceso PJ para el cual âK: V CJ [k] = 0. En ese caso, la condiciÃ³n âK: K (M, K) estÃ¡ satisfecha. Tan pronto como âK: V CJ [k] = 0, tanto IPT2 como IPT3 se comportan como IPT1 (la forma de la curva se vuelve plana) ya que la condiciÃ³n k (m, k) ya no estÃ¡ satisfecha. La Figura 3.A muestra que durante los primeros eventos de la simulaciÃ³n, la pendiente de las curvas IPT2 e IPT3 son empinadas. Lo mismo ocurre en la Figura 3.D (que representa el peor de los casos). Luego, la pendiente de estas curvas disminuye y permanece constante hasta el final de la simulaciÃ³n. De hecho, tan pronto como v Cj [k] se vuelve mayor que 0, la condiciÃ³n Â¬k (m, k) se reduce a (mi [j, k] = 0 â¨ ipi [k] = 0). Figura 3.B muestra una caracterÃ­stica interesante. Considera Î» = 100. Como los eventos relevantes se toman solo durante el comienzo de la simulaciÃ³n, esta figura exhibe una pendiente muy empinada como las otras figuras. La cifra muestra que, tan pronto como no se toman mÃ¡s eventos relevantes, en promedio, el 45% de los triples no son abarrotados por los mensajes. Esto muestra la importancia de Matrix Mi. AdemÃ¡s, IPT3 se beneficia de transmitir vectores booleanos adicionales para ahorrar transmisiones triples. Las Figuras 3.A-3.C muestran que la ganancia promedio de IPT3 con respecto a IPT2 es cercana al 10%. Finalmente, la Figura 3.C subraya aÃºn mÃ¡s la importancia 217 de Matrix Mi. Cuando se toman muy pocos eventos relevantes, IPT2 e IPT3 resultan ser muy eficientes. De hecho, esta figura muestra que, muy rÃ¡pidamente, la ganancia en nÃºmero de triples que se guardan es muy alta (en realidad, el 92% de los triples se guardan).6.4 Lecciones aprendidas de la simulaciÃ³n Por supuesto, todos los resultados de la simulaciÃ³n son consistentes con los resultados teÃ³ricos. IPT3 siempre es mejor o igual a IPT2, e IPT2 siempre es mejor que IPT1. Los resultados de la simulaciÃ³n nos enseÃ±an mÃ¡s: â¢ La primera lecciÃ³n que hemos aprendido las preocupaciones de Matrix Mi. Su uso es bastante significativo, pero principalmente depende de la distribuciÃ³n del tiempo seguida de los eventos relevantes. Por un lado, al observar la Figura 3.B donde se toman una gran cantidad de eventos relevantes en muy poco tiempo, IPT2 puede ahorrar hasta el 45% de los triples. Sin embargo, podrÃ­amos haber esperado una ganancia mÃ¡s sensible de IPT2 ya que la IP vectorial booleana tiende a estabilizarse para [1, ..., 1] cuando no se toman eventos relevantes. De hecho, como se discutiÃ³ en la SecciÃ³n 5.3, la gestiÃ³n de Matrix Mi dentro de IPT2 no permite una transmisiÃ³n transitiva de informaciÃ³n, sino solo una transmisiÃ³n directa de esta informaciÃ³n. Esto explica por quÃ© algunas columnas de MI pueden permanecer iguales a 0, mientras que potencialmente podrÃ­an ser iguales a 1. De manera diferente, como IPT3 se beneficia de transmitir vectores booleanos adicionales (que proporciona una informaciÃ³n de transmisiÃ³n transitiva) alcanza una ganancia del 50%. Por otro lado, cuando se toman muy pocos eventos relevantes en un gran perÃ­odo de tiempo (ver Figura 3.c), el comportamiento de IPT2 e IPT3 resulta ser muy eficiente ya que la transmisiÃ³n de hasta el 92% de los triples essalvado. Esto proviene del hecho de que el IPI vectorial booleano tiende a estabilizarse a [1, ..., 1] y que Matrix Mi contiene muy pocos 0 ya que se han tomado muy pocos eventos relevantes. Por lo tanto, una transmisiÃ³n directa de la informaciÃ³n es suficiente para obtener rÃ¡pidamente matrices MI igual a [1, ..., 1] ,..., [1, ..., 1].â¢ La segunda lecciÃ³n se refiere a IPT3, mÃ¡s precisamente, la compensaciÃ³n entre el acadÃ©mico adicional de los vectores booleanos y el nÃºmero de triples cuya transmisiÃ³n se guarda. Con n = 10, agregar 10 booleanos a un triple no aumenta sustancialmente su tamaÃ±o. Las Figuras 3.A-3.C exhiben el nÃºmero de triples cuya transmisiÃ³n se guarda: la ganancia promedio (en nÃºmero de triples) de IPT3 con respecto a IPT2 es de aproximadamente el 10%.7. ConclusiÃ³n Este documento ha abordado un importante problema de computaciÃ³n distribuida relacionada con la causalidad, a saber, el problema inmediato de seguimiento de los predecesores. Ha presentado una familia de protocolos que proporciona a cada evento relevante una marca de tiempo que identifica exactamente a sus predecesores inmediatos. La familia se define mediante una condiciÃ³n general que permite que los mensajes de aplicaciÃ³n sean informaciÃ³n de control de pildo cuyo tamaÃ±o puede ser menor que n (el nÃºmero de procesos). En ese sentido, esta familia define los protocolos IPT del tamaÃ±o del tamaÃ±o del mensaje. SegÃºn la forma en que se implementa la condiciÃ³n general, se pueden obtener diferentes protocolos IPT. Tres de ellos han sido descritos y analizados con experimentos de simulaciÃ³n. Curiosamente, tambiÃ©n se ha demostrado que la eficiencia de los protocolos (medidos en tÃ©rminos del tamaÃ±o de la informaciÃ³n de control que no estÃ¡ abarrotada por un mensaje de aplicaciÃ³n) depende del patrÃ³n definido por los eventos de comunicaciÃ³n y los eventos relevantes. Por Ãºltimo, pero no menos importante, es interesante observar que si uno no estÃ¡ interesado en rastrear los eventos predecesores inmediatos, los protocolos presentados en el documento pueden simplificarse suprimiendo los vectores booleanos IPI (pero manteniendo las matrices booleanas MI). Los protocolos resultantes, que implementan un sistema de reloj vectorial, son particularmente eficientes en lo que respecta al tamaÃ±o de la marca de tiempo que lleva cada mensaje. Curiosamente, esta eficiencia no se obtiene al precio de supuestos adicionales (como los canales FIFO).8. Referencias [1] Anceaume E., HÂ´Elary J.-M.y Raynal M., rastreando predecesores inmediatos en cÃ¡lculos distribuidos. Res. Informe #1344, Irisa, Univ. Rennes (Francia), 2001. [2] Baldoni R., Prakash R., Raynal M. y Singhal M., BroadcastizaciÃ³n eficiente â-causal. Journal of Computer Systems Science and Engineering, 13 (5): 263-270, 1998. [3] Chandy K.M.y Lamport L., instantÃ¡neas distribuidas: determinaciÃ³n de estados globales de sistemas distribuidos, transacciones ACM en sistemas informÃ¡ticos, 3 (1): 63-75, 1985. [4] Diehl C., Jard C. y Rampon J.-X.,AnÃ¡lisis de accesibilidad de ejecuciones distribuidas, Proc. Tapsoft93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., marcas de tiempo en sistemas de paseos de mensajes que preservan el pedido parcial, Proc.11Âª Conferencia de ComputaciÃ³n Australiana, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V.y Raynal M., AnÃ¡lisis sobre los cÃ¡lculos distribuidos, IPL, 54: 267-274, 1995. [7] Fromentin E. y Raynal M., Estados globales compartidos en cÃ¡lculos distribuidos, JCSS, 55 (3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K.y Tomlinson A., Prueba sobre patrones regulares en cÃ¡lculos distribuidos. Proc. ICPP94, vol.2: 73-76, 1994. [9] Garg V.K., Principios de sistemas distribuidos, Kluwer Academic Press, 274 pÃ¡ginas, 1996. [10] HÂ´Elary J.-M., MostÂ´efaoui A., Netzer R.H.B.y Raynal M., PrevenciÃ³n basada en la comunicaciÃ³n de Ckeckpoints inÃºtiles en cÃ¡lculos distribuidos. ComputaciÃ³n distribuida, 13 (1): 29-43, 2000. [11] HÂ´Elary J.-M., Melideo G. y Raynal M., Seguimiento de la causalidad en sistemas distribuidos: un conjunto de protocolos eficientes. Proc. Sirocco00, Carleton University Press, pp. 181-195, Laquila (Italia), junio de 2000. [12] HÂ´Eltary J.-M., Netzer R. y Raynal M., Problemas de consistencia en los puntos de control distribuidos. IEEE TSE, 25 (4): 274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. y Singhal M., DetecciÃ³n distribuida eficiente de la conjunciÃ³n de predicados locales en los cÃ¡lculos de asÃ­ncho. IEEE TSE, 24 (8): 664-677, 1998. [14] Lamport L., tiempo, relojes y el orden de eventos en un sistema distribuido. ComunicaciÃ³n ACM, 21 (7): 558-565, 1978. [15] Marzullo K. y Sabel L., DetecciÃ³n eficiente de una clase de propiedades estables. ComputaciÃ³n distribuida, 8 (2): 81-91, 1994. [16] Mattern F., Tiempo virtual y estados globales de sistemas distribuidos. Proc. En t. Conf. Algoritmos paralelos y distribuidos, (Cosnard, Quinton, Raynal, Robert eds), Holanda Norte, pp. 215-226, 1988. [17] Prakash R., Raynal M. y Singhal M., un algoritmo de orden causal adaptativo adaptado aEntorno informÃ¡tico mÃ³vil. JPDC, 41: 190-204, 1997. [18] Raynal M. y Singhal S., Tiempo lÃ³gico: captura de causalidad en sistemas distribuidos. IEEE Computer, 29 (2): 49-57, 1996. [19] Singhal M. y Kshemkalyani A., una implementaciÃ³n eficiente de relojes vectoriales. IPL, 43: 47-52, 1992. [20] Wang Y.M., puntos de control globales consistentes que contienen un conjunto dado de puntos de control locales. IEEE TOC, 46 (4): 456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 GainnumberOfTriples COMUNICACIÃN NÃºmero de eventos IPT1 IPT2 IPT3 Eventos relevantes (a) Los eventos relevantes siguen una distribuciÃ³n uniforme (relaciÃ³n = = = = = =1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 GainnumberOfTriples NÃºmero de eventos de comunicaciÃ³n IPT1 IPT2 IPT3 Eventos relevantes (b) Los eventos relevantes siguen una distribuciÃ³n de Poisson (Î» = 100) 0 10000 2000030000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 GaininnumberOfTriples COMUNICACIÃN NÃºmero de eventos IPT1 IPT2 IPT3 Eventos relevantes (c) Los eventos relevantes siguen una distribuciÃ³n normal 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 GainnumberFtriples CommunicationNÃºmero de eventos IPT1 IPT2 IPT3 Eventos relevantes (D) Para cada PI, PI toma un evento relevante y transmite a todos los procesos Figura 3: Resultados experimentales 219",
    "original_sentences": [
        "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
        "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
        "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
        "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
        "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
        "In that sense, this family defines message size-efficient IPT protocols.",
        "According to the way the general condition is implemented, different IPT protocols can be obtained.",
        "Two of them are exhibited.",
        "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
        "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
        "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
        "Moreover, message transfer delays are finite but unpredictable.",
        "This computation model defines what is known as the asynchronous distributed system model.",
        "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
        "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
        "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
        "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
        "The causal past of an event e is the set of events from which e is causally dependent.",
        "Events that are not causally dependent are said to be concurrent.",
        "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
        "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
        "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
        "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
        "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
        "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
        "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
        "Being a strict partial order, the causality relation is transitive.",
        "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
        "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
        "Those applications are mainly related to the analysis of distributed computations.",
        "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
        "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
        "More generally, these applications are interested in the very structure of the causal past.",
        "In this context, the determination of the immediate predecessors becomes a major issue [6].",
        "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
        "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
        "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
        "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
        "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
        "Solving this problem requires tracking causality, hence using vector clocks.",
        "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
        "Their aim was to reduce the size of timestamps attached to messages.",
        "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
        "Another efficient implementation that does not depend on channel ordering property is described in [11].",
        "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
        "However, none of these papers considers the IPT problem.",
        "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
        "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
        "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
        "From a methodological point of view the paper uses a top-down approach.",
        "It states abstract properties from which more concrete properties and protocols are derived.",
        "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
        "In that sense, this family defines low cost IPT protocols when we consider the message size.",
        "In addition to efficiency, the proposed approach has an interesting design property.",
        "Namely, the family is incrementally built in three steps.",
        "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
        "Then, a general condition is stated to reduce the size of the control information carried by messages.",
        "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
        "The paper is composed of seven sections.",
        "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
        "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
        "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
        "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
        "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
        "They can be found in [1].) 2.",
        "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
        "A distributed computation describes the execution of a distributed program.",
        "The execution of a local program gives rise to a sequential process.",
        "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
        "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
        "We assume that each message is unique and a process does not send messages to itself1 .",
        "Message transmission delays are finite but unpredictable.",
        "Moreover, channels are not necessarily fifo.",
        "Process speeds are positive but arbitrary.",
        "In other words, the underlying computation model is asynchronous.",
        "The local program associated with Pi can include send, receive and internal statements.",
        "The execution of such a statement produces a corresponding send/receive/internal event.",
        "These events are called primitive events.",
        "Let ex i be the x-th event produced by process Pi.",
        "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
        "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
        "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
        "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
        "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
        "Thus we will use the notation ex i < ey i iff x < y.",
        "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
        "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
        "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
        "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
        "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
        "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
        "In this figure, only relevant events are represented.",
        "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
        "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
        "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
        "In the following we consider a distributed computation at such an abstraction level.",
        "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
        "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
        "Definition 1.",
        "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
        "We have â (e) = {f â R | f hb â e}.",
        "Note that, if e â R then â (e) = {f â R | f â e}.",
        "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
        "The following properties are immediate consequences of the previous definitions.",
        "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
        "Definition 2.",
        "Let e â Hi.",
        "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
        "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
        "Let us consider the event e identified (2,2) in Figure 1.",
        "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
        "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
        "These properties follow directly from the definitions.",
        "Let e â Hi.",
        "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
        "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
        "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
        "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
        "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
        "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
        "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
        "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
        "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
        "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
        "Let m.V C denote this value.",
        "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
        "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
        "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
        "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
        "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
        "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
        "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
        "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
        "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
        "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
        "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
        "Let e â Hi.",
        "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
        "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
        "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
        "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
        "They will be used to design and prove the protocols solving the IPT problem.",
        "To ease the reading of the paper, their proofs are presented in Appendix A.",
        "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
        "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
        "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
        "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
        "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
        "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
        "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
        "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
        "Lemma 3.",
        "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
        "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
        "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
        "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
        "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
        "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
        "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
        "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
        "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
        "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
        "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
        "Moreover, IPi must be updated upon the occurrence of each event.",
        "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
        "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
        "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
        "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
        "The timestamp associated with a relevant event e is denoted e.TS.",
        "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
        "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
        "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
        "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
        "Theorem 1.",
        "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
        "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
        "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
        "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
        "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
        "Thus, locally evaluable approximations of this general condition must be defined.",
        "To each approximation corresponds a protocol, implemented with additional local data structures.",
        "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
        "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
        "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
        "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
        "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
        "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
        "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
        "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
        "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
        "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
        "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
        "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
        "Theorem 2.",
        "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
        "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
        "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
        "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
        "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
        "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
        "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
        "Hence the idea to define evaluable approximations of the general condition.",
        "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
        "Hence, the definition of a correct evaluable approximation: Definition 6.",
        "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
        "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
        "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
        "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
        "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
        "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
        "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
        "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
        "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
        "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
        "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
        "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
        "Let us now examine the design of such a predicate (denoted ci).",
        "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
        "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
        "Thus, âj = i : ci(j, j) must be true.",
        "Now, let us consider the case where j = i and j = k (Figure 2).",
        "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
        "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
        "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
        "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
        "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
        "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
        "M2 When Pi sends a message: no update of Mi occurs.",
        "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
        "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
        "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
        "Theorem 3.",
        "Let m be a message sent by Pi to Pj .",
        "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
        "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
        "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
        "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
        "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
        "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
        "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
        "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
        "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
        "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
        "Let us first observe that the management of IPi[k] is governed by the application program.",
        "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
        "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
        "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
        "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
        "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
        "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
        "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
        "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
        "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
        "The reader can easily verify that this setting correctly implements the matrix.",
        "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
        "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
        "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
        "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
        "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
        "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
        "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
        "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
        "This comparison is done with a simulation study.",
        "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
        "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
        "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
        "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
        "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
        "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
        "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
        "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
        "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
        "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
        "Internal events have not been considered.",
        "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
        "The senders of messages are chosen according to a random law.",
        "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
        "Message transmission delays follow a standard normal distribution.",
        "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
        "We set to 10 the number of processes participating to a distributed computation.",
        "The number of communication events during the simulation has been set to 10 000.",
        "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
        "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
        "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
        "As noted previously, the simulator can be fed with a given scenario.",
        "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
        "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
        "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
        "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
        "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
        "Let us consider the worst scenario.",
        "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
        "In that case, the condition âk : K(m, k) is satisfied.",
        "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
        "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
        "The same occurs in Figure 3.d (that depicts the worst case scenario).",
        "Then the slope of these curves decreases and remains constant until the end of the simulation.",
        "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
        "Figure 3.b displays an interesting feature.",
        "It considers Î» = 100.",
        "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
        "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
        "This shows the importance of matrix Mi.",
        "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
        "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
        "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
        "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
        "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
        "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
        "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
        "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
        "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
        "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
        "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
        "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
        "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
        "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
        "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
        "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
        "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
        "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
        "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
        "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
        "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
        "In that sense, this family defines message size-efficient IPT protocols.",
        "According to the way the general condition is implemented, different IPT protocols can be obtained.",
        "Three of them have been described and analyzed with simulation experiments.",
        "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
        "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
        "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
        "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
        "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
        "Res.",
        "Report #1344, IRISA, Univ.",
        "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
        "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
        "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
        "Proc.",
        "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
        "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
        "Proc.",
        "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
        "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
        "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
        "Comm.",
        "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
        "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
        "Proc.",
        "Int.",
        "Conf.",
        "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
        "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
        "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
        "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
        "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
    ],
    "error_count": 0,
    "keys": {
        "distributed computation": {
            "translated_key": "cÃ¡lculo distribuido",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A <br>distributed computation</br> is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a <br>distributed computation</br>.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A <br>distributed computation</br> consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a <br>distributed computation</br>, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the <br>distributed computation</br> is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a <br>distributed computation</br>, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the <br>distributed computation</br> cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 <br>distributed computation</br> A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A <br>distributed computation</br> describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the <br>distributed computation</br>.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a <br>distributed computation</br>.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the <br>distributed computation</br> it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a <br>distributed computation</br>, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a <br>distributed computation</br> [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a <br>distributed computation</br> using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the <br>distributed computation</br> [7].",
                "In the following we consider a <br>distributed computation</br> at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a <br>distributed computation</br>. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the <br>distributed computation</br>. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a <br>distributed computation</br> a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a <br>distributed computation</br>.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Seguimiento de los predecesores inmediatos en los cÃ¡lculos distribuidos Emmanuelle Anceaume Jean-Michel HÂ´Elary Michel Raynal Irisa, Campus Beaulieu 35042 Rennes Cedex, France FirstName.lastname@irisa.fr Abstract a \"ComputaciÃ³n distribuida\" generalmente se modela como un conjunto parcialmente ordenado de eventos relevantes ((Los eventos relevantes son un subconjunto de los eventos primitivos producidos por el cÃ¡lculo).",
                "Entonces, IPT es el cÃ¡lculo sobre la marcha de la reducciÃ³n transitiva (es decir, diagrama de Hasse) de la relaciÃ³n de causalidad definida por un \"cÃ¡lculo distribuido\".",
                "IntroducciÃ³n Un \"cÃ¡lculo distribuido\" consiste en un conjunto de procesos que cooperan para lograr un objetivo comÃºn.",
                "MÃ¡s precisamente, dados dos eventos E y F de un \"cÃ¡lculo distribuido\", un problema crucial que debe resolverse en muchas aplicaciones distribuidas es saber si estÃ¡n causalmente relacionados, es decir, si la ocurrencia de uno es unconsecuencia de la ocurrencia del otro.",
                "Se deduce que la detecciÃ³n de dependencias causales (o concurrencia) de todos los eventos del \"cÃ¡lculo distribuido\" no es deseable en todas las aplicaciones [7, 15].",
                "En otras palabras, entre todos los eventos que pueden ocurrir en un \"cÃ¡lculo distribuido\", solo un subconjunto de ellos es relevante.",
                "Si el patrÃ³n de comunicaciÃ³n del \"cÃ¡lculo distribuido\" no puede modificarse, la determinaciÃ³n debe hacerse sin agregar mensajes de control.",
                "Modelo y reloj Vector 2.1 \"ComputaciÃ³n distribuida\" Un programa distribuido estÃ¡ compuesto por programas locales secuenciales que se comunican y sincronizan solo al intercambiar mensajes.",
                "Un \"cÃ¡lculo distribuido\" describe la ejecuciÃ³n de un programa distribuido.",
                "Sea {P1, P2 ,..., Pn} serÃ¡ el conjunto finito de procesos secuenciales del \"cÃ¡lculo distribuido\".",
                "Sea h = âªn i = 1hi el conjunto de eventos producidos por un \"cÃ¡lculo distribuido\".",
                "Si E es el primer evento producido por PI, entonces Pred (e) se denota por â¥ (lo que significa que no hay tal evento), y âe â Hi: â¥ <e.El orden parcial BH = (H, Hb â) constituye un modelo formal del \"cÃ¡lculo distribuido\" con el que se asocia.1 Esta suposiciÃ³n es solo para obtener protocolos simples.211 p1 p2 p3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3) (1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1](1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figura 1: Eventos relevantes y grÃ¡fico de predecesores inmediatos.(Diagrama de Hasse) 2.2 Eventos relevantes para un observador dado de un \"cÃ¡lculo distribuido\", solo algunos eventos son relevantes2 [7, 9, 15].",
                "Un ejemplo interesante de lo que es una observaciÃ³n es la detecciÃ³n de predicados en estados globales consistentes de un \"cÃ¡lculo distribuido\" [3, 6, 8, 9, 13, 15].",
                "La parte izquierda de la Figura 1 muestra un \"cÃ¡lculo distribuido\" utilizando el diagrama clÃ¡sico de espacio-tiempo.",
                "El POSET (R, â) constituye una abstracciÃ³n del \"cÃ¡lculo distribuido\" [7].",
                "A continuaciÃ³n, consideramos un \"cÃ¡lculo distribuido\" a tal nivel de abstracciÃ³n.",
                "Como se seÃ±alÃ³ en la introducciÃ³n, el problema IPT es el cÃ¡lculo del diagrama HASSE asociado con el conjunto parcialmente ordenado de los eventos relevantes producidos por un \"cÃ¡lculo distribuido\".3.2 Propiedades formales de IPT Para diseÃ±ar un protocolo que resuelva el problema IPT, es Ãºtil considerar la nociÃ³n de predecesor relevante inmediato de cualquier evento, ya sea relevante o no.",
                "De los lemas anteriores, el conjunto 3 en realidad, este grÃ¡fico es el diagrama de Hasse del orden parcial asociado con el \"cÃ¡lculo distribuido\".213 IP (e) de cualquier evento E depende de los conjuntos IP de los eventos pred (e) y/o envÃ­an (m) (cuando e = recibir (m)).",
                "Para exhibir configuraciones particulares de un \"cÃ¡lculo distribuido\", se puede proporcionar un escenario dado al simulador.",
                "Establecimos en 10 el nÃºmero de procesos que participan en un \"cÃ¡lculo distribuido\"."
            ],
            "translated_text": "",
            "candidates": [
                "cÃ¡lculo distribuido",
                "ComputaciÃ³n distribuida",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "ComputaciÃ³n distribuida",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido",
                "cÃ¡lculo distribuido"
            ],
            "error": []
        },
        "immediate predecessor tracking": {
            "translated_key": "seguimiento del predecesor inmediato",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call <br>immediate predecessor tracking</br> (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the <br>immediate predecessor tracking</br> (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The <br>immediate predecessor tracking</br> (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Llamamos al \"seguimiento del predecesor inmediato\" (IPT) el problema que consiste en determinar la mosca y sin mensajes adicionales, los predecesores inmediatos de los eventos relevantes.",
                "Predecesores inmediatos En esta secciÃ³n, se afirma el \"seguimiento del predecesor inmediato\" (IPT) (SecciÃ³n 3.1).",
                "El problema del \"seguimiento del predecesor inmediato\" (IPT) consiste en asociarse con cada evento relevante en el conjunto de eventos relevantes que son sus predecesores inmediatos."
            ],
            "translated_text": "",
            "candidates": [
                "Seguimiento de predecesor inmediato",
                "seguimiento del predecesor inmediato",
                "Seguimiento de predecesor inmediato",
                "seguimiento del predecesor inmediato",
                "Seguimiento de predecesor inmediato",
                "seguimiento del predecesor inmediato"
            ],
            "error": []
        },
        "common global memory": {
            "translated_key": "memoria global comÃºn",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a <br>common global memory</br>, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Una caracterÃ­stica principal de estos cÃ¡lculos radica en el hecho de que los procesos no comparten una \"memoria global comÃºn\" y se comunican solo intercambiando mensajes a travÃ©s de una red de comunicaciÃ³n."
            ],
            "translated_text": "",
            "candidates": [
                "memoria global comÃºn",
                "memoria global comÃºn"
            ],
            "error": []
        },
        "message transfer delay": {
            "translated_key": "retraso de transferencia de mensajes",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, <br>message transfer delay</br>s are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "AdemÃ¡s, los \"retraso de transferencia de mensajes\" son finitos pero impredecibles."
            ],
            "translated_text": "",
            "candidates": [
                "retraso de transferencia de mensajes",
                "retraso de transferencia de mensajes"
            ],
            "error": []
        },
        "vector clock": {
            "translated_key": "reloj vectorial",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the <br>vector clock</br> of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient <br>vector clock</br> implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient <br>vector clock</br> implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic <br>vector clock</br> protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a <br>vector clock</br> and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND <br>vector clock</br> 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 <br>vector clock</br> System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A <br>vector clock</br> system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "<br>vector clock</br> Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its <br>vector clock</br> V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its <br>vector clock</br> entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its <br>vector clock</br> as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a <br>vector clock</br> protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its <br>vector clock</br> entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole <br>vector clock</br> and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole <br>vector clock</br> and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its <br>vector clock</br> entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a <br>vector clock</br> value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a <br>vector clock</br> system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "La marca de tiempo de un evento producido por un proceso es el valor actual del \"reloj vectorial\" del proceso correspondiente.",
                "En [19] se propone una implementaciÃ³n eficiente de \"reloj vectorial\" adecuada para sistemas con canales FIFO.",
                "AdemÃ¡s, en este protocolo, las marcas de tiempo adjuntas a los mensajes son de tamaÃ±o n.Esto plantea la siguiente pregunta que, hasta donde sabemos, nunca ha sido respondida: Â¿hay tÃ©cnicas de implementaciÃ³n eficientes de \"reloj vectorial\" que sean adecuados para el problema IPT?",
                "El protocolo bÃ¡sico de \"reloj de vector\" se enriquece primero al agregar a cada proceso un vector booleano cuya gestiÃ³n permite que los procesos rastreen los eventos predecesores inmediatos.",
                "La SecciÃ³n 3 presenta el primer paso de la construcciÃ³n que da como resultado un protocolo IPT en el que cada mensaje lleva un \"reloj vectorial\" y una matriz booleana, ambos de tamaÃ±o N (el nÃºmero de procesos).",
                "Modelo y \"reloj vectorial\" 2.1 CÃ¡lculo distribuido Un programa distribuido estÃ¡ compuesto por programas locales secuenciales que se comunican y sincronizan solo al intercambiar mensajes.",
                "LR2 Si E es un evento de recepciÃ³n de M: âj = I: LASTR (E, J) = Max (LASTR (Pred (E), J), LASTR (SEND (M), J)).2.3 DefiniciÃ³n del sistema de \"reloj vectorial\" como un concepto fundamental asociado con la teorÃ­a de la causalidad, los relojes vectoriales se han introducido en 1988, simultÃ¡neamente e independientemente por Fidge [5] y Mattern [16].",
                "Un sistema de \"reloj vectorial\" es un mecanismo que asocia las marcas de tiempo con eventos de tal manera que la comparaciÃ³n de sus marcas de tiempo indica si los eventos correspondientes estÃ¡n o no causalmente relacionados (y, si lo estÃ¡n, cuÃ¡l es la primera).",
                "ImplementaciÃ³n de \"reloj de vector\" La siguiente implementaciÃ³n de relojes vectoriales [5, 16] se basa en la observaciÃ³n de que âi, âe â Hi, âj: e.v ci [j] = y â lastr (e, j) = ey jdonde E.V Ci es el valor de V Ci justo despuÃ©s de la apariciÃ³n de E (esta relaciÃ³n resulta directamente de las propiedades LR0, LR1 y LR2).",
                "Cada proceso PI administra su \"reloj vectorial\" v Ci [1..n] de acuerdo con las siguientes reglas: VC0 v Ci [1..n] se inicializa a [0 ,..., 0].",
                "VC1 cada vez que produce un evento relevante E, PI incrementa su entrada de \"reloj vectorial\" v Ci [i] (v ci [i]: = v ci [i] + 1) a 212 indica que ha producido un evento mÃ¡s relevante,Luego PI se asocia con la marca de tiempo E.V C = V CI.",
                "VC3 Cuando Pi recibe un mensaje m, actualiza su \"reloj vectorial\" de la siguiente manera: âK: V ci [k]: = max (v ci [k], m.v c [k]).3.",
                "Este protocolo IPT, previamente presentado en [4] sin prueba, se construye a partir de un protocolo de \"reloj vectorial\" agregando la gestiÃ³n de una matriz booleana local en cada proceso.3.1 El problema IPT como se indica en la introducciÃ³n, algunas aplicaciones (por ejemplo, anÃ¡lisis de ejecuciones distribuidas [6], la detecciÃ³n de propiedades distribuidas [7]) requieren determinar (sobre la marcha y sin mensajes adicionales) la reducciÃ³n transitiva de larelaciÃ³n â (es decir, no debemos considerar la dependencia causal transitiva).",
                "R1 cada vez que produce un evento relevante e: - Pi Associates con E la marca de tiempo E.TS definido de la siguiente manera e.ts = {(k, v ci [k]) |Ipi [k] = 1}, - Pi incrementa su entrada de \"reloj de vector\" v ci [i] (es decir, ejecuta v ci [i]: = v ci [i] + 1), - pi restas ipi: â = i: Ipi []: = 0;Ipi [i]: = 1.",
                "Una condiciÃ³n general que esta secciÃ³n aborda un problema previamente abierto, a saber, Â¿cÃ³mo resolver el problema IPT sin requerir que cada mensaje de aplicaciÃ³n tenga un \"reloj vectorial\" completo y una matriz booleana completa?",
                "Esta aproximaciÃ³n trivialmente correcta de K en realidad corresponde al protocolo IPT particular descrito en la SecciÃ³n 3 (en el que cada mensaje lleva un \"reloj vectorial\" completo y un vector booleano completo).",
                "RM1 Cada vez que produce un evento relevante e: - Pi asocia con E la marca de tiempo E.TS definido de la siguiente manera: e.ts = {(k, v ci [k]) |Ipi [k] = 1}, - Pi incrementa su entrada de \"reloj vector\" v ci [i] (a saber, ejecuta v ci [i]: = v ci [i] + 1), - Pi reinicia ipi: â =i: ipi []: = 0;Ipi [i]: = 1. - Pi restablece la columna Ã©sima de su matriz booleana: âj = i: mi [j, i]: = 0.",
                "Es interesante notar que el tamaÃ±o de esta informaciÃ³n adicional estÃ¡ limitado, mientras que cada triple incluye un entero no unido (a saber, un valor de \"reloj vectorial\").6.",
                "Los protocolos resultantes, que implementan un sistema de \"reloj vectorial\", son particularmente eficientes en lo que respecta al tamaÃ±o de la marca de tiempo que lleva cada mensaje."
            ],
            "translated_text": "",
            "candidates": [
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj de vector",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj de vector",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "Reloj Vector",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj de vector",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vector",
                "Reloj Vector",
                "reloj vectorial",
                "reloj vectorial",
                "reloj vectorial"
            ],
            "error": []
        },
        "tracking causality": {
            "translated_key": "Seguimiento de la causalidad",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires <br>tracking causality</br>, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., <br>tracking causality</br> in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Resolver este problema requiere \"Seguimiento de la causalidad\", por lo tanto, utilizando relojes vectoriales.",
                "ComputaciÃ³n distribuida, 13 (1): 29-43, 2000. [11] HÂ´Elary J.-M., Melideo G. y Raynal M., \"Seguimiento de la causalidad\" en sistemas distribuidos: un conjunto de protocolos eficientes."
            ],
            "translated_text": "",
            "candidates": [
                "Seguimiento de la causalidad",
                "Seguimiento de la causalidad",
                "Seguimiento de la causalidad",
                "Seguimiento de la causalidad"
            ],
            "error": []
        },
        "vector timestamp": {
            "translated_key": "marca de tiempo vectorial",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the <br>vector timestamp</br> associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the <br>vector timestamp</br> associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a <br>vector timestamp</br> whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Como consecuencia, entre todos los eventos relevantes que preceden causalmente a un evento relevante dado, solo un subconjunto son sus predecesores inmediatos: esos son los eventos F de modo que no hay un evento relevante en ningÃºn camino causal de F a E.Desafortunadamente, dada solo la \"marca de tiempo vectorial\" asociada con un evento, no es posible determinar quÃ© eventos de su pasado causal son sus predecesores inmediatos.",
                "Esto proviene del hecho de que la \"marca de tiempo vectorial\" asociada con E determina, para cada proceso, el Ãºltimo evento relevante pertenece al pasado causal de E, pero tal evento no es necesariamente un predecesor inmediato de E.Sin embargo, algunas aplicaciones [4, 6] requieren asociarse con cada evento relevante solo el conjunto de sus predecesores inmediatos.",
                "Cuando un proceso PI produce un evento E (relevante) E, se asocia con una \"marca de tiempo vectorial\" cuyo valor (denotado e.v c) es igual al valor actual de v Ci."
            ],
            "translated_text": "",
            "candidates": [
                "marca de tiempo vectorial",
                "marca de tiempo vectorial",
                "marca de tiempo vectorial",
                "marca de tiempo vectorial",
                "marca de tiempo vectorial",
                "marca de tiempo vectorial"
            ],
            "error": []
        },
        "transitive reduction": {
            "translated_key": "reducciÃ³n transitiva",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the <br>transitive reduction</br> (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the <br>transitive reduction</br> (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the <br>transitive reduction</br> of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Entonces, IPT es el cÃ¡lculo sobre la marcha de la \"reducciÃ³n transitiva\" (es decir, diagrama de Hasse) de la relaciÃ³n de causalidad definida por un cÃ¡lculo distribuido.",
                "Este problema consiste en realidad en la determinaciÃ³n de la \"reducciÃ³n transitiva\" (diagrama de Hasse) del grÃ¡fico de causalidad generado por los eventos relevantes del cÃ¡lculo.",
                "Este protocolo IPT, previamente presentado en [4] sin prueba, se construye a partir de un protocolo de reloj vectorial agregando la gestiÃ³n de una matriz booleana local en cada proceso.3.1 El problema IPT como se indica en la introducciÃ³n, algunas aplicaciones (por ejemplo, anÃ¡lisis de ejecuciones distribuidas [6], la detecciÃ³n de propiedades distribuidas [7]) requieren determinar (sobre la marcha y sin mensajes adicionales) la \"reducciÃ³n transitiva\"de la relaciÃ³n â (es decir, no debemos considerar la dependencia causal transitiva)."
            ],
            "translated_text": "",
            "candidates": [
                "reducciÃ³n transitiva",
                "reducciÃ³n transitiva",
                "reducciÃ³n transitiva",
                "reducciÃ³n transitiva",
                "reducciÃ³n transitiva",
                "reducciÃ³n transitiva"
            ],
            "error": []
        },
        "channel ordering property": {
            "translated_key": "propiedad de ordenaciÃ³n de canales",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on <br>channel ordering property</br> is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Otra implementaciÃ³n eficiente que no depende de la \"propiedad de ordenamiento de canales\" se describe en [11]."
            ],
            "translated_text": "",
            "candidates": [
                "Propiedad de pedido de canales",
                "propiedad de ordenamiento de canales"
            ],
            "error": []
        },
        "ipt protocol": {
            "translated_key": "Protocolo IPT",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an <br>ipt protocol</br> is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an <br>ipt protocol</br> in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic <br>ipt protocol</br> and prove its correctness (Section 3.3).",
                "This <br>ipt protocol</br>, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic <br>ipt protocol</br> The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous <br>ipt protocol</br> (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous <br>ipt protocol</br> in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular <br>ipt protocol</br> described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting <br>ipt protocol</br> The complete text of the <br>ipt protocol</br> based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the <br>ipt protocol</br> does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the <br>ipt protocol</br>, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting <br>ipt protocol</br> (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Este problema se ha abordado por primera vez (hasta donde sabemos) en [4, 6] donde se describe un \"protocolo IPT\", pero sin prueba de correcciÃ³n.",
                "La SecciÃ³n 3 presenta el primer paso de la construcciÃ³n que da como resultado un \"protocolo IPT\" en el que cada mensaje lleva un reloj vectorial y una matriz booleana, ambos de tamaÃ±o N (el nÃºmero de procesos).",
                "Estas propiedades se utilizan para diseÃ±ar el \"protocolo IPT\" bÃ¡sico y probar su correcciÃ³n (SecciÃ³n 3.3).",
                "Este \"protocolo IPT\", previamente presentado en [4] sin prueba, se construye a partir de un protocolo de reloj vectorial agregando la gestiÃ³n de una matriz booleana local en cada proceso.3.1 El problema IPT como se indica en la introducciÃ³n, algunas aplicaciones (por ejemplo, anÃ¡lisis de ejecuciones distribuidas [6], la detecciÃ³n de propiedades distribuidas [7]) requieren determinar (sobre la marcha y sin mensajes adicionales) la reducciÃ³n transitiva de larelaciÃ³n â (es decir, no debemos considerar la dependencia causal transitiva).",
                "Sea e â Hi sea el evento de recepciÃ³n de un mensaje m.Si pred (e) â Ri, entonces, âj, ip (e) â© rj es igual a: ip (pred (e)) â© rj if lastr (pred (e), j)> lastr (send (m),j), ip (send (m)) â© rj if lastr (pred (e), j) <lastr (send (m), j) ip (pred (e)) â©ip (send (m)) â©rj ifLASTR (Pred (E), J) = LASTR (SEND (M), J).3.3 Un \"Protocolo IPT\" bÃ¡sico El protocolo bÃ¡sico propuesto aquÃ­ se asocia aquÃ­ con cada evento E relevante, un atributo que codifica el conjunto IP (e) de sus predecesores inmediatos.",
                "Este problema se aborda en la SecciÃ³n 5. 4.1 para transmitir o no transmitir informaciÃ³n de control, consideremos el \"Protocolo IPT\" anterior (SecciÃ³n 3.3).",
                "Una familia de protocolos IPT basados en condiciones evaluables que resulta del teorema anterior que, si Pi podrÃ­a evaluar K (M, K) cuando envÃ­a M a PJ, esto nos permitirÃ­a mejorar el \"Protocolo IPT\" anterior de la siguiente manera:En la regla R2, el triple (k, v ci [k], ipi [k]) se transmite con m solo si Â¬k (m, k).",
                "Esta aproximaciÃ³n trivialmente correcta de K en realidad corresponde al \"Protocolo IPT\" particular descrito en la SecciÃ³n 3 (en el que cada mensaje lleva un reloj de vector completo y un vector booleano completo).",
                "Tenemos: K2 (M, K) â K (M, K).5.2 \"Protocolo IPT\" resultante, sigue el texto completo del \"Protocolo IPT\" basado en la discusiÃ³n anterior.",
                "MÃ¡s precisamente, el \"Protocolo IPT\" no define cuÃ¡les son los eventos relevantes, solo tiene que garantizar una gestiÃ³n correcta de IPI [k].",
                "De manera diferente, la matriz MI no pertenece a la especificaciÃ³n del problema, es una variable auxiliar del \"protocolo IPT\", que lo administra para satisfacer las siguientes implicaciones cuando Pi envÃ­a M a PJ: (mi [J, k] = =1) â (pred (recibir (m)). V CJ [k] â¥ Enviar (m) .v Ci [k]).",
                "El \"protocolo IPT resultante\" (definido por las reglas RM0, RM1, RM2 y RM3) usa la misma condiciÃ³n K2 (M, K) que la anterior."
            ],
            "translated_text": "",
            "candidates": [
                "Protocolo IPT",
                "protocolo IPT",
                "Protocolo IPT",
                "protocolo IPT",
                "Protocolo IPT",
                "protocolo IPT",
                "Protocolo IPT",
                "protocolo IPT",
                "Protocolo IPT",
                "Protocolo IPT",
                "Protocolo IPT",
                "Protocolo IPT",
                "Protocolo IPT",
                "Protocolo IPT",
                "Protocolo IPT",
                "Protocolo IPT",
                "Protocolo IPT",
                "Protocolo IPT",
                "Protocolo IPT",
                "Protocolo IPT",
                "Protocolo IPT",
                "Protocolo IPT",
                "protocolo IPT",
                "Protocolo IPT",
                "protocolo IPT resultante"
            ],
            "error": []
        },
        "checkpointing problem": {
            "translated_key": "Problema de punto de control",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the <br>checkpointing problem</br> where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Otro ejemplo es el \"problema de punto de control\" donde un evento relevante es la definiciÃ³n de un punto de control local [10, 12, 20]."
            ],
            "translated_text": "",
            "candidates": [
                "Problema de punto de control",
                "problema de punto de control"
            ],
            "error": []
        },
        "relevant event": {
            "translated_key": "evento relevante",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each <br>relevant event</br>, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each <br>relevant event</br> with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given <br>relevant event</br> e, only a subset are its immediate predecessors: those are the events f such that there is no <br>relevant event</br> on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last <br>relevant event</br> belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each <br>relevant event</br> only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a <br>relevant event</br> corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a <br>relevant event</br> is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each <br>relevant event</br> is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last <br>relevant event</br> of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a <br>relevant event</br> e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more <br>relevant event</br>, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no <br>relevant event</br> g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each <br>relevant event</br> e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the <br>relevant event</br> e is an immediate predecessor of the <br>relevant event</br> f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a <br>relevant event</br>, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another <br>relevant event</br>, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each <br>relevant event</br> e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a <br>relevant event</br> e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a <br>relevant event</br> e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any <br>relevant event</br> e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a <br>relevant event</br> (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a <br>relevant event</br> e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a <br>relevant event</br> e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first <br>relevant event</br>.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a <br>relevant event</br> is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a <br>relevant event</br>).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each <br>relevant event</br> with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a <br>relevant event</br> and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Un importante problema de computaciÃ³n distribuida relacionada con la causalidad, que llamamos el problema de seguimiento de predecesores inmediatos (IPT), consiste en asociar con cada \"evento relevante\", sobre la marcha y sin usar mensajes de control adicionales, el conjunto de eventos relevantes que son sus inmediatos inmediatosPredecesores en el orden parcial.",
                "Este documento aborda el problema IPT: presenta una familia de protocolos que proporciona a cada \"evento relevante\" una marca de tiempo que identifica exactamente a sus predecesores inmediatos.",
                "Como consecuencia, entre todos los eventos relevantes que preceden causalmente a un \"evento relevante\" dado, solo un subconjunto son sus predecesores inmediatos: esos son los eventos f de tal manera que no hay un \"evento relevante\" en ningÃºn camino causal de F a E.Desafortunadamente, dada solo la marca de tiempo del vector asociado con un evento, no es posible determinar quÃ© eventos de su pasado causal son sus predecesores inmediatos.",
                "Esto proviene del hecho de que la marca de tiempo del vector asociada con E determina, para cada proceso, el Ãºltimo \"evento relevante\" pertenece al pasado causal de E, pero tal evento no es necesariamente un predecesor inmediato de e.Sin embargo, algunas aplicaciones [4, 6] requieren asociarse con cada \"evento relevante\" solo el conjunto de sus predecesores inmediatos.",
                "En ese caso, un \"evento relevante\" corresponde a la modificaciÃ³n de una variable local involucrada en el predicado global.",
                "Otro ejemplo es el problema del punto de control donde un \"evento relevante\" es la definiciÃ³n de un punto de control local [10, 12, 20].",
                "Cada \"evento relevante\" se identifica mediante un par (ID de proceso, nÃºmero de secuencia) (ver Figura 1).",
                "Para cada j tal que â (e) â© rj = â, el Ãºltimo \"evento relevante\" de PJ con respecto a E es: lastr (e, j) = max {f |f â â (e) â© rj}.",
                "VC1 Cada vez que produce un \"evento relevante\" e, PI incrementa su entrada de reloj vectorial v ci [i] (v ci [i]: = v ci [i] + 1) a 212 indica que ha producido un evento mÃ¡s \"relevante\", luego Pi se asocia con la marca de tiempo E.V C = V Ci.",
                "Dados dos eventos relevantes F y E, decimos que F es un predecesor inmediato de E If F â E y no hay \"evento relevante\" G tal que F â G â E.DefiniciÃ³n 3.",
                "El problema de seguimiento del predecesor inmediato (IPT) consiste en asociarse con cada \"evento relevante\" del conjunto de eventos relevantes que son sus predecesores inmediatos.",
                "Cuando consideramos la Figura 1, el grÃ¡fico representado en su parte derecha describe los predecesores inmediatos de los eventos relevantes del cÃ¡lculo definido en su parte izquierda, mÃ¡s precisamente, un borde dirigido (E, F) significa que el \"evento relevante\" E esUn predecesor inmediato del \"evento relevante\" F (3).",
                "Entonces, si Pred (E) es un \"evento relevante\", todos los eventos relevantes que pertenecen a su pasado causal relevante se separan de E por pred (E), y Pred (E) se convierte en el Ãºnico predecesor inmediato de E.En otras palabras, el evento pred (e) constituye un restablecimiento de W.R.T.El conjunto de predecesores inmediatos de e.Por otro lado, si el pred (e) no es relevante, no separa su pasado causal relevante de e.Lema 1.",
                "En un proceso en el que los Ãºltimos eventos relevantes de Pred (e) y Send (M) son el mismo evento F, ninguno de los caminos de F a E debe contener otro \"evento relevante\" y, por lo tanto, F debe ser predecesor inmediato deAmbos eventos pred (e) y envÃ­o (m).",
                "Sea e â Hi sea el evento de recepciÃ³n de un mensaje m.Si pred (e) â Ri, entonces, âj, ip (e) â© rj es igual a: ip (pred (e)) â© rj if lastr (pred (e), j)> lastr (send (m),j), ip (send (m)) â© rj if lastr (pred (e), j) <lastr (send (m), j) ip (pred (e)) â©ip (send (m)) â©rj ifLASTR (Pred (E), J) = LASTR (SEND (M), J).3.3 Un protocolo IPT bÃ¡sico El protocolo bÃ¡sico propuesto aquÃ­ se asocia con cada \"evento relevante\" e, un atributo que codifica el conjunto IP (e) de sus predecesores inmediatos.",
                "La marca de tiempo asociada con un \"evento relevante\" se denota E.Ts.",
                "R1 cada vez que produce un \"evento relevante\" E: - Pi Associates con E la marca de tiempo E.TS definido como sigue e.ts = {(k, v ci [k]) |Ipi [k] = 1}, - Pi incrementa su entrada de reloj vector V Ci [i] (es decir, ejecuta v Ci [i]: = v Ci [i] + 1), - Pi restablece IPI: â = i: IPI[]: = 0;IPI [i]: = 1.",
                "El protocolo descrito en la SecciÃ³n 3.3 resuelve el problema IPT: para cualquier \"evento relevante\" e, la marca de tiempo E.TS contiene los identificadores de todos sus predecesores inmediatos y ningÃºn otro identificador de eventos.4.",
                "En otras palabras, una vez que Ci (J, K) es verdadero, el Ãºnico evento de Pi que podrÃ­a restablecerlo a Falso es la recepciÃ³n de un mensaje que aumenta v ci [k] o, si k = i, la ocurrencia de un\"Evento relevante\" (que aumenta v Ci [i]).",
                "De la discusiÃ³n anterior se deduce que esta matriz se gestiona de acuerdo con las siguientes reglas (tenga en cuenta que su lÃ­nea I-Th no es significativa (caso J = I), y que su diagonal siempre es igual a 1): InicializaciÃ³n M0: â ((J, K): Mi [J, K] se inicializa a 1. 215 m1 cada vez que produce un \"evento relevante\" E: Pi restablece la columna Ã©sima de su matriz: âj = i: mi [j, i]::= 0.",
                "RM1 cada vez que produce un \"evento relevante\" E: - Pi Associates con E timestamp e.ts definido de la siguiente manera: e.ts = {(k, v ci [k]) |Ipi [k] = 1}, - Pi incrementa su entrada de reloj vector V Ci [i] (a saber, se ejecuta v Ci [i]: = v ci [i] + 1), - Pi restablece IPI: â = i:Ipi []: = 0;Ipi [i]: = 1. - Pi restablece la columna Ã©sima de su matriz booleana: âj = i: mi [j, i]: = 0.",
                "Por lo tanto, es posible mejorar el protocolo ejecutando este reinicio de la columna MI [â, i] solo cuando PI produce su primer \"evento relevante\".",
                "Con la distribuciÃ³n de tiempo uniforme, se genera un \"evento relevante\" (en promedio) cada 10 eventos de comunicaciÃ³n.",
                "Estos escenarios corresponden al caso en el que los eventos relevantes se generan a la frecuencia mÃ¡xima (es decir, cada vez que un proceso envÃ­a o recibe un mensaje, produce un \"evento relevante\").",
                "Ha presentado una familia de protocolos que proporciona a cada \"evento relevante\" una marca de tiempo que identifica exactamente a sus predecesores inmediatos.",
                "IEEE TOC, 46 (4): 456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 GainnumberOfTriples COMUNICACIÃN NÃºmero de eventos IPT1 IPT2 IPT3 Eventos relevantes (a) Los eventos relevantes siguen una distribuciÃ³n uniforme (relaciÃ³n = = = = = =1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 GainnumberOfTriples NÃºmero de eventos de comunicaciÃ³n IPT1 IPT2 IPT3 Eventos relevantes (b) Los eventos relevantes siguen una distribuciÃ³n de Poisson (Î» = 100) 0 10000 2000030000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 GaininnumberOfTriples COMUNICACIÃN NÃºmero de eventos IPT1 IPT2 IPT3 Eventos relevantes (c) Los eventos relevantes siguen una distribuciÃ³n normal 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 GainnumberFtriples CommunicationNÃºmero de eventos IPT1 IPT2 IPT3 Eventos relevantes (D)"
            ],
            "translated_text": "",
            "candidates": [
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "relevante",
                "Evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "Evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "Evento relevante",
                "evento relevante",
                "Evento relevante",
                "evento relevante",
                "evento relevante",
                "Evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "evento relevante",
                "Para cada PI, PI toma un \"evento relevante\" y transmite a todos los procesos Figura 3: Resultados experimentales 219 Evento relevante",
                "evento relevante"
            ],
            "error": []
        },
        "immediate predecessor": {
            "translated_key": "predecesor inmediato",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an <br>immediate predecessor</br> of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call <br>immediate predecessor</br> Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the <br>immediate predecessor</br> events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the <br>immediate predecessor</br> Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an <br>immediate predecessor</br> of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The <br>immediate predecessor</br> Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the <br>immediate predecessor</br> on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be <br>immediate predecessor</br> of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an <br>immediate predecessor</br> of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only <br>immediate predecessor</br> of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an <br>immediate predecessor</br> of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be <br>immediate predecessor</br> of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the <br>immediate predecessor</br> events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Esto proviene del hecho de que la marca de tiempo del vector asociada con E determina, para cada proceso, el Ãºltimo evento relevante pertenece al pasado causal de E, pero dicho evento no es necesariamente un \"predecesor inmediato\" de E.Sin embargo, algunas aplicaciones [4, 6] requieren asociarse con cada evento relevante solo el conjunto de sus predecesores inmediatos.",
                "Llamamos al seguimiento del \"predecesor inmediato\" (IPT) el problema que consiste en determinar sobre la mosca y sin mensajes adicionales, los predecesores inmediatos de los eventos relevantes.",
                "El protocolo bÃ¡sico de reloj de vector se enriquece primero al agregar a cada proceso un vector booleano cuya gestiÃ³n permite que los procesos rastreen los eventos de \"predecesor inmediato\".",
                "Predecesores inmediatos En esta secciÃ³n, se establece el problema de seguimiento del \"predecesor inmediato\" (IPT) (SecciÃ³n 3.1).",
                "Dados dos eventos relevantes F y E, decimos que F es un \"predecesor inmediato\" de E If F â E y no hay un evento relevante G tal que F â G â E.DefiniciÃ³n 3.",
                "El problema de seguimiento del \"predecesor inmediato\" (IPT) consiste en asociarse con cada evento relevante E El conjunto de eventos relevantes que son sus predecesores inmediatos.",
                "Primero, observamos que, por definiciÃ³n, el \"predecesor inmediato\" en PJ de un evento E es necesariamente el evento LASTR (E, J).",
                "Segundo, para que LASTR (E, J) sea \"predecesor inmediato\" de E, no debe haber otro evento LASTR (E, K) en un camino entre LASTR (E, J) y E.Estas observaciones se formalizan en la siguiente definiciÃ³n: DefiniciÃ³n 4.",
                "Cuando consideramos la Figura 1, el grÃ¡fico representado en su parte derecha describe los predecesores inmediatos de los eventos relevantes del cÃ¡lculo definido en su parte izquierda, mÃ¡s precisamente, un borde dirigido (E, F) significa que el evento relevante E es un \"predecesor inmediato \"del evento relevante F (3).",
                "Entonces, si Pred (e) es un evento relevante, todos los eventos relevantes que pertenecen a su pasado causal relevante se separan de E por pred (e), y Pred (e) se convierte en el Ãºnico \"predecesor inmediato\" de e.En otras palabras, el evento pred (e) constituye un restablecimiento de W.R.T.El conjunto de predecesores inmediatos de e.Por otro lado, si el pred (e) no es relevante, no separa su pasado causal relevante de e.Lema 1.",
                "Si Pred (e) es relevante, como se explica en el lema anterior, este evento se esconde de E todo su pasado causal relevante y se convierte en un \"predecesor inmediato\" de E.Con respecto a los Ãºltimos predecesores relevantes de SEND (M), solo aquellos que no son predecesores de Pred (E) siguen siendo predecesores inmediatos de E.Lema 2.",
                "En un proceso en el que los Ãºltimos eventos relevantes de Pred (e) y Send (M) son el mismo evento F, ninguno de los caminos de F a E debe contener otro evento relevante y, por lo tanto, F debe ser \"predecesor inmediato\" deAmbos eventos pred (e) y envÃ­o (m).",
                "Por Ãºltimo, pero no menos importante, es interesante observar que si uno no estÃ¡ interesado en rastrear los eventos de \"predecesor inmediato\", los protocolos presentados en el documento pueden simplificarse suprimiendo los vectores de booleanos IPI (pero manteniendo las matrices booleanas MI)."
            ],
            "translated_text": "",
            "candidates": [
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato ",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato",
                "predecesor inmediato"
            ],
            "error": []
        },
        "control information": {
            "translated_key": "informaciÃ³n de control",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback <br>control information</br> whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of <br>control information</br> required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback <br>control information</br> whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the <br>control information</br> carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry <br>control information</br> whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the <br>control information</br> attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit <br>control information</br> Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the <br>control information</br> transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the <br>control information</br> attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback <br>control information</br> whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the <br>control information</br> that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "La familia se define por una condiciÃ³n general que permite que los mensajes de aplicaciÃ³n sean \"informaciÃ³n de control\" cuyo tamaÃ±o puede ser menor que n (el nÃºmero de procesos).",
                "La nociÃ³n de barrera causal se introduce en [2, 17] para reducir el tamaÃ±o de la \"informaciÃ³n de control\" requerida para implementar multidifusiÃ³n causal.",
                "La familia de los protocolos IPT se define mediante una condiciÃ³n general que permite que los mensajes de aplicaciÃ³n sean \"informaciÃ³n de control\" cuyo tamaÃ±o puede ser mÃ¡s pequeÃ±o que el tamaÃ±o del sistema (es decir, menor que el nÃºmero de procesos que componen el sistema).",
                "Luego, se establece una condiciÃ³n general para reducir el tamaÃ±o de la \"informaciÃ³n de control\" llevada por los mensajes.",
                "La SecciÃ³n 4 mejora este protocolo al proporcionar la condiciÃ³n general que permite que un mensaje transporte \"informaciÃ³n de control\" cuyo tamaÃ±o puede ser menor que n.La SecciÃ³n 5 proporciona instanciaciones de esta condiciÃ³n.",
                "Primero, se puede omitir una condiciÃ³n general que caracteriza quÃ© entradas de vectores v CI y IPI se pueden omitir de la \"informaciÃ³n de control\" adjunta a un mensaje enviado en el cÃ¡lculo (SecciÃ³n 4.1).",
                "Este problema se aborda en la SecciÃ³n 5. 4.1 para transmitir o no transmitir \"informaciÃ³n de control\" consideremos el protocolo IPT anterior (SecciÃ³n 3.3).",
                "En tal caso, el valor m.v c [k] es inÃºtil y podrÃ­a omitirse de la \"informaciÃ³n de control\" transmitida con M por Pi a PJ.",
                "Estas observaciones conducen a la definiciÃ³n de la condiciÃ³n k (m, k) que caracteriza quÃ© entradas de vectores v CI y IPI pueden omitirse de la \"informaciÃ³n de control\" adjunta a un mensaje m enviado por un proceso PI a un proceso PJ: DefiniciÃ³n5.",
                "La familia se define por una condiciÃ³n general que permite que los mensajes de aplicaciÃ³n sean \"informaciÃ³n de control\" cuyo tamaÃ±o puede ser menor que n (el nÃºmero de procesos).",
                "Curiosamente, tambiÃ©n se ha demostrado que la eficiencia de los protocolos (medidos en tÃ©rminos del tamaÃ±o de la \"informaciÃ³n de control\" que no estÃ¡ respaldada por un mensaje de aplicaciÃ³n) depende del patrÃ³n definido por los eventos de comunicaciÃ³n y los eventos relevantes."
            ],
            "translated_text": "",
            "candidates": [
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "InformaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control",
                "informaciÃ³n de control"
            ],
            "error": []
        },
        "piggybacking": {
            "translated_key": "piggybacking",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and <br>piggybacking</br> the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, <br>piggybacking</br> the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, <br>piggybacking</br> the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional <br>piggybacking</br> of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Supongamos que existe un evento e = recibir (m) con e <send (m), m enviado por PJ y \"piggybacking\" el triple (k, m .v c [k], m .ip [k]) y m.V C [K] â¥ V Ci [k] (de ahÃ­ m .v c [k] = recibir (m) .v ci [k]).",
                "Del mismo modo, una vez que CI (J, K) es falso, el Ãºnico evento que puede establecerlo en verdadero es el recibo de un mensaje M de PJ, \"Piggybacking\" el triple (k, m .v c [k], m .ip [k]) con m .v c [k] â¥ v ci [k].",
                "De hecho, como se explicÃ³ la SecciÃ³n 5.1, el predicado C (implementado localmente por la matriz m) se basÃ³ en la existencia de un mensaje M enviado por PJ a Pi, \"Piggybacking\" el triple (k, m .v c [k], m.IP [k]), y M .v C [k] â¥ v ci [k], es decir, sobre la existencia de una transmisiÃ³n directa de informaciÃ³n (por el mensaje M).",
                "Por lo tanto, una transmisiÃ³n directa de la informaciÃ³n es suficiente para obtener rÃ¡pidamente matrices MI igual a [1, ..., 1] ,..., [1, ..., 1].â¢ La segunda lecciÃ³n se refiere a IPT3, mÃ¡s precisamente, la compensaciÃ³n entre el \"piggybacking\" adicional de los vectores booleanos y el nÃºmero de triples cuya transmisiÃ³n se guarda."
            ],
            "translated_text": "",
            "candidates": [
                "abatido",
                "piggybacking",
                "abatido",
                "Piggybacking",
                "abatido",
                "Piggybacking",
                "abatido",
                "piggybacking"
            ],
            "error": []
        },
        "causality track": {
            "translated_key": "pista de causalidad",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "hasse diagram": {
            "translated_key": "diagrama de hasse",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., <br>hasse diagram</br>) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (<br>hasse diagram</br>) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (<br>hasse diagram</br>) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the <br>hasse diagram</br> associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the <br>hasse diagram</br> of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Entonces, IPT es el cÃ¡lculo sobre la marcha de la reducciÃ³n transitiva (es decir, \"diagrama Hasse\") de la relaciÃ³n de causalidad definida por un cÃ¡lculo distribuido.",
                "Este problema consiste en realidad para determinar la reducciÃ³n transitiva (\"diagrama de hasse\") del grÃ¡fico de causalidad generado por los eventos relevantes del cÃ¡lculo.",
                "Si E es el primer evento producido por PI, entonces Pred (e) se denota por â¥ (lo que significa que no hay tal evento), y âe â Hi: â¥ <e.El orden parcial BH = (H, Hb â) constituye un modelo formal del cÃ¡lculo distribuido con el que se asocia.1 Esta suposiciÃ³n es solo para obtener protocolos simples.211 p1 p2 p3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3) (1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1](1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figura 1: Eventos relevantes y grÃ¡fico de predecesores inmediatos.(\"Diagrama Hasse\") 2.2 Eventos relevantes para un observador dado de un cÃ¡lculo distribuido, solo algunos eventos son relevantes2 [7, 9, 15].",
                "Como se seÃ±alÃ³ en la introducciÃ³n, el problema IPT es el cÃ¡lculo del \"diagrama de Hasse\" asociado con el conjunto parcialmente ordenado de los eventos relevantes producidos por un cÃ¡lculo distribuido.3.2 Propiedades formales de IPT Para diseÃ±ar un protocolo que resuelva el problema IPT, es Ãºtil considerar la nociÃ³n de predecesor relevante inmediato de cualquier evento, ya sea relevante o no.",
                "De los lemas anteriores, el conjunto 3 en realidad, este grÃ¡fico es el \"diagrama de Hasse\" del orden parcial asociado con el cÃ¡lculo distribuido.213 IP (e) de cualquier evento E depende de los conjuntos IP de los eventos pred (e) y/o envÃ­an (m) (cuando e = recibir (m))."
            ],
            "translated_text": "",
            "candidates": [
                "diagrama de hasse",
                "diagrama Hasse",
                "diagrama de hasse",
                "diagrama de hasse",
                "diagrama de hasse",
                "Diagrama Hasse",
                "diagrama de hasse",
                "diagrama de Hasse",
                "diagrama de hasse",
                "diagrama de Hasse"
            ],
            "error": []
        },
        "message-pass": {
            "translated_key": "paso de mensajes",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a timestamp that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The timestamp of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector timestamp associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector timestamp associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector timestamp whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the timestamp e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the timestamp of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The timestamp associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the timestamp e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the timestamp e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a timestamp that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the timestamp carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "timestamp": {
            "translated_key": "marca de tiempo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Tracking Immediate Predecessors in Distributed Computations Emmanuelle Anceaume Jean-Michel HÂ´elary Michel Raynal IRISA, Campus Beaulieu 35042 Rennes Cedex, France FirstName.LastName@irisa.fr ABSTRACT A distributed computation is usually modeled as a partially ordered set of relevant events (the relevant events are a subset of the primitive events produced by the computation).",
                "An important causality-related distributed computing problem, that we call the Immediate Predecessors Tracking (IPT) problem, consists in associating with each relevant event, on the fly and without using additional control messages, the set of relevant events that are its immediate predecessors in the partial order.",
                "So, IPT is the on-the-fly computation of the transitive reduction (i.e., Hasse diagram) of the causality relation defined by a distributed computation.",
                "This paper addresses the IPT problem: it presents a family of protocols that provides each relevant event with a <br>timestamp</br> that exactly identifies its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Two of them are exhibited.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: General Terms Asynchronous Distributed Computations 1.",
                "INTRODUCTION A distributed computation consists of a set of processes that cooperate to achieve a common goal.",
                "A main characteristic of these computations lies in the fact that the processes do not share a common global memory, and communicate only by exchanging messages over a communication network.",
                "Moreover, message transfer delays are finite but unpredictable.",
                "This computation model defines what is known as the asynchronous distributed system model.",
                "It is particularly important as it includes systems that span large geographic areas, and systems that are subject to unpredictable loads.",
                "Consequently, the concepts, tools and mechanisms developed for asynchronous distributed systems reveal to be both important and general.",
                "Causality is a key concept to understand and master the behavior of asynchronous distributed systems [18].",
                "More precisely, given two events e and f of a distributed computation, a crucial problem that has to be solved in a lot of distributed applications is to know whether they are causally related, i.e., if the occurrence of one of them is a consequence of the occurrence of the other.",
                "The causal past of an event e is the set of events from which e is causally dependent.",
                "Events that are not causally dependent are said to be concurrent.",
                "Vector clocks [5, 16] have been introduced to allow processes to track causality (and concurrency) between the events they produce.",
                "The <br>timestamp</br> of an event produced by a process is the current value of the vector clock of the corresponding process.",
                "In that way, by associating vector timestamps with events it becomes possible to safely decide whether two events are causally related or not.",
                "Usually, according to the problem he focuses on, a designer is interested only in a subset of the events produced by a distributed execution (e.g., only the checkpoint events are meaningful when one is interested in determining consistent global checkpoints [12]).",
                "It follows that detecting causal dependencies (or concurrency) on all the events of the distributed computation is not desirable in all applications [7, 15].",
                "In other words, among all the events that may occur in a distributed computation, only a subset of them are relevant.",
                "In this paper, we are interested in the restriction of the causality relation to the subset of events defined as being the relevant events of the computation.",
                "Being a strict partial order, the causality relation is transitive.",
                "As a consequence, among all the relevant events that causally precede a given relevant event e, only a subset are its immediate predecessors: those are the events f such that there is no relevant event on any causal path from f to e. Unfortunately, given only the vector <br>timestamp</br> associated with an event it is not possible to determine which events of its causal past are its immediate predecessors.",
                "This comes from the fact that the vector <br>timestamp</br> associated with e determines, for each process, the last relevant event belong210 ing to the causal past of e, but such an event is not necessarily an immediate predecessor of e. However, some applications [4, 6] require to associate with each relevant event only the set of its immediate predecessors.",
                "Those applications are mainly related to the analysis of distributed computations.",
                "Some of those analyses require the construction of the lattice of consistent cuts produced by the computation [15, 16].",
                "It is shown in [4] that the tracking of immediate predecessors allows an efficient on the fly construction of this lattice.",
                "More generally, these applications are interested in the very structure of the causal past.",
                "In this context, the determination of the immediate predecessors becomes a major issue [6].",
                "Additionally, in some circumstances, this determination has to satisfy behavior constraints.",
                "If the communication pattern of the distributed computation cannot be modified, the determination has to be done without adding control messages.",
                "When the immediate predecessors are used to monitor the computation, it has to be done on the fly.",
                "We call Immediate Predecessor Tracking (IPT) the problem that consists in determining on the fly and without additional messages the immediate predecessors of relevant events.",
                "This problem consists actually in determining the transitive reduction (Hasse diagram) of the causality graph generated by the relevant events of the computation.",
                "Solving this problem requires tracking causality, hence using vector clocks.",
                "Previous works have addressed the efficient implementation of vector clocks to track causal dependence on relevant events.",
                "Their aim was to reduce the size of timestamps attached to messages.",
                "An efficient vector clock implementation suited to systems with fifo channels is proposed in [19].",
                "Another efficient implementation that does not depend on channel ordering property is described in [11].",
                "The notion of causal barrier is introduced in [2, 17] to reduce the size of control information required to implement causal multicast.",
                "However, none of these papers considers the IPT problem.",
                "This problem has been addressed for the first time (to our knowledge) in [4, 6] where an IPT protocol is described, but without correctness proof.",
                "Moreover, in this protocol, timestamps attached to messages are of size n. This raises the following question which, to our knowledge, has never been answered: Are there efficient vector clock implementation techniques that are suitable for the IPT problem?.",
                "This paper has three main contributions: (1) a positive answer to the previous open question, (2) the design of a family of efficient IPT protocols, and (3) a formal correctness proof of the associated protocols.",
                "From a methodological point of view the paper uses a top-down approach.",
                "It states abstract properties from which more concrete properties and protocols are derived.",
                "The family of IPT protocols is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than the system size (i.e., smaller than the number of processes composing the system).",
                "In that sense, this family defines low cost IPT protocols when we consider the message size.",
                "In addition to efficiency, the proposed approach has an interesting design property.",
                "Namely, the family is incrementally built in three steps.",
                "The basic vector clock protocol is first enriched by adding to each process a boolean vector whose management allows the processes to track the immediate predecessor events.",
                "Then, a general condition is stated to reduce the size of the control information carried by messages.",
                "Finally, according to the way this condition is implemented, three IPT protocols are obtained.",
                "The paper is composed of seven sections.",
                "Sections 2 introduces the computation model, vector clocks and the notion of relevant events.",
                "Section 3 presents the first step of the construction that results in an IPT protocol in which each message carries a vector clock and a boolean array, both of size n (the number of processes).",
                "Section 4 improves this protocol by providing the general condition that allows a message to carry control information whose size can be smaller than n. Section 5 provides instantiations of this condition.",
                "Section 6 provides a simulation study comparing the behaviors of the proposed protocols.",
                "Finally, Section 7 concludes the paper. (Due to space limitations, proofs of lemmas and theorems are omitted.",
                "They can be found in [1].) 2.",
                "MODEL AND VECTOR CLOCK 2.1 Distributed Computation A distributed program is made up of sequential local programs which communicate and synchronize only by exchanging messages.",
                "A distributed computation describes the execution of a distributed program.",
                "The execution of a local program gives rise to a sequential process.",
                "Let {P1, P2, . . . , Pn} be the finite set of sequential processes of the distributed computation.",
                "Each ordered pair of communicating processes (Pi, Pj ) is connected by a reliable channel cij through which Pi can send messages to Pj.",
                "We assume that each message is unique and a process does not send messages to itself1 .",
                "Message transmission delays are finite but unpredictable.",
                "Moreover, channels are not necessarily fifo.",
                "Process speeds are positive but arbitrary.",
                "In other words, the underlying computation model is asynchronous.",
                "The local program associated with Pi can include send, receive and internal statements.",
                "The execution of such a statement produces a corresponding send/receive/internal event.",
                "These events are called primitive events.",
                "Let ex i be the x-th event produced by process Pi.",
                "The sequence hi = e1 i e2 i . . . ex i . . . constitutes the history of Pi, denoted Hi.",
                "Let H = âªn i=1Hi be the set of events produced by a distributed computation.",
                "This set is structured as a partial order by Lamports happened before relation [14] (denoted hb â) and defined as follows: ex i hb â ey j if and only if (i = j â§ x + 1 = y) (local precedence) â¨ (âm : ex i = send(m) â§ ey j = receive(m)) (msg prec.) â¨ (â ez k : ex i hb â ez k â§ e z k hb â ey j ) (transitive closure). max(ex i , ey j ) is a partial function defined only when ex i and ey j are ordered.",
                "It is defined as follows: max(ex i , ey j ) = ex i if ey j hb â ex i , max(ex i , ey j ) = ey i if ex i hb â ey j .",
                "Clearly the restriction of hb â to Hi, for a given i, is a total order.",
                "Thus we will use the notation ex i < ey i iff x < y.",
                "Throughout the paper, we will use the following notation: if e â Hi is not the first event produced by Pi, then pred(e) denotes the event immediately preceding e in the sequence Hi.",
                "If e is the first event produced by Pi, then pred(e) is denoted by â¥ (meaning that there is no such event), and âe â Hi : â¥ < e. The partial order bH = (H, hb â) constitutes a formal model of the distributed computation it is associated with. 1 This assumption is only in order to get simple protocols. 211 P1 P2 P3 [1, 1, 2] [1, 0, 0] [3, 2, 1] [1, 1, 0] (2, 1) [0, 0, 1] (3, 1) [2, 0, 1] (1, 1) (1, 3)(1, 2) (2, 2) (2, 3) (3, 2) [2, 2, 1] [2, 3, 1] (1, 1) (1, 2) (1, 3) (2, 1) (2, 2) (2, 3) (3, 1) (3, 2) Figure 1: Timestamped Relevant Events and Immediate Predecessors Graph (Hasse Diagram) 2.2 Relevant Events For a given observer of a distributed computation, only some events are relevant2 [7, 9, 15].",
                "An interesting example of what an observation is, is the detection of predicates on consistent global states of a distributed computation [3, 6, 8, 9, 13, 15].",
                "In that case, a relevant event corresponds to the modification of a local variable involved in the global predicate.",
                "Another example is the checkpointing problem where a relevant event is the definition of a local checkpoint [10, 12, 20].",
                "The left part of Figure 1 depicts a distributed computation using the classical space-time diagram.",
                "In this figure, only relevant events are represented.",
                "The sequence of relevant events produced by process Pi is denoted by Ri, and R = âªn i=1Ri â H denotes the set of all relevant events.",
                "Let â be the relation on R defined in the following way: â (e, f) â R Ã R : (e â f) â (e hb â f).",
                "The poset (R, â) constitutes an abstraction of the distributed computation [7].",
                "In the following we consider a distributed computation at such an abstraction level.",
                "Moreover, without loss of generality we consider that the set of relevant events is a subset of the internal events (if a communication event has to be observed, a relevant internal event can be generated just before a send and just after a receive communication event occurred).",
                "Each relevant event is identified by a pair (process id, sequence number) (see Figure 1).",
                "Definition 1.",
                "The relevant causal past of an event e â H is the (partially ordered) subset of relevant events f such that f hb â e. It is denoted â (e).",
                "We have â (e) = {f â R | f hb â e}.",
                "Note that, if e â R then â (e) = {f â R | f â e}.",
                "In the computation described in Figure 1, we have, for the event e identified (2, 2): â (e) = {(1, 1), (1, 2), (2, 1), (3, 1)}.",
                "The following properties are immediate consequences of the previous definitions.",
                "Let e â H. CP1 If e is not a receive event then â (e) = 8 < : â if pred(e) = â¥, â (pred(e)) âª {pred(e)} if pred(e) â R, â (pred(e)) if pred(e) â R. CP2 If e is a receive event (of a message m) then â (e) = 8 >>< >>: â (send(m)) if pred(e) = â¥, â (pred(e))âª â (send(m)) âª {pred(e)} if pred(e) â R, â (pred(e))âª â (send(m)) if pred(e) â R. 2 Those events are sometimes called observable events.",
                "Definition 2.",
                "Let e â Hi.",
                "For every j such that â (e) â© Rj = â, the last relevant event of Pj with respect to e is: lastr(e, j) = max{f | f ââ (e) â© Rj}.",
                "When â (e) â© Rj = â, lastr(e, j) is denoted by â¥ (meaning that there is no such event).",
                "Let us consider the event e identified (2,2) in Figure 1.",
                "We have lastr(e, 1) = (1, 2), lastr(e, 2) = (2, 1), lastr(e, 3) = (3, 1).",
                "The following properties relate the events lastr(e, j) and lastr(f, j) for all the predecessors f of e in the relation hb â.",
                "These properties follow directly from the definitions.",
                "Let e â Hi.",
                "LR0 âe â Hi: lastr(e, i) = 8 < : â¥ if pred(e) = â¥, pred(e) if pred(e) â R, lastr(pred(e),i) if pred(e) â R. LR1 If e is not a receipt event: âj = i : lastr(e, j) = lastr(pred(e),j).",
                "LR2 If e is a receive event of m: âj = i : lastr(e, j) = max(lastr(pred(e),j), lastr(send(m),j)). 2.3 Vector Clock System Definition As a fundamental concept associated with the causality theory, vector clocks have been introduced in 1988, simultaneously and independently by Fidge [5] and Mattern [16].",
                "A vector clock system is a mechanism that associates timestamps with events in such a way that the comparison of their timestamps indicates whether the corresponding events are or are not causally related (and, if they are, which one is the first).",
                "More precisely, each process Pi has a vector of integers V Ci[1..n] such that V Ci[j] is the number of relevant events produced by Pj, that belong to the current relevant causal past of Pi.",
                "Note that V Ci[i] counts the number of relevant events produced so far by Pi.",
                "When a process Pi produces a (relevant) event e, it associates with e a vector <br>timestamp</br> whose value (denoted e.V C) is equal to the current value of V Ci.",
                "Vector Clock Implementation The following implementation of vector clocks [5, 16] is based on the observation that âi, âe â Hi, âj : e.V Ci[j] = y â lastr(e, j) = ey j where e.V Ci is the value of V Ci just after the occurrence of e (this relation results directly from the properties LR0, LR1, and LR2).",
                "Each process Pi manages its vector clock V Ci[1..n] according to the following rules: VC0 V Ci[1..n] is initialized to [0, . . . , 0].",
                "VC1 Each time it produces a relevant event e, Pi increments its vector clock entry V Ci[i] (V Ci[i] := V Ci[i] + 1) to 212 indicate it has produced one more relevant event, then Pi associates with e the <br>timestamp</br> e.V C = V Ci.",
                "VC2 When a process Pi sends a message m, it attaches to m the current value of V Ci.",
                "Let m.V C denote this value.",
                "VC3 When Pi receives a message m, it updates its vector clock as follows: âk : V Ci[k] := max(V Ci[k], m.V C[k]). 3.",
                "IMMEDIATE PREDECESSORS In this section, the Immediate Predecessor Tracking (IPT) problem is stated (Section 3.1).",
                "Then, some technical properties of immediate predecessors are stated and proved (Section 3.2).",
                "These properties are used to design the basic IPT protocol and prove its correctness (Section 3.3).",
                "This IPT protocol, previously presented in [4] without proof, is built from a vector clock protocol by adding the management of a local boolean array at each process. 3.1 The IPT Problem As indicated in the introduction, some applications (e.g., analysis of distributed executions [6], detection of distributed properties [7]) require to determine (on-the-fly and without additional messages) the transitive reduction of the relation â (i.e., we must not consider transitive causal dependency).",
                "Given two relevant events f and e, we say that f is an immediate predecessor of e if f â e and there is no relevant event g such that f â g â e. Definition 3.",
                "The Immediate Predecessor Tracking (IPT) problem consists in associating with each relevant event e the set of relevant events that are its immediate predecessors.",
                "Moreover, this has to be done on the fly and without additional control message (i.e., without modifying the communication pattern of the computation).",
                "As noted in the Introduction, the IPT problem is the computation of the Hasse diagram associated with the partially ordered set of the relevant events produced by a distributed computation. 3.2 Formal Properties of IPT In order to design a protocol solving the IPT problem, it is useful to consider the notion of immediate relevant predecessor of any event, whether relevant or not.",
                "First, we observe that, by definition, the immediate predecessor on Pj of an event e is necessarily the lastr(e, j) event.",
                "Second, for lastr(e, j) to be immediate predecessor of e, there must not be another lastr(e, k) event on a path between lastr(e, j) and e. These observations are formalized in the following definition: Definition 4.",
                "Let e â Hi.",
                "The set of immediate relevant predecessors of e (denoted IP(e)), is the set of the relevant events lastr(e, j) (j = 1, . . . , n) such that âk : lastr(e, j) ââ (lastr(e, k)).",
                "It follows from this definition that IP(e) â {lastr(e, j)|j = 1, . . . , n} ââ (e).",
                "When we consider Figure 1, The graph depicted in its right part describes the immediate predecessors of the relevant events of the computation defined in its left part, more precisely, a directed edge (e, f) means that the relevant event e is an immediate predecessor of the relevant event f (3 ).",
                "The following lemmas show how the set of immediate predecessors of an event is related to those of its predecessors in the relation hb â.",
                "They will be used to design and prove the protocols solving the IPT problem.",
                "To ease the reading of the paper, their proofs are presented in Appendix A.",
                "The intuitive meaning of the first lemma is the following: if e is not a receive event, all the causal paths arriving at e have pred(e) as next-to-last event (see CP1).",
                "So, if pred(e) is a relevant event, all the relevant events belonging to its relevant causal past are separated from e by pred(e), and pred(e) becomes the only immediate predecessor of e. In other words, the event pred(e) constitutes a reset w.r.t. the set of immediate predecessors of e. On the other hand, if pred(e) is not relevant, it does not separate its relevant causal past from e. Lemma 1.",
                "If e is not a receive event, IP(e) is equal to: â if pred(e) = â¥, {pred(e)} if pred(e) â R, IP(pred(e)) if pred(e) â R. The intuitive meaning of the next lemma is as follows: if e is a receive event receive(m), the causal paths arriving at e have either pred(e) or send(m) as next-to-last events.",
                "If pred(e) is relevant, as explained in the previous lemma, this event hides from e all its relevant causal past and becomes an immediate predecessor of e. Concerning the last relevant predecessors of send(m), only those that are not predecessors of pred(e) remain immediate predecessors of e. Lemma 2.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: {pred(e)} if j = i, â if lastr(pred(e),j) â¥ lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j).",
                "The intuitive meaning of the next lemma is the following: if e is a receive event receive(m), and pred(e) is not relevant, the last relevant events in the relevant causal past of e are obtained by merging those of pred(e) and those of send(m) and by taking the latest on each process.",
                "So, the immediate predecessors of e are either those of pred(e) or those of send(m).",
                "On a process where the last relevant events of pred(e) and of send(m) are the same event f, none of the paths from f to e must contain another relevant event, and thus, f must be immediate predecessor of both events pred(e) and send(m).",
                "Lemma 3.",
                "Let e â Hi be the receive event of a message m. If pred(e) â Ri, then, âj, IP(e) â© Rj is equal to: IP(pred(e)) â© Rj if lastr(pred(e),j) > lastr(send(m),j), IP(send(m)) â© Rj if lastr(pred(e),j) < lastr(send(m),j) IP(pred(e))â©IP(send(m))â©Rj if lastr(pred(e),j) = lastr (send(m), j). 3.3 A Basic IPT Protocol The basic protocol proposed here associates with each relevant event e, an attribute encoding the set IP(e) of its immediate predecessors.",
                "From the previous lemmas, the set 3 Actually, this graph is the Hasse diagram of the partial order associated with the distributed computation. 213 IP(e) of any event e depends on the sets IP of the events pred(e) and/or send(m) (when e = receive(m)).",
                "Hence the idea to introduce a data structure allowing to manage the sets IPs inductively on the poset (H, hb â).",
                "To take into account the information from pred(e), each process manages a boolean array IPi such that, âe â Hi the value of IPi when e occurs (denoted e.IPi) is the boolean array representation of the set IP(e).",
                "More precisely, âj : IPi[j] = 1 â lastr(e, j) â IP(e).",
                "As recalled in Section 2.3, the knowledge of lastr(e,j) (for every e and every j) is based on the management of vectors V Ci.",
                "Thus, the set IP(e) is determined in the following way: IP(e) = {ey j | e.V Ci[j] = y â§ e.IPi[j] = 1, j = 1, . . . , n} Each process Pi updates IPi according to the Lemmas 1, 2, and 3: 1.",
                "It results from Lemma 1 that, if e is not a receive event, the current value of IPi is sufficient to determine e.IPi.",
                "It results from Lemmas 2 and 3 that, if e is a receive event (e = receive(m)), then determining e.IPi involves information related to the event send(m).",
                "More precisely, this information involves IP(send(m)) and the <br>timestamp</br> of send(m) (needed to compare the events lastr(send(m),j) and lastr(pred(e),j), for every j).",
                "So, both vectors send(m).V Cj and send(m).IPj (assuming send(m) produced by Pj ) are attached to message m. 2.",
                "Moreover, IPi must be updated upon the occurrence of each event.",
                "In fact, the value of IPi just after an event e is used to determine the value succ(e).IPi.",
                "In particular, as stated in the Lemmas, the determination of succ(e).IPi depends on whether e is relevant or not.",
                "Thus, the value of IPi just after the occurrence of event e must keep track of this event.",
                "The following protocol, previously presented in [4] without proof, ensures the correct management of arrays V Ci (as in Section 2.3) and IPi (according to the Lemmas of Section 3.2).",
                "The <br>timestamp</br> associated with a relevant event e is denoted e.TS.",
                "R0 Initialization: Both V Ci[1..n] and IPi[1..n] are initialized to [0, . . . , 0].",
                "R1 Each time it produces a relevant event e: - Pi associates with e the <br>timestamp</br> e.TS defined as follows e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1.",
                "R2 When Pi sends a message m to Pj, it attaches to m the current values of V Ci (denoted m.V C) and the boolean array IPi (denoted m.IP).",
                "R3 When it receives a message m from Pj , Pi executes the following updates: âk â [1..n] : case V Ci[k] < m.V C[k] thenV Ci[k] := m.V C[k]; IPi[k] := m.IP[k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]) V Ci[k] > m.V C[k] then skip endcase The proof of the following theorem directly follows from Lemmas 1, 2 and 3.",
                "Theorem 1.",
                "The protocol described in Section 3.3 solves the IPT problem: for any relevant event e, the <br>timestamp</br> e.TS contains the identifiers of all its immediate predecessors and no other event identifier. 4.",
                "A GENERAL CONDITION This section addresses a previously open problem, namely, How to solve the IPT problem without requiring each application message to piggyback a whole vector clock and a whole boolean array?.",
                "First, a general condition that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message sent in the computation, is defined (Section 4.1).",
                "It is then shown (Section 4.2) that this condition is both sufficient and necessary.",
                "However, this general condition cannot be locally evaluated by a process that is about to send a message.",
                "Thus, locally evaluable approximations of this general condition must be defined.",
                "To each approximation corresponds a protocol, implemented with additional local data structures.",
                "In that sense, the general condition defines a family of IPT protocols, that solve the previously open problem.",
                "This issue is addressed in Section 5. 4.1 To Transmit or Not to Transmit Control Information Let us consider the previous IPT protocol (Section 3.3).",
                "Rule R3 shows that a process Pj does not systematically update each entry V Cj[k] each time it receives a message m from a process Pi: there is no update of V Cj[k] when V Cj[k] â¥ m.V C[k].",
                "In such a case, the value m.V C[k] is useless, and could be omitted from the control information transmitted with m by Pi to Pj.",
                "Similarly, some entries IPj[k] are not updated when a message m from Pi is received by Pj.",
                "This occurs when 0 < V Cj[k] = m.V C[k] â§ m.IP[k] = 1, or when V Cj [k] > m.V C[k], or when m.V C[k] = 0 (in the latest case, as m.IP[k] = IPi[k] = 0 then no update of IPj[k] is necessary).",
                "Differently, some other entries are systematically reset to 0 (this occurs when 0 < V Cj [k] = m.V C[k] â§ m.IP[k] = 0).",
                "These observations lead to the definition of the condition K(m, k) that characterizes which entries of vectors V Ci and IPi can be omitted from the control information attached to a message m sent by a process Pi to a process Pj: Definition 5.",
                "K(m, k) â¡ (send(m).V Ci[k] = 0) â¨ (send(m).V Ci[k] < pred(receive(m)).V Cj[k]) â¨ ; (send(m).V Ci[k] = pred(receive(m)).V Cj[k]) â§(send(m).IPi[k] = 1) . 4.2 A Necessary and Sufficient Condition We show here that the condition K(m, k) is both necessary and sufficient to decide which triples of the form (k, send(m).V Ci[k], send(m).IPi[k]) can be omitted in an outgoing message m sent by Pi to Pj.",
                "A triple attached to m will also be denoted (k, m.V C[k], m.IP[k]).",
                "Due to space limitations, the proofs of Lemma 4 and Lemma 5 are given in [1]. (The proof of Theorem 2 follows directly from these lemmas.) 214 Lemma 4. (Sufficiency) If K(m, k) is true, then the triple (k, m.V C[k], m.IP[k]) is useless with respect to the correct management of IPj[k] and V Cj [k].",
                "Lemma 5. (Necessity) If K(m, k) is false, then the triple (k, m.V C[k], m.IP[k]) is necessary to ensure the correct management of IPj[k] and V Cj [k].",
                "Theorem 2.",
                "When a process Pi sends m to a process Pj, the condition K(m, k) is both necessary and sufficient not to transmit the triple (k, send(m).V Ci[k], send(m).IPi[k]). 5.",
                "A FAMILY OF IPT PROTOCOLS BASED ON EVALUABLE CONDITIONS It results from the previous theorem that, if Pi could evaluate K(m, k) when it sends m to Pj, this would allow us improve the previous IPT protocol in the following way: in rule R2, the triple (k, V Ci[k], IPi[k]) is transmitted with m only if Â¬K(m, k).",
                "Moreover, rule R3 is appropriately modified to consider only triples carried by m. However, as previously mentioned, Pi cannot locally evaluate K(m, k) when it is about to send m. More precisely, when Pi sends m to Pj , Pi knows the exact values of send(m).V Ci[k] and send(m).IPi[k] (they are the current values of V Ci[k] and IPi[k]).",
                "But, as far as the value of pred(receive(m)).V Cj[k] is concerned, two cases are possible.",
                "Case (i): If pred(receive(m)) hb â send(m), then Pi can know the value of pred(receive(m)).V Cj[k] and consequently can evaluate K(m, k).",
                "Case (ii): If pred(receive(m)) and send(m) are concurrent, Pi cannot know the value of pred(receive(m)).V Cj[k] and consequently cannot evaluate K(m, k).",
                "Moreover, when it sends m to Pj , whatever the case (i or ii) that actually occurs, Pi has no way to know which case does occur.",
                "Hence the idea to define evaluable approximations of the general condition.",
                "Let K (m, k) be an approximation of K(m, k), that can be evaluated by a process Pi when it sends a message m. To be correct, the condition K must ensure that, every time Pi should transmit a triple (k, V Ci[k], IPi[k]) according to Theorem 2 (i.e., each time Â¬K(m, k)), then Pi transmits this triple when it uses condition K .",
                "Hence, the definition of a correct evaluable approximation: Definition 6.",
                "A condition K , locally evaluable by a process when it sends a message m to another process, is correct if â(m, k) : Â¬K(m, k) â Â¬K (m, k) or, equivalently, â(m, k) : K (m, k) â K(m, k).",
                "This definition means that a protocol evaluating K to decide which triples must be attached to messages, does not miss triples whose transmission is required by Theorem 2.",
                "Let us consider the constant condition (denoted K1), that is always false, i.e., â(m, k) : K1(m, k) = false.",
                "This trivially correct approximation of K actually corresponds to the particular IPT protocol described in Section 3 (in which each message carries a whole vector clock and a whole boolean vector).",
                "The next section presents a better approximation of K (denoted K2). 5.1 A Boolean Matrix-Based Evaluable Condition Condition K2 is based on the observation that condition K is composed of sub-conditions.",
                "Some of them can be Pj send(m) Pi V Ci[k] = x IPi[k] = 1 V Cj[k] â¥ x receive(m) Figure 2: The Evaluable Condition K2 locally evaluated while the others cannot.",
                "More precisely, K â¡ a â¨ Î± â¨ (Î² â§ b), where a â¡ send(m).V Ci[k] = 0 and b â¡ send(m).IPi[k] = 1 are locally evaluable, whereas Î± â¡ send(m).V Ci[k] < pred(receive(m)).V Cj[k] and Î² â¡ send(m).V Ci[k] = pred(receive(m)).V Cj[k] are not.",
                "But, from easy boolean calculus, aâ¨((Î±â¨Î²)â§b) =â aâ¨Î±â¨ (Î² â§ b) â¡ K. This leads to condition K â¡ a â¨ (Î³ â§ b), where Î³ = Î± â¨ Î² â¡ send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] , i.e., K â¡ (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k] â§ send(m).IPi[k] = 1) â¨ send(m).V Ci[k] = 0.",
                "So, Pi needs to approximate the predicate send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k].",
                "To be correct, this approximation has to be a locally evaluable predicate ci(j, k) such that, when Pi is about to send a message m to Pj, ci(j, k) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]).",
                "Informally, that means that, when ci(j, k) holds, the local context of Pi allows to deduce that the receipt of m by Pj will not lead to V Cj[k] update (Pj knows as much as Pi about Pk).",
                "Hence, the concrete condition K2 is the following: K2 â¡ send(m).V Ci[k] = 0 â¨ (ci(j, k) â§ send(m).IPi[k] = 1).",
                "Let us now examine the design of such a predicate (denoted ci).",
                "First, the case j = i can be ignored, since it is assumed (Section 2.1) that a process never sends a message to itself.",
                "Second, in the case j = k, the relation send(m).V Ci[j] â¤ pred(receive(m)).V Cj [j] is always true, because the receipt of m by Pj cannot update V Cj[j].",
                "Thus, âj = i : ci(j, j) must be true.",
                "Now, let us consider the case where j = i and j = k (Figure 2).",
                "Suppose that there exists an event e = receive(m ) with e < send(m), m sent by Pj and piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k] (hence m .V C[k] = receive(m ).V Ci[k]).",
                "As V Cj[k] cannot decrease this means that, as long as V Ci[k] does not increase, for every message m sent by Pi to Pj we have the following: send(m).V Ci[k] = receive(m ).V Ci[k] = send(m ).V Cj[k] â¤ receive(m).V Cj [k], i.e., ci(j, k) must remain true.",
                "In other words, once ci(j, k) is true, the only event of Pi that could reset it to false is either the receipt of a message that increases V Ci[k] or, if k = i, the occurrence of a relevant event (that increases V Ci[i]).",
                "Similarly, once ci(j, k) is false, the only event that can set it to true is the receipt of a message m from Pj, piggybacking the triple (k, m .V C[k], m .IP[k]) with m .V C[k] â¥ V Ci[k].",
                "In order to implement the local predicates ci(j, k), each process Pi is equipped with a boolean matrix Mi (as in [11]) such that M[j, k] = 1 â ci(j, k).",
                "It follows from the previous discussion that this matrix is managed according to the following rules (note that its i-th line is not significant (case j = i), and that its diagonal is always equal to 1): M0 Initialization: â (j, k) : Mi[j, k] is initialized to 1. 215 M1 Each time it produces a relevant event e: Pi resets4 the ith column of its matrix: âj = i : Mi[j, i] := 0.",
                "M2 When Pi sends a message: no update of Mi occurs.",
                "M3 When it receives a message m from Pj , Pi executes the following updates: â k â [1..n] : case V Ci[k] < m.V C[k] then â = i, j, k : Mi[ , k] := 0; Mi[j, k] := 1 V Ci[k] = m.V C[k] then Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase The following lemma results from rules M0-M3.",
                "The theorem that follows shows that condition K2(m, k) is correct. (Both are proved in [1].)",
                "Lemma 6. âi, âm sent by Pi to Pj, âk, we have: send(m).Mi[j, k] = 1 â send(m).V Ci[k] â¤ pred(receive(m)).V Cj [k].",
                "Theorem 3.",
                "Let m be a message sent by Pi to Pj .",
                "Let K2(m, k) â¡ ((send(m).Mi[j, k] = 1) â§ (send(m).IPi[k] = 1)â¨(send(m).V Ci[k] = 0)).",
                "We have: K2(m, k) â K(m, k). 5.2 Resulting IPT Protocol The complete text of the IPT protocol based on the previous discussion follows.",
                "RM0 Initialization: - Both V Ci[1..n] and IPi[1..n] are set to [0, . . . , 0], and â (j, k) : Mi[j, k] is set to 1.",
                "RM1 Each time it produces a relevant event e: - Pi associates with e the <br>timestamp</br> e.TS defined as follows: e.TS = {(k, V Ci[k]) | IPi[k] = 1}, - Pi increments its vector clock entry V Ci[i] (namely, it executes V Ci[i] := V Ci[i] + 1), - Pi resets IPi: â = i : IPi[ ] := 0; IPi[i] := 1. - Pi resets the ith column of its boolean matrix: âj = i : Mi[j, i] := 0.",
                "RM2 When Pi sends a message m to Pj, it attaches to m the set of triples (each made up of a process id, an integer and a boolean): {(k, V Ci[k], IPi[k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ (V Ci[k] > 0)}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i, j, k : Mi[ , k] := 0; 4 Actually, the value of this column remains constant after its first update.",
                "In fact, âj, Mi[j, i] can be set to 1 only upon the receipt of a message from Pj, carrying the value V Cj[i] (see R3).",
                "But, as Mj [i, i] = 1, Pj does not send V Cj[i] to Pi.",
                "So, it is possible to improve the protocol by executing this reset of the column Mi[â, i] only when Pi produces its first relevant event.",
                "Mi[j, k] := 1 V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); Mi[j, k] := 1 V Ci[k] > m.V C[k] then skip endcase 5.3 A Tradeoff The condition K2(m, k) shows that a triple has not to be transmitted when (Mi[j, k] = 1 â§ IPi[k] = 1) â¨ (V Ci[k] > 0).",
                "Let us first observe that the management of IPi[k] is governed by the application program.",
                "More precisely, the IPT protocol does not define which are the relevant events, it has only to guarantee a correct management of IPi[k].",
                "Differently, the matrix Mi does not belong to the problem specification, it is an auxiliary variable of the IPT protocol, which manages it so as to satisfy the following implication when Pi sends m to Pj : (Mi[j, k] = 1) â (pred(receive(m)).V Cj [k] â¥ send(m).V Ci[k]).",
                "The fact that the management of Mi is governed by the protocol and not by the application program leaves open the possibility to design a protocol where more entries of Mi are equal to 1.",
                "This can make the condition K2(m, k) more often satisfied5 and can consequently allow the protocol to transmit less triples.",
                "We show here that it is possible to transmit less triples at the price of transmitting a few additional boolean vectors.",
                "The previous IPT matrix-based protocol (Section 5.2) is modified in the following way.",
                "The rules RM2 and RM3 are replaced with the modified rules RM2 and RM3 (Mi[â, k] denotes the kth column of Mi).",
                "RM2 When Pi sends a message m to Pj, it attaches to m the following set of 4-uples (each made up of a process id, an integer, a boolean and a boolean vector): {(k, V Ci[k], IPi[k], Mi[â, k]) | (Mi[j, k] = 0 â¨ IPi[k] = 0) â§ V Ci[k] > 0}.",
                "RM3 When Pi receives a message m from Pj , it executes the following updates: â(k,m.V C[k], m.IP[k], m.M[1..n, k]) carried by m: case V Ci[k] < m.V C[k] then V Ci[k] := m.V C[k]; IPi[k] := m.IP[k]; â = i : Mi[ , k] := m.M[ , k] V Ci[k] = m.V C[k] then IPi[k] := min(IPi[k], m.IP[k]); â =i : Mi[ , k] := max(Mi[ , k], m.M[ , k]) V Ci[k] > m.V C[k] then skip endcase Similarly to the proofs described in [1], it is possible to prove that the previous protocol still satisfies the property proved in Lemma 6, namely, âi, âm sent by Pi to Pj, âk we have (send(m).Mi[j, k] = 1) â (send(m).V Ci[k] â¤ pred(receive(m)).V Cj[k]). 5 Let us consider the previously described protocol (Section 5.2) where the value of each matrix entry Mi[j, k] is always equal to 0.",
                "The reader can easily verify that this setting correctly implements the matrix.",
                "Moreover, K2(m, k) is then always false: it actually coincides with K1(k, m) (which corresponds to the case where whole vectors have to be transmitted with each message). 216 Intuitively, the fact that some columns of matrices M are attached to application messages allows a transitive transmission of information.",
                "More precisely, the relevant history of Pk known by Pj is transmitted to a process Pi via a causal sequence of messages from Pj to Pi.",
                "In contrast, the protocol described in Section 5.2 used only a direct transmission of this information.",
                "In fact, as explained Section 5.1, the predicate c (locally implemented by the matrix M) was based on the existence of a message m sent by Pj to Pi, piggybacking the triple (k, m .V C[k], m .IP[k]), and m .V C[k] â¥ V Ci[k], i.e., on the existence of a direct transmission of information (by the message m ).",
                "The resulting IPT protocol (defined by the rules RM0, RM1, RM2 and RM3) uses the same condition K2(m, k) as the previous one.",
                "It shows an interesting tradeoff between the number of triples (k, V Ci[k], IPi[k]) whose transmission is saved and the number of boolean vectors that have to be additionally piggybacked.",
                "It is interesting to notice that the size of this additional information is bounded while each triple includes a non-bounded integer (namely a vector clock value). 6.",
                "EXPERIMENTAL STUDY This section compares the behaviors of the previous protocols.",
                "This comparison is done with a simulation study.",
                "IPT1 denotes the protocol presented in Section 3.3 that uses the condition K1(m, k) (which is always equal to false).",
                "IPT2 denotes the protocol presented in Section 5.2 that uses the condition K2(m, k) where messages carry triples.",
                "Finally, IPT3 denotes the protocol presented in Section 5.3 that also uses the condition K2(m, k) but where messages carry additional boolean vectors.",
                "This section does not aim to provide an in-depth simulation study of the protocols, but rather presents a general view on the protocol behaviors.",
                "To this end, it compares IPT2 and IPT3 with regard to IPT1.",
                "More precisely, for IPT2 the aim was to evaluate the gain in terms of triples (k, V Ci[k], IPi[k]) not transmitted with respect to the systematic transmission of whole vectors as done in IPT1.",
                "For IPT3, the aim was to evaluate the tradeoff between the additional boolean vectors transmitted and the number of saved triples.",
                "The behavior of each protocol was analyzed on a set of programs. 6.1 Simulation Parameters The simulator provides different parameters enabling to tune both the communication and the processes features.",
                "These parameters allow to set the number of processes for the simulated computation, to vary the rate of communication (send/receive) events, and to alter the time duration between two consecutive relevant events.",
                "Moreover, to be independent of a particular topology of the underlying network, a fully connected network is assumed.",
                "Internal events have not been considered.",
                "Since the presence of the triples (k, V Ci[k], IPi[k]) piggybacked by a message strongly depends on the frequency at which relevant events are produced by a process, different time distributions between two consecutive relevant events have been implemented (e.g., normal, uniform, and Poisson distributions).",
                "The senders of messages are chosen according to a random law.",
                "To exhibit particular configurations of a distributed computation a given scenario can be provided to the simulator.",
                "Message transmission delays follow a standard normal distribution.",
                "Finally, the last parameter of the simulator is the number of send events that occurred during a simulation. 6.2 Parameter Settings To compare the behavior of the three IPT protocols, we performed a large number of simulations using different parameters setting.",
                "We set to 10 the number of processes participating to a distributed computation.",
                "The number of communication events during the simulation has been set to 10 000.",
                "The parameter Î» of the Poisson time distribution (Î» is the average number of relevant events in a given time interval) has been set so that the relevant events are generated at the beginning of the simulation.",
                "With the uniform time distribution, a relevant event is generated (in the average) every 10 communication events.",
                "The location parameter of the standard normal time distribution has been set so that the occurrence of relevant events is shifted around the third part of the simulation experiment.",
                "As noted previously, the simulator can be fed with a given scenario.",
                "This allows to analyze the worst case scenarios for IPT2 and IPT3.",
                "These scenarios correspond to the case where the relevant events are generated at the maximal frequency (i.e., each time a process sends or receives a message, it produces a relevant event).",
                "Finally, the three IPT protocols are analyzed with the same simulation parameters. 6.3 Simulation Results The results are displayed on the Figures 3.a-3.d.",
                "These figures plot the gain of the protocols in terms of the number of triples that are not transmitted (y axis) with respect to the number of communication events (x axis).",
                "From these figures, we observe that, whatever the time distribution followed by the relevant events, both IPT2 and IPT3 exhibit a behavior better than IPT1 (i.e., the total number of piggybacked triples is lower in IPT2 and IPT3 than in IPT1), even in the worst case (see Figure 3.d).",
                "Let us consider the worst scenario.",
                "In that case, the gain is obtained at the very beginning of the simulation and lasts as long as it exists a process Pj for which âk : V Cj[k] = 0.",
                "In that case, the condition âk : K(m, k) is satisfied.",
                "As soon as âk : V Cj[k] = 0, both IPT2 and IPT3 behave as IPT1 (the shape of the curve becomes flat) since the condition K(m, k) is no longer satisfied.",
                "Figure 3.a shows that during the first events of the simulation, the slope of curves IPT2 and IPT3 are steep.",
                "The same occurs in Figure 3.d (that depicts the worst case scenario).",
                "Then the slope of these curves decreases and remains constant until the end of the simulation.",
                "In fact, as soon as V Cj[k] becomes greater than 0, the condition Â¬K(m, k) reduces to (Mi[j, k] = 0 â¨ IPi[k] = 0).",
                "Figure 3.b displays an interesting feature.",
                "It considers Î» = 100.",
                "As the relevant events are taken only during the very beginning of the simulation, this figure exhibits a very steep slope as the other figures.",
                "The figure shows that, as soon as no more relevant events are taken, on average, 45% of the triples are not piggybacked by the messages.",
                "This shows the importance of matrix Mi.",
                "Furthermore, IPT3 benefits from transmitting additional boolean vectors to save triple transmissions.",
                "The Figures 3.a-3.c show that the average gain of IPT3 with respect to IPT2 is close to 10%.",
                "Finally, Figure 3.c underlines even more the importance 217 of matrix Mi.",
                "When very few relevant events are taken, IPT2 and IPT3 turn out to be very efficient.",
                "Indeed, this figure shows that, very quickly, the gain in number of triples that are saved is very high (actually, 92% of the triples are saved). 6.4 Lessons Learned from the Simulation Of course, all simulation results are consistent with the theoretical results.",
                "IPT3 is always better than or equal to IPT2, and IPT2 is always better than IPT1.",
                "The simulation results teach us more: â¢ The first lesson we have learnt concerns the matrix Mi.",
                "Its use is quite significant but mainly depends on the time distribution followed by the relevant events.",
                "On the one hand, when observing Figure 3.b where a large number of relevant events are taken in a very short time, IPT2 can save up to 45% of the triples.",
                "However, we could have expected a more sensitive gain of IPT2 since the boolean vector IP tends to stabilize to [1, ..., 1] when no relevant events are taken.",
                "In fact, as discussed in Section 5.3, the management of matrix Mi within IPT2 does not allow a transitive transmission of information but only a direct transmission of this information.",
                "This explains why some columns of Mi may remain equal to 0 while they could potentially be equal to 1.",
                "Differently, as IPT3 benefits from transmitting additional boolean vectors (providing a transitive transmission information) it reaches a gain of 50%.",
                "On the other hand, when very few relevant events are taken in a large period of time (see Figure 3.c), the behavior of IPT2 and IPT3 turns out to be very efficient since the transmission of up to 92% of the triples is saved.",
                "This comes from the fact that very quickly the boolean vector IPi tends to stabilize to [1, ..., 1] and that matrix Mi contains very few 0 since very few relevant events have been taken.",
                "Thus, a direct transmission of the information is sufficient to quickly get matrices Mi equal to [1, ..., 1], . . . , [1, ..., 1]. â¢ The second lesson concerns IPT3, more precisely, the tradeoff between the additional piggybacking of boolean vectors and the number of triples whose transmission is saved.",
                "With n = 10, adding 10 booleans to a triple does not substantially increases its size.",
                "The Figures 3.a-3.c exhibit the number of triples whose transmission is saved: the average gain (in number of triples) of IPT3 with respect to IPT2 is about 10%. 7.",
                "CONCLUSION This paper has addressed an important causality-related distributed computing problem, namely, the Immediate Predecessors Tracking problem.",
                "It has presented a family of protocols that provide each relevant event with a <br>timestamp</br> that exactly identify its immediate predecessors.",
                "The family is defined by a general condition that allows application messages to piggyback control information whose size can be smaller than n (the number of processes).",
                "In that sense, this family defines message size-efficient IPT protocols.",
                "According to the way the general condition is implemented, different IPT protocols can be obtained.",
                "Three of them have been described and analyzed with simulation experiments.",
                "Interestingly, it has also been shown that the efficiency of the protocols (measured in terms of the size of the control information that is not piggybacked by an application message) depends on the pattern defined by the communication events and the relevant events.",
                "Last but not least, it is interesting to note that if one is not interested in tracking the immediate predecessor events, the protocols presented in the paper can be simplified by suppressing the IPi booleans vectors (but keeping the boolean matrices Mi).",
                "The resulting protocols, that implement a vector clock system, are particularly efficient as far as the size of the <br>timestamp</br> carried by each message is concerned.",
                "Interestingly, this efficiency is not obtained at the price of additional assumptions (such as fifo channels). 8.",
                "REFERENCES [1] Anceaume E., HÂ´elary J.-M. and Raynal M., Tracking Immediate Predecessors in Distributed Computations.",
                "Res.",
                "Report #1344, IRISA, Univ.",
                "Rennes (France), 2001. [2] Baldoni R., Prakash R., Raynal M. and Singhal M., Efficient â-Causal Broadcasting.",
                "Journal of Computer Systems Science and Engineering, 13(5):263-270, 1998. [3] Chandy K.M. and Lamport L., Distributed Snapshots: Determining Global States of Distributed Systems, ACM Transactions on Computer Systems, 3(1):63-75, 1985. [4] Diehl C., Jard C. and Rampon J.-X., Reachability Analysis of Distributed Executions, Proc.",
                "TAPSOFT93, Springer-Verlag LNCS 668, pp. 629-643, 1993. [5] Fidge C.J., Timestamps in Message-Passing Systems that Preserve Partial Ordering, Proc. 11th Australian Computing Conference, pp. 56-66, 1988. [6] Fromentin E., Jard C., Jourdan G.-V. and Raynal M., On-the-fly Analysis of Distributed Computations, IPL, 54:267-274, 1995. [7] Fromentin E. and Raynal M., Shared Global States in Distributed Computations, JCSS, 55(3):522-528, 1997. [8] Fromentin E., Raynal M., Garg V.K. and Tomlinson A., On-the-Fly Testing of Regular Patterns in Distributed Computations.",
                "Proc.",
                "ICPP94, Vol. 2:73-76, 1994. [9] Garg V.K., Principles of Distributed Systems, Kluwer Academic Press, 274 pages, 1996. [10] HÂ´elary J.-M., MostÂ´efaoui A., Netzer R.H.B. and Raynal M., Communication-Based Prevention of Useless Ckeckpoints in Distributed Computations.",
                "Distributed Computing, 13(1):29-43, 2000. [11] HÂ´elary J.-M., Melideo G. and Raynal M., Tracking Causality in Distributed Systems: a Suite of Efficient Protocols.",
                "Proc.",
                "SIROCCO00, Carleton University Press, pp. 181-195, LAquila (Italy), June 2000. [12] HÂ´elary J.-M., Netzer R. and Raynal M., Consistency Issues in Distributed Checkpoints.",
                "IEEE TSE, 25(4):274-281, 1999. [13] Hurfin M., Mizuno M., Raynal M. and Singhal M., Efficient Distributed Detection of Conjunction of Local Predicates in Asynch Computations.",
                "IEEE TSE, 24(8):664-677, 1998. [14] Lamport L., Time, Clocks and the Ordering of Events in a Distributed System.",
                "Comm.",
                "ACM, 21(7):558-565, 1978. [15] Marzullo K. and Sabel L., Efficient Detection of a Class of Stable Properties.",
                "Distributed Computing, 8(2):81-91, 1994. [16] Mattern F., Virtual Time and Global States of Distributed Systems.",
                "Proc.",
                "Int.",
                "Conf.",
                "Parallel and Distributed Algorithms, (Cosnard, Quinton, Raynal, Robert Eds), North-Holland, pp. 215-226, 1988. [17] Prakash R., Raynal M. and Singhal M., An Adaptive Causal Ordering Algorithm Suited to Mobile Computing Environment.",
                "JPDC, 41:190-204, 1997. [18] Raynal M. and Singhal S., Logical Time: Capturing Causality in Distributed Systems.",
                "IEEE Computer, 29(2):49-57, 1996. [19] Singhal M. and Kshemkalyani A., An Efficient Implementation of Vector Clocks.",
                "IPL, 43:47-52, 1992. [20] Wang Y.M., Consistent Global Checkpoints That Contain a Given Set of Local Checkpoints.",
                "IEEE TOC, 46(4):456-468, 1997. 218 0 1000 2000 3000 4000 5000 6000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (a) The relevant events follow a uniform distribution (ratio=1/10) -5000 0 5000 10000 15000 20000 25000 30000 35000 40000 45000 50000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (b) The relevant events follow a Poisson distribution (Î» = 100) 0 10000 20000 30000 40000 50000 60000 70000 80000 90000 100000 0 2000 4000 6000 8000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (c) The relevant events follow a normal distribution 0 50 100 150 200 250 300 350 400 450 1 10 100 1000 10000 gaininnumberoftriples communication events number IPT1 IPT2 IPT3 relevant events (d) For each pi, pi takes a relevant event and broadcast to all processes Figure 3: Experimental Results 219"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Este documento aborda el problema IPT: presenta una familia de protocolos que proporciona a cada evento relevante una \"marca de tiempo\" que identifica exactamente a sus predecesores inmediatos.",
                "La \"marca de tiempo\" de un evento producido por un proceso es el valor actual del reloj vectorial del proceso correspondiente.",
                "Como consecuencia, entre todos los eventos relevantes que preceden causalmente a un evento relevante dado, solo un subconjunto son sus predecesores inmediatos: esos son los eventos F de modo que no hay un evento relevante en ningÃºn camino causal de F a E.Desafortunadamente, dado solo la \"marca de tiempo\" del vector asociado con un evento, no es posible determinar quÃ© eventos de su pasado causal son sus predecesores inmediatos.",
                "Esto proviene del hecho de que la \"marca de tiempo\" del vector asociada con E determina, para cada proceso, el Ãºltimo evento relevante pertenece al pasado causal de E, pero dicho evento no es necesariamente un predecesor inmediato de e.Sin embargo, algunas aplicaciones [4, 6] requieren asociarse con cada evento relevante solo el conjunto de sus predecesores inmediatos.",
                "Cuando un proceso PI produce un evento E (relevante) E, se asocia con una \"marca de tiempo\" vectorial cuyo valor (denotado e.v c) es igual al valor actual de v Ci.",
                "VC1 cada vez que produce un evento relevante E, PI incrementa su entrada de reloj Vector v Ci [i] (v Ci [i]: = v ci [i] + 1) a 212 indica que ha producido un evento mÃ¡s relevante, luego PiAsociado con E la \"marca de tiempo\" E.V C = V CI.",
                "MÃ¡s precisamente, esta informaciÃ³n involucra IP (Send (M)) y la \"marca de tiempo\" de Send (M) (necesaria para comparar los eventos LASTR (SEND (M), J) y LASTR (Pred (E), J), paracada j).",
                "La \"marca de tiempo\" asociada con un evento relevante E se denota E.Ts.",
                "R1 cada vez que produce un evento relevante e: - Pi asocia con E la \"marca de tiempo\" e.ts definida como sigue e.ts = {(k, v ci [k]) |Ipi [k] = 1}, - Pi incrementa su entrada de reloj vector V Ci [i] (es decir, ejecuta v Ci [i]: = v Ci [i] + 1), - Pi restablece IPI: â = i: IPI[]: = 0;IPI [i]: = 1.",
                "El protocolo descrito en la SecciÃ³n 3.3 resuelve el problema IPT: para cualquier evento relevante E, la \"marca de tiempo\" E.TS contiene los identificadores de todos sus predecesores inmediatos y ningÃºn otro identificador de eventos.4.",
                "RM1 cada vez que produce un evento relevante e: - Pi asocia con E la \"marca de tiempo\" e.ts definida de la siguiente manera: e.ts = {(k, v ci [k]) |Ipi [k] = 1}, - Pi incrementa su entrada de reloj vector V Ci [i] (a saber, se ejecuta v Ci [i]: = v ci [i] + 1), - Pi restablece IPI: â = i:Ipi []: = 0;Ipi [i]: = 1. - Pi restablece la columna Ã©sima de su matriz booleana: âj = i: mi [j, i]: = 0.",
                "Ha presentado una familia de protocolos que proporciona a cada evento relevante una \"marca de tiempo\" que identifica exactamente a sus predecesores inmediatos.",
                "Los protocolos resultantes, que implementan un sistema de reloj vectorial, son particularmente eficientes en lo que respecta al tamaÃ±o de la \"marca de tiempo\" que lleva cada mensaje."
            ],
            "translated_text": "",
            "candidates": [
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "Marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo",
                "marca de tiempo"
            ],
            "error": []
        }
    }
}