{
    "id": "I-34",
    "original_text": "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents. With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated. We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals. However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment. Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises. Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises. We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies. In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm. Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause. More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation. We illustrate our approach with an e-Science example in which agents support Grid services. Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1. INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9]. VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16]. VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated. The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6]. Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24]. However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged). We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs. We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect). This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values. For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify. We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence. In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20. This paper is organized as follows. In the next section we provide a minimalistic definition for norm-regulated VOs. In section 3 we formally define norm conflicts, and explain how they are detected and resolved. In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies. In section 5 we describe how our curtailed norms are used in norm-aware agent societies. In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms. In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid. In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2. VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving. This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9]. VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction. We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states. This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness). We show in Figure 1 a simple VO graphically represented as a finite-state machine1 . The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents. We define our virtual organizations as follows: DEF. 1. A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states. Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ). The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} . We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B). VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates. These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms. Another important concept we use is the roles of agents in VOs. Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform. Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities. We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels. We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded. Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events. In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 . In order to record the authorship of the action, we annotate the formulae with the agents unique identification. Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae. Each formula is a truthful record of an action specified in the VO. Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values. We thus define: DEF. 2. A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp. For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20. Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles. We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization. The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances. For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed. Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization. This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process. Our norms are defined as below: DEF. 3. A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula. We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms. Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ. We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels. We propose to formally represent the normative positions of all agents enacting a VO. By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them. This approach was introduced in [12] and is explained in section 5. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4. A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te. It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them. We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c). We also refer to the tuples in Ω as norms. Global normative states complement the execution states of VOs with information on the normative positions of individual agents. We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update. For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te. We might equally wish that only permitted actions be chosen for the next execution state. We do not legislate, or indeed recommend, any particular way to regulate VOs. We do, however, offer simple underpinnings to allow arbitrary policies to be put in place. In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state. For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}. The management (i.e., creation and updating) of global normative states is an interesting area of research. A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold. In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3. NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies. We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters. Initially we define substitutions: DEF. 5. A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term. We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ. Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers. We shall make use of the following definition: DEF. 6. Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ. We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ. We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13]. In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions. We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict. For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}). If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts. We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict. Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te . Initially, this annotation is empty. We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform. A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions. Each of these policies is possible: we do not legislate over any of them nor do we give preference over any. In this paper we are interested in formalising such policies within a simple mathematical framework. A prohibition can be in conflict with various permissions in Ω. We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection. This requires identifying the substitution between two pairs of norms that characterises a conflict. This is formally captured by the following definition: DEF. 7. A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3). Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition. The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts. For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds. We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8. The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification. We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition. We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right). The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z). The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) . The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission. If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections. The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms. It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved. The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided. Initially, Ω is set to be Ω. The algorithm operates in two stages. In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm. In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set. As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition. In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω. The maximal set is used to update the annotation of the prohibition. It is important to explain the need for updating the conflict set of prohibitions. Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents. Whenever new norms are added we must check for new conflicts and inconsistencies. If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved. The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again). If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation. The removal of obligations follows a similar process. Prohibitions are removed without the need to consider their relationships with other norms. Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc. The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation. The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition. It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time. The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop. The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω. We illustrate our algorithm with the following example. Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c . The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions. We show in Section 5.1 how annotations are used by norm-aware agents. 4. NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13]. The obligation demands that an agent performs an action that is forbidden. We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies. With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission. Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O. We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency. The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5. NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies. We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12]. This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour. We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . . I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents. The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω. Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment. Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents. We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent. The governor agent represents the external agent within the VO. As such, it has the unique identifier of the external agent. The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously. We define in Figure 5 how governor agents work - we use a logic program for this purpose. We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9. The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end. The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function. The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold. In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles. Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent). In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ. In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles. The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents. We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter. The definition, as a logic program, is shown in Figure 6. It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ. It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc. Finally, in line 7 it checks if the time of the action is within the norm temporal influence. The verification of non-unification of σ with any element of Σc deserves an explanation. The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence. The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6. ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action. However, conflicts and inconsistencies may also arise indirectly via relationships among actions. For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X). In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O. Relationships among actions are domain-dependent. Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships. We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above. Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9. The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae. Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}. By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains. A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651",
    "original_translation": "Resolución de conflictos e inconsistencia en las organizaciones virtuales reguladas por las normas Wamberto Vasconcelos Departamento. de la informática de la Universidad de Ciencias de Aberdeen Aberdeen AB24 3ue Reino Unido wvasconcelos@acm.org Martin J. Kollingbaum Departamento de Computing Science University of Aberdeen Aberdeen AB24 3ue Reino Unido Mkolling@csd.abdn.ac.uk Timothy J. Dept. de la computaciónCiencia Universidad de Aberdeen Aberdeen AB24 3ue Reino Unido tnorman@csd.abdn.ac.uk Organizaciones virtuales abstractas reguladas por normas Definen, gobiernan y facilitan el intercambio de recursos coordinados y la resolución de problemas en las sociedades de agentes. Con una cuenta explícita de las normas, se puede lograr la apertura en las organizaciones virtuales: los nuevos componentes, diseñados por varias partes, se pueden acomodar sin problemas. Nos centramos en las organizaciones virtuales realizadas como sistemas de agentes múltiples, en los que los agentes humanos y de software interactúan para lograr objetivos individuales y globales. Sin embargo, cualquier relato realista de las normas debe abordar su naturaleza dinámica: las normas cambiarán a medida que los agentes interactúen entre sí y su entorno. Debido a la naturaleza cambiante de las normas o debido a las normas derivadas de diferentes organizaciones virtuales, habrá situaciones cuando una acción se permita y se prohíbe simultáneamente, es decir, surge un conflicto. Del mismo modo, habrá situaciones cuando una acción esté obligada y prohibida, es decir, surge una inconsistencia. Introducimos un enfoque, basado en la unificación de primer orden, para detectar y resolver tales conflictos e inconsistencias. En nuestra solución propuesta, anotamos una norma con el conjunto de valores que sus variables no deberían tener para evitar un conflicto o una inconsistencia con otra norma. Nuestro enfoque acomoda perfectamente las interrelaciones dependientes del dominio entre las acciones y los conflictos/inconsistencias indirectas que estos pueden causar. En términos más generales, podemos capturar una noción útil de delegación entre agentes (e entre rol) de acciones y normas asociadas a ellas, y usarla para abordar los conflictos/inconsistencias causadas por la delegación de la acción. Ilustramos nuestro enfoque con un ejemplo de ciencia electrónica en el que los agentes apoyan los servicios de cuadrícula. Categorías y descriptores de sujetos I.2.4 [Inteligencia artificial]: aplicaciones y sistemas expertos;I.2.11 [Inteligencia artificial]: Sistemas de inteligencia artificial distribuida de sistemas de agente de agente Algoritmos, Teoría 1. Introducción Las organizaciones virtuales (VO) facilitan el intercambio de recursos coordinados y la resolución de problemas que involucran a varias partes geográficamente remotas [9]. Los VO definen y regulan las interacciones (que facilitan la coordinación) entre el software y/o los agentes humanos que se comunican para lograr objetivos individuales y globales [16]. Los VO se realizan como sistemas de múltiples agentes y una característica más deseable de tales sistemas es la apertura por la cual los nuevos componentes diseñados por otras partes se acomodan sin problemas. El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de sistemas de múltiples agentes (masa) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]. Las normas regulan el comportamiento observable de los agentes de software heterogéneos y interesados, diseñados por varias partes que pueden no confiar completamente entre sí [3, 24]. Sin embargo, los VO regulados por normas pueden experimentar problemas cuando las normas asignadas a sus agentes están en conflicto (es decir, una acción está prohibida y permitida simultáneamente) o inconsistentes (es decir, una acción está prohibida y obligada simultáneamente). Proponemos un medio para detectar y resolver automáticamente conflictos e inconsistencia en VO regulados por normas. Hacemos uso de la unificación de primer orden [8] para averiguar si las normas se superponen y cómo se superponen en su influencia (es decir, los agentes y los valores de los parámetros en las acciones de los agentes que las normas pueden afectar). Esto permite una solución de grano fino por la cual la influencia de normas conflictivas o inconsistentes se reduce para conjuntos particulares de valores. Por ejemplo, Norms Agent X puede enviar una oferta (AG1, 20) y el agente AG2 tiene prohibido hacer una oferta de envío (y, z) (donde x, y, z son variables y ag1, ag2, 20 están constantes) están enconflicto porque sus agentes, acciones y términos (dentro de las acciones) unifican. Resolvemos el conflicto anotando las normas con conjuntos de valores que sus variables no pueden tener, reduciendo así su influencia. En nuestro ejemplo, el conflicto se evita si requerimos que la variable Y no pueda ser AG1 y que Z no puede ser 20. Este artículo está organizado de la siguiente forma: En la siguiente sección proporcionamos una definición minimalista para VO regulados por normas. En la Sección 3 definimos formalmente los conflictos de normas y explicamos cómo se detectan y resuelven. En la Sección 4 describimos cómo la maquinaria de la sección anterior puede adaptarse para detectar y resolver las inconsistencias de la norma. En la Sección 5 describimos cómo nuestras normas reducidas se usan en las sociedades de agentes conscientes de la norma. En la Sección 6 explicamos cómo nuestra maquinaria puede usarse para detectar y resolver conflictos/inconsistencias indirectas, es decir, las causadas a través de relaciones entre acciones;Extendemos y adaptamos la maquinaria para acomodar la delegación de las normas. En la Sección 7 ilustramos nuestro enfoque con un ejemplo de agentes de software regulados por normas que sirven la cuadrícula. En la Sección 8 encuestamos el trabajo relacionado y en la Sección 9 discutimos nuestras contribuciones y damos instrucciones para el trabajo futuro.644 978-81-904262-7-5 (RPS) C 2007 Ifaamas 2. Organizaciones virtuales Las organizaciones virtuales [17] permiten que varias partes se unan para compartir recursos y participar en la resolución de problemas. Este paradigma ha encontrado fuertes aplicaciones en la orquestación del servicio web [14], la ciencia electrónica [16] y la cuadrícula [9]. Los VO, en su formulación más genérica, pueden verse como artefactos de coordinación, lo que permite que el software y los agentes humanos participen en formas de interacción sofisticadas. Representamos formalmente nuestros VO como máquinas de estado finito en las que las acciones de los agentes individuales etiquetan los bordes entre estados discretos. Esto nos proporciona un denominador común más bajo: hay formas mucho más sofisticadas, convenientes y expresivas para representar interacciones entre los agentes (por ejemplo, AUML [19] e instituciones electrónicas [20], por nombrar algunas), pero por el bien de generalizarNuestro enfoque, asumiremos que cualquier formalismo de nivel superior se puede asignar en una máquina de estado finito (posiblemente con cierta pérdida de expresividad). Mostramos en la Figura 1 un VO simple representado gráficamente como una máquina de estado finito1. Las etiquetas en los bordes con //?> = <89 :; 0 p (x) q (y, z) //?> = <89 :; 1 s (a, b) //?> = <89:; /.-, ()*+2 Figura 1: VO de muestra como una máquina de estado finito que los estados son fórmulas atómicas de primer orden, denotadas genéricamente como ϕ;Sostienen las acciones realizadas por agentes individuales. Definimos nuestras organizaciones virtuales de la siguiente manera: def.1. Una organización virtual I es la triple S, S0, E, T donde S = {S1 ,..., Sn} es un conjunto de estados finitos y no vacíos, s0 ∈ S es el estado inicial, e es un conjunto finito de bordes (s, s, ϕ), s, s ∈ S que conecta s a s con una primeraOrdene la fórmula atómica ϕ como etiqueta, y t ⊆ s es el conjunto de estados terminales. Observe que los bordes están dirigidos, por lo tanto (s, t, ϕ) = (t, s, ϕ). La muestra VO de la Figura 1 se representa formalmente como i = {0, 1, 2}, 0, {(0, 0, p (x)), (0, 1, q (y, z)), (1,2, s (a, b)}, {2}. Asumimos una cuantificación existencial implícita en cualquier variable en ϕ, de modo que, por ejemplo, S (A, B) representa ∃A, B (A, B). Los VO deben permitir dos tipos de no determinismo correspondiente a opciones que los agentes autónomos pueden hacer, a saber, i) el que surge cuando hay más de un borde que sale de un estado;y ii) el que surge de las variables en las fórmulas ϕ etiquetando un borde, para el cual el agente que lleva a cabo la acción instancia. Este tipo de no determinismo son deseables, ya que ayudan a definir mecanismos de coordinación genéricos y flexibles. Otro concepto importante que usamos es el roles de los agentes en VO. Los roles, como se explotan en, por ejemplo, [18] y [20], nos ayudan a abstraer de agentes individuales y definir un patrón de comportamiento al que cualquier agente que adopte un papel debería cumplir. Además, todos los agentes con el mismo rol tienen garantizado los mismos derechos, deberes y oportunidades. Haremos uso de dos conjuntos finitos y no vacíos, agentes = {AG1 ,..., agn} y roles = {r1 ,..., rm}, que representa, respectivamente, los conjuntos de identificadores de agentes y etiquetas de roles. Nos referimos genéricamente a los términos de primer orden, es decir, constantes, variables y funciones (anidadas) como τ.2.1 Semántica de Vos La especificación de un VO como una máquina de estado finito da lugar a un conjunto posiblemente infinito de historias de comportamientos computacionales, en el que se registran las acciones que etiquetan las rutas desde el estado inicial a un estado final. Aunque las acciones que comprenden un VO se llevan a cabo distribuidas, proponemos una cuenta global explícita de todos los eventos. En la práctica, esto se puede lograr si requerimos el individuo 1, adoptamos la Convención de Prólogos [1] y usamos cadenas que comienzan con una letra mayúscula para representar variables y cadenas que comienzan con una letra pequeña para representar constantes.agentes para declarar/informar cualquier acción que hayan llevado a cabo;Esto asume agentes confiables, naturalmente2. Para registrar la autoría de la acción, anotamos las fórmulas con la identificación única de los agentes. Nuestro relato global explícito de todos los eventos es un conjunto de fórmulas atómicas terrestres ϕ, es decir, solo permitimos que las constantes aparezcan como términos de fórmulas. Cada fórmula es un registro veraz de una acción especificada en el VO. Observe, sin embargo, que en la especificación de VO no restringimos la sintaxis de las fórmulas: las variables pueden aparecer en ellas, y cuando un agente realiza una acción real, entonces cualquier variable de la acción especificada debe ser asignadas valores. Así definimos: def.2. Un estado de ejecución global de un VO, denotado como ξ, es un conjunto finito, posiblemente vacío, de tuplas a: r, ¯ϕ, t donde a ∈ Agents es un identificador de agente, r ∈ Roles es una etiqueta de roles, ¯ϕ is esUna fórmula atómica de primer orden en tierra, y t ∈ en es una marca de tiempo. Por ejemplo, AG1: Comprador, P (A, 34), 20 estados que el agente AG1 adopta el comprador de roles realizó la acción P (A, 34) en el instante 20. Dado un Vo I = S, S0, E, T, un estado de ejecución ξ y un estado s ∈ S, podemos definir una función que obtenga un posible estado de ejecución del siguiente, a saber, H (i, ξ, s) = ξ∪ {a: r, ¯ϕ, t}, para uno (s, s, ϕ) ∈ E. Dicha función h debe abordar los dos tipos de no determinismo anterior, así como la elección de los agentes potenciales que pueden llevarfuera de la acción y sus roles adoptados. También definimos una función para calcular el conjunto de todos los estados de ejecución posibles, h ∗ (i, ξ, s) = {ξ ∪ ∪ {a: r, ¯ϕ, t} | (s, s, ϕ) ∈ E}.2.2 VO regulados por la norma, abogamos por una separación de las preocupaciones por las cuales la organización virtual se complementa con un conjunto explícito y separado de normas que regula aún más el comportamiento de los agentes a medida que participan en la promulgación de una organización. La libertad de elección otorgada a los agentes (capturados a través del no determinismo de VO, explicado anteriormente) debe reducirse en algunas circunstancias. Por ejemplo, es posible que necesitemos describir que quien realizado ϕ esté obligado a llevar a cabo ϕ, de modo que si hay un punto de elección en el que ϕ aparece como una etiqueta de un borde, entonces se debe seguir ese borde. En lugar de incorporar tales aspectos normativos en el diseño de los agentes (por ejemplo, codificando explícitamente aspectos normativos en el comportamiento de los agentes) o en el VO en sí (por ejemplo, abordando las excepciones y el comportamiento desviado en el mecanismo en sí), adoptamos la opinión de que un VOdebe complementarse con un conjunto separado de normas que regulan aún más el comportamiento de los agentes a medida que participan en la promulgación de la organización. Esta separación de las preocupaciones debería facilitar el diseño de la masa;Sin embargo, los diferentes componentes (VO y normas) deben unirse en algún momento del proceso de diseño. Nuestras normas se definen como a continuación: def.3. Una norma, conocida genéricamente como ν, es cualquier construcción de la forma oτ: τ ϕ, pτ: τ ϕ, o fτ: τ ϕ, donde τ, τ son variables o constantes y ϕ es una fórmula atómica de primer orden. Adoptamos la notación de [18]: oτ: τ ϕ representa una obligación en que el agente τ asume el rol τ para provocar ϕ;Recordamos que τ, τ son variables, constantes y funciones aplicadas a términos (anidados). Pτ: τ ϕ y fτ: τ ϕ representa, respectivamente, un permiso y una prohibición del agente τ, jugando el rol τ para provocar ϕ. Asumiremos que los tipos se utilizan para manipular correctamente las variables para identificadores de agentes y etiquetas de roles. Proponemos representar formalmente las posiciones normativas de todos los agentes que promulgan un VO. Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 agentes no controlados pueden acomodarse en esta propuesta, si asociamos a cada uno de ellos un agente de gobernador que supervisa elAcciones del agente externo y los informes sobre ellos. Este enfoque se introdujo en [12] y se explica en la Sección 5. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 645 def.4. Un estado normativo global ω es un conjunto finito y posiblemente vacío de tuplas ω = ν, td, ta, te donde ν es una norma como se indica arriba y td, ta, te ∈ en son, respectivamente, el momento en que se declaró ν (introducido), cuando ν se activa y cuando ν expira, td ≤ ta <te. Vale la pena notar que no requerimos que las fórmulas atómicas de las normas sean molidas: podría haber variables en ellas. Suponemos una cuantificación universal implícita en las variables A, R de las normas xa: rϕ (para las modalidades deoípicas x ∈ {o, p, f}), de modo que, por ejemplo, PA: rp (x, b, c) se mantienepara ∀a ∈ Agentes. ∀r ∈ Roles.∃x.pa: rp (x, b, c). También nos referimos a las tuplas en Ω como normas. Los estados normativos globales complementan los estados de ejecución de VO con información sobre las posiciones normativas de los agentes individuales. Podemos relacionarlos a través de una función para obtener un estado de ejecución siguiente regulado por la norma de un VOS, es decir, g (i, ξ, s, ω, t) = ξ, t para el momento de la actualización. Por ejemplo, es posible que deseemos que todas las acciones prohibidas se excluyan del siguiente estado de ejecución, es decir, g (i, ξ, s, ω, t) = ξ ∪ {a: r, ¯ϕ, t}, (s, s, s,s, ϕ) ∈ E y Fa: rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te. Es posible que deseemos que solo se elijan acciones permitidas para el próximo estado de ejecución. No legislamos, o de hecho recomendamos, ninguna forma particular de regular VO. Sin embargo, ofrecemos bases simples para permitir que se implementen políticas arbitrarias. De la misma manera que un estado normativo es útil para obtener el próximo estado de ejecución de un VO, podemos usar un estado de ejecución para actualizar un estado normativo. Por ejemplo, es posible que deseemos eliminar cualquier obligación específica para un agente y un rol, que ha sido llevado a cabo por ese agente y rol específico, es decir, F (ξ, ω) = ω - obls, obls = {OA: Rϕ,td, ta, te ∈ ω |A: r, ¯ϕ, t ∈ ξ}. La gestión (es decir, la creación y la actualización) de los estados normativos globales es un área de investigación interesante. Se informa un enfoque simple pero útil en [11]: las reglas de producción representan genéricamente cómo se deben actualizar las normas para reflejar qué han hecho los agentes y qué normas tienen actualmente. En este documento, nuestro enfoque no es proponer cómo se deben manejar Ωs;Asumimos algún mecanismo que hace eso.3. Conflictos de normas ahora definimos medios para detectar y resolver conflictos e inconsistencias de normas. Hacemos uso del concepto de unificación [1, 8] de los términos de primer orden τ, es decir, constantes, variables o funciones (anidadas) con términos como parámetros. Inicialmente definimos sustituciones: def.5. Una sustitución σ es un conjunto finito y posiblemente vacío de pares x/τ, donde x es una variable y τ es un término. Definimos la aplicación de una sustitución como: 1. c · σ = c para una constante c 2. x · σ = τ · σ si x/τ ∈ σ;de lo contrario x · σ = x 3. pn (τ0, ..., τn) · σ = pn (τ0 · σ, ..., τn · σ).4. (xτ1: τ2 ϕ) · σ = x (τ1 · σ) :( τ2 · σ) (ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta,TE Donde x genéricamente se refiere a cualquiera de las modalidades deoticas O, P, F. Unificación entre dos términos τ, τ consiste en encontrar una sustitución σ (también llamada, en este contexto, el unifier de τ y τ) de modo que τ · · σ= τ · σ. Se han propuesto muchos algoritmos para resolver el problema de unificación, un problema fundamental en la prueba de teorema automatizado [8], y el trabajo más reciente proporciona formas muy eficientes de obtener unificadores. Haremos uso de la siguiente definición: def.6. La relación unifica (τ, τ, σ) sostiene si hay un σ posiblemente vacío tal que τ · σ = τ · σ. También definimos la unificación de las fórmulas atómicas como unificadas (pn (τ0, ..., τn), pn (τ0, ..., τn), σ) que contiene IFF τi · σ = τi · σ, 0 ≤ i ≤ i ≤ i ≤ i ≤ i ≤ i ≤ i ≤ i ≤ i ≤ i ≤ inorte.La relación unificada verifica si una sustitución σ es de hecho un unificador para τ, τ pero también se puede usar para encontrar dicho σ. Suponemos que Unify es una implementación adecuada de un algoritmo de unificación que yo) siempre termina (posiblemente falla, si no se puede encontrar un unificador);ii) es correcto;y iii) tiene una complejidad computacional lineal.3.1 Detección de conflictos Un conflicto de normas surge cuando una fórmula atómica que etiqueta un borde en el VO, es decir, una acción, se permite y prohibida simultáneamente [13]. En este caso, ambas normas están en conflicto con respecto a sus agentes, roles y parámetros (términos) de acciones específicas. Proponemos usar la unificación para detectar cuando una prohibición y un permiso se superponen y emplear el unifier para resolver el conflicto. Por ejemplo, PA: RP (C, X) y FA: BP (y, Z) están en conflicto, ya que se unen bajo σ = {a/a, r/b, y/c, x/d}). Sin embargo, si las variables en FA: BP (Y, Z) no obtienen los valores en σ, entonces no habrá conflictos. Por lo tanto, proponemos anotar las prohibiciones en Ω con unificadores, llamados aquí conjuntos de conflictos, y usar estas anotaciones para determinar cuáles son las variables de la prohibición en futuras unificaciones para evitar un conflicto. En adelante, cada prohibición se considera que tiene tal anotación, denotada como (fτ1: τ2 ϕ) σc, td, ta, te. Inicialmente, esta anotación está vacía. Proponemos reducir la influencia de las prohibiciones, dando así a los agentes más opciones en las acciones que pueden realizar. Se podría adoptar un enfoque similar mediante el cual se reducen los permisos, lo que limita las acciones de los agentes disponibles. Cada una de estas políticas es posible: no legislamos sobre ninguna de ellas ni damos preferencia sobre ninguna. En este artículo estamos interesados en formalizar tales políticas dentro de un marco matemático simple. Una prohibición puede estar en conflicto con varios permisos en Ω. Por lo tanto, tenemos que encontrar el conjunto máximo de pares conflictivos de permisos y prohibiciones en Ω, realizando una inspección por pares. Esto requiere identificar la sustitución entre dos pares de normas que caracterizan un conflicto. Esto se captura formalmente por la siguiente definición: def.7. Un conflicto surge entre dos tuplas ω, Ω ∈ ω bajo una sustitución σ, denotada como CFLCT (Ω, Ω, σ), si las siguientes condiciones tienen: 1. ω = (fτ1: τ2 ϕ) σc, td, ta, te, te, Ω = Pτ1: τ2 ϕ, td, ta, te 2. unify (τ1, τ1, σ), unify (τ2, τ2, σ) y unify (ϕ, ϕ, σ) 3. | te − te |≤ | ta - ta |Es decir, una prohibición y un conflicto de permiso (condición 1) si, y solo si los agentes y roles a los que se aplican y sus acciones, respectivamente, unifican bajo σ (condición 2) y sus períodos de activación se superponen (condición 3). Sustitución σ, el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas de un permiso y una prohibición. La anotación σc no juega ningún papel al detectar conflictos, pero, como mostramos a continuación, tenemos que actualizar la anotación para reflejar nuevas redacciones para resolver conflictos. Por ejemplo, CFLCT ((FA: BP (Y, D)) ∅, 1, 3, 5, PA: RP (C, X), 2, 3, 4, {A/A, R/B, Y/C, Z/x}) se mantiene. Definimos a continuación cómo obtenemos el conjunto de normas conflictivas de un estado normativo ω: def.8. El conjunto finito, posiblemente vacío de normas conflictivas de un estado normativo ω, denotado como CFLS (Ω), se define como CFLS (ω) = {Ω, ω, σ | ω, ω ∈ ω, CFLCT (ω, σ, σ, erm.)} 3.2 Resolución de conflictos Se puede hacer una forma de resolución de grano fino mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir, cómo afectan los comportamientos de los agentes en el VO, y reducimos el 646 el sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) influencia de la prohibición. Ilustramos con los diagramas de Venn en la Figura 2 la superposición de las influencias normales (izquierda) que caracteriza un conflicto y la reducción necesaria para resolver el conflicto (derecha). La ilustración muestra el espacio de valores posibles para p (x, y) y p (x, y) pa: rp (c, x) fa: bp (y, z) p (x, y) fa: bp (y,Z) PA: RP (C, X) Figura 2: Superposición de influencia (izquierda) y reducción (derecha) Dos porciones de este espacio que definen el alcance de la influencia de las normas PA: RP (C, X) y FA: BP (Y, Z). El alcance de estas normas se superpone, ilustrado por la intersección de cuadros a la izquierda, en acciones con valores, por ejemplo, a, b, p (c, 2) ,..., A, B, P (C, N). La reducción de la prohibición elimina la intersección: mueve el alcance de la influencia de la norma hacia fuera de la influencia del permiso. Si hubiera múltiples superposiciones entre una prohibición y varios permisos, lo que probablemente suceda, entonces la prohibición se reducirá para mover el alcance de la norma para evitar todas las intersecciones. El algoritmo que se muestra en la Figura 3 muestra cómo obtenemos un conjunto de normas sin conflicto. Mapea un conjunto existente ω posiblemente con conflictogoritmo conflictresolution (ω, Ω) entrada Ω Salida Ω Comenzar Ω: = ω para cada ω ∈ Ω S.T.ω = (fa: r ¯ϕ) σc, td, ta, te do si ω, ω, σ ∈ Cfls (ω) luego Ω: = ω - {ω} Fin para cada Ω ∈ ω s.t.ω = (fτ1: τ2 ϕ) σc, td, ta, te do σmax c: = [ω, Ω, σc ∈Cfls (ω) {σc} ω: = (ω - {ω}) ∪ {(fτ1: τ2ϕ) (σc ∪ σmax c), td, ta, te} fin para final Figura 3: algoritmo para resolver conflictos en un conjunto de normas de normas en un nuevo conjunto Ω en el que se resuelven los conflictos (si los hay). El algoritmo forma ω como un conjunto que es conflicto-Freethis significa que las prohibiciones se anotan con un conjunto de conflictos que indica qué enlaces para las variables deben evitarse. Inicialmente, Ω está configurado para ser Ω. El algoritmo funciona en dos etapas. En la primera etapa (primero para cada bucle), eliminamos todas las prohibiciones conflictivas ω = (fa: r ¯ϕ) σc, TD, TA, TE con agente de tierra/pares de roles A: R y fórmulas de tierra ¯ϕ: la única formaResolver conflictos que surgen de tales prohibiciones es eliminarlos por completo, ya que no podemos reducir una norma completamente terrestre. En la segunda etapa (segunda para cada bucle), se examinan las prohibiciones restantes en Ω: el conjunto CFLS (Ω) contiene todos los conflictos entre los permisos y las prohibiciones restantes en Ω representadas como tuplas Ω, ω, σc, con σc que representan el conflicto de conflictoscolocar. Como una prohibición puede tener conflictos con varios permisos, el conjunto CFL (ω) puede contener más de una tupla para cada prohibición. Para proporcionar un Ω que refleje todos estos conflictos para una prohibición específica, tenemos que formar σmax C que contenga todos los conjuntos de conflictos σc para una prohibición dada ω. El conjunto máximo se utiliza para actualizar la anotación de la prohibición. Es importante explicar la necesidad de actualizar el conjunto de prohibiciones de conflicto. Los estados normativos cambian como resultado de las acciones de los agentes [11]: se revocan los permisos, prohibiciones y obligaciones existentes y/o las nuevas se implementan como resultado de las interacciones de los agentes con el medio ambiente y otros agentes. Cada vez que se agregan nuevas normas, debemos verificar si hay nuevos conflictos e inconsistencias. Si solo aplicamos nuestro algoritmo a un par que consiste en una norma antigua y una nueva, entonces se puede guardar algún procesamiento de pares de normas antiguas (que se trataron antes). La eliminación de las normas del conjunto Ω se trata de manera eficiente: cada permiso a eliminar debe verificarse primero para obtener conflictos con cualquier prohibición existente (se puede evitar el procesamiento si registramos el conflicto, en lugar de detectarlo nuevamente). Si hay un conflicto, entonces el conflicto establecido se habrá registrado en la anotación de las Prohibiciones;Este conjunto de conflictos se elimina de la anotación de las prohibiciones. La eliminación de obligaciones sigue un proceso similar. Las prohibiciones se eliminan sin la necesidad de considerar sus relaciones con otras normas. Nuestro algoritmo es correcto, ya que proporciona, para un Ω dado, un nuevo Ω en el que i) se han eliminado todas las prohibiciones terrestres que entran en conflicto con los permisos;y ii) todas las prohibiciones anotadas restantes (fτ: τ ¯ϕ) σc, td, ta, TE no unificarán con ninguno de los permisos en Ω, siempre que el unifier no aparezca en σc. El primer requisito se aborda por el primero para cada bucle, lo que hace precisamente esto: elimina todas las prohibiciones de tierra que se unen con una obligación. El segundo requisito se aborda por el segundo para cada bucle: cada prohibición tiene su anotación σc agregada con σmax c, acomodando así los unificadores de todos los permisos que unifican con la prohibición. Es fácil ver que el algoritmo siempre termina: cada uno de sus dos bucles pasa por un conjunto finito, procesando un elemento a la vez. El conjunto CFLS (ω) se calcula en un número finito de pasos, como se realizan las operaciones establecidas dentro de cada bucle. Sin embargo, el algoritmo tiene complejidad exponencial3, ya que el cálculo de CFL (Ω) requiere una comparación por pares de todos los elementos en ω. Ilustramos nuestro algoritmo con el siguiente ejemplo. Deje que haya el siguiente estado normativo global Ω: J (Fa: Rp (x, y)) {}, 2, 2, 9, PA: Rp (a, b), 3, 4, 8, (fa: rp (a, b)) {}, 2, 4, 12 pa: rp (d, e), 3, 4, 9, ff El primer bucle elimina la prohibición del suelo, obteniendo así lo siguiente Ω: j (fa: rp (x, Y)) {}, 2, 2, 9, PA: bp (c, d), 3, 4, 8, pe: f p (g, h), 3, 4, 9 ff luego tenemos el siguiente conjunto deNormas en conflicto CFLS (ω): 8 <: * (fa: rp (x, y)) {}, 2, 2, 9, PA: bp (c, d), 3, 4, 8, {a/a,R/b, x/c, y/d} +, * (fa: rp (x, y)) {}, 2, 2, 9, pe: f p (g, h), 3, 4, 9, {A/e, r/f, x/g, y/h} +9 =;Para cada prohibición ω ∈ ω recuperamos todos los elementos de w, w, σ ∈ Cfls (Ω) y recolectamos sus σs en σmax c. La final Ω es así: 8 <: (fa: rp (x, y)) j {a/a, r/b, x/c, y/d} {a/e, r/f, x/g,Y/h} ff, 2, 2, 9, PA: Rp (A, B), 3, 4, 8, PA: Rp (D, E), 3, 4, 9, 9 =;El conjunto anotado de conjuntos de conflictos debe entenderse como un registro de unificaciones pasadas, que informa cómo las prohibiciones deben usarse en el futuro para evitar conflictos con los permisos. Mostramos en la Sección 5.1 cómo las anotaciones son utilizadas por los agentes conscientes de la norma.4. Inconsistencias de normas Si se puede encontrar una sustitución σ que unifica una obligación y una prohibición, entonces se produce una situación de inconsistencia de la norma [13]. La obligación exige que un agente realice una acción prohibida. Podemos reutilizar la maquinaria, introducida anteriormente para resolver conflictos entre permisos y prohibiciones, para a) detectar y b) resolver tales inconsistencias. Con la definición 7, 3, el esfuerzo combinatorio ya no es necesario si mantenemos un conjunto de normas sin conflictos: cada vez que se introducirá una nueva norma, lo comparamos con los existentes, lo que hace que el proceso de mantenimiento de linealcomplejidad. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 647 expresa la naturaleza de un conflicto entre una prohibición y permiso. Del mismo modo, se puede definir una situación de inconsistencia reutilizando esta definición y reemplazar la modalidad p deomia con O. Podemos reutilizar la maquinaria para la resolución de conflictos, desarrollada anteriormente, para resolver la inconsistencia. El algoritmo de resolución de conflictos se puede aplicar sin cambios para acumular un conflicto máximo establecido σmax c para cada prohibición en Ω que unifica las obligaciones.5. Sociedades de agentes conscientes de la norma Ahora describimos cómo nuestros VO regulados por normas dan lugar a las sociedades de agentes de Normaware. Abordamos la masa abierta y heterogénea: acomodamos a los agentes externos al proporcionar a cada uno de ellos un agente de gobernador correspondiente [12]. Este es un tipo de acompañante que interactúa con un agente externo, y observa e informa sobre su comportamiento. Mostramos nuestra arquitectura en la Figura 4 a continuación: un número de agentes de gobernadores externos de los agentes de Tuple Space Ag1 £ ¢ ¡GOV1 ⇐⇒............ I, S, ξ, Ω I, S, ξ, ω · · · Agn £ ¢ ¡Govn ⇐⇒ Figura 4: Arquitectura para las sociedades de agentes de los agentes externos interactúan (denotadas por el) con sus agentes de gobernadores correspondientes. Los agentes del gobernador tienen acceso a la descripción de VO, los estados actuales de la promulgación de VO, el estado de ejecución global ξ y el estado normativo global Ω. Los agentes de los gobernadores pueden escribir y leer desde (denotado por el ⇐⇒) Un espacio de memoria compartido (por ejemplo, una solución similar a la pizarra implementada como un espacio de tupla), actualizando la configuración global (denotada por el) para reflejar la dinámica deLa promulgación de VO. Los agentes de los gobernadores son necesarios porque no podemos anticipar o legislar sobre el diseño o el comportamiento de los agentes externos. Representamos a continuación cómo el agente externo decide los pares de gobernadores/agentes externos: las opciones no deterministas en el VO son decididas por el VO;El agente del gobernador considera cualquier aspecto normativo. El agente del gobernador representa al agente externo dentro del VO. Como tal, tiene el identificador único del agente externo. El agente del gobernador mantiene una cuenta de todos los roles que el agente externo está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un papel simultáneamente. Definimos en la Figura 5 cómo funcionan los agentes de los gobernadores: utilizamos un programa lógico para este propósito. Mostramos 1 principal (id, roles) ← 2 Obtener tuple (i, s, ξ, ω) ∧ 3 terminar (id, roles, i, ξ, ω) 4 main (id, roles) ← 5 Get Tuple (i,S, ξ, ω) ∧ 6 Normas de filtro (ID, roles, ω, ωid) ∧ 7 Discutir normas (id, roles, i, s, ξ, ωid, acciones) ∧ 8 Actualizar tupla (roles, acciones, newroles) ∧9 Main (ID, Newroles) Figura 5: Agente del Gobernador como programa lógico Las líneas de nuestras cláusulas numeradas 1-9. La primera cláusula (líneas 1-3) representa la condición de terminación: obtenga tuple/1 (línea 2) recupera i, s, ξ, Ω del espacio de tupla compartido y termina/4 verifica si la promulgación de VO actual (registrada en ξ)ha llegado a su fin. El equipo de agentes de gobernador sincroniza su acceso al espacio de la tupla [12], asegurando así que cada uno tenga la oportunidad de funcionar. La segunda cláusula (líneas 4-9) representa un bucle genérico cuando la condición de terminación de la primera cláusula no se mantiene. En este caso, la tupla se recupera nuevamente (línea 5) y el agente del gobernador procede (línea 6) para analizar el estado normativo global actual ω con el objetivo de obtener el subconjunto ωid ⊆ Ω de las normas que se refieren a la identificación del agente bajo los roles de los roles. Las normas de filtro de predicado/4 recolectan las normas que se aplican a la identificación del agente (el agente externo de los agentes del gobernador). En la línea 7, el agente del gobernador, en posesión de las normas aplicables, así como otra información relevante, interactúa con el agente externo para decidir sobre un conjunto de acciones que cumplen con las normas: estas acciones se utilizarán para actualizar (línea 8) laEstado de ejecución global ξ. En el proceso de actualización del estado de ejecución, se debe asignar un nuevo conjunto de roles al agente externo, representado como NewRoles. El agente del gobernador sigue en bucle (línea 9) utilizando el identificador para el agente externo y su nuevo conjunto de roles.5.1 Uso de normas anotadas ahora explicamos cómo las normas anotadas son utilizadas por los agentes conscientes de las normas. Lo hacemos a través de la definición de verificación de predicado/2, que se mantiene en su primer argumento, una acción candidata (en el formato de los elementos de ξ de def. 2), está dentro de la influencia de una prohibición anotada Ω, su segundo parámetro. La definición, como programa lógico, se muestra en la Figura 6. Verifica (línea 4) si el identificador de agente 1 verifica (acción, ω) ← 2 Action = A: R, ¯ϕ, T ∧ 3 Ω = (Fτ1: τ2 ϕ) σc, Td, Ta, TE ∧ 4 Unify (a, τ1, σ) ∧ unify (r, τ2, σ) ∧ unify (¯ϕ, ϕ, σ) ∧ 5 forall (σ, (σc ∈ σc, unify (σc, σ, σ)), mGU) ∧ 6MGUS = ∅∧ 7 ta ≤ t ≤ te Figura 6: Verifique si la acción está dentro de la influencia de la norma reducida y el papel de la acción se unifican con los términos apropiados τ1, τ2 de Ω y que las acciones ¯ϕ, ϕ se unan, todos debajo de debajoel mismo unifier σ. Luego verifica (líneas 5-6) que σ no unifica con ninguno de los conjuntos de conflictos en σc. Finalmente, en la línea 7 verifica si el tiempo de la acción está dentro de la influencia temporal de la norma. La verificación de la no unificación de σ con cualquier elemento de σc merece una explicación. Los elementos de σc son unificadores que indican qué valores no pueden tener las variables de la norma, es decir, representan brechas en el alcance original de la influencia de las normas. La prueba equivale a preguntar si la acción está fuera de tales brechas, es decir, la acción está dentro del alcance reducido de influencia de la norma.6. Conflicto de acción e inconsistencia En nuestra discusión anterior, el conflicto de normas y la inconsistencia se detectaron mediante una comparación directa de las fórmulas atómicas que representan la acción. Sin embargo, los conflictos e inconsistencias también pueden surgir indirectamente a través de las relaciones entre las acciones. Por ejemplo, si P (x) equivale a Q (x, x), entonces las normas PA: RP (X) y FA: RQ (X, X) están en conflicto ya que PA: Rp (x) se pueden reescribir como PA:RQ (x, x) y así tenemos a PA: RQ (X, X) y FA: RQ (X, X). En la discusión a continuación, nos concentramos en el conflicto de normas, pero la inconsistencia de la norma puede tratarse de manera similar, si cambiamos las modalidades deoípicas P para O. Las relaciones entre las acciones dependen del dominio. Diferentes dominios tienen formas distintas de relacionar sus acciones;Los ingenieros construyen ontologías para representar tales relaciones. Proponemos un medio simple para dar cuenta de tales relaciones y mostrar cómo se pueden conectar con los mecanismos introducidos anteriormente. En lugar de hacer uso de formalismos sofisticados para la construcción de ontología, empleamos un conjunto de axiomas de dominio, definidos a continuación: def.9. Los axiomas del dominio, denotados como δ, son un conjunto finito y posiblemente vacío de fórmulas ϕ → (ϕ1 ∧ · · · ∧ ϕn) donde ϕ, ϕi, 1 ≤ i ≤ n, son fórmulas atómicas de primer orden. Nuestro ejemplo anterior puede ser capturado por δ = {(p (x) → q (x, x)), (q (x, x) → p (x))}. Al representar explícitamente y manipular el conocimiento del dominio, logramos la generalidad: la misma maquinaria se puede usar con diferentes dominios. Un conjunto de normas puede tener diferentes conflictos e inconsistencias, para distintos dominios de aplicación.648 El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) el sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 649 650 El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) el sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 651",
    "original_sentences": [
        "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
        "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
        "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
        "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
        "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
        "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
        "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
        "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
        "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
        "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
        "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
        "We illustrate our approach with an e-Science example in which agents support Grid services.",
        "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
        "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
        "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
        "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
        "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
        "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
        "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
        "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
        "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
        "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
        "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
        "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
        "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
        "This paper is organized as follows.",
        "In the next section we provide a minimalistic definition for norm-regulated VOs.",
        "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
        "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
        "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
        "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
        "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
        "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
        "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
        "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
        "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
        "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
        "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
        "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
        "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
        "We define our virtual organizations as follows: DEF. 1.",
        "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
        "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
        "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
        "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
        "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
        "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
        "Another important concept we use is the roles of agents in VOs.",
        "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
        "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
        "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
        "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
        "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
        "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
        "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
        "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
        "Each formula is a truthful record of an action specified in the VO.",
        "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
        "We thus define: DEF. 2.",
        "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
        "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
        "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
        "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
        "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
        "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
        "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
        "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
        "Our norms are defined as below: DEF. 3.",
        "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
        "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
        "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
        "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
        "We propose to formally represent the normative positions of all agents enacting a VO.",
        "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
        "This approach was introduced in [12] and is explained in section 5.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
        "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
        "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
        "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
        "We also refer to the tuples in Ω as norms.",
        "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
        "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
        "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
        "We might equally wish that only permitted actions be chosen for the next execution state.",
        "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
        "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
        "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
        "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
        "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
        "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
        "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
        "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
        "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
        "Initially we define substitutions: DEF. 5.",
        "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
        "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
        "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
        "We shall make use of the following definition: DEF. 6.",
        "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
        "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
        "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
        "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
        "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
        "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
        "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
        "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
        "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
        "Initially, this annotation is empty.",
        "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
        "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
        "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
        "In this paper we are interested in formalising such policies within a simple mathematical framework.",
        "A prohibition can be in conflict with various permissions in Ω.",
        "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
        "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
        "This is formally captured by the following definition: DEF. 7.",
        "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
        "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
        "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
        "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
        "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
        "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
        "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
        "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
        "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
        "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
        "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
        "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
        "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
        "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
        "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
        "Initially, Ω is set to be Ω.",
        "The algorithm operates in two stages.",
        "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
        "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
        "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
        "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
        "The maximal set is used to update the annotation of the prohibition.",
        "It is important to explain the need for updating the conflict set of prohibitions.",
        "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
        "Whenever new norms are added we must check for new conflicts and inconsistencies.",
        "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
        "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
        "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
        "The removal of obligations follows a similar process.",
        "Prohibitions are removed without the need to consider their relationships with other norms.",
        "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
        "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
        "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
        "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
        "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
        "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
        "We illustrate our algorithm with the following example.",
        "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
        "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
        "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
        "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
        "The obligation demands that an agent performs an action that is forbidden.",
        "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
        "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
        "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
        "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
        "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
        "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
        "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
        "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
        "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
        "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
        "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
        "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
        "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
        "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
        "The governor agent represents the external agent within the VO.",
        "As such, it has the unique identifier of the external agent.",
        "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
        "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
        "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
        "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
        "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
        "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
        "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
        "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
        "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
        "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
        "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
        "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
        "The definition, as a logic program, is shown in Figure 6.",
        "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
        "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
        "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
        "The verification of non-unification of σ with any element of Σc deserves an explanation.",
        "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
        "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
        "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
        "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
        "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
        "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
        "Relationships among actions are domain-dependent.",
        "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
        "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
        "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
        "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
        "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
        "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
        "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
    ],
    "error_count": 0,
    "keys": {
        "virtual organization": {
            "translated_key": "organización virtual",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A <br>virtual organization</br> I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the <br>virtual organization</br> is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Una \"organización virtual\" es el triple S, S0, E, T donde S = {S1 ,..., sn} es un conjunto de estados finitos y no vacíos, s0 ∈ S es el estado inicial, e es un conjunto finito de bordes (s, s, ϕ), s, s ∈ S que conecta s a s con una primeraOrdene la fórmula atómica ϕ como etiqueta, y t ⊆ s es el conjunto de estados terminales.",
                "También definimos una función para calcular el conjunto de todos los estados de ejecución posibles, h ∗ (i, ξ, s) = {ξ ∪ ∪ {a: r, ¯ϕ, t} | (s, s, ϕ) ∈ E}.2.2 VO regulados por la norma, abogamos por una separación de las preocupaciones por las cuales la \"organización virtual\" se complementa con un conjunto explícito y separado de normas que regula aún más el comportamiento de los agentes a medida que participan en la promulgación de una organización."
            ],
            "translated_text": "",
            "candidates": [
                "organización virtual",
                "organización virtual",
                "organización virtual",
                "organización virtual"
            ],
            "error": []
        },
        "multi-agent system": {
            "translated_key": "sistema multiagente",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as <br>multi-agent system</br>s, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as <br>multi-agent system</br>s and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of <br>multi-agent system</br>s (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Nos centramos en las organizaciones virtuales realizadas como \"sistemas de múltiples agentes\", en el que los agentes humanos y de software interactúan para lograr objetivos individuales y globales.",
                "Los VO se realizan como \"Sistemas de múltiples agentes\" y una característica más deseable de tales sistemas es la apertura por la cual los nuevos componentes diseñados por otras partes se acomodan sin problemas.",
                "El uso de normas, es decir, las prohibiciones, los permisos y las obligaciones, en la especificación y operación de \"Sistemas de múltiples agentes\" (Mass) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]."
            ],
            "translated_text": "",
            "candidates": [
                "sistema de múltiples agentes",
                "sistemas de múltiples agentes",
                "sistema de múltiples agentes",
                "Sistemas de múltiples agentes",
                "sistema de múltiples agentes",
                "Sistemas de múltiples agentes"
            ],
            "error": []
        },
        "norm-regulated vo": {
            "translated_key": "VO regulado por la norma",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "agent": {
            "translated_key": "agente",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-<br>agent</br> systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-<br>agent</br> (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-<br>agent</br> systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-<br>agent</br> systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-<br>agent</br> systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms <br>agent</br> x is permitted to send bid(ag1, 20) and <br>agent</br> ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware <br>agent</br> societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the <br>agent</br> carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any <br>agent</br> that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of <br>agent</br> identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an <br>agent</br> performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an <br>agent</br> identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that <br>agent</br> ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on <br>agent</br> τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on <br>agent</br> τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for <br>agent</br> identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor <br>agent</br> which supervises the actions of the external <br>agent</br> and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an <br>agent</br> and role, which has been carried out by that specific <br>agent</br> and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground <br>agent</br>/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an <br>agent</br> performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE <br>agent</br> SOCIETIES We now describe how our norm-regulated VOs give rise to normaware <br>agent</br> societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor <br>agent</br> [12].",
                "This is a kind of chaperon that interacts with an external <br>agent</br>, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware <br>agent</br> Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external <br>agent</br>; any normative aspects are considered by the governor <br>agent</br>.",
                "The governor <br>agent</br> represents the external <br>agent</br> within the VO.",
                "As such, it has the unique identifier of the external <br>agent</br>.",
                "The governor <br>agent</br> keeps an account of all roles the external <br>agent</br> is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor <br>agent</br> as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor <br>agent</br> proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to <br>agent</br> Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to <br>agent</br> Id (the governor agents external <br>agent</br>).",
                "In line 7 the governor <br>agent</br>, in possession of the applicable norms as well as other relevant information, interacts with the external <br>agent</br> to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external <br>agent</br>, represented as NewRoles.",
                "The governor <br>agent</br> keeps looping (line 9) using the identifier for the external <br>agent</br> and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the <br>agent</br> identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Nos centramos en las organizaciones virtuales realizadas como sistemas multi-\"agentes\", en los que los agentes humanos y de software interactúan para lograr objetivos individuales y globales.",
                "En términos más generales, podemos capturar una noción útil de delegación inter-\"agente\" (e entre rol) de acciones y normas asociadas a ellas, y usarla para abordar los conflictos/inconsistencias causadas por la delegación de la acción.",
                "Categorías y descriptores de sujetos I.2.4 [Inteligencia artificial]: aplicaciones y sistemas expertos;I.2.11 [Inteligencia artificial]: inteligencia artificial distribuida-multi- \"Agente\" Algoritmos de términos generales, teoría 1.",
                "Los VO se realizan como sistemas múltiples \"agentes\" y una característica más deseable de tales sistemas es la apertura por la cual los nuevos componentes diseñados por otras partes se acomodan sin problemas.",
                "El uso de normas, es decir, las prohibiciones, los permisos y las obligaciones, en la especificación y operación de sistemas múltiples \"agentes\" (masa) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6].",
                "Por ejemplo, las normas \"agente\" x puede enviar ofertas (AG1, 20) y \"agente\" AG2 tiene prohibido hacer una oferta de envío (y, z) (donde x, y, z son variables y ag1, ag2, 20 sonLas constantes) están en conflicto porque sus agentes, acciones y términos (dentro de las acciones) unifican.",
                "En la Sección 5 describimos cómo se usan nuestras normas reducidas en las sociedades de \"agente\" conscientes de la norma.",
                "Los VO deben permitir dos tipos de no determinismo correspondiente a opciones que los agentes autónomos pueden hacer, a saber, i) el que surge cuando hay más de un borde que sale de un estado;y ii) el que surge de las variables en las fórmulas ϕ etiquetando un borde, para el cual el \"agente\" que lleva a cabo la acción instancia.",
                "Los roles, como se explotan en, por ejemplo, [18] y [20], nos ayudan a abstraer de agentes individuales y definir un patrón de comportamiento al que cualquier \"agente\" que adopte un papel debería cumplir.",
                "Haremos uso de dos conjuntos finitos y no vacíos, agentes = {AG1 ,..., agn} y roles = {r1 ,..., RM}, que representa, respectivamente, los conjuntos de identificadores y etiquetas de roles de \"agente\".",
                "Sin embargo, observe que en la especificación de VO no restringimos la sintaxis de las fórmulas: las variables pueden aparecer en ellas, y cuando un \"agente\" realiza una acción real, entonces cualquier variable de la acción especificada debe ser valores asignados.",
                "Un estado de ejecución global de un VO, denotado como ξ, es un conjunto finito, posiblemente vacío, de tuplas a: r, ¯ϕ, t donde a ∈ Agentes es un identificador de \"agente\", r ∈ Roles es una etiqueta de roles, ¯ϕ es una fórmula atómica de primer orden terrestre, y t ∈ en es una marca de tiempo.",
                "Por ejemplo, AG1: Comprador, P (A, 34), 20 estados que \"agente\" AG1 adoptan el comprador de rol realizó la acción P (A, 34) en el instante 20.",
                "Adoptamos la notación de [18]: oτ: τ ϕ representa una obligación en el \"agente\" τ asumiendo el rol τ para provocar ϕ;Recordamos que τ, τ son variables, constantes y funciones aplicadas a términos (anidados).",
                "Pτ: τ ϕ y fτ: τ ϕ representa, respectivamente, un permiso y una prohibición del \"agente\" τ, jugando el rol τ para lograr ϕ.",
                "Asumiremos que los tipos se utilizan para manipular adecuadamente las variables para identificadores y etiquetas de roles de \"agente\".",
                "Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 agentes no controlados pueden acomodarse en esta propuesta, si asociamos a cada uno de ellos un \"agente\" de gobernador que \"Supervisa las acciones del \"agente\" externo e informa sobre ellas.",
                "Conf.en agentes autónomos y sistemas múltiples de \"agente\" (AAMAS 07) 645 def.4.",
                "Por ejemplo, es posible que deseemos eliminar cualquier obligación específica para un \"agente\" y un rol, que ha sido llevado a cabo por ese \"agente\" específico y el rol, es decir, f (ξ, ω) = Ω - obls, obls = {OA: rϕ, td, ta, te ∈ ω |A: r, ¯ϕ, t ∈ ξ}.",
                "Conf.en agentes autónomos y sistemas múltiples \"agentes\" (AAMAS 07) influencia de la prohibición.",
                "En la primera etapa (primero para cada bucle), eliminamos todas las prohibiciones conflictivas ω = (fa: r ¯ϕ) σc, td, ta, te con \"agente\" de tierra/pares de roles a: r y fórmulas de tierra ¯ϕ: elLa única forma de resolver conflictos que surgen de tales prohibiciones es eliminarlos por completo, ya que no podemos reducir una norma completamente terrestre.",
                "La obligación exige que un \"agente\" realice una acción prohibida.",
                "Conf.En agentes autónomos y sistemas multi-\"agentes\" (AAMAS 07) 647 expresan la naturaleza de un conflicto entre una prohibición y permiso.",
                "Sociedades de \"agente\" conscientes de la norma Ahora describimos cómo nuestros VO regulados por normas dan lugar a las sociedades de \"agente\" de Normaware.",
                "Abordamos la masa abierta y heterogénea: acomodamos a los agentes externos al proporcionar a cada uno de ellos un \"agente\" del gobernador correspondiente [12].",
                "Este es un tipo de acompañante que interactúa con un \"agente\" externo, y observa e informa sobre su comportamiento.",
                "I, S, ξ, Ω I, S, ξ, Ω · · · Agn £ ¢ ¡Govn ⇐⇒ Figura 4: Arquitectura para las sociedades de \"agente\" de los agentes externos interactúan (denotados por el) con sus agentes gobernadores correspondientes.",
                "Representamos a continuación cómo los pares de gobernadores/agentes externos trabajan juntos: cualquier opción no determinista en el VO es decidida por el \"agente\" externo;Cualquier aspecto normativo es considerado por el gobernador \"agente\".",
                "El gobernador \"agente\" representa al \"agente\" externo dentro del VO.",
                "Como tal, tiene el identificador único del \"agente\" externo.",
                "El gobernador \"agente\" mantiene una cuenta de todos los roles que el \"agente\" externo está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un papel simultáneamente.",
                "Mostramos 1 principal (id, roles) ← 2 Obtener tuple (i, s, ξ, ω) ∧ 3 terminar (id, roles, i, ξ, ω) 4 main (id, roles) ← 5 Get Tuple (i,S, ξ, ω) ∧ 6 Normas de filtro (ID, roles, ω, ωid) ∧ 7 Discutir normas (id, roles, i, s, ξ, ωid, acciones) ∧ 8 Actualizar tupla (roles, acciones, newroles) ∧9 Main (ID, Newroles) Figura 5: Gobernador \"Agente\" como programa lógico Las líneas de nuestras cláusulas numeradas 1-9.",
                "En este caso, la tupla se recupera nuevamente (línea 5) y el gobernador \"agente\" se realiza (línea 6) para analizar el estado normativo global actual ω con el fin de obtener el subconjunto ωid ⊆ Ω de las normas que se refieren al \"agente\" ID \"bajo roles roles.",
                "Las normas de filtro de predicado/4 recolectan las normas que se aplican a la identificación del \"agente\" (los agentes del gobernador \"agente\" externo).",
                "En la línea 7, el \"agente\" del gobernador, en posesión de las normas aplicables, así como otra información relevante, interactúa con el \"agente\" externo para decidir sobre un conjunto de acciones que cumplen con las normas: estas acciones se utilizarán para actualizar (Línea 8) El estado de ejecución global ξ.",
                "En el proceso de actualización del estado de ejecución, se debe asignar un nuevo conjunto de roles al \"agente\" externo, representado como NewRoles.",
                "El gobernador \"agente\" sigue en bucle (línea 9) utilizando el identificador para el \"agente\" externo y su nuevo conjunto de roles.5.1 Uso de normas anotadas ahora explicamos cómo las normas anotadas son utilizadas por los agentes conscientes de las normas.",
                "Verifica (línea 4) si el identificador de \"agente\" 1 verifica (acción, Ω) ← 2 Acción = A: R, ¯ϕ, T ∧ 3 Ω = (Fτ1: τ2 ϕ) σc, Td, Ta, TE ∧ 4Unify (a, τ1, σ) ∧ unify (r, τ2, σ) ∧ unify (¯ϕ, ϕ, σ) ∧ 5 forall (σ, (σc ∈ σc, unify (σc, σ, σ)), mGUS)∧ 6 mgus = ∅∧ 7 ta ≤ t ≤ te Figura 6: Compruebe si la acción está dentro de la influencia de la norma reducida y el papel de la acción unificando con los términos apropiados τ1, τ2 de ω y que las acciones ¯ϕ, ϕ se unifican,Todo bajo el mismo unifier σ.",
                "Conf.en agentes autónomos y sistemas múltiples de \"agente\" (AAMAS 07) el sexto intl.",
                "Conf.en agentes autónomos y sistemas múltiples de \"agente\" (AAMAS 07) 649 650 el sexto intl.",
                "Conf.en agentes autónomos y sistemas múltiples de \"agente\" (AAMAS 07) el sexto intl.",
                "Conf.en agentes autónomos y sistemas múltiples de \"agente\" (AAMAS 07)"
            ],
            "translated_text": "",
            "candidates": [
                "agente",
                "agentes",
                "agente",
                "agente",
                "Agente",
                "Agente",
                "agente",
                "agentes",
                "agente",
                "agentes",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "Agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "Supervisa las acciones del ",
                "Agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agentes",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agentes",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "Agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "651 Agente",
                "agente"
            ],
            "error": []
        },
        "norm conflict": {
            "translated_key": "conflicto de normas",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A <br>norm conflict</br> arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, <br>norm conflict</br> and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on <br>norm conflict</br>, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Suponemos que Unify es una implementación adecuada de un algoritmo de unificación que yo) siempre termina (posiblemente falla, si no se puede encontrar un unificador);ii) es correcto;y iii) tiene una complejidad computacional lineal.3.1 Detección de conflictos Un \"conflicto de normas\" surge cuando una fórmula atómica que etiqueta un borde en el VO, es decir, una acción, se permite y prohibida simultáneamente [13].",
                "Conflicto de acción e inconsistencia En nuestra discusión anterior, se detectaron \"conflicto de normas\" e inconsistencia a través de una comparación directa de las fórmulas atómicas que representan la acción.",
                "En la discusión a continuación, nos concentramos en el \"conflicto de normas\", pero la inconsistencia de la norma puede tratarse de manera similar,"
            ],
            "translated_text": "",
            "candidates": [
                "conflicto de normas",
                "conflicto de normas",
                "conflicto de normas",
                "conflicto de normas",
                "si cambiamos las modalidades deoípicas P para el conflicto de la norma",
                "conflicto de normas"
            ],
            "error": []
        },
        "conflicting prohibition": {
            "translated_key": "prohibición conflictiva",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all <br>conflicting prohibition</br>s ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "En la primera etapa (primero para cada bucle), eliminamos todas las \"prohibición conflictiva\" S ω = (fa: r ¯ϕ) σc, td, ta, te con agente de tierra/pares de roles A: R y fórmulas de tierra ¯ϕ:La única forma de resolver los conflictos que surgen de tales prohibiciones es eliminarlos por completo, ya que no podemos reducir una norma completamente terrestre."
            ],
            "translated_text": "",
            "candidates": [
                "Prohibición contradictoria",
                "prohibición conflictiva"
            ],
            "error": []
        },
        "norm inconsistency": {
            "translated_key": "inconsistencia de la norma",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of <br>norm inconsistency</br> occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but <br>norm inconsistency</br> can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Inconsistencias de normas Si se puede encontrar una sustitución σ que unifica una obligación y una prohibición, entonces se produce una situación de \"inconsistencia de la norma\" [13].",
                "En la discusión a continuación, nos concentramos en el conflicto de la norma, pero la \"inconsistencia de la norma\" puede tratarse de manera similar, si cambiamos las modalidades deoípicas P para O."
            ],
            "translated_text": "",
            "candidates": [
                "inconsistencia de la norma",
                "inconsistencia de la norma",
                "Inconsistencia de la norma",
                "inconsistencia de la norma"
            ],
            "error": []
        },
        "external agent": {
            "translated_key": "agente externo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the <br>external agent</br> and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an <br>external agent</br>, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the <br>external agent</br>; any normative aspects are considered by the governor agent.",
                "The governor agent represents the <br>external agent</br> within the VO.",
                "As such, it has the unique identifier of the <br>external agent</br>.",
                "The governor agent keeps an account of all roles the <br>external agent</br> is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents <br>external agent</br>).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the <br>external agent</br> to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the <br>external agent</br>, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the <br>external agent</br> and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 agentes no controlados pueden acomodarse en esta propuesta, si asociamos a cada uno de ellos un agente de gobernador que supervisa elAcciones del \"agente externo\" e informan sobre ellas.",
                "Este es un tipo de acompañante que interactúa con un \"agente externo\", y observa e informa sobre su comportamiento.",
                "Representamos a continuación cómo el \"agente externo\" deciden los pares de gobernadores/agentes externos: las opciones no deterministas en el VO en el VO son decididas por el \"agente externo\";El agente del gobernador considera cualquier aspecto normativo.",
                "El agente del gobernador representa al \"agente externo\" dentro del VO.",
                "Como tal, tiene el identificador único del \"agente externo\".",
                "El agente del gobernador mantiene una cuenta de todos los roles que el \"agente externo\" está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un papel simultáneamente.",
                "Las normas de filtro de predicado/4 recolectan las normas que se aplican a la identificación del agente (los agentes del gobernador \"agente externo\").",
                "En la línea 7, el agente del gobernador, en posesión de las normas aplicables, así como otra información relevante, interactúa con el \"agente externo\" para decidir sobre un conjunto de acciones que cumplen con las normas: estas acciones se utilizarán para actualizar (línea 8) El estado de ejecución global ξ.",
                "En el proceso de actualización del estado de ejecución, se debe asignar un nuevo conjunto de roles al \"agente externo\", representado como NewRoles.",
                "El agente del gobernador sigue en bucle (línea 9) utilizando el identificador para el \"agente externo\" y su nuevo conjunto de roles.5.1 Uso de normas anotadas ahora explicamos cómo las normas anotadas son utilizadas por los agentes conscientes de las normas."
            ],
            "translated_text": "",
            "candidates": [
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo",
                "agente externo"
            ],
            "error": []
        },
        "governor agent": {
            "translated_key": "agente gobernador",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a <br>governor agent</br> which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding <br>governor agent</br> [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the <br>governor agent</br>.",
                "The <br>governor agent</br> represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The <br>governor agent</br> keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: <br>governor agent</br> as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the <br>governor agent</br> proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the <br>governor agent</br>, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The <br>governor agent</br> keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 agentes no controlados pueden acomodarse en esta propuesta, si asociamos a cada uno de ellos un \"agente gobernador\" que \"supervisa las acciones del agente externo y los informes sobre ellas.",
                "Abordamos la masa abierta y heterogénea: acomodamos a los agentes externos al proporcionar a cada uno de ellos un \"agente gobernador\" correspondiente [12].",
                "Representamos a continuación cómo el agente externo decide los pares de gobernadores/agentes externos: las opciones no deterministas en el VO son decididas por el VO;Los aspectos normativos son considerados por el \"agente gobernador\".",
                "El \"agente gobernador\" representa al agente externo dentro del VO.",
                "El \"agente del gobernador\" mantiene una cuenta de todos los roles que el agente externo está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un papel simultáneamente.",
                "Mostramos 1 principal (id, roles) ← 2 Obtener tuple (i, s, ξ, ω) ∧ 3 terminar (id, roles, i, ξ, ω) 4 main (id, roles) ← 5 Get Tuple (i,S, ξ, ω) ∧ 6 Normas de filtro (ID, roles, ω, ωid) ∧ 7 Discutir normas (id, roles, i, s, ξ, ωid, acciones) ∧ 8 Actualizar tupla (roles, acciones, newroles) ∧9 Main (ID, Newroles) Figura 5: \"Agente de gobernador\" como un programa lógico de las líneas de nuestras cláusulas numeradas 1-9.",
                "En este caso, la tupla se recupera nuevamente (línea 5) y el \"agente gobernador\" avanza (línea 6) para analizar el estado normativo global actual ω con el fin de obtener el subconjunto ωid ⊆ Ω de las normas que se refieren a la identificación del agente bajo roles de rolesRoles.",
                "En la línea 7, el \"agente gobernador\", en posesión de las normas aplicables, así como otra información relevante, interactúa con el agente externo para decidir sobre un conjunto de acciones que cumplen con la norma: estas acciones se utilizarán para actualizar (línea 8) El estado de ejecución global ξ.",
                "El \"Agente del Gobernador\" sigue en bucle (línea 9) utilizando el identificador para el agente externo y su nuevo conjunto de roles.5.1 Uso de normas anotadas ahora explicamos cómo las normas anotadas son utilizadas por los agentes conscientes de las normas."
            ],
            "translated_text": "",
            "candidates": [
                "agente gobernador",
                "agente gobernador",
                "agente gobernador",
                "agente gobernador",
                "agente gobernador",
                "agente gobernador",
                "agente gobernador",
                "agente gobernador",
                "agente gobernador",
                "agente del gobernador",
                "agente gobernador",
                "Agente de gobernador",
                "agente gobernador",
                "agente gobernador",
                "agente gobernador",
                "agente gobernador",
                "agente gobernador",
                "Agente del Gobernador"
            ],
            "error": []
        },
        "artificial social systems": {
            "translated_key": "sistemas sociales artificiales",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Resolving Conflict and Inconsistency in Norm-Regulated Virtual Organizations Wamberto Vasconcelos Dept.",
                "of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom wvasconcelos@acm.org Martin J. Kollingbaum Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom mkolling@csd.abdn.ac.uk Timothy J. Norman Dept. of Computing Science University of Aberdeen Aberdeen AB24 3UE United Kingdom tnorman@csd.abdn.ac.uk ABSTRACT Norm-governed virtual organizations define, govern and facilitate coordinated resource sharing and problem solving in societies of agents.",
                "With an explicit account of norms, openness in virtual organizations can be achieved: new components, designed by various parties, can be seamlessly accommodated.",
                "We focus on virtual organizations realised as multi-agent systems, in which human and software agents interact to achieve individual and global goals.",
                "However, any realistic account of norms should address their dynamic nature: norms will change as agents interact with each other and their environment.",
                "Due to the changing nature of norms or due to norms stemming from different virtual organizations, there will be situations when an action is simultaneously permitted and prohibited, that is, a conflict arises.",
                "Likewise, there will be situations when an action is both obliged and prohibited, that is, an inconsistency arises.",
                "We introduce an approach, based on first-order unification, to detect and resolve such conflicts and inconsistencies.",
                "In our proposed solution, we annotate a norm with the set of values their variables should not have in order to avoid a conflict or an inconsistency with another norm.",
                "Our approach neatly accommodates the domain-dependent interrelations among actions and the indirect conflicts/inconsistencies these may cause.",
                "More generally, we can capture a useful notion of inter-agent (and inter-role) delegation of actions and norms associated to them, and use it to address conflicts/inconsistencies caused by action delegation.",
                "We illustrate our approach with an e-Science example in which agents support Grid services.",
                "Categories and Subject Descriptors I.2.4 [Artificial Intelligence]: Applications and Expert SystemsLaw; I.2.11 [Artificial Intelligence]: Distributed Artificial Intelligence-Multi-agent systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION Virtual organizations (VOs) facilitate coordinated resource sharing and problem solving involving various parties geographically remote [9].",
                "VOs define and regulate interactions (thus facilitating coordination) among software and/or human agents that communicate to achieve individual and global goals [16].",
                "VOs are realised as multi-agent systems and a most desirable feature of such systems is openness whereby new components designed by other parties are seamlessly accommodated.",
                "The use of norms, that is, prohibitions, permissions and obligations, in the specification and operation of multi-agent systems (MASs) is a promising approach to achieving openness [2, 4, 5, 6].",
                "Norms regulate the observable behaviour of self-interested, heterogeneous software agents, designed by various parties who may not entirely trust each other [3, 24].",
                "However, norm-regulated VOs may experience problems when norms assigned to their agents are in conflict (i.e., an action is simultaneously prohibited and permitted) or inconsistent (i.e., an action is simultaneously prohibited and obliged).",
                "We propose a means to automatically detect and solve conflict and inconsistency in norm-regulated VOs.",
                "We make use of firstorder term unification [8] to find out if and how norms overlap in their influence (i.e., the agents and values of parameters in agents actions that norms may affect).",
                "This allows for a fine-grained solution whereby the influence of conflicting or inconsistent norms is curtailed for particular sets of values.",
                "For instance, norms agent x is permitted to send bid(ag1, 20) and agent ag2 is prohibited from doing send bid(y, z) (where x, y, z are variables and ag1, ag2, 20 are constants) are in conflict because their agents, actions and terms (within the actions) unify.",
                "We solve the conflict by annotating norms with sets of values their variables cannot have, thus curtailing their influence.",
                "In our example, the conflict is avoided if we require that variable y cannot be ag1 and that z cannot be 20.",
                "This paper is organized as follows.",
                "In the next section we provide a minimalistic definition for norm-regulated VOs.",
                "In section 3 we formally define norm conflicts, and explain how they are detected and resolved.",
                "In section 4 we describe how the machinery of the previous section can be adapted to detect and resolve norm inconsistencies.",
                "In section 5 we describe how our curtailed norms are used in norm-aware agent societies.",
                "In section 6 we explain how our machinery can be used to detect and solve indirect conflicts/inconsistencies, that is, those caused via relationships among actions; we extend and adapt the machinery to accommodate the delegation of norms.",
                "In section 7 we illustrate our approach with an example of norm-regulated software agents serving the Grid.",
                "In section 8 we survey related work and in section 9 we discuss our contributions and give directions for future work. 644 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2.",
                "VIRTUAL ORGANIZATIONS Virtual organizations [17] allow various parties to come together to share resources and engage in problem solving.",
                "This paradigm has found strong applications in Web-service orchestration [14], e-Science [16] and the Grid [9].",
                "VOs, in their most generic formulation, can be seen as coordination artifacts, allowing software and human agents to engage in sophisticated forms of interaction.",
                "We formally represent our VOs as finite-state machines in which the actions of individual agents label the edges between discrete states.",
                "This provides us with a lowest common denominator: there are much more sophisticated, convenient and expressive ways to represent interactions among agents (e.g., AUML [19] and electronic institutions [20], to name a few), but for the sake of generalising our approach, we shall assume any higher-level formalism can be mapped onto a finite-state machine (possibly with some loss of expressiveness).",
                "We show in Figure 1 a simple VO graphically represented as a finite-state machine1 .",
                "The labels on the edges con//?>=<89:;0 p(X) \u000b\u000b q(Y,Z) //?>=<89:;1 s(A,B) //?>=<89:;/.-,()*+2 Figure 1: Sample VO as a Finite-State Machine necting the states are first-order atomic formulae, denoted generically as ϕ; they stand for actions performed by individual agents.",
                "We define our virtual organizations as follows: DEF. 1.",
                "A virtual organization I is the triple S, s0, E, T where S = {s1, . . . , sn} is a finite and non-empty set of states, s0 ∈ S is the initial state, E is a finite set of edges (s, s , ϕ), s, s ∈ S connecting s to s with a first-order atomic formula ϕ as a label, and T ⊆ S is the set of terminal states.",
                "Notice that edges are directed, so (s, t, ϕ) = (t, s, ϕ).",
                "The sample VO of Figure 1 is formally represented as I = {0, 1, 2}, 0, {(0, 0, p(X)), (0, 1, q(Y, Z)), (1, 2, s(A, B)}, {2} .",
                "We assume an implicit existential quantification on any variables in ϕ, so that, for instance, s(A, B) stands for ∃A, B s(A, B).",
                "VOs should allow for two kinds of non-determinism corresponding to choices autonomous agents can make, viz., i) the one arising when there is more than one edge leaving a state; and ii) the one arising from variables in the formulae ϕ labelling an edge, for which the agent carrying out the action instantiates.",
                "These kinds of non-determinism are desirable as they help define generic and flexible coordination mechanisms.",
                "Another important concept we use is the roles of agents in VOs.",
                "Roles, as exploited in, for instance, [18] and [20], help us abstract from individual agents and define a pattern of behaviour to which any agent that adopts a role ought to conform.",
                "Moreover, all agents with the same role are guaranteed the same rights, duties and opportunities.",
                "We shall make use of two finite, non-empty sets, Agents = {ag1, . . . , agn} and Roles = {r1, . . . , rm}, representing, respectively, the sets of agent identifiers and role labels.",
                "We refer generically to first-order terms, i.e., constants, variables, and (nested) functions as τ. 2.1 Semantics of VOs The specification of a VO as a finite-state machine gives rise to a possibly infinite set of histories of computational behaviours, in which the actions labelling the paths from the initial state to a final state are recorded.",
                "Although the actions comprising a VO are carried out distributedly, we propose an explicit global account of all events.",
                "In practice, this can be achieved if we require individual 1 We adopt Prologs convention [1] and use strings starting with a capital letter to represent variables and strings starting with a small letter to represent constants. agents to declare/inform whatever actions they have carried out; this assumes trustworthy agents, naturally2 .",
                "In order to record the authorship of the action, we annotate the formulae with the agents unique identification.",
                "Our explicit global account of all events is a set of ground atomic formulae ϕ, that is, we only allow constants to appear as terms of formulae.",
                "Each formula is a truthful record of an action specified in the VO.",
                "Notice, however, that in the VO specification we do not restrict the syntax of the formulae: variables may appear in them, and when an agent performs an actual action then any variables of the specified action must be assigned values.",
                "We thus define: DEF. 2.",
                "A global execution state of a VO, denoted as Ξ, is a finite, possibly empty, set of tuples a : r, ¯ϕ, t where a ∈ Agents is an agent identifier, r ∈ Roles is a role label, ¯ϕ is a ground first-order atomic formula, and t ∈ IN is a time stamp.",
                "For instance, ag1:buyer, p(a, 34), 20 states that agent ag1 adopting role buyer performed action p(a, 34) at instant 20.",
                "Given a VO I = S, s0, E, T , an execution state Ξ and a state s ∈ S, we can define a function which obtains a possible next execution state, viz., h(I, Ξ, s) = Ξ ∪ { a:r, ¯ϕ, t }, for one (s, s , ϕ) ∈ E. Such function h must address the two kinds of non-determinism above, as well as the choice on the potential agents that can carry out the action and their adopted roles.",
                "We also define a function to compute the set of all possible execution states, h∗ (I, Ξ, s) = {Ξ ∪ { a: r, ¯ϕ, t }|(s, s , ϕ) ∈ E}. 2.2 Norm-Regulated VOs We advocate a separation of concerns whereby the virtual organization is complemented with an explicit and separate set of norms that further regulates the behaviour of agents as they take part in the enactment of an organization.",
                "The freedom of choice given to agents (captured via the non-determinism of VOs, explained above) must be curtailed in some circumstances.",
                "For instance, we might need to describe that whoever carried out ϕ is obliged to carry out ϕ , so that if there is a choice point in which ϕ appears as a label of an edge, then that edge should be followed.",
                "Rather than embedding such normative aspects into the agents design (say, by explicitly encoding normative aspects in the agents behaviour) or into the VO itself (say, by addressing exceptions and deviant behaviour in the mechanism itself), we adopt the view that a VO should be supplemented with a separate set of norms that further regulates the behaviour of agents as they take part in the enactment of the organization.",
                "This separation of concerns should facilitate the design of MASs; however, the different components (VOs and norms) must come together at some point in the design process.",
                "Our norms are defined as below: DEF. 3.",
                "A norm, generically referred to as ν, is any construct of the form Oτ:τ ϕ, Pτ:τ ϕ, or Fτ:τ ϕ, where τ, τ are either variables or constants and ϕ is a first-order atomic formula.",
                "We adopt the notation of [18]: Oτ:τ ϕ represents an obligation on agent τ taking up role τ to bring about ϕ; we recall that τ, τ are variables, constants and functions applied to (nested) terms.",
                "Pτ:τ ϕ and Fτ:τ ϕ stand for, respectively, a permission and a prohibition on agent τ, playing role τ to bring about ϕ.",
                "We shall assume that sorts are used to properly manipulate variables for agent identifiers and role labels.",
                "We propose to formally represent the normative positions of all agents enacting a VO.",
                "By normative position we mean the social burden associated to individuals [12], that is, their obligations, permissions and prohibitions: 2 Non-trustworthy agents can be accommodated in this proposal, if we associate to each of them a governor agent which supervises the actions of the external agent and reports on them.",
                "This approach was introduced in [12] and is explained in section 5.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 645 DEF. 4.",
                "A global normative state Ω is a finite and possibly empty set of tuples ω = ν, td, ta, te where ν is a norm as above and td, ta, te ∈ IN are, respectively, the time when ν was declared (introduced), when ν becomes active and when ν expires, td ≤ ta < te.",
                "It is worth noticing that we do not require the atomic formulae of norms to be ground: there could be variables in them.",
                "We assume an implicit universal quantification on the variables A, R of norms XA:Rϕ (for the deontic modalities X ∈ {O, P, F}), so that, for instance, PA:Rp(X, b, c) stands for ∀A ∈ Agents.∀R ∈ Roles.∃X.PA:Rp(X, b, c).",
                "We also refer to the tuples in Ω as norms.",
                "Global normative states complement the execution states of VOs with information on the normative positions of individual agents.",
                "We can relate them via a function to obtain a norm-regulated next execution state of a VOs, that is, g(I, Ξ, s, Ω, t) = Ξ , t standing for the time of the update.",
                "For instance, we might want all prohibited actions to be excluded from the next execution state, that is, g(I, Ξ, s, Ω, t) = Ξ ∪ { a :r, ¯ϕ, t }, (s, s , ϕ) ∈ E and Fa:rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te.",
                "We might equally wish that only permitted actions be chosen for the next execution state.",
                "We do not legislate, or indeed recommend, any particular way to regulate VOs.",
                "We do, however, offer simple underpinnings to allow arbitrary policies to be put in place.",
                "In the same way that a normative state is useful to obtain the next execution state of a VO, we can use an execution state to update a normative state.",
                "For instance, we might want to remove any obligation specific to an agent and role, which has been carried out by that specific agent and role, that is, f(Ξ, Ω) = Ω − Obls, Obls = { Oa:rϕ, td, ta, te ∈ Ω| a:r, ¯ϕ, t ∈ Ξ}.",
                "The management (i.e., creation and updating) of global normative states is an interesting area of research.",
                "A simple but useful approach is reported in [11]: production rules generically depict how norms should be updated to reflect what agents have done and which norms currently hold.",
                "In this paper our focus is not to propose how Ωs should be managed; we assume some mechanism which does that. 3.",
                "NORM CONFLICTS We now define means to detect and resolve norm conflicts and inconsistencies.",
                "We make use of the concept of unification [1, 8] of first-order terms τ, i.e., constants, variables or (nested) functions with terms as parameters.",
                "Initially we define substitutions: DEF. 5.",
                "A substitution σ is a finite and possibly empty set of pairs x/τ, where x is a variable and τ is a term.",
                "We define the application of a substitution as: 1. c · σ = c for a constant c 2. x · σ = τ · σ if x/τ ∈ σ; otherwise x · σ = x 3. pn (τ0, . . . , τn) · σ = pn (τ0 · σ, . . . , τn · σ). 4. (Xτ1:τ2 ϕ) · σ = X(τ1·σ):(τ2·σ)(ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta, te Where X generically refers to any of the deontic modalities O, P, F. Unification between two terms τ, τ consists of finding a substitution σ (also called, in this context, the unifier of τ and τ ) such that τ · σ = τ · σ.",
                "Many algorithms have been proposed to solve the unification problem, a fundamental issue in automated theorem proving [8], and more recent work provides very efficient ways to obtain unifiers.",
                "We shall make use of the following definition: DEF. 6.",
                "Relationship unify(τ, τ , σ) holds iff there is a possibly empty σ such that τ · σ = τ · σ.",
                "We also define the unification of atomic formulae as unify(pn (τ0, . . . , τn), pn (τ0, . . . , τn), σ) which holds iff τi · σ = τi · σ, 0 ≤ i ≤ n. The unify relationship checks if a substitution σ is indeed a unifier for τ, τ but it can also be used to find such σ.",
                "We assume that unify is a suitable implementation of a unification algorithm which i) always terminates (possibly failing, if a unifier cannot be found); ii) is correct; and iii) has a linear computational complexity. 3.1 Conflict Detection A norm conflict arises when an atomic formula labelling an edge in the VO, i.e. an action, is simultaneously permitted and prohibited [13].",
                "In this case, both norms are in conflict with regard to their agents, roles and parameters (terms) of specific actions.",
                "We propose to use unification to detect when a prohibition and a permission overlap and to employ the unifier to resolve the conflict.",
                "For instance, PA:Rp(c, X) and Fa:bp(Y, Z) are in conflict as they unify under σ = {A/a, R/b, Y/c, X/d}).",
                "If, however, the variables in Fa:bp(Y, Z) do not get the values in σ then there will be no conflicts.",
                "We thus propose to annotate the prohibitions in Ω with unifiers, called here conflict sets, and use these annotations to determine what the variables of the prohibition cannot be in future unifications in order to avoid a conflict.",
                "Each prohibition is henceforth regarded as having such an annotation, denoted as (Fτ1:τ2 ϕ) Σc, td, ta, te .",
                "Initially, this annotation is empty.",
                "We propose to curtail the influence of prohibitions, thus giving agents more choices in the actions they may perform.",
                "A similar approach could be taken whereby permissions are curtailed, thus limiting the available agents actions.",
                "Each of these policies is possible: we do not legislate over any of them nor do we give preference over any.",
                "In this paper we are interested in formalising such policies within a simple mathematical framework.",
                "A prohibition can be in conflict with various permissions in Ω.",
                "We, therefore, have to find the maximal set of conflicting pairs of permissions and prohibitions in Ω, by performing a pairwise inspection.",
                "This requires identifying the substitution between two pairs of norms that characterises a conflict.",
                "This is formally captured by the following definition: DEF. 7.",
                "A conflict arises between two tuples ω, ω ∈ Ω under a substitution σ, denoted as cflct(ω, ω , σ), iff the following conditions hold: 1. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te , ω = Pτ1:τ2 ϕ , td, ta, te 2. unify(τ1, τ1, σ), unify(τ2, τ2, σ), and unify(ϕ, ϕ , σ) 3. |te − te| ≤ |ta − ta| That is, a prohibition and a permission conflict (condition 1) if, and only if, the agents and roles they apply to and their actions, respectively, unify under σ (condition 2) and their activation periods overlap (condition 3).",
                "Substitution σ, the conflict set, unifies the agents, roles and atomic formulae of a permission and a prohibition.",
                "The annotation Σc does not play any role when detecting conflicts, but, as we show below, we have to update the annotation to reflect new curtailments to solve conflicts.",
                "For instance, cflct( (Fa:bp(Y, d)) ∅, 1, 3, 5 , PA:Rp(c, X), 2, 3, 4 , {A/a, R/b, Y/c, Z/X}) holds.",
                "We define below how we obtain the set of conflicting norms of a normative state Ω: DEF. 8.",
                "The finite, possibly empty set of conflicting norms of a normative state Ω, denoted as CFLS(Ω), is defined as CFLS(Ω) = { ω, ω , σ |ω, ω ∈ Ω, cflct(ω, ω , σ)} 3.2 Conflict Resolution A fine-grained way of resolving conflict can be done via unification.",
                "We detect the overlapping of the norms influences, i.e. how they affect the behaviours of agents in the VO, and we curtail the 646 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) influence of the prohibition.",
                "We illustrate with Venn diagrams in Figure 2 the overlap of norm influences (left) which characterises a conflict and the curtailment necessary to resolve the conflict (right).",
                "The illustration shows the space of possible values for p(X, Y ) and p(X, Y ) PA:Rp(c, X) Fa:bp(Y, Z) p(X, Y ) Fa:bp(Y, Z) PA:Rp(c, X) Figure 2: Overlap of Influence (Left) and Curtailment (Right) two portions of this space defining the scope of influence of norms PA:Rp(c, X) and Fa:bp(Y, Z).",
                "The scope of these norms overlap, illustrated by the intersection of boxes on the left, in actions with values, for instance, a, b, p(c, 2) , . . . , a, b, p(c, n) .",
                "The curtailment of the prohibition eliminates the intersection: it moves the scope of the norm influence to outside the influence of the permission.",
                "If there were multiple overlaps among one prohibition and various permissions, which is likely to happen, then the prohibition will be multiply curtailed to move the scope of the norm to avoid all intersections.",
                "The algorithm shown in Figure 3 depicts how we obtain a conflictfree set of norms.",
                "It maps an existing set Ω possibly with conflictalgorithm conflictResolution(Ω, Ω ) input Ω output Ω begin Ω := Ω for each ω ∈ Ω s.t. ω = (Fa:r ¯ϕ) Σc, td, ta, te do if ω, ω , σ ∈ CFLS(Ω) then Ω := Ω − {ω} end for for each ω ∈ Ω s.t. ω = (Fτ1:τ2 ϕ) Σc, td, ta, te do ΣMAX c := [ ω,ω ,σc ∈CFLS(Ω ) {σc} Ω := (Ω − {ω}) ∪ { (Fτ1:τ2 ϕ) (Σc ∪ ΣMAX c ), td, ta, te } end for end Figure 3: Algorithm to Resolve Conflicts in a Set of Norms ing norms onto a new set Ω in which the conflicts (if any) are resolved.",
                "The algorithm forms Ω as a set that is conflict-freethis means that prohibitions are annotated with a conflict set that indicates which bindings for variables have to be avoided.",
                "Initially, Ω is set to be Ω.",
                "The algorithm operates in two stages.",
                "In the first stage (first for each loop), we remove all conflicting prohibitions ω = (Fa:r ¯ϕ) Σc, td, ta, te with ground agent/role pairs a : r and ground formulae ¯ϕ: the only way to resolve conflicts arising from such prohibitions is to remove them altogether, as we cannot curtail a fully ground norm.",
                "In the second stage (second for each loop), the remaining prohibitions in Ω are examined: the set CFLS(Ω ) contains all conflicts between permissions and the remaining prohibitions in Ω represented as tuples ω, ω , σc , with σc representing the conflict set.",
                "As a prohibition may have conflicts with various permissions, the set CFLS(Ω ) may contain more than one tuple for each prohibition.",
                "In order to provide an Ω that reflects all these conflicts for a specific prohibition, we have to form ΣMAX c containing all conflict sets σc for a given prohibition ω.",
                "The maximal set is used to update the annotation of the prohibition.",
                "It is important to explain the need for updating the conflict set of prohibitions.",
                "Normative states change as a result of agents actions [11]: existing permissions, prohibitions and obligations are revoked and/or new ones are put in place as a result of agents interactions with the environment and other agents.",
                "Whenever new norms are added we must check for new conflicts and inconsistencies.",
                "If we only apply our algorithm to a pair consisting of an old and a new norm, then some re-processing of pairs of old norms (which were dealt with before) can be saved.",
                "The removal of norms from the set Ω is dealt with efficiently: each permission to be removed must be checked first for conflicts with any existing prohibition (re-processing can be avoided if we record the conflict, instead of detecting it again).",
                "If there is a conflict, then the conflict set will have been recorded in the prohibitions annotation; this conflict set is thus removed from the prohibitions annotation.",
                "The removal of obligations follows a similar process.",
                "Prohibitions are removed without the need to consider their relationships with other norms.",
                "Our algorithm is correct in that it provides, for a given Ω, a new Ω in which i) all ground prohibitions which conflict with permissions have been removed; and ii) all remaining annotated prohibitions (Fτ:τ ¯ϕ) Σc, td, ta, te will not unify with any of the permissions in Ω , provided the unifier does not appear in Σc.",
                "The first requirement is addressed by the first for each loop, which does precisely this: it removes all ground prohibitions which unify with an obligation.",
                "The second requirement is addressed by the second for each loop: each prohibition has its annotation Σc added with ΣMAX c , thus accommodating the unifiers from all permissions that unify with the prohibition.",
                "It is easy to see that the algorithm always terminates: each of its two loops go through a finite set, processing one element at a time.",
                "The set CFLS(Ω) is computed in a finite number of steps as are the set operations performed within each loop.",
                "The algorithm has, however, exponential complexity3 , as the computation of CFLS(Ω) requires a pairwise comparison of all elements in Ω.",
                "We illustrate our algorithm with the following example.",
                "Let there be the following global normative state Ω: j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , (Fa:rp(a, b)) {}, 2, 4, 12 Pa:rp(d, e), 3, 4, 9 , ff The first loop removes the ground prohibition, thus obtaining the following Ω : j (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , Pe:f p(g, h), 3, 4, 9 ff We then have the following set of conflicting norms CFLS(Ω ): 8 < : * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pa:bp(c, d), 3, 4, 8 , {A/a, R/b, X/c, Y/d} + , * (FA:Rp(X, Y )) {}, 2, 2, 9 , Pe:f p(g, h), 3, 4, 9 , {A/e, R/f, X/g, Y/h} +9 = ; For each prohibition ω ∈ Ω we retrieve all elements from w, w , σ ∈ CFLS(Ω ) and collect their σs in ΣMAX c .",
                "The final Ω is thus: 8 < : (FA:Rp(X, Y )) j {A/a, R/b, X/c, Y/d} {A/e, R/f, X/g, Y/h} ff , 2, 2, 9 , Pa:rp(a, b), 3, 4, 8 , Pa:rp(d, e), 3, 4, 9 , 9 = ; The annotated set of conflict sets should be understood as a record of past unifications, which informs how prohibitions should be used in the future in order to avoid any conflicts with permissions.",
                "We show in Section 5.1 how annotations are used by norm-aware agents. 4.",
                "NORM INCONSISTENCIES If a substitution σ can be found that unifies an obligation and a prohibition, then a situation of norm inconsistency occurs [13].",
                "The obligation demands that an agent performs an action that is forbidden.",
                "We can reuse the machinery, introduced above for resolving conflicts between permissions and prohibitions, in order to a) detect and b) resolve such inconsistencies.",
                "With Definition 7, we 3 The combinatorial effort is not necessary anymore if instead we maintain a set of norms conflict-free: each time a new norm is to be introduced then we compare it with the existing ones, thus making the maintenance process of linear complexity.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 647 express the nature of a conflict between a prohibition and permission.",
                "Similarly, a situation of inconsistency can be defined reusing this definition and replacing the P deontic modality with O.",
                "We can reuse the machinery for conflict resolution, developed previously, for resolving inconsistency.",
                "The conflict resolution algorithm can be applied without change to accumulate a maximal conflict set ΣMAX c for each prohibition in Ω that unifies with obligations. 5.",
                "NORM-AWARE AGENT SOCIETIES We now describe how our norm-regulated VOs give rise to normaware agent societies.",
                "We address open and heterogeneous MASs: we accommodate external agents by providing each of them with a corresponding governor agent [12].",
                "This is a kind of chaperon that interacts with an external agent, and observes and reports on its behaviour.",
                "We show our architecture in Figure 4 below: a number External Governor Agents Agents Tuple Space ag1 £ ¢   ¡ gov1 ⇐⇒ . . . . . . . . . . . .",
                "I, s, Ξ, Ω I, s , Ξ , Ω · · · agn £ ¢   ¡ govn ⇐⇒ Figure 4: Architecture for Norm-Aware Agent Societies of external agents interact (denoted by the ) with their corresponding governor agents.",
                "The governor agents have access to the VO description I, the current state s of the VO enactment, the global execution state Ξ and the global normative state Ω.",
                "Governor agents are able to write to and read from (denoted by the ⇐⇒) a shared memory space (e.g., a blackboard-like solution implemented as a tuple space), updating the global configuration (denoted by the ) to reflect the dynamics of the VO enactment.",
                "Governor agents are necessary because we cannot anticipate or legislate over the design or behaviour of external agents.",
                "We depict below how the pairs of governor/external agents work together: any non-deterministic choices on the VO are decided by the external agent; any normative aspects are considered by the governor agent.",
                "The governor agent represents the external agent within the VO.",
                "As such, it has the unique identifier of the external agent.",
                "The governor agent keeps an account of all roles the external agent is currently playing: in our VOs, it is possible for agents to take up more than one role simultaneously.",
                "We define in Figure 5 how governor agents work - we use a logic program for this purpose.",
                "We show 1 main(Id, Roles) ← 2 get tuple( I, s, Ξ, Ω )∧ 3 terminate(Id, Roles, I, Ξ, Ω) 4 main(Id, Roles) ← 5 get tuple( I, s, Ξ, Ω )∧ 6 filter norms(Id, Roles, Ω, ΩId )∧ 7 discuss norms(Id, Roles, I, s, Ξ, ΩId , Actions)∧ 8 update tuple(Roles, Actions, NewRoles)∧ 9 main(Id, NewRoles) Figure 5: Governor Agent as a Logic Program the lines of our clauses numbered 1-9.",
                "The first clause (lines 1-3) depicts the termination condition: get tuple/1 (line 2) retrieves I, s, Ξ, Ω from the shared tuple space and terminate/4 checks if the current VO enactment (recorded in Ξ) has come to an end.",
                "The team of governor agents synchronise their access to the tuple space [12], thus ensuring each has a chance to function.",
                "The second clause (lines 4-9) depicts a generic loop when the termination condition of the first clause does not hold.",
                "In this case, the tuple is again retrieved (line 5) and the governor agent proceeds (line 6) to analyse the current global normative state Ω with a view to obtaining the subset ΩId ⊆ Ω of norms referring to agent Id under roles Roles.",
                "Predicate filter norms/4 collects the norms which apply to agent Id (the governor agents external agent).",
                "In line 7 the governor agent, in possession of the applicable norms as well as other relevant information, interacts with the external agent to decide on a set of Actions which are norm-compliant - these actions will be used to update (line 8) the global execution state Ξ.",
                "In the process of updating the state of execution, a new set of roles must be assigned to the external agent, represented as NewRoles.",
                "The governor agent keeps looping (line 9) using the identifier for the external agent and its new set of roles. 5.1 Using Annotated Norms We now explain how annotated norms are used by norm-aware agents.",
                "We do so via the definition of predicate check/2, which holds if its first argument, a candidate action (in the format of the elements of Ξ of Def. 2), is within the influence of an annotated prohibition ω, its second parameter.",
                "The definition, as a logic program, is shown in Figure 6.",
                "It checks (line 4) if the agent identifier 1 check(Action, ω) ← 2 Action = a:r, ¯ϕ, t ∧ 3 ω = (Fτ1:τ2 ϕ) Σc, td, ta, te ∧ 4 unify(a, τ1, σ) ∧ unify(r, τ2, σ) ∧ unify( ¯ϕ, ϕ, σ)∧ 5 forall(σ , (σc ∈ Σc, unify(σc, σ, σ )), MGUs)∧ 6 MGUs = ∅∧ 7 ta ≤ t ≤ te Figure 6: Check if Action is within Influence of Curtailed Norm and role of the action unify with the appropriate terms τ1, τ2 of ω and that the actions ¯ϕ, ϕ themselves unify, all under the same unifier σ.",
                "It then verifies (lines 5-6) that σ does not unify with any of the conflict sets in Σc.",
                "Finally, in line 7 it checks if the time of the action is within the norm temporal influence.",
                "The verification of non-unification of σ with any element of Σc deserves an explanation.",
                "The elements of Σc are unifiers stating what values the variables of the norm cannot have, that is, they represent gaps in the original scope of the norms influence.",
                "The test thus equates to asking if the action is outside such gaps, that is, the action is within the curtailed scope of influence of the norm. 6.",
                "ACTION CONFLICT & INCONSISTENCY In our previous discussion, norm conflict and inconsistency were detected via a direct comparison of the atomic formulae representing the action.",
                "However, conflicts and inconsistencies may also arise indirectly via relationships among actions.",
                "For instance, if p(X) amounts to q(X, X), then norms PA:Rp(X) and FA:Rq(X, X) are in conflict since PA:Rp(X) can be rewritten as PA:Rq(X, X) and we thus have both PA:Rq(X, X) and FA:Rq(X, X).",
                "In the discussion below we concentrate on norm conflict, but norm inconsistency can be dealt with similarly, if we change the deontic modalities P for O.",
                "Relationships among actions are domain-dependent.",
                "Different domains have distinct ways of relating their actions; engineers build ontologies to represent such relationships.",
                "We propose a simple means to account for such relationships and show how these can be connected to the mechanisms introduced above.",
                "Rather than making use of sophisticated formalisms for ontology construction, we employ a set of domain axioms, defined below: DEF. 9.",
                "The domain axioms, denoted as Δ, are a finite and possibly empty set of formulae ϕ → (ϕ1 ∧ · · · ∧ ϕn) where ϕ, ϕi, 1 ≤ i ≤ n, are atomic first-order formulae.",
                "Our example above can be captured by Δ = {(p(X) → q(X, X)), (q(X, X) → p(X))}.",
                "By explicitly representing and manipulating domain knowledge we achieve generality: the very same machinery can be used with different domains.",
                "A set of norms can have different conflicts and inconsistencies, for distinct domains of application. 648 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 649 650 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 651"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        }
    }
}