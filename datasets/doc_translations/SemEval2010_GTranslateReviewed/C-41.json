{
    "id": "C-41",
    "original_text": "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept. of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions. This paper presents two contributions to research in adaptive resource management for DRE systems. First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability. Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time. Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability. Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1. INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth. Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost. A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically. Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies. Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload. In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources. To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware. HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics. In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables. We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions. We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12]. Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload. The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/. Article 7 2. CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays. Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14]. Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4. Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal. Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video. Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution. These QoS requirements can be classified as being either hard or soft. Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times. In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers. The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject. The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations. The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network. Resource requirements and availability of resources are subjected to dynamic changes. Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers. QoS-enabled class of applications have higher priority over best-effort class of application. In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class. For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end. Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance. We refer to the current level of system resource utilization as the system condition. Based on this definition, we can classify system conditions as being either under, over, or effectively utilized. Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization. In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications. These residual resources can be used to increase the QoS of the applications. For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers. Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization. This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications. Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system. Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds. Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3. OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM). HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application. In our multimedia system, there are resource monitors for CPU utilization and network bandwidth. CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers. Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers. The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS. This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met. In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution. From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables. Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters. In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution. In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources. In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12]. HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change. Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service. TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification. TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers. We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station. Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system. Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization. Application adapters are collocated with applications since the two interact closely. As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers. HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5]. When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call. Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers. Article 7 4. PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM. We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah. The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver. Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps. The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps. These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station. From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss. The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive. A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes. The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built. TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1. At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file. Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance). Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications. To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station. CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations. The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station. The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution. The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9]. Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video. QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed. We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads. We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system. We analyze these results to explain the significant differences in system performance and application QoS. Comparison of system performance is decomposed into comparison of resource utilization and application QoS. For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes. For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter. Comparison of resource utilization. Over-utilization of system resources in DRE systems can yield an unstable system. In contrast, under-utilization of system resources increases system cost. Figure 4 and Figure 5 compare the system resource utilization with and without HyARM. Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources. Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2. As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly. Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable. In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload. During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods. Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time. Comparison of application QoS. Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively. Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications. During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point. It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly. These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM. Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met. HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization. As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications. This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs. Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM. With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss. HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video. Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications. These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5. RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently. These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change. A survey of these techniques is presented in [1]. One such approach is feedback control scheduling (FCS) [2, 11]. FCS algorithms dynamically adjust resource allocation by means of software feedback control loops. FCS algorithms are modeled and designed using rigorous controltheoretic methodologies. These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand. Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted. While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations. The control variables in such systems are therefore intrinsically discrete. HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates. HyARM can therefore be applied to system that support continuous and/or discrete set of control variables. The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables. These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6. CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly. These systems increasingly run in open environments, where resource availability is subject to dynamic change. To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications. This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems. HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems. We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service. We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each. Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times. Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7. REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu. Feddback Performance Control in Software Services. IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole. Analysis of a reservation-based feedback scheduler. In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss. An architecture for differentiated services. Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap. Enabling Autonomic Workload Management in Linux. In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004. IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas. Qos impact on user perception and understanding of multimedia video clips. In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998. ACM Press. [7] Internet Engineering Task Force. Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu. Hybrid Supervisory Control of Real-Time Systems. In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding. The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior. In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr. Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications. In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634. IEEE, Apr. 2001. [11] C. Lu, J. A. Stankovic, G. Tao, and S. H. Son. Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms. Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group. Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee. The Design and Performance of Real-Time Object Request Brokers. Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora. Trends and Perspectives in Image and Video Coding. In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill. CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission. In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004. Article 7",
    "original_translation": "Evaluación de la gestión de recursos adaptativos para los sistemas distribuidos de tiempo real distribuidos Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale Dept. De las CEE, la Universidad de Vanderbilt, Nashville Resumen Un problema desafiante que enfrentan los investigadores y desarrolladores de sistemas distribuidos en tiempo real y integrados (DRE) está diseñando e implementando estrategias efectivas de gestión de recursos adaptativos que pueden cumplir con la calidad del servicio (QoS) de extremo a extremo (QoS)Requisitos en diferentes condiciones operativas. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativos para sistemas DRE. Primero, describimos la estructura y la funcionalidad del híbrido middleware adaptativo de recursos adaptativos (HYARM), que proporciona administración de recursos adaptativos utilizando técnicas de control híbrido para adaptar a las fluctuaciones de carga de trabajo y disponibilidad de recursos. En segundo lugar, evaluamos el comportamiento adaptativo de HYARM a través de experimentos en un sistema multimedia DRE que distribuye videos en tiempo real. Nuestros resultados indican que HYARM produce un rendimiento predecible, estable y alto del sistema, incluso frente a la carga de trabajo fluctuante y la disponibilidad de recursos. Categorías y descriptores de sujetos c.2.4 [Sistemas distribuidos]: aplicaciones distribuidas;D.4.7 [Organización y diseño]: Sistemas en tiempo real y sistemas integrados 1. Introducción El logro de la calidad del servicio en tiempo real (QoS) de extremo a extremo es particularmente importante para los sistemas abiertos en tiempo real y integrados (DRE) que enfrentan limitaciones de recursos, como potencia informática limitada y ancho de banda de red. La excesiva superalización de estos recursos del sistema puede producir un comportamiento impredecible e inestable, mientras que la subutilización puede generar un costo excesivo del sistema. Por lo tanto, un enfoque prometedor para cumplir con estos requisitos de QoS de extremo a extremo es desarrollar y aplicar el middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con el QoS pueden modificarse de manera estadí o dinámica. Se llevan a cabo modificaciones estáticas para reducir la huella, aprovechar las capacidades de aprovechamiento que existen en plataformas específicas, habilitar el subconjunto funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como cambiar las interconexiones de componentes, los niveles de energía, la CPU y la disponibilidad de ancho de banda de red, la latencia/fluctuación de trabajo y la carga de trabajo. En los sistemas Open DRE, el middleware adaptativo debe realizar tales modificaciones de manera confiable, es decir, mientras cumple con los estrictos requisitos de QoS de extremo a extremo, lo que requiere la especificación y la aplicación de los límites superiores e inferiores en la utilización de los recursos del sistema para garantizar el uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el middleware de gestión de recursos adaptativo híbrido (HYARM), que es un middleware de administración de recursos distribuido de código abierto1. HYARM se basa en técnicas teóricas de control híbrido [8], que proporcionan un marco teórico para diseñar el control del sistema complejo con dinámicas continuas y discretas. En nuestro estudio de caso, que implica un sistema de distribución de video en tiempo real distribuido, la tarea de la gestión de recursos adaptativos es controlar la utilización de los diferentes recursos, cuyas utilizaciones se describen mediante variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua y cambiando la tasa de trama y la compresión, que están modeladas por acciones discretas. Hemos implementado HYARM sobre el orbe ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12]. Nuestros resultados muestran que (1) HYARM garantiza la utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de QoS de extremo a extremo de aplicaciones de mayor prioridad, incluso frente a las fluctuaciones en la carga de trabajo. El resto del documento se organiza de la siguiente manera: la Sección 2 describe la arquitectura, la funcionalidad y el modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE;La Sección 3 explica la estructura y la funcionalidad de HYARM;La Sección 4 evalúa el comportamiento adaptativo de HYARM a través de experimentos en el estudio de caso de nuestro sistema multimedia;La Sección 5 compara nuestra investigación sobre HYARM con el trabajo relacionado;y la Sección 6 presenta comentarios finales.1 El código y los ejemplos para HYARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/hyarm/. Artículo 7 2. Estudio de caso: Sistema Multimedia DRE Esta sección describe los requisitos de arquitectura y QoS de nuestro sistema multimedia DRE.2.1 Multimedia Sistema Arquitectura Enlace inalámbrico Enlace inalámbrico Enlace inalámbrico Enlace `` `Enlace físico Enlace físico Enlace físico Estación base Recibidor de receptores Fin del receptor Fin de enlace físico RECEPTOR FINAL RECEPTOR UAV Cámara Video Camera Video Camera Camera Video Camera Cámara Video Video Video Video Camera Camera de codificaciónVideo codificador UAV Cámara Video Camera Camera Camera Video Camera Codificador de video Figura 1: Arquitectura del sistema multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) fuente de datos (captura de video por UAV),Donde se captura el video (relacionado con el tema de interés) por la (s) cámara (s) en cada UAV, seguido de la codificación de video sin procesar utilizando un esquema de codificación específico y transmitir el video a la siguiente etapa en la tubería.(2) Distribuidor de datos (estación base), donde el video se procesa para eliminar el ruido, seguido de la retransmisión del video procesado a la siguiente etapa de la tubería.(3) sumideros (centro de comando y control), donde el video recibido se procesa nuevamente para eliminar el ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han realizado mejoras significativas en la codificación/decodificación de video y (DE) técnicas de compresión como resultado de avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Video Real y MPEG-4. Cada esquema de compresión se caracteriza por su requisito de recursos, por ejemplo, la potencia computacional para (DE) comprimir la señal de video y el ancho de banda de red requerido para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la tasa de cuadros, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de QoS en tiempo real de extremo: (1) latencia, (2) retraso entre marco (también conoce como jitter), (3) velocidad de cuadro y (4) resolución de imágenes. Estos requisitos de QoS pueden clasificarse como duros o suaves. El sistema subyacente debe cumplir con los requisitos de QoS en todo momento, mientras que los requisitos de QoS blandos se pueden perder ocasionalmente.2 Para nuestro estudio de caso, tratamos los requisitos de QoS, como la latencia y la fluctuación de la fluctuación, como requisitos de QoS más difíciles y nos esforzamos por cumplir con estos requisitos en absolutoveces. Por el contrario, tratamos los requisitos de QoS, como la velocidad de cuadro de video y la resolución de la imagen, ya que los requisitos de QoS más suaves y modificamos estas propiedades de video de forma adaptativa para manejar cambios dinámicos en los recursos disponibles.Dos extremos de un continuo que van desde más suaves hasta más duros en lugar de dos puntos disjuntos.ity efectivamente.2.2 Rresources del sistema multimedia DRE Hay dos tipos principales de recursos en nuestro sistema multimedia DRE: (1) procesadores que proporcionan energía computacional disponible en los UAV, estaciones base y receptores finales y (2) enlaces de red que proporcionan ancho de banda de comunicación entre UAV,estaciones base y receptores finales. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre UAV y el sujeto. El ancho de banda de la red inalámbrica disponible para transmitir videos capturados por UAV a estaciones base también depende de la conectividad inalámbrica entre los UAV y la estación base, que a su vez dependen de factores dinámicos como la velocidad de los UAV y la distancia relativa entre los UAV yestaciones base. El ancho de banda del enlace entre la estación base y el receptor final es limitado, pero más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones: QoS -habilitado y mejor esfuerzo, usan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. La clase de aplicaciones habilitadas por QoS tiene mayor prioridad sobre la clase de aplicación de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta a emergencias pertenecen a las aplicaciones de QoS y la vigilancia que pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que una transmisión de una aplicación de respuesta de emergencia es de mayor importancia que una transmisión de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente el QOS, utilizamos la utilización actual de los recursos como el indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Según esta definición, podemos clasificar las condiciones del sistema como una utilizada o utilizada de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es menor que el límite inferior deseado en la utilización de recursos. En esta condición del sistema, los recursos residuales del sistema (es decir, ancho de banda de red y energía computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de QoS de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar el QoS de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de la red se pueden usar para ofrecer un video de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de fotogramas) para finalizar los receptores. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es más alta que el límite superior deseado en la utilización de recursos. Esta condición puede surgir de la pérdida de recursos (ancho de banda de red y/o potencia informática en la estación base, receptor final o en UAV, o puede deberse a un aumento en las demandas de recursos por parte de las aplicaciones. La sobre-utilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de la puntualidad (como la latencia y la fluctuación de jitter) se degradan y pueden dar como resultado un sistema inestable (y, por lo tanto, ineficaz). La utilización efectiva de los recursos es la condición del sistema deseada, ya que garantiza que los requisitos de QoS de extremo a extremo del sistema multimedia basado en UAV se cumplan y la utilización de ambos recursos del sistema, es decir, ancho de banda de red y potencia computacional, se encuentran dentro de sus límites de utilización deseados. El Artículo 7, la Sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso frente a la disponibilidad y/o demanda de recursos fluctuantes.3. Descripción general de HYARM Esta sección describe la arquitectura del middleware híbrido de gestión de recursos adaptativos (HYARM). HYARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar una gestión de recursos adaptativos, incluido el monitoreo de los recursos del sistema y la aplicación de los límites en la utilización de recursos de la aplicación.3.1 Estructura y funcionalidad de HYARM Utilización de recursos Legend Asignación de recursos Parámetros de aplicación Figura 2: La arquitectura de HYARM HYARM está compuesta por tres tipos de entidades que se muestran en la Figura 2 y se describen a continuación: Monitores de recursos Observe la utilización general de recursos para cada tipo de recursos y utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de red. Los monitores de la CPU observan la utilización de recursos de la CPU de UAV, estación base y receptores finales. Monitores de ancho de banda de red Observa la utilización de recursos de red de (1) enlace de red inalámbrico entre UAV y la estación base y (2) enlace de red con cable entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema debajo de un límite deseado por (1) procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de aplicaciones en consecuencia, por ejemplo, mediante el uso de diferentes algoritmos de ejecución u operación de la aplicación con mayor/disminución.Qos. Este proceso de adaptación garantiza que los recursos del sistema se utilizan de manera eficiente y se cumplan los requisitos de QoS de aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HYARM determina el valor de los parámetros de aplicación, como (1) esquemas de compresión de video, como el video real y MPEG-4, y/o (2) velocidad de fotogramas, y (3) resolución de imágenes. Desde la perspectiva de las técnicas teóricas de control híbrido [8], los diferentes esquemas de compresión de video y la velocidad de cuadro forman las variables discretas de ejecución de aplicaciones y resolución de imágenes forman las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y asegura que la operación de la aplicación esté de acuerdo con los parámetros recomendados. En la Mplementación actual de HYARM, el adaptador de aplicación modifica los parámetros de entrada a la aplicación que afectan la aplicación QoS y la utilización de recursos: esquema de compresión, velocidad de fotogramas y resolución de imágenes. En nuestras implementaciones futuras, planeamos utilizar mecanismos de reserva de recursos, como el servicio diferenciado [7, 3] y la gestión de recursos del núcleo basada en clases [4] para provisiones/reservas de redes y recursos de CPU. En nuestro sistema multimedia, el adaptador de aplicación garantiza que el video esté codificado a la velocidad de cuadro y resolución recomendadas utilizando el esquema de compresión especificado.3.2 Aplicación de HYARM al estudio de caso del sistema multimedia HYARM se construye sobre Tao [13], una implementación de código abierto ampliamente utilizada de Corba en tiempo real [12]. Se puede aplicar HYARM para garantizar la gestión eficiente, predecible y adaptable de recursos de cualquier sistema DRE donde la disponibilidad y los requisitos de los recursos estén sujetos a un cambio dinámico. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con el servicio de transmisión HYARM, TAO y TAOS A/V. El servicio de transmisión Taos A/V es una implementación de la especificación del servicio de transmisión Corba A/V. El servicio de transmisión Taos A/V es un servicio de distribución de video habilitado para QoS que puede transferir videos en tiempo real a uno o más receptores. Utilizamos el servicio de transmisión A/V para transmitir el video de los UAV a los receptores finales a través de la estación base. Tres entidades del receptor UAV TAO Utilización de recursos Hyarm Central Controlador A/V Servicio de transmisión: remitente MPEG1 MPEG4 Real Video HyarM Monitor de recursos A/V Servicio de transmisión: Receptor Video comprimido Aplicación de video Aplicación Hyarm Adaptador Remote Objeto remoto Control de llamadas Control de recursos Utilización de recursos de recursos/Entradas de control Entradas de control Legend Figura 3: Desarrollo del sistema multimedia DRE con HYARM HYARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones se construyen como sirvientes de Corba, para que puedan distribuirse en todo un sistema DRE. Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente el controlador central con la utilización actual de recursos. Los adaptadores de aplicación se colocan con aplicaciones ya que los dos interactúan de cerca. Como se muestra en la Figura 3, UAVS comprime los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y video real, y utiliza el servicio de transmisión Taos A/V para transmitir el video a los receptores finales. Los monitores de recursos de HYARMS observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual.3 La interacción entre el controlador y los monitores de recursos utiliza el patrón del observador [5]. Cuando el controlador recibe actualizaciones de utilización de recursos de monitores, calcula las modificaciones necesarias a los parámetros de aplicaciones y notifica a los adaptadores (s) de la aplicación a través de una llamada de operación remota. Los adaptadores (s) de la aplicación, que se colocan con la aplicación, modifican los parámetros de entrada a la aplicación, en nuestro codificador de video de caso, para modificar la utilización de recursos de la aplicación y QoS.3 La estación base no está incluida en la figura, ya que solo retransmite el video recibido de UAV para finalizar los receptores. Artículo 7 4. Resultados y análisis de rendimiento Esta sección describe por primera vez el testbito que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HYARM. Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo Hyarm se comporta durante la uso de los recursos del sistema.4.1 Descripción general del hardware y la prueba de software. Nuestros experimentos se realizaron en el Bed de la Prueba de Emulab en la Universidad de Utah. La configuración de hardware consta de dos nodos que actúan como UAV, uno que actúa como estación base y otro como receptor final. El video de los dos UAV se transmitió a una estación base a través de una LAN configurada con las siguientes propiedades: relación promedio de pérdida de paquetes de 0.3 y ancho de banda 1 Mbps. El ancho de banda de la red se eligió para ser 1 Mbps ya que cada UAV en el sistema multimedia DRE se asigna 250 kbps. Estos parámetros se eligieron para emular una red inalámbrica poco confiable con un ancho de banda limitado entre los UAV y la estación base. Desde la estación base, el video se retransmitió al receptor final a través de un enlace de cable confiable de un ancho de banda de 10 Mbps sin pérdida de paquetes. La configuración de hardware de todos los nodos se eligió de la siguiente manera: procesador Intel Pentium III de 600 MHz, memoria física de 256 MB, 4 puertos Ethernet de 10/100 Mbps de 10/100 y 13 GB de disco duro. Una versión en tiempo real de Linux - Timesys Linux/Net 3.1.214 basada en Redhat Linux 9 se usa como sistema operativo para todos los nodos. Los siguientes paquetes de software también se utilizaron para nuestros experimentos: (1) FFMPEG 0.4.9-PRE1, que es una biblioteca de código abierto (http: //www.ffmpeg.sourceforce.net/download.php) que comprime el video en MPEG-2, MPEG-4, video real y muchos otros formatos de video.(2) IFTOP 0.16, que es una biblioteca OpenSource (http://www.ex-parrot.com/∼pdw/iftop/) utilizamos para monitorear la actividad de la red y la utilización de ancho de banda.(3) ACE 5.4.3 + Tao 1.4.3, que es una implementación de OpenSource (http://www.dre.vanderbilt.edu/tao) de la especificación Corba [12] en tiempo real sobre la cual se construye HYARM. Tao proporciona el servicio de transmisión Corba Audio/Video (A/V) que usamos para transmitir el video desde los UAV para finalizar los receptores a través de la estación base.4.2 Configuración del experimento Nuestro experimento consistió en dos UAV (emulados) que envían simultáneamente el video a la estación base utilizando la configuración de experimentación descrita en la Sección 4.1. En la estación base, el video se retransmitió a los receptores finales (sin ninguna modificación), donde se almacenó en un archivo. Cada UAV alojó dos aplicaciones, una aplicación habilitada por QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia). Dentro de cada UAV, la potencia computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones. Para evaluar el QoS proporcionado por HYARM, monitoreamos la utilización de la CPU en los dos UAV, y la utilización de ancho de banda de red entre el UAV y la estación base. La utilización de los recursos de la CPU no fue monitoreada en la estación base y el receptor final, ya que no realizaron operaciones computacionales intensivas. La utilización de recursos del vínculo físico de 10 mpbs entre la estación base y el receptor final no afecta a QoS de aplicaciones y no es monitoreado por HYARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base. El experimento también monitorea las propiedades del video que afectan la QoS de las aplicaciones, como la latencia, la fluctuación de marco, la velocidad de cuadros y la resolución. El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior generalmente recomendado por técnicas de programación, como el algoritmo monotónico de velocidad [9]. Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos más de 200 ms, usamos esto como el límite superior en la fluctuación del video recibido. Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados y análisis empíricos Esta sección presenta los resultados obtenidos de ejecutar el experimento descrito en la Sección 4.2 en nuestro Bed de prueba del sistema multimedia DRE. Utilizamos la utilización de recursos del sistema como una métrica para evaluar las capacidades de gestión de recursos adaptativos de HYARM bajo variables cargas de trabajo de entrada. También utilizamos QoS de aplicación como una métrica para evaluar las capacidades de HYARM para admitir los requisitos de QoS de extremo a extremo de las diversas clases de aplicaciones en el sistema Multimedia DRE. Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y los QoS de la aplicación. La comparación del rendimiento del sistema se descompone en comparación de la utilización de recursos y los QoS de aplicación. Para la utilización de recursos del sistema, comparamos (1) la utilización de ancho de banda de red de la red de área local y (2) utilización de la CPU en los dos nodos UAV. Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imágenes, (2) velocidad de fotogramas, (3) latencia y (4) jitter. Comparación de la utilización de recursos. La sobreutilización de los recursos del sistema en los sistemas DRE puede producir un sistema inestable. En contraste, la subutilización de los recursos del sistema aumenta el costo del sistema. La Figura 4 y la Figura 5 comparan la utilización del recurso del sistema con y sin HYARM. La Figura 4 muestra que HYARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir videos de QoS más altos (o más bajos) para la clase de aplicaciones habilitadas (o de mejor esfuerzo) durante (o debajo).Utilización de recursos del sistema. La Figura 5 muestra que sin HYARM, la utilización de la red fue tan alta como 0.9 durante el aumento en las condiciones de la carga de trabajo, que es mayor que el punto de uso del conjunto de utilización de 0.7 por 0.2. Como resultado de la sobreutilización de los recursos, los QoS del video recibido, como la latencia promedio y la fluctuación de fluctuación, se vio afectado significativamente. Sin HYARM, los recursos del sistema estaban subutilizados o se utilizan demasiado, los cuales son indeseables. Por el contrario, con HYARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación. Durante la fluctuación repentina en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo. La sobreutilización temporal de los recursos está permitida en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la aplicación QoS se degradará significativamente si el video de baja calidad se transmite por un período de tiempo más largo. Comparación de la aplicación Qos. Las Figuras 6, la Figura 7 y la Tabla 2 comparan la latencia, la fluctuación de fluctuación, resolución y Frameartle 7 de la clase de resolución de resolución de la velocidad de marco (MSEC) Jitter (MSEC) QoS habilitado 1024 x 768 25 200 MEJOR EFECT 320 X 240 15 300 250 Tabla 1: Requisitos de QoS de aplicación Figura 4: Utilización de recursos con HYARM Figura 5: Utilización de recursos sin la tasa de HYARM del video recibido, respectivamente. La Tabla 2 muestra que HYARM aumenta la resolución y el video de cuadro de aplicaciones Qosenleed, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo. Durante la utilización excesiva de los recursos del sistema, la resolución y la velocidad de cuadros de aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de recursos en el punto de conjunto especificado. Se puede ver en la Figura 6 y la Figura 7 que HYARM reduce significativamente la latencia y la fluctuación del video recibido. Estas cifras muestran que el QoS de las aplicaciones habilitadas para QoS está mejorando enormemente por HYARM. Aunque los parámetros de aplicación, como la velocidad de fotogramas y las resoluciones, que afectan los requisitos de QoS blandos de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS duros, como la latencia y la fluctuación de todas las aplicaciones. HYARM responde a la fluctuación en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos. Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HYARM reduce la utilización al reducir el QoS de las aplicaciones de mejor esfuerzo. Esta adaptación garantiza que hay suficientes recursos disponibles para aplicaciones habilitadas para QoS para satisfacer sus necesidades de QoS. Las Figuras 6 y 7 muestran que los valores de latencia y fluctuación del video recibido del sistema con HYARM son casi la mitad del valor correspondiente del sistema sin HYARM. Con HYARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HYARM, estos valores están significativamente por encima de los límites especificados debido a la excesión excesiva del ancho de banda de la red, que conduce a la congestión de la red y da como resultado la pérdida de paquetes. Hyarm evita esto al reducir los parámetros de video, como la resolución, la tasa de cuadros y/o modificar el esquema de compresión utilizado para comprimir el video. Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través del control híbrido al sistema DRE ayuda a (1) mejorar los QoS de la aplicación, (2) aumentar la utilización de los recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia e entreframeretraso) a las aplicaciones Qosenable. Estas mejoras se logran en gran medida debido al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y el aprovisionamiento de recursos adaptativos mediante monitores de recursos de red/CPU de HYARMS, adaptador de aplicación y controlador central, respectivamente.5. Trabajo relacionado Varios enfoques teóricos de control se han aplicado recientemente a los sistemas DRE. Estas técnicas ayudan a superar las limitaciones con los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y dan como resultado un sistema rígidamente programado que se adapta mal al cambio. Una encuesta de estas técnicas se presenta en [1]. Uno de estos enfoques es la programación de control de retroalimentación (FCS) [2, 11]. Los algoritmos FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software. Los algoritmos FCS se modelan y diseñan utilizando rigurosas metodologías teóricas de control. Estos algoritmos proporcionan garantías de rendimiento robustas y analíticas a pesar de las incertidumbres en la disponibilidad y/o la demanda de recursos. Aunque los algoritmos FCS existentes han demostrado ser prometedores, estos algoritmos a menudo suponen que el sistema tiene variables de control continuas que pueden ajustarse continuamente. Si bien esta suposición es válida para ciertas clases de sistemas, hay muchas clases de sistemas DRE, como la aviónica y los entornos de computación total que solo admiten un conjunto finito a priori de configuraciones discretas. Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas. HYARM maneja ambas variables de control continuo, como la resolución de la imagen y la variable de control discreto, como el conjunto discreto de las tasas de cuadros. Por lo tanto, HYARM se puede aplicar al sistema que admite un conjunto continuo y/o discreto de variables de control. El sistema multimedia DRE como se describe en la Sección 2 es un sistema DRE de ejemplo que ofrece tanto continuo (resolución de imágenes) como de conjunto discreto (tasa de trama) de las variables de control. HYARM modifica estas variables para lograr una utilización eficiente de recursos y una mejor calidad de QoS.6. Observaciones finales Artículo 7 Figura 6: Comparación de la latencia de video Figura 7: Comparación del tamaño de la imagen de la fuente de fluctuación de video / velocidad de cuadro con HYARM sin HYARM UAV1 QoS Aplicación habilitada 1122 x 1496 /25 960 x 720 /20 UAV1 Aplicación de mejor esfuerzo 288 x 384/ 15 640 x 480 /20 UAV2 QoS Aplicación habilitada 1126 x 1496/25 960 x 720 /20 UAV2 Aplicación de mejor esfuerzo 288 x 384 /15 640 x 480 /20 Tabla 2: Calidad de video Muchos en tiempo real distribuido e incrustado(DRE) Los sistemas exigen la aplicación de la calidad de servicio de extremo a extremo (QoS) de sus plataformas subyacentes para operar correctamente. Estos sistemas se ejecutan cada vez más en entornos abiertos, donde la disponibilidad de recursos está sujeto a un cambio dinámico. Para cumplir con QoS de extremo a extremo en entornos dinámicos, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión de carga de trabajo de aplicación eficiente y permite un aprovisionamiento eficiente de recursos para la ejecución de aplicaciones. Este documento describió a HYARM, un middleware adaptativo, que proporciona una gestión efectiva de recursos a los sistemas DRE. HYARM emplea técnicas de control híbridas para proporcionar las capacidades adaptativas de middleware, como el monitoreo de recursos y la adaptación de la aplicación que son clave para proporcionar las capacidades dinámicas de gestión de recursos para los sistemas Open DRE. Empleamos a HYARM para un sistema Multimedia DRE representativo que se implementa utilizando el servicio de transmisión Corba y Corba A/V Corba A/V. Evaluamos el rendimiento de HYARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una. Nuestros resultados empíricos indican que HYARM garantiza (1) la utilización eficiente de los recursos al mantener la utilización de recursos de los recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de QoS de las aplicaciones habilitadas para QoS se cumplen en todo momento. En general, HYARM garantiza la gestión de recursos eficiente, predecible y adaptativo para los sistemas DRE.7. Referencias [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang e Y. Lu. Comentarios Control de rendimiento en servicios de software. IEEE: Control Systems, 23 (3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole. Análisis de un programador de comentarios basado en la reserva. En IEEE Real Time Systems Symposium, diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss. Una arquitectura para servicios diferenciados. Centro de información de red RFC 2475, diciembre de 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap. Habilitando la gestión de la carga de trabajo autónoma en Linux. En Actas de la Conferencia Internacional sobre Computación Autonómica (ICAC), Nueva York, Nueva York, mayo de 2004. IEEE.[5] E. Gamma, R. Helm, R. Johnson y J. Vlissides. Patrones de diseño: elementos de software reutilizable orientado a objetos. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas. El impacto de QoS en la percepción del usuario y la comprensión de los videos multimedia. En Multimedia 98: Actas de la Sexta Conferencia Internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998. ACM Press.[7] Grupo de trabajo de ingeniería de Internet. Carta del Grupo de Trabajo de Servicios Diferenciados (DiffServ).www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu. Control de supervisión híbrida de sistemas en tiempo real. En el 11º Simposio de tecnología y aplicaciones en tiempo real y en tiempo real de IEEE, San Francisco, California, marzo de 2005. [9] J. Lehoczky, L. Sha e Y. Ding. La tasa de algoritmo de programación monotónica: caracterización exacta y comportamiento promedio de casos. En Actas del 10º Simposio de Sistemas de Tiempo Real IEEE (RTSS 1989), páginas 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr. Comparación y contraste de soporte de middleware adaptativo en aplicaciones de objetos distribuidos integrados y de área amplia. En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación distribuida (ICDCS-21), páginas 625-634. IEEE, abril de 2001. [11] C. Lu, J. A. Stankovic, G. Tao y S. H. Son. Control de retroalimentación Programación en tiempo real: marco, modelado y algoritmos. Real Time Systems Journal, 23 (1/2): 85-126, julio de 2002. [12] Grupo de gestión de objetos. Especificación de Corba en tiempo real, Documento OMG Formal/02-08-02 Edición, agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee. El diseño y el rendimiento de los corredores de solicitud de objetos en tiempo real. Computer Communications, 21 (4): 294-324, abril de 1998. [14] Thomas Sikora. Tendencias y perspectivas en la codificación de imágenes y videos. En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M.Huang, V. Subramonian, C. Lu y C. Gill. Camrit: middleware adaptativo basado en control para la transmisión de imágenes en tiempo real. En Proc.de la décima tecnología IEEE en tiempo real y integrada.y aplicaciones Symp.(RTA), Toronto, Canadá, mayo de 2004. Artículo 7",
    "original_sentences": [
        "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
        "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
        "This paper presents two contributions to research in adaptive resource management for DRE systems.",
        "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
        "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
        "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
        "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
        "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
        "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
        "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
        "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
        "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
        "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
        "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
        "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
        "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
        "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
        "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
        "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
        "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
        "Article 7 2.",
        "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
        "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
        "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
        "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
        "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
        "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
        "These QoS requirements can be classified as being either hard or soft.",
        "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
        "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
        "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
        "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
        "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
        "Resource requirements and availability of resources are subjected to dynamic changes.",
        "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
        "QoS-enabled class of applications have higher priority over best-effort class of application.",
        "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
        "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
        "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
        "We refer to the current level of system resource utilization as the system condition.",
        "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
        "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
        "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
        "These residual resources can be used to increase the QoS of the applications.",
        "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
        "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
        "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
        "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
        "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
        "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
        "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
        "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
        "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
        "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
        "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
        "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
        "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
        "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
        "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
        "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
        "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
        "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
        "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
        "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
        "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
        "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
        "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
        "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
        "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
        "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
        "Application adapters are collocated with applications since the two interact closely.",
        "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
        "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
        "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
        "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
        "Article 7 4.",
        "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
        "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
        "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
        "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
        "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
        "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
        "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
        "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
        "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
        "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
        "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
        "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
        "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
        "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
        "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
        "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
        "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
        "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
        "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
        "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
        "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
        "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
        "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
        "We analyze these results to explain the significant differences in system performance and application QoS.",
        "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
        "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
        "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
        "Comparison of resource utilization.",
        "Over-utilization of system resources in DRE systems can yield an unstable system.",
        "In contrast, under-utilization of system resources increases system cost.",
        "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
        "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
        "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
        "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
        "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
        "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
        "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
        "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
        "Comparison of application QoS.",
        "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
        "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
        "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
        "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
        "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
        "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
        "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
        "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
        "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
        "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
        "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
        "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
        "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
        "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
        "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
        "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
        "A survey of these techniques is presented in [1].",
        "One such approach is feedback control scheduling (FCS) [2, 11].",
        "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
        "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
        "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
        "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
        "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
        "The control variables in such systems are therefore intrinsically discrete.",
        "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
        "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
        "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
        "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
        "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
        "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
        "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
        "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
        "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
        "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
        "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
        "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
        "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
        "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
        "Feddback Performance Control in Software Services.",
        "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
        "Analysis of a reservation-based feedback scheduler.",
        "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
        "An architecture for differentiated services.",
        "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
        "Enabling Autonomic Workload Management in Linux.",
        "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
        "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
        "Design Patterns: Elements of Reusable Object-Oriented Software.",
        "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
        "Qos impact on user perception and understanding of multimedia video clips.",
        "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
        "ACM Press. [7] Internet Engineering Task Force.",
        "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
        "Hybrid Supervisory Control of Real-Time Systems.",
        "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
        "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
        "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
        "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
        "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
        "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
        "IEEE, Apr. 2001. [11] C. Lu, J.",
        "A. Stankovic, G. Tao, and S. H. Son.",
        "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
        "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
        "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
        "The Design and Performance of Real-Time Object Request Brokers.",
        "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
        "Trends and Perspectives in Image and Video Coding.",
        "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
        "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
        "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
        "Article 7"
    ],
    "error_count": 0,
    "keys": {
        "adaptive resource management": {
            "translated_key": "gestión adaptativa de recursos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating <br>adaptive resource management</br> for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective <br>adaptive resource management</br> strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in <br>adaptive resource management</br> for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides <br>adaptive resource management</br> using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of <br>adaptive resource management</br> is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing <br>adaptive resource management</br>, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and <br>adaptive resource management</br> of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the <br>adaptive resource management</br> capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and <br>adaptive resource management</br> for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Evaluación de la \"gestión de recursos adaptativos\" para sistemas distribuidos distribuidos en tiempo real Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C.",
                "de las CEE, la Universidad de Vanderbilt, el resumen de Nashville, un problema desafiante que enfrentan los investigadores y desarrolladores de sistemas distribuidos en tiempo real y integrados (DRE) está ideando e implementando estrategias efectivas de \"gestión de recursos adaptables\" que pueden cumplir con la calidad del servicio de extremo a extremo (QoS) Requisitos en diferentes condiciones operativas.",
                "Este artículo presenta dos contribuciones a la investigación en \"Gestión de recursos adaptativos\" para los sistemas DRE.",
                "Primero, describimos la estructura y la funcionalidad del híbrido middleware de gestión de recursos adaptativa (HYARM), que proporciona \"gestión de recursos adaptativos\" utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de la carga de trabajo y la disponibilidad de recursos.",
                "En nuestro estudio de caso, que involucra un sistema de distribución de video distribuido en tiempo real, la tarea de \"gestión de recursos adaptativos\" es controlar la utilización de los diferentes recursos, cuyas utilizaciones se describen mediante variables continuas.",
                "HYARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar \"gestión de recursos adaptativos\", incluido el monitoreo de los recursos del sistema y la aplicación de los límites en la utilización de recursos de la aplicación.3.1 Estructura y funcionalidad de HYARM Utilización de recursos Legend Asignación de recursos Parámetros de aplicación Figura 2: La arquitectura de HYARM HYARM está compuesta por tres tipos de entidades que se muestran en la Figura 2 y se describen a continuación: Monitores de recursos Observe la utilización general de recursos para cada tipo de recursos y utilización de recursos por aplicación.",
                "Se puede aplicar HYARM para garantizar la gestión eficiente, predecible y de recursos adaptativos \"de cualquier sistema DRE donde la disponibilidad y los requisitos de los recursos estén sujetos a un cambio dinámico.",
                "Utilizamos la utilización de recursos del sistema como una métrica para evaluar las capacidades de \"gestión de recursos adaptativos\" de HYARM bajo cargas de trabajo de entrada variables.",
                "En general, HYARM garantiza la gestión eficiente, predecible y de \"recursos adaptativos\" para los sistemas DRE.7."
            ],
            "translated_text": "",
            "candidates": [
                "Schmidt y Aniruddha Gokhale Gestión de recursos adaptativos",
                "gestión de recursos adaptativos",
                "gestión de recursos adaptativos",
                "gestión de recursos adaptables",
                "gestión de recursos adaptativos",
                "Gestión de recursos adaptativos",
                "gestión de recursos adaptativos",
                "gestión de recursos adaptativos",
                "gestión de recursos adaptativos",
                "gestión de recursos adaptativos",
                "gestión de recursos adaptativos",
                "gestión de recursos adaptativos",
                "gestión de recursos adaptativos",
                "gestión de recursos adaptativos",
                "gestión de recursos adaptativos",
                "Gestión de recursos adaptativos",
                "recursos adaptativos"
            ],
            "error": []
        },
        "distributed real-time embedded system": {
            "translated_key": "Sistema integrado en tiempo real distribuido",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "end-to-end quality of service": {
            "translated_key": "Calidad de servicio de extremo a extremo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet <br>end-to-end quality of service</br> (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand <br>end-to-end quality of service</br> (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "de las CEE, la Universidad de Vanderbilt, Nashville Resumen Un problema desafiante que enfrentan los investigadores y desarrolladores de sistemas distribuidos en tiempo real y integrados (DRE) está ideando e implementando estrategias efectivas de gestión de recursos adaptativos que pueden cumplir con la \"calidad del servicio de extremo a extremo\" (QoS) Requisitos en diferentes condiciones operativas.",
                "Observaciones finales Artículo 7 Figura 6: Comparación de la latencia de video Figura 7: Comparación del tamaño de la imagen de la fuente de fluctuación de video / velocidad de cuadro con HYARM sin HYARM UAV1 QoS Aplicación habilitada 1122 x 1496 /25 960 x 720 /20 UAV1 Aplicación de mejor esfuerzo 288 x 384/ 15 640 x 480 /20 UAV2 QoS Aplicación habilitada 1126 x 1496/25 960 x 720 /20 UAV2 Aplicación de mejor esfuerzo 288 x 384 /15 640 x 480 /20 Tabla 2: Calidad de video Muchos en tiempo real distribuido e incrustadoLos sistemas (DRE) exigen la aplicación de \"calidad de servicio de extremo a extremo\" (QoS) de sus plataformas subyacentes para operar correctamente."
            ],
            "translated_text": "",
            "candidates": [
                "Calidad de servicio de extremo a extremo",
                "calidad del servicio de extremo a extremo",
                "Calidad de servicio de extremo a extremo",
                "calidad de servicio de extremo a extremo"
            ],
            "error": []
        },
        "service end-to-end quality": {
            "translated_key": "Servicio de calidad de extremo a extremo",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "hybrid adaptive resourcemanagement middleware": {
            "translated_key": "middleware híbrido de gestión de recursos adaptativo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the <br>hybrid adaptive resourcemanagement middleware</br> (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Primero, describimos la estructura y la funcionalidad del \"middleware híbrido adaptativo de recursos de recursos\" (HYARM), que proporciona administración de recursos adaptativos utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y la disponibilidad de recursos."
            ],
            "translated_text": "",
            "candidates": [
                "middleware híbrido adaptativo de recursos adaptativos",
                "middleware híbrido adaptativo de recursos de recursos"
            ],
            "error": []
        },
        "hybrid control technique": {
            "translated_key": "técnica de control híbrido",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using <br>hybrid control technique</br>s for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs <br>hybrid control technique</br>s to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Primero, describimos la estructura y la funcionalidad del middleware híbrido adaptativo de recursos de recursos (HYARM), que proporciona gestión de recursos adaptativos utilizando \"técnicas de control híbrido\" para adaptarse a las fluctuaciones de la carga de trabajo y la disponibilidad de recursos.",
                "HYARM emplea \"técnicas de control híbrido\" para proporcionar las capacidades adaptativas de middleware, como el monitoreo de recursos y la adaptación de aplicaciones que son clave para proporcionar las capacidades dinámicas de gestión de recursos para los sistemas Open DRE."
            ],
            "translated_text": "",
            "candidates": [
                "técnica de control híbrido",
                "técnicas de control híbrido",
                "técnica de control híbrido",
                "técnicas de control híbrido"
            ],
            "error": []
        },
        "real-time video distribution system": {
            "translated_key": "Sistema de distribución de video en tiempo real",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed <br>real-time video distribution system</br>, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "En nuestro estudio de caso, que implica un \"sistema de distribución de video en tiempo real\" distribuido, la tarea de la gestión de recursos adaptativos es controlar la utilización de los diferentes recursos, cuyas utilizaciones se describen mediante variables continuas."
            ],
            "translated_text": "",
            "candidates": [
                "Sistema de distribución de video en tiempo real",
                "sistema de distribución de video en tiempo real"
            ],
            "error": []
        },
        "real-time corba specification": {
            "translated_key": "Especificación de Corba en tiempo real",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the <br>real-time corba specification</br> [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "<br>real-time corba specification</br>, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Hemos implementado HYARM sobre el orbe ACE (TAO) [13], que es una implementación de la \"especificación de CORBA en tiempo real\" [12].",
                "\"Especificación de Corba en tiempo real\", Documento OMG Formal/02-08-02 Edición, agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee."
            ],
            "translated_text": "",
            "candidates": [
                "Especificación de Corba en tiempo real",
                "especificación de CORBA en tiempo real",
                "Especificación de Corba en tiempo real",
                "Especificación de Corba en tiempo real"
            ],
            "error": []
        },
        "video encoding/decoding": {
            "translated_key": "codificación/decodificación de video",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in <br>video encoding/decoding</br> and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Se han realizado mejoras significativas en las técnicas de compresión de \"codificación/decodificación de video\" y (DE) como resultado de avances recientes en las técnicas de codificación y compresión de video [14]."
            ],
            "translated_text": "",
            "candidates": [
                "codificación/decodificación de video",
                "codificación/decodificación de video"
            ],
            "error": []
        },
        "resource reservation mechanism": {
            "translated_key": "mecanismo de reserva de recursos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use <br>resource reservation mechanism</br>s such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "En nuestras implementaciones futuras, planeamos utilizar el \"mecanismo de reserva de recursos\", como el servicio diferenciado [7, 3] y la gestión de recursos del núcleo basada en clases [4] para provisiones/reservas de redes de redes y CPU."
            ],
            "translated_text": "",
            "candidates": [
                "mecanismo de reserva de recursos",
                "mecanismo de reserva de recursos"
            ],
            "error": []
        },
        "dynamic environment": {
            "translated_key": "entorno dinámico",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in <br>dynamic environment</br>s, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Para cumplir con QoS de extremo a extremo en el \"entorno dinámico\", los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de aplicaciones y permite un aprovisionamiento eficiente de recursos para la ejecución de aplicaciones."
            ],
            "translated_text": "",
            "candidates": [
                "entorno dinámico",
                "entorno dinámico"
            ],
            "error": []
        },
        "streaming service": {
            "translated_key": "servicio de transmisión",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V <br>streaming service</br>.",
                "TAOs A/V <br>streaming service</br> is an implementation of the CORBA A/V <br>streaming service</br> specification.",
                "TAOs A/V <br>streaming service</br> is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V <br>streaming service</br> to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V <br>streaming service</br> : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V <br>streaming service</br> : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V <br>streaming service</br> to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) <br>streaming service</br> that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V <br>streaming service</br>.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con \"servicio de transmisión\" de HYARM, TAO y TAOS A/V.",
                "El \"servicio de transmisión\" de Taos A/V es una implementación de la especificación de \"Servicio de transmisión\" de Corba A/V.",
                "El \"servicio de transmisión\" de Taos A/V es un servicio de distribución de video habilitado para QoS que puede transferir videos en tiempo real a uno o más receptores.",
                "Utilizamos el \"Servicio de transmisión\" de A/V para transmitir el video desde los UAV hasta los receptores finales a través de la estación base.",
                "Tres entidades del receptor UAV TAO Utilización de recursos HYARM Controlador central A/V \"Servicio de transmisión\": remitente MPEG1 MPEG4 VIDEO REAL HYARM Monitor de recursos de recursos A/V \"Servicio de transmisión\": Video comprimido de receptor Aplicación de video comprimido Hyarm Adaptador de control de objetos remotos Control de llamadas Recursos RecursosUtilización Utilización de recursos / entradas de control Entradas de control Legenda Figura 3: Desarrollo del sistema multimedia DRE con HYARM HYARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones se construyen como servidores Corba, para que puedan distribuirse en todo un sistema DRE.",
                "Como se muestra en la Figura 3, UAVS comprime los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y Video Real, y utiliza el \"Servicio de transmisión\" de TAOS A/V para transmitir el video a los receptores finales.",
                "Tao proporciona el \"servicio de transmisión\" de Audio/Video (A/V) de Corba que usamos para transmitir el video desde los UAV para finalizar los receptores a través de la estación base.4.2 Configuración del experimento Nuestro experimento consistió en dos UAV (emulados) que envían simultáneamente el video a la estación base utilizando la configuración de experimentación descrita en la Sección 4.1.",
                "Empleamos a HYARM para un sistema Multimedia DRE representativo que se implementa utilizando el \"servicio de transmisión\" de Corba y Corba A/V de Corba."
            ],
            "translated_text": "",
            "candidates": [
                "servicio de transmisión",
                "servicio de transmisión",
                "servicio de transmisión",
                "servicio de transmisión",
                "Servicio de transmisión",
                "servicio de transmisión",
                "servicio de transmisión",
                "servicio de transmisión",
                "Servicio de transmisión",
                "servicio de transmisión",
                "Servicio de transmisión",
                "Servicio de transmisión",
                "servicio de transmisión",
                "Servicio de transmisión",
                "servicio de transmisión",
                "servicio de transmisión",
                "servicio de transmisión",
                "servicio de transmisión"
            ],
            "error": []
        },
        "distribute real-time embed system": {
            "translated_key": "Sistema integrado en tiempo real distribuido",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "hybrid system": {
            "translated_key": "sistema híbrido",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "quality of service": {
            "translated_key": "calidad de servicio",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end <br>quality of service</br> (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time <br>quality of service</br> (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end <br>quality of service</br> (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "De las CEE, la Universidad de Vanderbilt, el resumen de Nashville, un problema desafiante que enfrentan los investigadores y desarrolladores de sistemas distribuidos en tiempo real y integrados (DRE) está ideando e implementando estrategias efectivas de gestión de recursos adaptativos que pueden cumplir con la \"calidad del servicio\" de extremo a extremo (QoS) Requisitos en diferentes condiciones operativas.",
                "Introducción El logro de \"calidad de servicio\" (QoS) en tiempo real de extremo a extremo es particularmente importante para los sistemas abiertos en tiempo real y integrados (DRE) que enfrentan limitaciones de recursos, como potencia informática limitada y ancho de banda de red.",
                "Observaciones finales Artículo 7 Figura 6: Comparación de la latencia de video Figura 7: Comparación del tamaño de la imagen de la fuente de fluctuación de video / velocidad de cuadro con HYARM sin HYARM UAV1 QoS Aplicación habilitada 1122 x 1496 /25 960 x 720 /20 UAV1 Aplicación de mejor esfuerzo 288 x 384/ 15 640 x 480 /20 UAV2 QoS Aplicación habilitada 1126 x 1496/25 960 x 720 /20 UAV2 Aplicación de mejor esfuerzo 288 x 384 /15 640 x 480 /20 Tabla 2: Calidad de video Muchos en tiempo real distribuido e incrustado(DRE) Los sistemas exigen la aplicación de \"calidad de servicio\" (QoS) de extremo a extremo de sus plataformas subyacentes para operar correctamente."
            ],
            "translated_text": "",
            "candidates": [
                "calidad de servicio",
                "calidad del servicio",
                "calidad de servicio",
                "calidad de servicio",
                "calidad de servicio",
                "calidad de servicio"
            ],
            "error": []
        },
        "service quality": {
            "translated_key": "calidad de servicio",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Evaluating Adaptive Resource Management for Distributed Real-Time Embedded Systems Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt, and Aniruddha Gokhale Dept.",
                "of EECS, Vanderbilt University, Nashville ABSTRACT A challenging problem faced by researchers and developers of distributed real-time and embedded (DRE) systems is devising and implementing effective adaptive resource management strategies that can meet end-to-end quality of service (QoS) requirements in varying operational conditions.",
                "This paper presents two contributions to research in adaptive resource management for DRE systems.",
                "First, we describe the structure and functionality of the Hybrid Adaptive Resourcemanagement Middleware (HyARM), which provides adaptive resource management using hybrid control techniques for adapting to workload fluctuations and resource availability.",
                "Second, we evaluate the adaptive behavior of HyARM via experiments on a DRE multimedia system that distributes video in real-time.",
                "Our results indicate that HyARM yields predictable, stable, and high system performance, even in the face of fluctuating workload and resource availability.",
                "Categories and Subject Descriptors C.2.4 [Distributed Systems]: Distributed Applications; D.4.7 [Organization and Design]: Real-time Systems and Embedded Systems 1.",
                "INTRODUCTION Achieving end-to-end real-time quality of service (QoS) is particularly important for open distributed real-time and embedded (DRE) systems that face resource constraints, such as limited computing power and network bandwidth.",
                "Overutilization of these system resources can yield unpredictable and unstable behavior, whereas under-utilization can yield excessive system cost.",
                "A promising approach to meeting these end-to-end QoS requirements effectively, therefore, is to develop and apply adaptive middleware [10, 15], which is software whose functional and QoS-related properties can be modified either statically or dynamically.",
                "Static modifications are carried out to reduce footprint, leverage capabilities that exist in specific platforms, enable functional subsetting, and/or minimize hardware/software infrastructure dependencies.",
                "Objectives of dynamic modifications include optimizing system responses to changing environments or requirements, such as changing component interconnections, power-levels, CPU and network bandwidth availability, latency/jitter, and workload.",
                "In open DRE systems, adaptive middleware must make such modifications dependably, i.e., while meeting stringent end-to-end QoS requirements, which requires the specification and enforcement of upper and lower bounds on system resource utilization to ensure effective use of system resources.",
                "To meet these requirements, we have developed the Hybrid Adaptive Resource-management Middleware (HyARM), which is an open-source1 distributed resource management middleware.",
                "HyARM is based on hybrid control theoretic techniques [8], which provide a theoretical framework for designing control of complex system with both continuous and discrete dynamics.",
                "In our case study, which involves a distributed real-time video distribution system, the task of adaptive resource management is to control the utilization of the different resources, whose utilizations are described by continuous variables.",
                "We achieve this by adapting the resolution of the transmitted video, which is modeled as a continuous variable, and by changing the frame-rate and the compression, which are modeled by discrete actions.",
                "We have implemented HyARM atop The ACE ORB (TAO) [13], which is an implementation of the Real-time CORBA specification [12].",
                "Our results show that (1) HyARM ensures effective system resource utilization and (2) end-to-end QoS requirements of higher priority applications are met, even in the face of fluctuations in workload.",
                "The remainder of the paper is organized as follows: Section 2 describes the architecture, functionality, and resource utilization model of our DRE multimedia system case study; Section 3 explains the structure and functionality of HyARM; Section 4 evaluates the adaptive behavior of HyARM via experiments on our multimedia system case study; Section 5 compares our research on HyARM with related work; and Section 6 presents concluding remarks. 1 The code and examples for HyARM are available at www. dre.vanderbilt.edu/∼nshankar/HyARM/.",
                "Article 7 2.",
                "CASE STUDY: DRE MULTIMEDIA SYSTEM This section describes the architecture and QoS requirements of our DRE multimedia system. 2.1 Multimedia System Architecture Wireless Link Wireless Link Wireless Link ` ` ` Physical Link Physical Link Physical Link Base Station End Receiver End Receiver End Receiver` Physical Link End Receiver UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder UAV Camera Video Encoder Camera Video Encoder Camera Video Encoder Figure 1: DRE Multimedia System Architecture The architecture for our DRE multimedia system is shown in Figure 1 and consists of the following entities: (1)Data source (video capture by UAV), where video is captured (related to subject of interest) by camera(s) on each UAV, followed by encoding of raw video using a specific encoding scheme and transmitting the video to the next stage in the pipeline. (2)Data distributor (base station), where the video is processed to remove noise, followed by retransmission of the processed video to the next stage in the pipeline. (3) Sinks (command and control center), where the received video is again processed to remove noise, then decoded and finally rendered to end user via graphical displays.",
                "Significant improvements in video encoding/decoding and (de)compression techniques have been made as a result of recent advances in video encoding and compression techniques [14].",
                "Common video compression schemes are MPEG1, MPEG-2, Real Video, and MPEG-4.",
                "Each compression scheme is characterized by its resource requirement, e.g., the computational power to (de)compress the video signal and the network bandwidth required to transmit the compressed video signal.",
                "Properties of the compressed video, such as resolution and frame-rate determine both the quality and the resource requirements of the video.",
                "Our multimedia system case study has the following endto-end real-time QoS requirements: (1) latency, (2) interframe delay (also know as jitter), (3) frame rate, and (4) picture resolution.",
                "These QoS requirements can be classified as being either hard or soft.",
                "Hard QoS requirements should be met by the underlying system at all times, whereas soft QoS requirements can be missed occasionally.2 For our case study, we treat QoS requirements such as latency and jitter as harder QoS requirements and strive to meet these requirements at all times.",
                "In contrast, we treat QoS requirements such as video frame rate and picture resolution as softer QoS requirements and modify these video properties adaptively to handle dynamic changes in resource availabil2 Although hard and soft are often portrayed as two discrete requirement sets, in practice they are usually two ends of a continuum ranging from softer to harder rather than two disjoint points. ity effectively. 2.2 DRE Multimedia System Rresources There are two primary types of resources in our DRE multimedia system: (1) processors that provide computational power available at the UAVs, base stations, and end receivers and (2) network links that provide communication bandwidth between UAVs, base stations, and end receivers.",
                "The computing power required by the video capture and encoding tasks depends on dynamic factors, such as speed of the UAV, speed of the subject (if the subject is mobile), and distance between UAV and the subject.",
                "The wireless network bandwidth available to transmit video captured by UAVs to base stations also depends on the wireless connectivity between the UAVs and the base station, which in-turn depend on dynamic factors such as the speed of the UAVs and the relative distance between UAVs and base stations.",
                "The bandwidth of the link between the base station and the end receiver is limited, but more stable than the bandwidth of the wireless network.",
                "Resource requirements and availability of resources are subjected to dynamic changes.",
                "Two classes of applications - QoS-enabled and best-effort - use the multimedia system infrastructure described above to transmit video to their respective receivers.",
                "QoS-enabled class of applications have higher priority over best-effort class of application.",
                "In our study, emergency response applications belong to QoS-enabled and surveillance applications belong to best-effort class.",
                "For example, since a stream from an emergency response application is of higher importance than a video stream from a surveillance application, it receives more resources end-to-end.",
                "Since resource availability significantly affects QoS, we use current resource utilization as the primary indicator of system performance.",
                "We refer to the current level of system resource utilization as the system condition.",
                "Based on this definition, we can classify system conditions as being either under, over, or effectively utilized.",
                "Under-utilization of system resources occurs when the current resource utilization is lower than the desired lower bound on resource utilization.",
                "In this system condition, residual system resources (i.e., network bandwidth and computational power) are available in large amounts after meeting end-to-end QoS requirements of applications.",
                "These residual resources can be used to increase the QoS of the applications.",
                "For example, residual CPU and network bandwidth can be used to deliver better quality video (e.g., with greater resolution and higher frame rate) to end receivers.",
                "Over-utilization of system resources occurs when the current resource utilization is higher than the desired upper bound on resource utilization.",
                "This condition can arise from loss of resources - network bandwidth and/or computing power at base station, end receiver or at UAV - or may be due to an increase in resource demands by applications.",
                "Over-utilization is generally undesirable since the quality of the received video (such as resolution and frame rate) and timeliness properties (such as latency and jitter) are degraded and may result in an unstable (and thus ineffective) system.",
                "Effective resource utilization is the desired system condition since it ensures that end-to-end QoS requirements of the UAV-based multimedia system are met and utilization of both system resources, i.e., network bandwidth and computational power, are within their desired utilization bounds.",
                "Article 7 Section 3 describes techniques we applied to achieve effective utilization, even in the face of fluctuating resource availability and/or demand. 3.",
                "OVERVIEW OF HYARM This section describes the architecture of the Hybrid Adaptive Resource-management Middleware (HyARM).",
                "HyARM ensures efficient and predictable system performance by providing adaptive resource management, including monitoring of system resources and enforcing bounds on application resource utilization. 3.1 HyARM Structure and Functionality Resource Utilization Legend Resource Allocation Application Parameters Figure 2: HyARM Architecture HyARM is composed of three types of entities shown in Figure 2 and described below: Resource monitors observe the overall resource utilization for each type of resource and resource utilization per application.",
                "In our multimedia system, there are resource monitors for CPU utilization and network bandwidth.",
                "CPU monitors observe the CPU resource utilization of UAVs, base station, and end receivers.",
                "Network bandwidth monitors observe the network resource utilization of (1) wireless network link between UAVs and the base station and (2) wired network link between the base station and end receivers.",
                "The central controller maintains the system resource utilization below a desired bound by (1) processing periodic updates it receives from resource monitors and (2) modifying the execution of applications accordingly, e.g., by using different execution algorithms or operating the application with increased/decreased QoS.",
                "This adaptation process ensures that system resources are utilized efficiently and end-to-end application QoS requirements are met.",
                "In our multimedia system, the HyARM controller determines the value of application parameters such as (1) video compression schemes, such as Real Video and MPEG-4, and/or (2) frame rate, and (3) picture resolution.",
                "From the perspective of hybrid control theoretic techniques [8], the different video compression schemes and frame rate form the discrete variables of application execution and picture resolution forms the continuous variables.",
                "Application adapters modify application execution according to parameters recommended by the controller and ensures that the operation of the application is in accordance with the recommended parameters.",
                "In the current mplementation of HyARM, the application adapter modifies the input parameters to the application that affect application QoS and resource utilization - compression scheme, frame rate, and picture resolution.",
                "In our future implementations, we plan to use resource reservation mechanisms such as Differentiated Service [7, 3] and Class-based Kernel Resource Management [4] to provision/reserve network and CPU resources.",
                "In our multimedia system, the application adapter ensures that the video is encoded at the recommended frame rate and resolution using the specified compression scheme. 3.2 Applying HyARM to the Multimedia System Case Study HyARM is built atop TAO [13], a widely used open-source implementation of Real-time CORBA [12].",
                "HyARM can be applied to ensure efficient, predictable and adaptive resource management of any DRE system where resource availability and requirements are subject to dynamic change.",
                "Figure 3 shows the interaction of various parts of the DRE multimedia system developed with HyARM, TAO, and TAOs A/V Streaming Service.",
                "TAOs A/V Streaming service is an implementation of the CORBA A/V Streaming Service specification.",
                "TAOs A/V Streaming Service is a QoS-enabled video distribution service that can transfer video in real-time to one or more receivers.",
                "We use the A/V Streaming Service to transmit the video from the UAVs to the end receivers via the base station.",
                "Three entities of Receiver UAV TAO Resource Utilization HyARM Central Controller A/V Streaming Service : Sender MPEG1 MPEG4 Real Video HyARM Resource Monitor A/V Streaming Service : Receiver Compressed Video Compressed Video Application HyARM Application Adapter Remote Object Call Control Inputs Resource Utilization Resource Utilization / Control Inputs Control Inputs Legend Figure 3: Developing the DRE Multimedia System with HyARM HyARM, namely the resource monitors, central controller, and application adapters are built as CORBA servants, so they can be distributed throughout a DRE system.",
                "Resource monitors are remote CORBA objects that update the central controller periodically with the current resource utilization.",
                "Application adapters are collocated with applications since the two interact closely.",
                "As shown in Figure 3, UAVs compress the data using various compression schemes, such as MPEG1, MPEG4, and Real Video, and uses TAOs A/V streaming service to transmit the video to end receivers.",
                "HyARMs resource monitors continuously observe the system resource utilization and notify the central controller with the current utilization. 3 The interaction between the controller and the resource monitors uses the Observer pattern [5].",
                "When the controller receives resource utilization updates from monitors, it computes the necessary modifications to application(s) parameters and notifies application adapter(s) via a remote operation call.",
                "Application adapter(s), that are collocated with the application, modify the input parameters to the application - in our case video encoder - to modify the application resource utilization and QoS. 3 The base station is not included in the figure since it only retransmits the video received from UAVs to end receivers.",
                "Article 7 4.",
                "PERFORMANCE RESULTS AND ANALYSIS This section first describes the testbed that provides the infrastructure for our DRE multimedia system, which was used to evaluate the performance of HyARM.",
                "We then describe our experiments and analyze the results obtained to empirically evaluate how HyARM behaves during underand over-utilization of system resources. 4.1 Overview of the Hardware and Software Testbed Our experiments were performed on the Emulab testbed at University of Utah.",
                "The hardware configuration consists of two nodes acting as UAVs, one acting as base station, and one as end receiver.",
                "Video from the two UAVs were transmitted to a base station via a LAN configured with the following properties: average packet loss ratio of 0.3 and bandwidth 1 Mbps.",
                "The network bandwidth was chosen to be 1 Mbps since each UAV in the DRE multimedia system is allocated 250 Kbps.",
                "These parameters were chosen to emulate an unreliable wireless network with limited bandwidth between the UAVs and the base station.",
                "From the base station, the video was retransmitted to the end receiver via a reliable wireline link of 10 Mbps bandwidth with no packet loss.",
                "The hardware configuration of all the nodes was chosen as follows: 600 MHz Intel Pentium III processor, 256 MB physical memory, 4 Intel EtherExpress Pro 10/100 Mbps Ethernet ports, and 13 GB hard drive.",
                "A real-time version of Linux - TimeSys Linux/NET 3.1.214 based on RedHat Linux 9was used as the operating system for all nodes.",
                "The following software packages were also used for our experiments: (1) Ffmpeg 0.4.9-pre1, which is an open-source library (http: //www.ffmpeg.sourceforge.net/download.php) that compresses video into MPEG-2, MPEG-4, Real Video, and many other video formats. (2) Iftop 0.16, which is an opensource library (http://www.ex-parrot.com/∼pdw/iftop/) we used for monitoring network activity and bandwidth utilization. (3) ACE 5.4.3 + TAO 1.4.3, which is an opensource (http://www.dre.vanderbilt.edu/TAO) implementation of the Real-time CORBA [12] specification upon which HyARM is built.",
                "TAO provides the CORBA Audio/Video (A/V) Streaming Service that we use to transmit the video from the UAVs to end receivers via the base station. 4.2 Experiment Configuration Our experiment consisted of two (emulated) UAVs that simultaneously send video to the base station using the experimentation setup described in Section 4.1.",
                "At the base station, video was retransmitted to the end receivers (without any modifications), where it was stored to a file.",
                "Each UAV hosted two applications, one QoS-enabled application (emergency response), and one best-effort application (surveillance).",
                "Within each UAV, computational power is shared between the applications, while the network bandwidth is shared among all applications.",
                "To evaluate the QoS provided by HyARM, we monitored CPU utilization at the two UAVs, and network bandwidth utilization between the UAV and the base station.",
                "CPU resource utilization was not monitored at the base station and the end receiver since they performed no computationallyintensive operations.",
                "The resource utilization of the 10 Mpbs physical link between the base station and the end receiver does not affect QoS of applications and is not monitored by HyARM since it is nearly 10 times the 1 MB bandwidth of the LAN between the UAVs and the base station.",
                "The experiment also monitors properties of the video that affect the QoS of the applications, such as latency, jitter, frame rate, and resolution.",
                "The set point on resource utilization for each resource was specified at 0.69, which is the upper bound typically recommended by scheduling techniques, such as rate monotonic algorithm [9].",
                "Since studies [6] have shown that human eyes can perceive delays more than 200ms, we use this as the upper bound on jitter of the received video.",
                "QoS requirements for each class of application is specified during system initialization and is shown in Table 1. 4.3 Empirical Results and Analysis This section presents the results obtained from running the experiment described in Section 4.2 on our DRE multimedia system testbed.",
                "We used system resource utilization as a metric to evaluate the adaptive resource management capabilities of HyARM under varying input work loads.",
                "We also used application QoS as a metric to evaluate HyARMs capabilities to support end-to-end QoS requirements of the various classes of applications in the DRE multimedia system.",
                "We analyze these results to explain the significant differences in system performance and application QoS.",
                "Comparison of system performance is decomposed into comparison of resource utilization and application QoS.",
                "For system resource utilization, we compare (1) network bandwidth utilization of the local area network and (2) CPU utilization at the two UAV nodes.",
                "For application QoS, we compare mean values of video parameters, including (1) picture resolution, (2) frame rate, (3) latency, and (4) jitter.",
                "Comparison of resource utilization.",
                "Over-utilization of system resources in DRE systems can yield an unstable system.",
                "In contrast, under-utilization of system resources increases system cost.",
                "Figure 4 and Figure 5 compare the system resource utilization with and without HyARM.",
                "Figure 4 shows that HyARM maintains system utilization close to the desired utilization set point during fluctuation in input work load by transmitting video of higher (or lower) QoS for QoS-enabled (or best-effort) class of applications during over (or under) utilization of system resources.",
                "Figure 5 shows that without HyARM, network utilization was as high as 0.9 during increase in workload conditions, which is greater than the utilization set point of 0.7 by 0.2.",
                "As a result of over-utilization of resources, QoS of the received video, such as average latency and jitter, was affected significantly.",
                "Without HyARM, system resources were either under-utilized or over-utilized, both of which are undesirable.",
                "In contrast, with HyARM, system resource utilization is always close to the desired set point, even during fluctuations in application workload.",
                "During sudden fluctuation in application workload, system conditions may be temporarily undesirable, but are restored to the desired condition within several sampling periods.",
                "Temporary over-utilization of resources is permissible in our multimedia system since the quality of the video may be degraded for a short period of time, though application QoS will be degraded significantly if poor quality video is transmitted for a longer period of time.",
                "Comparison of application QoS.",
                "Figures 6, Figure 7, and Table 2 compare latency, jitter, resolution, and frameArticle 7 Class Resolution Frame Rate Latency (msec ) Jitter (msec) QoS Enabled 1024 x 768 25 200 200 Best-effort 320 x 240 15 300 250 Table 1: Application QoS Requirements Figure 4: Resource utilization with HyARM Figure 5: Resource utilization without HyARM rate of the received video, respectively.",
                "Table 2 shows that HyARM increases the resolution and frame video of QoSenabled applications, but decreases the resolution and frame rate of best effort applications.",
                "During over utilization of system resources, resolution and frame rate of lower priority applications are reduced to adapt to fluctuations in application workload and to maintain the utilization of resources at the specified set point.",
                "It can be seen from Figure 6 and Figure 7 that HyARM reduces the latency and jitter of the received video significantly.",
                "These figures show that the QoS of QoS-enabled applications is greatly improved by HyARM.",
                "Although application parameters, such as frame rate and resolutions, which affect the soft QoS requirements of best-effort applications may be compromised, the hard QoS requirements, such as latency and jitter, of all applications are met.",
                "HyARM responds to fluctuation in resource availability and/or demand by constant monitoring of resource utilization.",
                "As shown in Figure 4, when resources utilization increases above the desired set point, HyARM lowers the utilization by reducing the QoS of best-effort applications.",
                "This adaptation ensures that enough resources are available for QoS-enabled applications to meet their QoS needs.",
                "Figures 6 and 7 show that the values of latency and jitter of the received video of the system with HyARM are nearly half of the corresponding value of the system without HyARM.",
                "With HyARM, values of these parameters are well below the specified bounds, whereas without HyARM, these value are significantly above the specified bounds due to overutilization of the network bandwidth, which leads to network congestion and results in packet loss.",
                "HyARM avoids this by reducing video parameters such as resolution, frame-rate, and/or modifying the compression scheme used to compress the video.",
                "Our conclusions from analyzing the results described above are that applying adaptive middleware via hybrid control to DRE system helps to (1) improve application QoS, (2) increase system resource utilization, and (3) provide better predictability (lower latency and inter-frame delay) to QoSenabled applications.",
                "These improvements are achieved largely due to monitoring of system resource utilization, efficient system workload management, and adaptive resource provisioning by means of HyARMs network/CPU resource monitors, application adapter, and central controller, respectively. 5.",
                "RELATED WORK A number of control theoretic approaches have been applied to DRE systems recently.",
                "These techniques aid in overcoming limitations with traditional scheduling approaches that handle dynamic changes in resource availability poorly and result in a rigidly scheduled system that adapts poorly to change.",
                "A survey of these techniques is presented in [1].",
                "One such approach is feedback control scheduling (FCS) [2, 11].",
                "FCS algorithms dynamically adjust resource allocation by means of software feedback control loops.",
                "FCS algorithms are modeled and designed using rigorous controltheoretic methodologies.",
                "These algorithms provide robust and analytical performance assurances despite uncertainties in resource availability and/or demand.",
                "Although existing FCS algorithms have shown promise, these algorithms often assume that the system has continuous control variable(s) that can continuously be adjusted.",
                "While this assumption holds for certain classes of systems, there are many classes of DRE systems, such as avionics and total-ship computing environments that only support a finite a priori set of discrete configurations.",
                "The control variables in such systems are therefore intrinsically discrete.",
                "HyARM handles both continuous control variables, such as picture resolution, and discrete control variable, such as discrete set of frame rates.",
                "HyARM can therefore be applied to system that support continuous and/or discrete set of control variables.",
                "The DRE multimedia system as described in Section 2 is an example DRE system that offers both continuous (picture resolution) and discrete set (frame-rate) of control variables.",
                "These variables are modified by HyARM to achieve efficient resource utilization and improved application QoS. 6.",
                "CONCLUDING REMARKS Article 7 Figure 6: Comparison of Video Latency Figure 7: Comparison of Video Jitter Source Picture Size / Frame Rate With HyARM Without HyARM UAV1 QoS Enabled Application 1122 X 1496 / 25 960 X 720 / 20 UAV1 Best-effort Application 288 X 384 / 15 640 X 480 / 20 UAV2 QoS Enabled Application 1126 X 1496 / 25 960 X 720 / 20 UAV2 Best-effort Application 288 X 384 / 15 640 X 480 / 20 Table 2: Comparison of Video Quality Many distributed real-time and embedded (DRE) systems demand end-to-end quality of service (QoS) enforcement from their underlying platforms to operate correctly.",
                "These systems increasingly run in open environments, where resource availability is subject to dynamic change.",
                "To meet end-to-end QoS in dynamic environments, DRE systems can benefit from an adaptive middleware that monitors system resources, performs efficient application workload management, and enables efficient resource provisioning for executing applications.",
                "This paper described HyARM, an adaptive middleware, that provides effective resource management to DRE systems.",
                "HyARM employs hybrid control techniques to provide the adaptive middleware capabilities, such as resource monitoring and application adaptation that are key to providing the dynamic resource management capabilities for open DRE systems.",
                "We employed HyARM to a representative DRE multimedia system that is implemented using Real-time CORBA and CORBA A/V Streaming Service.",
                "We evaluated the performance of HyARM in a system composed of three distributed resources and two classes of applications with two applications each.",
                "Our empirical results indicate that HyARM ensures (1) efficient resource utilization by maintaining the resource utilization of system resources within the specified utilization bounds, (2) QoS requirements of QoS-enabled applications are met at all times.",
                "Overall, HyARM ensures efficient, predictable, and adaptive resource management for DRE systems. 7.",
                "REFERENCES [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang, and Y. Lu.",
                "Feddback Performance Control in Software Services.",
                "IEEE: Control Systems, 23(3), June 2003. [2] L. Abeni, L. Palopoli, G. Lipari, and J. Walpole.",
                "Analysis of a reservation-based feedback scheduler.",
                "In IEEE Real-Time Systems Symposium, Dec. 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang, and W. Weiss.",
                "An architecture for differentiated services.",
                "Network Information Center RFC 2475, Dec. 1998. [4] H. Franke, S. Nagar, C. Seetharaman, and V. Kashyap.",
                "Enabling Autonomic Workload Management in Linux.",
                "In Proceedings of the International Conference on Autonomic Computing (ICAC), New York, New York, May 2004.",
                "IEEE. [5] E. Gamma, R. Helm, R. Johnson, and J. Vlissides.",
                "Design Patterns: Elements of Reusable Object-Oriented Software.",
                "Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea and J. P. Thomas.",
                "Qos impact on user perception and understanding of multimedia video clips.",
                "In MULTIMEDIA 98: Proceedings of the sixth ACM international conference on Multimedia, pages 49-54, Bristol, United Kingdom, 1998.",
                "ACM Press. [7] Internet Engineering Task Force.",
                "Differentiated Services Working Group (diffserv) Charter. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan, and C. Lu.",
                "Hybrid Supervisory Control of Real-Time Systems.",
                "In 11th IEEE Real-Time and Embedded Technology and Applications Symposium, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha, and Y. Ding.",
                "The Rate Monotonic Scheduling Algorithm: Exact Characterization and Average Case Behavior.",
                "In Proceedings of the 10th IEEE Real-Time Systems Symposium (RTSS 1989), pages 166-171.",
                "IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.",
                "Comparing and Contrasting Adaptive Middleware Support in Wide-Area and Embedded Distributed Object Applications.",
                "In Proceedings of the 21st International Conference on Distributed Computing Systems (ICDCS-21), pages 625-634.",
                "IEEE, Apr. 2001. [11] C. Lu, J.",
                "A. Stankovic, G. Tao, and S. H. Son.",
                "Feedback Control Real-Time Scheduling: Framework, Modeling, and Algorithms.",
                "Real-Time Systems Journal, 23(1/2):85-126, July 2002. [12] Object Management Group.",
                "Real-time CORBA Specification, OMG Document formal/02-08-02 edition, Aug. 2002. [13] D. C. Schmidt, D. L. Levine, and S. Mungee.",
                "The Design and Performance of Real-Time Object Request Brokers.",
                "Computer Communications, 21(4):294-324, Apr. 1998. [14] Thomas Sikora.",
                "Trends and Perspectives in Image and Video Coding.",
                "In Proceedings of the IEEE, Jan. 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu, and C. Gill.",
                "CAMRIT: Control-based Adaptive Middleware for Real-time Image Transmission.",
                "In Proc. of the 10th IEEE Real-Time and Embedded Tech. and Applications Symp. (RTAS), Toronto, Canada, May 2004.",
                "Article 7"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        }
    }
}