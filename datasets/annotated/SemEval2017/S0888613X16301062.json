{
    "id": "S0888613X16301062",
    "original_text": "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in ProbLog [9]. While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in PB is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program. Moreover, in PB compilation of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of decision diagrams, e.g. sentential decision diagrams (SDD), deterministic, decomposable negation normal form (d-DNNF). These differences reflect the different aims of the two PPLs: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations. However, in future work, PB could benefit from the use of more compact decision diagrams.",
    "original_translation": "",
    "original_sentences": [
        "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in ProbLog [9].",
        "While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in PB is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
        "Moreover, in PB compilation of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of decision diagrams, e.g. sentential decision diagrams (SDD), deterministic, decomposable negation normal form (d-DNNF).",
        "These differences reflect the different aims of the two PPLs: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
        "However, in future work, PB could benefit from the use of more compact decision diagrams."
    ],
    "error_count": 0,
    "keys": {
        "d-DNNF": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in ProbLog [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in PB is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
                "Moreover, in PB compilation of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of decision diagrams, e.g. sentential decision diagrams (SDD), deterministic, decomposable negation normal form (<br>d-DNNF</br>).",
                "These differences reflect the different aims of the two PPLs: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, PB could benefit from the use of more compact decision diagrams."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "decision diagrams": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in ProbLog [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in PB is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
                "Moreover, in PB compilation of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of <br>decision diagrams</br>, e.g. sentential <br>decision diagrams</br> (SDD), deterministic, decomposable negation normal form (d-DNNF).",
                "These differences reflect the different aims of the two PPLs: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the <br>decision diagrams</br>, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, PB could benefit from the use of more compact <br>decision diagrams</br>."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "deterministic, decomposable negation normal form": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in ProbLog [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in PB is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
                "Moreover, in PB compilation of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of decision diagrams, e.g. sentential decision diagrams (SDD), <br>deterministic, decomposable negation normal form</br> (d-DNNF).",
                "These differences reflect the different aims of the two PPLs: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, PB could benefit from the use of more compact decision diagrams."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "enumeration of the conditional sample space": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of PB, the <br>enumeration of the conditional sample space</br> through abductive logic programming, could be compared to logical inference in ProbLog [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in PB is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
                "Moreover, in PB compilation of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of decision diagrams, e.g. sentential decision diagrams (SDD), deterministic, decomposable negation normal form (d-DNNF).",
                "These differences reflect the different aims of the two PPLs: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, PB could benefit from the use of more compact decision diagrams."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "logical inference": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to <br>logical inference</br> in ProbLog [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, <br>logical inference</br> in PB is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
                "Moreover, in PB compilation of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of decision diagrams, e.g. sentential decision diagrams (SDD), deterministic, decomposable negation normal form (d-DNNF).",
                "These differences reflect the different aims of the two PPLs: ProbLog focuses on models where <br>logical inference</br> needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where <br>logical inference</br> is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, PB could benefit from the use of more compact decision diagrams."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "logical inference in PB": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in ProbLog [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, <br>logical inference in PB</br> is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
                "Moreover, in PB compilation of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of decision diagrams, e.g. sentential decision diagrams (SDD), deterministic, decomposable negation normal form (d-DNNF).",
                "These differences reflect the different aims of the two PPLs: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, PB could benefit from the use of more compact decision diagrams."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "PB": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of <br>PB</br>, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in ProbLog [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in <br>PB</br> is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
                "Moreover, in <br>PB</br> compilation of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of decision diagrams, e.g. sentential decision diagrams (SDD), deterministic, decomposable negation normal form (d-DNNF).",
                "These differences reflect the different aims of the two PPLs: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while <br>PB</br> focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, <br>PB</br> could benefit from the use of more compact decision diagrams."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "PB compilation": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in ProbLog [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in PB is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
                "Moreover, in <br>PB compilation</br> of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of decision diagrams, e.g. sentential decision diagrams (SDD), deterministic, decomposable negation normal form (d-DNNF).",
                "These differences reflect the different aims of the two PPLs: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, PB could benefit from the use of more compact decision diagrams."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "PPLs": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in ProbLog [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in PB is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
                "Moreover, in PB compilation of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of decision diagrams, e.g. sentential decision diagrams (SDD), deterministic, decomposable negation normal form (d-DNNF).",
                "These differences reflect the different aims of the two <br>PPLs</br>: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, PB could benefit from the use of more compact decision diagrams."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "ProbLog": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in <br>ProbLog</br> [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in PB is based on abductive logic programming, while <br>ProbLog</br> grounds the relevant parts of the probabilistic program.",
                "Moreover, in PB compilation of the boolean formulas is performed using (RO)BDDs, while <br>ProbLog</br> can use a wider range of decision diagrams, e.g. sentential decision diagrams (SDD), deterministic, decomposable negation normal form (d-DNNF).",
                "These differences reflect the different aims of the two PPLs: <br>ProbLog</br> focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, PB could benefit from the use of more compact decision diagrams."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "(RO)BDDs": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in ProbLog [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in PB is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
                "Moreover, in PB compilation of the boolean formulas is performed using <br>(RO)BDDs</br>, while ProbLog can use a wider range of decision diagrams, e.g. sentential decision diagrams (SDD), deterministic, decomposable negation normal form (d-DNNF).",
                "These differences reflect the different aims of the two PPLs: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, PB could benefit from the use of more compact decision diagrams."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "SDD": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in ProbLog [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in PB is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
                "Moreover, in PB compilation of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of decision diagrams, e.g. sentential decision diagrams (<br>SDD</br>), deterministic, decomposable negation normal form (d-DNNF).",
                "These differences reflect the different aims of the two PPLs: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, PB could benefit from the use of more compact decision diagrams."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "sentential decision diagrams": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in ProbLog [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in PB is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
                "Moreover, in PB compilation of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of decision diagrams, e.g. <br>sentential decision diagrams</br> (SDD), deterministic, decomposable negation normal form (d-DNNF).",
                "These differences reflect the different aims of the two PPLs: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, PB could benefit from the use of more compact decision diagrams."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "use of more compact decision diagrams": {
            "translated_key": "",
            "original_annotated_sentences": [
                "The first step of PB, the enumeration of the conditional sample space through abductive logic programming, could be compared to logical inference in ProbLog [9].",
                "While both languages aim to generate a propositional formula and compile it into a decision diagram, logical inference in PB is based on abductive logic programming, while ProbLog grounds the relevant parts of the probabilistic program.",
                "Moreover, in PB compilation of the boolean formulas is performed using (RO)BDDs, while ProbLog can use a wider range of decision diagrams, e.g. sentential decision diagrams (SDD), deterministic, decomposable negation normal form (d-DNNF).",
                "These differences reflect the different aims of the two PPLs: ProbLog focuses on models where logical inference needs to be efficient, and the resulting representation, the decision diagrams, need to be compact, while PB focuses on models where logical inference is typically easy, however it must be applied repeatedly, according to the nature and the number of the observations.",
                "However, in future work, PB could benefit from the <br>use of more compact decision diagrams</br>."
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        }
    }
}